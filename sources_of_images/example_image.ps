%!PS

% This version 19:00 Monday 15th February 2021

% Permission is given to make non-commercial use of this program, and to distribute its output. But not to distribute the code: refer interested parties to the latest version at the link below, where instructions can also be found.
% Improvements to the code should be sent them to the author.  Inviting the author to the tastings is, well, almost compulsory! The code is mostly debugged, but errors surely remain. It is provided as-is, without liability: it is free.
% The most recent version is available via http://www.jdawiseman.com/papers/placemat/placemat.html .  Copyright 1988 to 2021 Julian D. A. Wiseman who is contactable via www.jdawiseman.com/author.html


/ParametersVersionDateTimeAdobeFormat (D:202102161940) def

/PrePourNumCopies {WithinTitles 1 le {1} {0} ifelse} def

/PaintBackgroundCode
{
	TypeOfPagesBeingRendered /Glasses eq
	{
		SheetNum -1 gt  % This condition always true, but a tighter condition could be used.
		{
			% Image centre, in this example, uses GlassPositions. But x value could have been PageWidth MgnL MgnR sub add 2 div.
			GlassPositions SheetNum get 1 get 0 get  GlassPositions SheetNum get 2 get 0 get  add 2 div  % x (hence ... 0 get)
			GlassPositions SheetNum get 2 get 1 get  GlassPositions SheetNum get 4 get 1 get  add 2 div  % y (hence ... 1 get)
			translate

			% DeviceRGB or DeviceGray, depending on whether image RGB or greyscale.
			/DeviceRGB setcolorspace

			% Width and height known from image. Also in EPS.
			% Resolution: not too small.
			% But, settings dependent, some PS->PDF software down-resolutions large pictures. For such setting, high resolution is needless.
			<< /width 640 /height 400 >> begin
				% Scaling determined by trial and error, or by computation in the PostScript, or otherwise.
				0.1576991 dup scale

				% Need lower-left of image, but "translate" seven lines up chose desired centre.
				width -2 div height -2 div translate
				<<
					/DataSource  ImageColour_data << >> /DCTDecode filter  % data source usually needs changing
					ImageColour_data 0 setfileposition  % data source usually needs changing
					/ImageType 1
					/Width width
					/Height height
					/ImageMatrix [1 0 0 -1 0 height]
					/BitsPerComponent 8
					/Decode [ currentcolorspace 0 get /DeviceGray eq {0 1} {0 1 0 1 0 1} ifelse ]
				>> image
			end  % << /width ... /height ... >>
		} if  % ... SheetNum ...
	} if  % Glasses page
} def  % /PaintBackgroundCode


/PaintBackgroundInsideGlassCircles
{
	//false  [ /Glasses /TastingNotes /PrePour /NeckTags ] {TypeOfPagesBeingRendered eq {pop //true exit} if} forall  % /DecanterLabels excluded.
	{
		WithinTitles 0 eq  % Example condition. YMMV.
		{
			% DeviceRGB or DeviceGray, depending on whether image RGB or greyscale.
			/DeviceGray setcolorspace

			% Width and height known from image. Also in EPS.
			% Resolution: not too small.
			% But, settings dependent, some PS->PDF software down-resolutions large pictures. For such setting, high resolution is needless.
			<< /width 640 /height 400 >> begin
				% Scaling determined by trial and error, or by computation in the PostScript, or otherwise.
				RadiiCirclearrayInside SheetNum get  width dup mul height dup mul add sqrt 2 div  div dup scale

				% Need lower-left of image, but "translate" seven lines up chose desired centre.
				width -2 div height -2 div translate
				<<
					/DataSource  ImageGray_data << >> /DCTDecode filter  % data source usually needs changing
					ImageGray_data 0 setfileposition  % data source usually needs changing
					/ImageType 1
					/Width width
					/Height height
					/ImageMatrix [1 0 0 -1 0 height]
					/BitsPerComponent 8
					/Decode [ currentcolorspace 0 get /DeviceGray eq {0 1} {0 1 0 1 0 1} ifelse ]
				>> image
			end  % << /width ... /height ... >>
		} if  % WithinTitles ...
	} if  % /Glasses ...
} bind def  % /PaintBackgroundInsideGlassCircles 


/ImageGray_data
currentfile
<< /Filter /ASCIIHexDecode  /Intent 0 >>
/ReusableStreamDecode filter
FFD8FFE000104A46494600010100004800480000FFE100404578696600004D
4D002A00000008000187690004000000010000001A000000000002A0020004
0000000100000280A0030004000000010000019000000000FFED003850686F
746F73686F7020332E30003842494D04040000000000003842494D04250000
00000010D41D8CD98F00B204E9800998ECF8427EFFE208044943435F50524F
46494C45000101000007F46170706C022000006D6E74724752415958595A20
07D00002000E000C00000000616373704150504C000000006E6F6E65000000
000000000000000000000000000000F6D6000100000000D32D6170706C0000
00000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000564657363000000C00000006F6473636D
000001300000066663707274000007980000003877747074000007D0000000
146B545243000007E40000000E64657363000000000000001547656E657269
6320477261792050726F66696C6500000000000000000000001547656E6572
696320477261792050726F66696C6500000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000
006D6C7563000000000000001F0000000C736B534B0000002A00000184656E
555300000028000001AE636145530000002C000001D67669564E0000002C00
000202707442520000002A0000022E756B55410000002C0000025866724655
0000002A00000284687548550000002E000002AE7A68545700000010000002
DC6E624E4F0000002C000002EC6B6F4B5200000018000003186373435A0000
0024000003306865494C0000002000000354726F524F000000240000037464
6544450000003A00000398697449540000002E000003D2737653450000002E
000004007A68434E000000100000042E6A614A50000000160000043E656C47
5200000024000004547074504F00000038000004786E6C4E4C0000002A0000
04B06573455300000028000004DA7468544800000024000005027472545200
00002200000526666946490000002C00000548687248520000003A00000574
706C504C00000036000005AE7275525500000026000005E461724547000000
280000060A6461444B0000003400000632005601610065006F006200650063
006E00FD002000730069007600FD002000700072006F00660069006C004700
65006E006500720069006300200047007200610079002000500072006F0066
0069006C006500500065007200660069006C00200064006500200067007200
690073002000670065006E00E800720069006300431EA500750020006800EC
006E00680020004D00E000750020007800E1006D0020004300680075006E00
6700500065007200660069006C002000430069006E007A0061002000470065
006E00E9007200690063006F0417043004330430043B044C043D0438043900
20043F0440043E044404300439043B0020004700720061007900500072006F
00660069006C0020006700E9006E00E9007200690071007500650020006700
720069007300C1006C00740061006C00E1006E006F007300200073007A00FC
0072006B0065002000700072006F00660069006C901A75287070968E82725F
6963CF8FF000470065006E0065007200690073006B00200067007200E50074
006F006E006500700072006F00660069006CC77CBC18002000470072006100
790020D504B85CD30CC77C004F006200650063006E00FD0020016100650064
00FD002000700072006F00660069006C05E405E805D505E405D905DC002000
47007200610079002005DB05DC05DC05D900500072006F00660069006C0020
006700720069002000670065006E00650072006900630041006C006C006700
65006D00650069006E00650073002000470072006100750073007400750066
0065006E002D00500072006F00660069006C00500072006F00660069006C00
6F002000670072006900670069006F002000670065006E0065007200690063
006F00470065006E0065007200690073006B00200067007200E50073006B00
61006C006500700072006F00660069006C666E901A70705EA663CF8FF06587
4EF64E00822C30B030EC30A430D730ED30D530A130A430EB039303B503BD03
B903BA03CC002003C003C103BF03C603AF03BB002003B303BA03C103B90050
0065007200660069006C002000670065006E00E9007200690063006F002000
640065002000630069006E007A0065006E0074006F00730041006C00670065
006D00650065006E0020006700720069006A007300700072006F0066006900
65006C00500065007200660069006C00200067007200690073002000670065
006E00E9007200690063006F0E420E1B0E230E440E1F0E250E4C0E2A0E350E
400E170E320E170E310E480E270E440E1B00470065006E0065006C00200047
00720069002000500072006F00660069006C00690059006C00650069006E00
65006E0020006800610072006D0061006100700072006F006600690069006C
006900470065006E006500720069010D006B0069002000700072006F006600
69006C00200073006900760069006800200074006F006E006F007600610055
006E006900770065007200730061006C006E0079002000700072006F006600
69006C00200073007A00610072006F015B00630069041E0431044904380439
0020044104350440044B04390020043F0440043E04440438043B044C064506
4406410020062A06390631064A064100200047007200610079002006270644
06390627064500470065006E006500720065006C00200067007200E5007400
6F006E0065006200650073006B0072006900760065006C0073006500007465
787400000000436F707972696768742032303037204170706C6520496E632E
2C20616C6C207269676874732072657365727665642E0058595A2000000000
0000F35100010000000116CC63757276000000000000000101CD0000FFC000
0B080190028001011100FFC4001F0000010501010101010100000000000000
000102030405060708090A0BFFC400B5100002010303020403050504040000
017D01020300041105122131410613516107227114328191A1082342B1C115
52D1F02433627282090A161718191A25262728292A3435363738393A434445
464748494A535455565758595A636465666768696A737475767778797A8384
85868788898A92939495969798999AA2A3A4A5A6A7A8A9AAB2B3B4B5B6B7B8
B9BAC2C3C4C5C6C7C8C9CAD2D3D4D5D6D7D8D9DAE1E2E3E4E5E6E7E8E9EAF1
F2F3F4F5F6F7F8F9FAFFDB0043000202020202020302020305030303050605
05050506080606060606080A0808080808080A0A0A0A0A0A0A0A0C0C0C0C0C
0C0E0E0E0E0E0F0F0F0F0F0F0F0F0F0FFFDD00040050FFDA0008010100003F
00FDDEBB823D322F36DAEA583276A479F383B1E8A11B2DF8295FCA99A66957
1E636A1ABB2C97323F98235188E33B428C0C9CB600E7271CE3B93B173796B6
6A1AE6558F770A09E58FA01D49F6154FED97D73C595B1453FF002D27CA0FA8
4FBE7E8DB7EB4BFD9867E7509DEE33FC03F7717D362F51ECC5AB4228628235
8A0458D17A2A8000FA0159FA6E5A4BE9BB4970D8FF00802AA7F35AD4ACD7D2
34F6632471790EDD5A126263F528467F1A6FD935187FE3DAF778F49D0363E8
5361FC4E68FB65F43FF1F56648FEF40C24007A9076B7E014D4D0EA7633C821
498094F48DF2927FDF0D86FD2AF5664A41D62D57AE2099BE8774607F5AD3A6
491C7346D14AA1D1C15653C820F506B3ACA492DE53A65CB17641BA273D5E31
C727BB2F00FAF07B9C45673450457D7D70E12369DC927FE99E22FE6BC53A18
26BF916EEF54A448434509EA08E8EFFED7A0FE1EBD7A6BD66EB3FF00208BD1
9C1304807D4A902AEC904132797346AEBE8C011FAD51FEC5D281DD1DAC7137
F7A31E5B7E6B8347F660439B7BAB8849FF00A6864FD25DE293ECDAA46088AF
5641FF004DA20C7F34283F4A0CDAAA0C4B6B1CABDFCB97E63F457503FF001E
ACA245A12F6914FA791FF2CCC46685BFE031160BFF00012BEA73596FAD69F0
B4B0DC14582E4113C68E1D06FE0BA118209CFCCAC1493C804E77751A6DF472
6916F79732A81B00772C02EE1C373D3A834EFED8B16E2DD9AE7DE146917E9B
94151F89AA977F6FD4235582CCC0E8772492C8A8518742BB3CCFA107191C1A
BF637724E1A0BA511DD438F3147439E8CB9EAADDBF107906A298F91AB5BC9D
16E63788FBBA7CE9F90DF5A324692A3452287470410464107A822B32DA492C
A75D3AE18B46D9F224272481C9463FDE51D0F71EA41357EE2DA0BA88C37081
D0F3CF623A107A823B11C8ACE66BAD3D4ADC06BBB4C6376374A83FDA03EF8F
71F37A83C9A8ECA58ED5A3B30E25B49C136D203B863193193DF0395F51C76C
9B1A3922C12DC9C9B62D09CF5C464AA93F5500FE35A324692A345228647041
079041EA0D66D948F6B31D32E18B601685CF25E31D89FEF2743EA307AE717E
E604BAB796DA4FB932321FA30C1ACE850EABA545E736D9F032E0729327048F
A303EC7A74A58FCAD56D9ADEF536CF0361C2920A483A321EA320E54FA1E79C
8A58AEA6B4956D35139DE76C73E30AE4F45603857FD1BB60FCA34658629E36
867459236EAAC0107EA0D677F67CF6DCE9D398D47FCB2933247F864EE5F6C1
C0FEED43A5CB706F6FE2B98844E5A39301B703B902641C038F93B815B2CCA8
A5DC85551924F400565E9F17DA219AF27186BDE707AAC58C22FE5C91D89358
F05BA3DA69F24F9F2EF608637607056555DD1B83D8E7233EBB456ED95CCA5D
ACAF08FB4C4339030244E81C0FE63B1F6C136EE278AD617B89DB6A20C93FE0
3B93D877AC61A75C5C83A8CBFBABF3F3459E444A3A4671D41CFCFEA4F0785C
6A59DD8BB88B95F2E443B6443C9471D47F507B8C1EF50EA91C8D6C2E2105A6
B5612A01D495FBCA3FDE5257F1ABD14B1CD1A4D130649006523A107906B390
EDD6A607FE5A5BC58FF803BE7FF4215A95CCEBB99EE6CA053C5BCD0CEDEC7C
D54507D8EE63FF0001ADBBFB6377692408DB5C8CA37F75D4E55BF0600D3ACA
E45E5AC57206DF31412BDD4F753EE0F06A845FF12CB916A78B49CFEEBD2373
C98FE87AAFA72BFDD15B15850DB2EA905DDCCA70B7ABE5C67B889721587D49
2E0FA11E959B610C3225BC376BB0B8658644255A19172248430E7008254742
06318033B3E66A365FEBD7ED908FE34004A07FB48386FAAE0FA2D5EB6BAB7B
B4325B482400E0E3A83E847507D8F3562B9773E5CC6C3B0BE4651FECB8F349
FF00BEC37E55A769FE937D717A7948FF00711FD14FEF08FAB7CA7FDD14FB8B
E6F35ACEC544D703EF67EE479EEE7F928E4FB0E4496B6496ECD712B99AE1C6
1E56EB8F403F8547603EA72726B1E11E7BDA5F37FCBEDD175FFAE6B13F97F9
801B1EA4D6CDEDA1B945789BCBB884EE8DF19C1F43EAA7A11FD7043ACEEC5D
C64B2F972C676C884E4A30ED9EE3B83DC60D56B7FF0047D4EE2DFA2DC813AF
FBC308E3F0C29FA935A95CA5C04B2D5634C9FB1467CF90606D8A49372A93CF
DC63B89E3E561BB819C7575FFFD0FDD9867892E5A6949BFBF1F295846E5881
FE004E157DCB105BF202F795AA5D7FAE956D10FF000C5F3BFE2EC303E817E8
D566DEC6CECCB4914603B0C348C4B391EEED963F89A6CBAA69B0B6D9AEE18C
FA348A0FEA6A21ACE9AE710CDE71FF00A64AD27FE800D21D5ADFA2C570C7D3
ECF28FD4A8159FA4DFCE6CCBC7653C8AF2CCE08F2D78795987DE707A1F4AD0
37F7A7EEE9B37FC09E21FC9CD28B9D51BEED92AFFBF363FF004156A5F3758E
D6D07FDFF6FF00E3549E6EB3FF003EB6FF00F810FF00FC6AAA5E3DF340DF6F
B6B3F27BF9B312BF8EE8B1583E7EA207FC49622C7B0866778481E8658BCB03
FDD615734F9BC4325FCCF7B6D6C67486318595942866738FB8FC9C0CF38E95
BDE6EB1DEDA0FF00BFEDFF00C6A90DC6AA9F7ACD1BFDC9B3FF00A12AD666AB
7971F65334D652C2F010F1C81A26DAFD071BC13BB3B481C907039AC8D06EE5
BCB64D46F6D65641248F1A2056546772E5880DB8B7CDC6546074EB93D50D5A
D8F58AE01FFAF797FA2E293FB6B4A076C974911F494F967F27C554D5350D3E
7B1023BA89D4CB00621D48DBE6AEEEFE99AB8759D2FF00E59DC2CC7D21CCA7
F24DC68FED32C7FD1ED2E26FF8008FFF004694A3ED3A9B9FDCD92A8FFA6D28
53F92093F9D2635A90E77DBC03D36BCBFAE63FE54A6D75290FEF2FB67FD728
957FF43DF41D3A471896FAE1C7D513F54553504DE1FD32E9765D2C93AFA493
4AC3F22D8AC6D2B41B7B688DE69891AB8966C2C8A194A89182ED6FBC9C6064
647FB24D74506A31BCA2DAE50DB5C1E88FD1B1FDC6E8DF8723B815A3542F6D
1E7D93DB308EE61C9463D0E7AAB7FB2DDFF023902A85D5D2CF6497A018A4B3
991A453D63C1DB203FF0063CF70411C1ADEAAF756D15DC0D04B9C360820E0A
91C8607B107906AB58DCC8CCD677647DA6103240C0753D1D7D8F71D8F1D304
E8D625FE91E6A48D647CA690EE74CE11D81C8618FB8E0F21877EA0F1593A46
B090DDDEDBEAEC2D271E5BB79A42066C6C2579C104229E09C12473D6B7BFB6
2C5B2202F3FBC51BC8A7FE04A0AFEB54EF5AFAFE1096D64F0CA843C724AE8A
118743F2973EC4639048EF5A763746EA12645F2E68CEC913AED71D47B83D41
EE08355EC3F75717B687A2C9E628FF006651927F17DF497E8F6F22EA902963
18DB2A8EAF175E9DCA751F881D6AFB2DBDDC1B5C2CD0CABECCACA7F9835982
5974A60974C64B33C2CADCB45ED21EEBE8FF00F7D7A9D9ACC8B0358B9FF6A0
871F834B9FE74CD43FD2A58F4B5E92FCF37B44A791FF00033F2FD377A56B56
1595B7DAF45FB1B36C285E2561D55A272AAC3DD4A823E9522AB6A9650DD262
1BB8B383D4248BF2BA9F55C8208EE391CE0D55B2BA1ABDEBADCAF92D60C01B
763F37998CEF3EAA33F21E87AFA63A3ACBBD8648251A95AA9691062541D648
C7A7FB4BD57D791DF234219639E249E160F1C803291D083D2B3F4DFDC34FA7
1FF9776CA7FD7293257F0072A3D96965206B16C3FBD04FFA3C5FE35A75CBDD
666D3F55D47FDED9EC96DD3FF1F0C47D6BA8ACBB2FF47BDBAB23F758F9F1FD
24FBE07D1C127FDE157AE2DE2BA85EDE71B91C60F63EC41EC41E41EC6B064B
9B8957FB0A663F6A93E5671C6E83F8A418E848F97D9CFA60D744AAA8A11005
5518007000158A6DA27BBBBD3A5C88EE42CE8470430C2B153D8A90AD9F56CD
5CB1B991F7DA5D7FC7CC180D8180EA7EEB8F66C74EC723B64BAE34FB7B87F3
F0629C0C09633B5C0F4CF71EC723DAABF9DA8D9FFC7C27DAE21FC718C4807F
B49DFEABC9ECB5CC6B7AA4116A1657B692AB79DB932DC049234709BF38DB83
2E581C10056F5AC73CF6D15AD9EEB6B3450BE630C4B201DD41FBB9EEC793CE
00E1AB66DEDE1B588436E81117B0F53D49F527B93C9AA3AA93242962870D78
DE571D42632E7DBE50707D71497B8177A6C6A3004CC703D04320FEB5AB5CFD
D9B9FED5F3AC14335B440CCBDE50C7E5407A6E50188CFA81C063535E4F13C3
6BABDBB6E489C127A7EEDFE47CFA6DCEE20F75E6B6AB2B4C513C12DEC8377D
B58B8079FDDE36A0FC540247A934C809D3254B294936D21C40E7F84FFCF363
FF00A01EFF0077AE377FFFD1FDD18DC410AC535C5DDA2AF1B12DD56351EC56
37007FC0AAEC106917A4A4378F72C3A85BA73F9AABE3F4AB7FD8DA47F159C2
E7D59031FCCE4D5E8A08205D9046B1AFA28007E952D32491628DA57E150127
E82A96928D1E95668E30CB0C60FD768CD68555B9BDB4B303ED332C65BEE827
96F603A93F4AABF6FBA9FF00E3CAD1D87F7E63E4AFE4417FFC731EF47D9751
9FFE3E6EFCA1FDD8142FD4167DC4FD405A962D2EC21904C210F2A9C8924264
71F46725BF5ABF597A7FCF717F363869F6A9F644553F9306AD4AAD75750D9C
5E74C78C8000196663D1547727D2B26E1674B59F57BE004B046EF1459CAC78
53CFBB9EE7B741DCB1F671A2AC37119FF474448A7FA20DAB2FFC07A37FB3CF
F08ADFA2B0B56B2B2BEBBB1B7B98526CC8CEC1941CA2C6C3BFA332D543E1A8
6D4EED2CF96A3FE5996741F83A10E3EA777B0A50520609713DCE9CC78CBC82
58D8FB492071CF60769F6AD4FB3EAA87F77788EBFF004D61CB7E68C83F4A4F
3B578C664B58A503FE79CA431FA2B281FF008F52FF0069EC205CDA5C439E9F
BBF33FF4517C7E35243AA69D70FE543731B49FDCDC03FE2A79FD2AFD6668A0
8D22CC9EAD1231FAB0C9FD4D5E9E086E6230DC20911BAAB0C8ACEF2AFEC39B
626EE01FF2CDDBF7ABFEEB9FBDF46E7FDAED572D6F2DEF14B40D92870CA415
653E8CA7907EB59DAB583CB14D3DB025E48DA39507FCB48C82303FDA5CE57F
107AE432C75DB6B9B1B7B8DB248F22296F2E191806239190B8041E3AD5BFB7
5E3E045612F3D0BB46ABF8E19987FDF35567B6D5AEE48A5C416924272AE0B4
C707EF29188F861D79F43D40356BEC9A8483335FB29FFA631A28FF00C7C487
F5AA77969676D1AF9ED3DCCB21DA89E73E646F4DA085C7A9C600E4D6645E1F
B68B5282460B15D4914CE5E101763068C00BC720024723E6E7239C56F43792
C32ADA6A40248C711C8BC4727B0CFDD6FF00649FA13CE352B26F95ACE61AAC
43214059D47F14639DC07AA649F7191C9C52B3AA6AB04C8C0A5DC2C991C866
43B9307E8CE6B56B22DBFE25F75F603C41365A0F453D5A3FC3EF2FB64745AD
620302AC320F5158FF003E8FC8CBD87A75307D3D63FF00D07FDDFBA93CF141
AA25CBB8111B595CB76DA8C873F93558D3A2936BDE5CAED9EE88620F5451F7
13F01D7FDA27D6B4AB374AC0B7917B89EE33F8CAC7F91A647FE8BAA490F48E
F17CD5F69130AE3F11B481ECC6AB6AFA6ACB226A702B7DA20183B38764FF00
64FF00787500F07953C1E1F06A6D0448F7AC24B79002972A30841E9BC7F01F
7FBBF4E056DD63FF00C82EEB3FF2E974FF008452B1FF00D05CFE4DFEF7125E
7FA35EDB5E8FBAC7C893E921F90FE0E001FEF1A2E86DD4EC64F512C7F980DF
FB2D4FA8DC3DAD94B345CCB8DB183D0C8E76A0FC588AA77D6A96DE1FB8B38B
958ED9D07A9C2115B0086018720F3599A87EE26B5BF1D237F2DFFDC9B0BFA3
ED27D81AD4AE71209AFF0076B36E71367FD1F3C0312F63ED27273E9B4E32B5
B76B731DDC0B3C7901B2083C156070548EC41E0D53D4BF72F6D7E38F2240AF
FF005CE5F94FE009563FEED497F6D2BECBBB5FF8F9B7C9419C0753F7909F46
FD0807B559B6B88EEE04B88B3B5C743C10470411D883C11D8D4F5C5EAF6FFD
A3AFDAA5B222CD661A4F31941CC8065518E33800827FDE04735D559DD25E42
255051812AE87AA38EAA7E9FAF51C1AB55956DFE95A84F787EE400C11FD720
C847E202FD54D3A71BB55B453FC31CCFF8828BFF00B35684922448D2C842A2
02493D001D4D50D2D1FECC6E660565BA633303D46EC05523D554007DC554BE
812D3CE91C66C6E815B85FEE1618320F63FC7FF7D7F7B3135C4B75A54168EC
7ED172C6DA4238394C89587A70AC41F5C5742AA14055180380076A8E7822B9
85E09D77A38C115FFFD2FDE78EF26B475B7D4F0371C24E0611C9E81BFBADED
D0F63938176E2D2D2EC05BA852603B3A86FE754FFB22D107FA3192DF1D0452
32A8FF00806767E947D9B538B3E45E8933FF003DA20DF918CC7FC8D2FDA753
8BFD759ACA3D6190139FF7640807FDF46B2B5AD66CD34BB88AE37DB3CD1B46
3CD4651B9C63EF6369F5E09A078A6D2E78D2D0DC8FEF90C138F65567FF00C7
71EF4A6E5A6E6F67B9C7F720B69A25FC5B697FC430FA558B69EC2D49367613
066EADE4B066FF00799B04FE26AEFDBEE0F2BA7CE47D621FCE4147DBEEBFE8
1D3FFDF50FFF001CA4FB7DDFFD036E3FEFA87FF8ED27F685D7FD036E3FEFA8
7FF8ED1A365B4D8673FF002F1BA6C7A79CC64C7E1BB156AEEEE3B440581777
3B51179676F403F99E807278AAF6D672197EDB7C43DC60850394881ECBEFEA
DD4FB0C009AB7CF0456C064CF34498F550C19C7FDF0A6B49955D4A38055860
83C820D65D8335AC8DA5CA49F286E858FF00145D319EE53EE9F6C13C9AD5AC
CE65D67DADEDFF003F39FF00A797FAD69D232AB29561907820F422B2FF00B3
4DBFCDA64A6DBFE9991BE1FF00BE3236FF00C048F7CD1FDA4D6DF2EA917D9B
FE9A03BA13FF0003C0DBFF000203D89AD40430041C83DEA39A082E63315C46
B2A1FE170187E46B0755D32D2DF4DBB96D035B3889F6889D9137638F9010BC
9F6ABA967A95AA2C76B76B2220002CD18CF1D0064D800FF809A77DB6FA1FF8
FAB2620725A071201F836C6FC029A922D52C269042260929E91C80C6E7FE02
E01FD29F75630DCB2CB9314E9C2CA9C381E99E411EC411ED5585F4F65F26AA
004ED708311FFC0C7250FBF2BEE0F14C93FE259706E97FE3CE73994768DCFF
00CB4FF75BF8BD0FCDFDE35B34553BCBC4B4551B4C9348711C6BF79CFF0040
3B93C0A8ED2CDE3737776C24BA906091F7517FB899EDEA7A93C9EC035CE758
887F76093FF1E74FF0ABB34315C44D04E8248DC60A91906B33CD9F4B3B6E58
CD67DA53CBC5ECFEABFED751FC5DDAB5C10C010720F7AE5AE73A64F6F6C7FD
524E8F6E4F40AE7CB78FFE021CB2FF00B3C745AEAAAA5EDA8BBB73106D8E08
6471D51D7956FC0F6EE38E95522D62CC401EFA68EDA55251D1DC0C3AF5033D
4771EA083DE9DFDAB13F16B04D704F4DB195523D9A4DAA7F3AE2279668BC43
6B69F66616A039F215D4E18957D99E147215B6EE23A7AE2BD06D6F6DAF0379
0F964FBC841575FF00794E08FC455AACBD37896FD3FBB707FF001E446FEB4E
D523736C2E6105A5B5613201D4EDCEE51EECA4AFE357E391258D658C864700
823A107A1ACA6034DBA2C7FE3D2EDB0C3B472B77FF0075CF5FF6BFDE385FB2
5C69FF00369A37C3D4DB93803FEB993F77FDD3F2FA6DE4D598A6B4D4EDE488
8DCA41492371865C8E5594F238FCFA8E2A82C6F3433E8976E7CC087CB94F57
4E8AFF00EF21C67DF07B8A4FB51BA1A4CEE36BB4CC1D47F0BAC32865FC1811
56AE7FD2752B7B5EAB6E0CEFF5E56307EA771FAA8ABB749E65B4B19FE2461F
98AC5D3AF6FE2D3EDA4B9B7F3A36890EF84E480541F990F3FF007C9627D056
8196C756B69ED6394387528EA3875DC31CA9E54FD45671BA9751B3B6B12713
5C82B3E38DAB19DB2E3EADF28FAE474AE8554280AA3007000ED59371FF0012
EBAFB72F16F390271D95BA2C9FFB2B7B60F001AD1B9823BAB796DA5FB92AB2
37D1860D57D36792E2C62926FF005A06C93B7EF10ED7FF00C781AAB37FC4B6
E8DD8E2D6E0812FA23F457FA1E037E07FBC6B42EAE12D2DE4B993256304E07
53E807B93C0F7AC7B4B67B7BFB41360CCF0DC49211D3CC77889C7B0E83D801
56AF01B098EA710FDD9005C281D5474900F55EFEABEA401566FAE8DBD9B4F0
E1DDF0B10ECCEE709F8648C9F4E6A4B4B65B3B68ED90EED83058F563DD8FB9
3C9F7AA8F96D6A2C7FCB3B7933FF000374C7FE8269352FF486874D1D2E1899
3FEB9260B7E0C70A7FDEAD5A8E692286279676091A8258B7000F7AF3CD3EE8
E99E2092D52DDDA19D3CCB646608EAAF80C02B6073E582A09040F738AECFFB
5EC938BA2D687A7EF94A0CFA063F29FC09AD24749143C6C194F2083906BFFF
D3FDD8D534A371A6DDC97EDF6B9844E5148C46AC14E36A72339EE493EF8E2A
CC6F2E9F1ACB1EEB8B16018756922079F72EBFF8F0F71D3623923951658983
A38043039041E84114C9EE20B588CD7122C68BD598E0550FB45FDE71671FD9
E23FF2D6653B8FFBB1F07F1623E84551D534CB68F4BBC9DF37170B0BB7992F
CCD951B801D9464745007B543369569A73F9E2DF7DB7768F2B343F465C3327
B672BDB2381A6969384596C2FD8C6C32A24026420F439E1CFB7CF4EF3F5487
FD7DB2DC01FC50B80C7FE00F803FEFB34A357B1042DC39B563DA6531F3E80B
614FE04D69839E45159DAB3BA69B7022389245F2D3FDF93E55FD48A75C5CC7
631C76D047E64AC36C512F190BEA7B28EE7B7D48052CEC9A276BABA7F36EA4
182DD957FBA83B2FEA7A9ED8D0ACB9FF007DAADAC3DA0492638ECDC22E7EA1
9BF2AD4AA1A85BC92C6B35B01F68B73BE3CF193DD49F461C7B75EC2AC5B5C4
777025C427E4906467823D411D88E8476358D6D636F7D71777D27980BCA514
A48F19DB100847C847F1063F8D5DFECD753982F6E221E9B964FD64573FAD1F
67D510E22BD475FF00A6B0EE6FCD1907E949E6EB11E77DBC3281DD656527E8
A548FF00C7A8FED27403ED3673C40F70A25FD222E7F4ACD1269B13E34DBC4B
1949FF005327CA84FBC4DB48FF0080E39EB9AD14D4BCA223D4A3FB3336007C
EE8989F47E31F46009ED9A5D570F1DBDB632679E203FE007CC3FA21AD4A2A3
9618678CC53A2C88DD558020FD41ACFF00ECA863E6CA592D3DA36F93E811B7
20FC16909D5A018758AF13BEDCC4FF004C1DCAC7F1515926E21B1CA423ECF1
B6435ADC8D91B67B46E7280FFB20953E839356B49BF89653A612405FF541F8
7518CF96C3D547DD3FC4BC82704D695DDF792EB6B6E9E75D38CAA67000FEF3
9E76AFEA7A004D2DA59790CD713BF9D7320C3C84638FEEA8FE151D87E24939
357AB066FB69D69DACFCB6F2EDD328F91BB7BBF4619C7DDFEE9AB69AA42AE2
2BD56B4918E00930158FFB2E09539EC339F6AD3AC730CBA59325A2992D0F2D
08E4C7EF18F4F54FFBE79E0BEFED2D75CD31A24901495731C8BCED6ECC3FAF
E22AAD92DFDFC1E65C5EB432A929224488A11C751F3873EE0E46460F7AB7FD
916AF8F3DA59FD77CAE54FD57217F4AB56F656769BBEC96F1C3BBAEC50B9FA
E0532FAE9ADA202250F3CA7644A7A163EBEC0649F6158575A66D9AD6D237FD
EB453B7987A99B746E1CFF00C08671D3B74AD548AD757B686EE48CA49B7860
4AC91B7465DC304608C11D38E6937EA565FEB07DB611FC4A02CC07BAF0ADF8
60FA29A6693710DCCDA8CB0B6E06E0750411FB98C6083820E47435B3597A67
EE04DA79E3ECAF84FF00AE4DF3263D872BFF0001AD09628E789E19943A480A
B03D083C11591A55E877974F773235B922390FFCB545E09CF7287E5623BF3D
F1576EAC52E1C5C44C61B94185917AE3D187465F63F5183CD66DC492CC63B7
BA0B6F7D19DD049CF952301D01EBF30E194F38CE338CD66C5748FA85BC6014
0D73E6843D519A391244FC1C649E87767A1ADED2FF007CB2EA27FE5EDB727F
D725F9531EC47CDF5635A846460D6668BFF206B0CFFCFBC5FF00A00AB17363
6977837110665FBAE3875FF7586187E06BCFF45D4AE2D75BBE86384CD04EFF
00BB2CDFBC6006E014B1C1C825C038CE49273807D0EDAEEDEF10C96EFB829C
30C10CA7D194F20FB1A99D124468E450CAC08208C820F50456658BBDACA74B
9896D83742C7AB4438C13DD93807D460F52696D3F717F796BFC2E5675FA38D
AC00FF0079727FDEAD2744951A391432382083C820F506B9E823B892F534B9
8F99059112EF272581FF0054ADDF2A4124FF00B2A7B9ABE997D6A5CF48ADE3
C7FDB477CFFE802B52B95802C3AD47A79626D2DF71878E16665CF979FF0065
092A3D1B1FC22BAAACC88E758BA1E9041FFA14B4DB0FF499EE3513CAB9F2A2
FF00AE719233FF00026C9F71B6AEDCDD4167179B3B60640000C9663D0281C9
27D05528AD66BC956EF505DAA8731419C8423A3391C33FE8BDB279AC6D4EDE
2935A696504A08EDE37C7076CAF2A8C1EC44811B3D46335B965712876B1BC3
9B88864374122740E3DFB30EC7D88C8DA469C5B7A422172725A126263F5285
49FC6BFFD4FDFCACCD149FEC9B456FBC91AA37FBC8369FD454175697969E65
C68E5417E5E1619424F565195C37B64063D7079A769F6F673EDBEF31AEA604
8DF2FDE43D0A85E021EC4000FAE6B62A29E213C12427A48A57F318AABA5CAD
36996933FDE9218D8FD4A8355E4865D359AE2C90BDBB1264847504F568C7AF
72BDFA8E73BB4A19E2B9896781C3C6E3208E86A420302AC320F506B30E9164
8775A86B46EBFB962833EA547CA7F1068F2F56B7FF005724776A3B483CB7FC
594153FF007C0FAD737AA788A292E6DB4C8E166BB130668B87E1033024C5BC
E038048C6EC0E95B56773696DBA4905C4D71263CC90DB4C09C74006CE14761
DBDC924DC3AB592FDFF313FDE8645FE6A299FDB7A40E1AEE35FF0078EDFE78
AA167ABE9525F5E5CB5EC2325225CC8A32A8BBB239FEF3B0FC2B723BBB49BF
D4CC8FFEEB03FCAAC5614D3AE8F3CF2483FD1A7579940ED2A296751FEF01B8
7B863DEB434E81AD6C608253991506F3EAE7963F89C9A8DF57D2918A35E421
87F0EF5DDF96734D1AB5AB0FDDA4CFE98825C1FA12A07EB40D42E5BEEE9F3E
3B12621FCE4CFE9482E3576E56CE251FEDCE41FF00C751BF9D3644D5E7528C
B6D1AB7041DD303FFA0573B71628AED6B6ED0BCDD1A2B485E33CF672B32A8E
3FBE79ACED3F48F1024CFE4DF663B36CAC436950ECA432A332E06D53E9B727
1EA47596892DDAB14D4AE15D0E1D19610C87D08F2FF2EC7A82455BFB0DD7FD
0427FF00BE61FF00E3747D8273D6FE73F8463F92527F67CBFF003FD3FE69FF
00C452FD86E074BF9FF28BFAC754AEC25B622B8D526DD20E230913BB0E9C20
88923F0AE71BC2971797115DDB4D2E9FE490C85BCBDDC73C451AAA8C9EBCF3
DC56CE8F25FDB5A6E92DD6E5CB113346D897CC5E1B72B9C1C63821BA630A06
056E5BEA16974E628A4C4A064C6C0A4807A956C1C7BE2AED664386D5EED876
86053F50643FC88AD1744910C722865618208C823DC5667F66BDB73A64C6DC
7FCF361BE2FC1720AFFC0481EC68FED336E76EA717D97FE9A677427FE07C6D
FF008105F6CD24B6F2DACAD7BA70DE243BA5841E1FFDA5EC1FF46EFD8880DC
431CC9AADBB66DE72239FB6D6070AC41E4107E56079E99FBB5BB4C9658E18D
A699822202CCC7A003A9ACEB28E49E53A9DCA94771B6246EB1C7D791D99B82
DE9C0EDCA5CFFC85AC7FDC9BFF0065A2D7FD1B50B8B3E8937EFE3FC78900FA
3618FBB56AD60C76105CDE5FCC731CEB3285950ED703CA8F8CF71EC723DAAC
7DA6FACB8BD4FB4443FE5AC4A770FF007E3193F8AE7E80531E787ED96BA85B
BAC90DC8303329C827964391C70432FD5AA4BA965BB98E9D68C500C79F20EA
8A7F854FF7D87FDF239EBB7325D582B5B4696616296D70613FC2A40C6D38FE
12383EDD39C54F67749790099415392ACA7AAB2F0CA7DC1FF38A967821B989
A0B841246DD548C835E71E23D36E6C6FECEE62B8678A69044C3969955F0858
6396C0C0DDF7BEE83935E856771697108FB1BAB469F2E17F8703EE91D411E8
79156AB3746FF903D8FF00D708BFF4114ED526922B37584ED9A62228CFA348
7683FF0001CE4FB0AE765B08167915418E24B85832BD515E18B611EE2454C1
AD586117FB9E43F67D46DBF76EF1F078E41C1C86461C80738CF6615616FE4B
56116AAA23C9C2CCBFEA9BD339FB84FA138EC093562FED5AE620D09093C277
C4C7A061D8FB11907D8FAE2B38DD24D2D8EA2A367CEF6F2A9EA85FAA9F7122
A8FC6B62E278ED6092E66384894B1FA0AADA7412436E64B8189E763249DF0C
DFC3FF00010028F6151DA9F3352BE93FB9E545FF007CAEFF00FD9EADDDDCA5
A5B4972E0B0419C0EAC7B01EE4F03DEA945A686D3BECB747F7B21F31DD7A89
49DDB94FFB27EEFA002A6B0B99265782E405B98085900E873D1C7FB2DD47A1
C8EA0D654D2B896FD206DB7171325BC647F08F2958B7FC043337E18AD396E2
1D3E38ACEDA3F324DA162854F3B578C927A28EE4FEA70096D64E251797AC25
B9C1031F72307AAA03FA9EA7E980346B0AE2D85E5EEA16B9DA65B58541F425
A6C1FC0F353053AAD85BDE21F26E028911BAEC723953EA3AAB0FE47045BB2B
B17719DCBE5CD19DB221E4AB0EDEE0F507B8C1AFFFD5FDFCACCD24FF00A3CA
87AADC5C03F8CAC47E84569D66DCD9C82537B62425C600607EE4A0767C77F4
6EA3DC6419ED2F23BB56C031C919C491B7DE43E87FA11C1ED56EB33463FF00
12AB55FF009E6823FC53E5FE95A75933DBCD652B5ED82EF57399A11FC7FED2
760FFA377E706AEADEDA3DB0BC12A88319DEC76818E0E738C107820F43C1AA
7FDA135CF1A6DB9941FF0096B26638FF000C82CDED85C1F5ACEBA867B897EC
724C6EAE08CB2006382253FC4EAA77367B2B31DDEC32457B6D16DC4D771DAF
C8F6E234490819130FDE16C0C0C60A0C0C0C0DA38AE92CAE85E5B2CDB76372
AEBD76BA9C32FE0463DEAD545713476D0497129C244A5D8FB28C9AADA64125
BD8C2930C4AC37C9FF005D1CEE7FFC789A74BA7D84E7335B4521FF006914FF
00315565D2B44822695ED61851064B8554C01DF70C62B94D534A6D52386DAD
5A6B38A79008CBC923336D05F79466C2A8C71C6E248E9DEED8C5689025C6AB
6693AF21A761E6B2329C30937648C1046E1F2F73B4575F088444A6DC288C8C
AEDC6D20FA638A968ACC6D523918C56086EE41C1D9FEAD4FFB4E7818EE065B
DA9BF62BABAE7509F087FE59424A2FFC09FEF37FE3A0F75A5B974B0B78ECF4
F8D12594EC8900C28EE5881D94727D7A7522AE5ADB47696E96F1E484EE792C
4F2589EE49E49F5A86EAC52E184F13186E5061645EB8F461FC4BEA0FE183CD
32DAF58C82CEF54437382401F72403A943DFDC751DF8C13A04800927005661
D56297E5D3E36BC3EB1E3CBFC64385FAE093ED59139D76FAE648A295238ADC
0F3238F20BB360F97E69E410BCE42AE323F0D8D316C3CA66B28BCA6CE24047
EF038EA1C9C927DC939EA09041AD3ACA6FF43D4C3748AF860FB4C838FF00BE
9063FE023D6AEDCDA5B5DA08EE635900E464720FA83D41F71CD52FB25F5AF3
6571E6A0FF00965392DF80907CC3EADBEB9F83C456B65A9DE5BEA10C904B34
AA54E03210B1A0C0607939EC06791C678AE88EB164BF7FCD41EAF0CAA3F32A
05386B1A4B10A2F6024F6F3173F966AF82AEB952194FA720D661D34DB9DFA5
C9F653FF003CF1BA13FF0000E31FF012BEF9AC9BC91A17792E60103CC36CA8
5B36F70A4631BF002BE380582E7EEF2304686897CB7503DB339792D88525B8
62BFC2581E7770437FB40F6C53863569C375B281B8F496453D7FDC53D3D5B9
E839D9ACABAFF90AD88FF6663FA2D1AA7EE561D4075B47DCDFF5CDBE57CFB0
0777FC0456AD66D97FC7E6A1FF005D57FF004525695723E2982282C65BAB4D
D15E37CEA633B77345FBCDCE0E54ED0B9C919E00079A97C31AADB5D58C3034
66DEE0825958E77B75660C7A939C9079E73D0827A9AC8B9FF897DD7DBC7FA8
9B0938ECA7A2C9F87DD6F6C1E8B5A53CF15B42F713B6D441927FFADDFE9590
34F92FADAE65BD1B27BB428A3AF9487EE81EE0F2C7D7D80A92182DF54B682F
DD7C9B8641978CED756EEB91D403D8E47A8A7EFD4ECFFD62FDB621FC498494
7D54E15BEA0AFB2D3F46FF00903D8FFD708BFF004114D6FF0049D5513AA592
6F3FF5D24CAAFE4BBB3FEF0AAAF6EF751EAD04671234A361F4710C654FE0D8
34E965DD15BEBD6CA70635322F768586EE9DD93391F881C9AD9FDDCD1E461E
371F5041FE60D667D8AE2CBE6D2D8797DE072767FC01B929F4E57B003AD61E
A572B89E5803452BAA99627C0649508F2A5C720AEE0159864631CE14D6B99E
3D567B78E139B7454B873EA4F312FE7F31FA0EC6B6EB334D3E635E4FD04B70
F8FF00B66045FCD29B37FA66A31DB0E62B5C4B27A173FEAD7F0E58FA1DA6B5
6B36FE094325FDA2EE9E00415FF9E919FBC9F5EEBE87D89AE5B49BA9F53BDB
BBAB05C812C88B23821132465B1C1662AA802F6C1C91919EC2D2CA2B40C549
796439791B9773EE7DBB01C0EC055BA2B322FF0090CDD7FD7BDBFF00E872D2
69DFB99AEEC8FF00CB394C8A3BEC9BE7CFFDF7B87E14EBDB799245D42CC666
8C6193A79B1F5DBF51D54FAF1C026BFFD6FDEFB4BD5B9DD1BA98A78F1BE36E
AB9E847AA9EC47F3C810D8605C6A0A380B38FD628C9FD4D5F9A686DE369A77
58E35EACC7007E26B37ED57B7BC58C7E4C47FE5B4CA413FEEC7C1FC5B1EC08
A6369011BED56F33FDB47FCB590EEDC3FBACA30361F45031D460F3576D2F05
CEE8E45F2A78B1E6464E48CF420F753D8F7F620815F47E2CD97FBB35C0FCA6
71572E6EADAD104973208C13819EA4FA01D49F61CD52FB46A177C5A45F678C
FF00CB4981DC7FDD8C60FF00DF4548F4345B68D6504A6E5C19E766DE5E4C13
BBA64280154E00190013DE9D717534D2B58E9E4798BFEB24232B103FCDC8E8
3B753C601B36F6D0584055385196776392C7BB31EE7FCF4AADA42B7D852771
87B92D3303D479877007FDD040FC29ADFE85A907E90DF707DA651C1FF8128C
7D547735AB597AA7EF84163FF3F3200DFEE27CED9F6206DFC6B52AADD5E436
881A4CB339C2228CBBB7A28EFF00C875381CD548ACE6BA912EB52C650EE8E1
072919EC49FE26F7E83B7A958BFD2355965FE1B44110FF007E4C3BFE40263E
A6907FA1EA657A457DC8F699073FF7D20FFC74FAD0F612DB399B4B61196396
85B3E531EE463EE13EA38F504D4235796698D9DBDAB0BA55DCC92908AA09C6
7773B87A140C3B1C54DFD9AF73CEA931B81FF3CD46C87F15C92DFF0002247A
015A6A8A8A110055518007000A6CB2C7044F34CC112305989E800E49AA1611
492BB6A572A564946111BAC71F500FFB47AB7BE073B4569D55B9BDB5B4DA2E
240ACFF75472EDFEEA8C93F80ACDB95BAD523F256D8431E41124C4EF047465
442083E84B291E953A6930B0537F23DF32E3FD6E36E477D8004CFBE33EF562
FAE4DAC2042A1A69484893B163EBEC0727D81A7D9DAAD9DBAC018B9192CC7A
B331CB31FA9E6A1BBB377905DD9B08AE946327EEBA8FE171E9E87A8EDDC192
CEF12ED594A98A68B89236FBCA7FA83D88E0D17F6CD776AF0A36D9386463FC
2EA7729FC0819A7D9DC8BCB58EE02ED2E3953D55870CA7DC1C83566B02D6C6
DB50D3A459C6E59669A4561D465DB6B29FF771F51C1C824555820B9D3E55B4
49BECEEDC4791BADE5F6DB91E5BE3F854807A80790348EA091FEEB5687ECF9
E371F9E13F47C0C7FC082E7B66A56D1F4890EE6B28493DFCB5CFE78A4FEC8B
3036A19631D824D2A01F82B014D3A63EC31A5ECEA8DC104A49D7DE4463FAD7
237BE1CB9D36EA3BAD2EE1A46B9262784E230E814B950CA30A484C0200C7B5
757A5EAD65791A43129B6900C085C6D236F042F63B7A103A74201E2B62B2AE
39D62CC7A4539FD631FD6B4A48D258DA291432382083D083D4550D29DCD9AC
1312D2DB130B93D494E031FF007861BF1A5B1FF8FAD43FEBBAFF00E898EB46
B96BDCDE69BA9EA8DF70DB4D1C1FF5CC2925BFE064647FB214D5696D61B6B8
BA32A6618E40D20E4111C877ACAA4720C6E5C6473B41F415B6975358308B51
6DF092025C70073D0498E01F461F29F6380755D124468E450C8C08208C820F
504573D6B04C6F869F7AFBA2B3024801E4C833C337A98F81F5C31E715D1D65
D87EE6E2F2C8F4493CD41FEC4DF313FF007DEFAD4ACAD2A448B44B396460A8
96F1B127A00101269FA5C6E2D8DCCC0ACB74C66607A8DD8DAA7DD54053F4A2
C7FE3EB50FFAEEBFFA263A6E97FBB5B8B4C7FC7BCCE07FBAFF00BC5C7B00F8
FC29B69FE837274D6E227CBC1EC3F8A3FF00809391FEC9C0FBA6B5AB335786
C25B191B508BCD8D01C01F7B2780148E72DD38EB9C566F872D5B4AB7FEC8B8
E678C07DD9CEF52001CFFB18D9F400F1915D2D62585CC76FA3FDBE40763F99
3E0753E6B97007A93BB03D6AEE9F6F25BDBE67C19E6264948E46F6EC3D9461
47B0156679E1B689A79DC471AF5663802B37177A9FDEDD6B69E9CACB20F7EE
8BFF008F1FF67A1E76CB45B382DCDFC3651DC23493799098D58ED1230063C8
E081C6DE847BF5E82DF4CD16E225B8B4894238C868C94FFD0718FE953FF655
AFF7E7FF00C089BFF8BA4FEC9B5FEFDC7FE04CDFFC5D56B0B78EDF56BD48CB
91E541F7DDA43D64EEE49FC2AC4BFB8D56097A2DCA3447DDD3E74FD37D6A57
FFD7FDC7BFD6612BE7C86232C009492D6659645F5CA304CA9C7233FA80452D
27C4B2DCB5CCA96CD099DD4996456102111AAE4B007AE0100E3FDE1D4F5363
0595D38BC372BA84C87870C1950FFB0A3217EBCB7A935B34552BBB3FB4159A
16F2AE22CEC7C67AF5561DD4F71F88C1008C4D31F539566B1212CDE2964690
E7CC7C4AECE0A0C01B483C31CF208DBC1ADAB6D3EDAD9FCE00C9391832C877
391E993D07B0C0F6ABD59535CCD7733595836D08712CC3909FECAF62FF00A2
F53D81BF6F6F0DAC2B040BB517F1393C9249E4927924F24D51D5F325A8B31D
6F1C43FF00016E5FFF001C0D8AD4AAB7B6C2F2D64B7DDB0B0CAB0EAACA72AC
3E84034963726EED52661B64E55D7FBAEA76B0FC08355A0FF48D5279FF0086
D5442BFEF361DFF4D83EA0D49737AC927D92CD3CEB9C03B7385407A339EC3D
0753D87521D6B62B03B5CCCFE75CB8C3484638FEEA8FE15F6FC49279AB33CD
1DB4325C4C709129663E81464D55D321921B34338DB34A4C920F4773B88FF8
0E703D853B50B67BAB56484813261E327A0910E573ED9E0FB6454B69729776
D1DCC60859141C1EA3D41F71D0D36EACE0BC50250432728EA70E87D548E9FD
7A1E2A90BB9EC0ECD4C8687A2DC0181F4907F09F7FBA7FD9E056BD63B7FC4C
EEB6FF00CBA5ABF27B492A9E9FEEA1EBEADFEE9CCA754864256C51AF1BA663
C6C1F57385E3B8049F6AA7769AC3059A4602119F321B7FF598F51230CB63D1
429F439183A1A7C5A7887CFB0552B2F57EACC47F789F98907839E477ABF4D7
748D1A49182AA8249270001D49ACCB147BA98EA93A95DC36C2A7AAC679C91D
99F009F4181D739D5A424282CC7007526B9DBCBAB7BA659F4A2D3DDC5908F0
AEE43EA8ED90841EE0B023A8E715AD657BF6B42B22186E23C0922272549E9C
8EAA7B11D7EA0815EDFF00D17519AD7A47703CF8FF00DE18120FCF6B7B9635
76F2E16CED27BB61958119C8F6519A8B4E87ECFA7DADBE43797122E4743850
3353CF043750B413A878DFA83FE7823B1ED59B1CB2D938B3BF6F36190ED8E6
6EF9E0249FED7607A374EBD5DFD9CF6BF3E9527903FE78B7CD09FA0EA9FF00
01E3D41A922D45448B6F7A86DA663850C728E7FD87E87E870DED5A5597744B
6A963176512C9FF7C80BFF00B3D41A8E9EA4B5D470898360CB17F7F1C075F4
914743DFA67A10904B730C2B716AE6FECDC64027F7CA3D0138DD8F46C30F52
78A58EEADEF355B696DDF78582E148E854EE8B8607907D8F35B75969FE8FAB
BA745BC8FCC1FEFC58563F8A95C7FBA69D607FD2B51F69D7FF0044C74CD419
AE1D34B8490D30CCAC3AA443AFD0B7DD1F891D29359558F44BC8D0055103A8
0380015C6052DC810EA76D31036DCAB40DEE40DE99F60038FC69964A2DDDF4
79C6E8C296873C8687A1539EBB3383EC57B9347973E95CC01A6B2EF18F99E2
FF0073BB2FFB3D47F0E4616A4BB4FB5C115F69EC24962FDE444118707AA67D
1871EC707B55EB6B88AEA04B884E5241919E0FD08EC47423B5519FF71AADB4
BD16E11E13EECBF3A67E803FE75A95CBC1FE91A3E95A70E7ED30C45FFEB922
82F9F63C21FF007ABA8ACCB0FF008FAD47FEBE17FF0044C7483F73AC9E38BA
833F430B7F5127E9562FAD4DD41B636D934643C6FF00DD71D0FD0F43EA0914
EB2BA1796EB305D8DCABA9E4ABA9C329FA1FCFAD536FF4ED4047D60B2219BD
1A6232A3FE020EEFA953DAA6D42DE59112E2D47FA4DB9DC9DB77F7909F461C
7B1C1ED492EA11FF0065CBA941F32A44D200783F28270476208C11D8D51820
DF25AE9BD61D3923327A1900C22FE1F78FA1DA6AFDC5FAC729B5B6437173FD
C5380B9E85DBA28FD4F6069B0D8334AB757EE279D795006238FF00DC5F5FF6
8F3F41C569565E8BFF0020D88FF78BB7FDF4C4FF005A6CF6F359CCD7B60BBC
39CCD08E37FF00B4BD83FE8DD0F382342DEE21BA896781B7A3743D3A704107
9041E083C83C54D5976BCEA77CDE8225FC949FEB46AFF259FDAC75B4759B23
AED43F3E3EA9B87E35A95FFFD0FDE88F4A849592F18DD3AE08DF8D8A474DA8
30A31D8E33EF4695FBC8A7BB3C9B899DB3D8AA9D8847D5541AB171A7D85DB6
FB9B78E561D1994123E87A8AAFFD99E5F36B753C19FF006FCC1F94BBF1F862
8C6B30F4682E87A10D09FCFE707F2147F6998BFE3EED6687DC2F9AA7E9E5EE
3F9814C91AD353C4FA75CA1BA83EEB290D8CF55700E769EE0FD4608045BB3B
C174ACAEBE54F11DB2464E4A9FAF707A83DC7BE45549679AFE46B4B2629121
2B2CC3AE47548FFDAF53FC3D3AF4D282086DA258205091A0C002A5ACB1FE93
AB13D52CE3C7FDB49793F8AA81F8356A515873DC2693773CF2FF00A8B88CCB
C7FCF5897E603DD940C0FF0064D57B06BB9ED52DACD82E4B34F70391E6312C
E22CF0DF312327E51D392081B96D6B05A47E540BB4139249C9663D4B13C927
D4D58ACAD43FD226B7D387495BCC93FEB9C441FD58A823B826B568ACBB4FF4
6BEB9B23C249FBF8FE8E7E703E8DF31FF7856A557B9B8B6B688C97722C719E
3E638049EDEE4FA573820D4A55783452D696920C6E9948D99EF0AE438E33C3
600E0AFA569C1A2DBAC4915D31B844002A3711281D008C7071DB764FBD6B80
14000600ED4B59971672C729BCD388498F2E8784971EBE8DE8C3F10471566D
2F22BB56D80A3C670E8DC321F423F911C1EA091542523529DA1E3EC56EDFBC
3DA475FE0FF757AB7A9F97B30A94EAD6AE76D986BC6E9FB91B973E85CE101F
62D47FC4DAE3AF976687D3F7B263F4553FF7D0A069168C43DDEEBC7F598EF1
9F509C203F4515A806381542F2CDA72B716EC22B98B3B1F19041EAAC3BA9EE
3F11C8159D737626B6FB6EC31DC69CE1E58CF25571871EE0A1254F738FA55C
D54892DA3B6539FB54B1C7C775CEE71F8A06A1B4C5898C9A7486D1CF255466
263EF1F03EA57693EB49FDA325AFCBAA45E40FF9ECA77427EA7AA7FC0863DC
D68491C373098E45124720C1079041ACD8E5934D916DAE98BDBB90B14AC725
49E88E7FF4163D7A1E705B4E58A29E3686745911B82AC01047B8359BF66BCB
1E6C58CF08FF00963237207FB0E79FC1B23DD454105E437BABA08C323DBC0E
1D1C6D6532326011FF00003C8C83D8D6ED63CEADA6CAF7D0826DE4399D00CE
D3FF003D147FE843B8E4720869E7B1B7BB75BC81BCAB8DB849A3C64A9E707A
8653E873EA39E6A35BF96D5845AA288F270B32FF00AA6F4CE79427D0F1D831
34BAAFEEA28AF47FCBA48B21FF0070E51C9FA2B13F8557B7B98EDBFB4AEE5C
95171C01C9622344000EE491803D6AED85B49123CF7383737077498E40F440
7D1471EE727B9A8B5A1BB4C993FBFB53FEFA603FAD2EAEA7FB3E499065ADF6
CC3D498887C0FA818FC69F7D035CC093DA91E7C244911EC4E3A1F660483F5C
F502AC5ADCC7776E9711642B8E878208E0823B107823D6A94B6935ACAF77A7
0CEF3BA4849C2B9EE57B2BFE87BFF7855B2BB852EC884E20BC624291831CE0
65D08EC587CD8F50C7B8AB7ABFC9646E875B5659B23AED4397C7D5323F1AD0
99B644EFFDD527F215CF78693CEB38AF5BA08A3823FF007231827FE04F9FA8
0B5D2D65E9BCCFA83FF7AE3F9468BFD28D4BF76F67758CF933A83F497317F3
607F0AD4AC1BF926D36E7ED16A9E69BD223D9FF4D80F91BE981873D8007B1A
D4B3B55B3B7480317232598F566639663F5249AB55C67892E7FB16CEE652A5
AD6F0A82A3F8646601C0F675C9FF00781EED57F4F82FEE2D941636D1CB9791
C7FAD959F9247F717B0CE5B6E07CA456EDBDB41691886DD022F5E3B93D493D
493DC9E4D4F4566E8DCE91627D608CFE6A2B4AB2EE2D668256BDD3C02EDCC9
11385971DFD9C0E87BF43D88B76B750DE45E6C24F070C08C32B0EAAC3B1155
AC706EF503DC4CA3F0F2A33FD6AFC91A4B1B4520DCAE0A91EA0F06B1EDAF5A
DF4549A40649A15F2483D5E546F2F19FF69C7EB5FFD1FDF0D42E1AD2C67B88
F05D118A83DDB1F28FC4E05108B7D36CE18249152385150331038518EF507F
6D6964ED8AE5266F48BF7A7F24C9AAB73E21B1B62A8639D9DFEEA792EACC7D
14385CFE14EB7D5EE6F63F32D74F9B6E4AE65644195383C062783C74AB065D
64F0B6F6EBEE6663FA7963F9D55B9D36F2F80375F6562BD3740CE57E8DBD48
FC315CCC9A36AF77712CBA66A454468D197C36D76EF1AB3B3B601EAC0E14F4
19CE342C13565B5411CD23C717C85611046E857F84C6F1E063FDF3EA3208AB
A8F6F2388A7D4AE6195B0024BB61249ECBF2286FF80E6B4C69717F1CF3BFFD
B671FF00A0914D5D1AC90BB2198173B988B89B9380327E7F40053FFB2AD7FB
F3FF00E044DFFC5D1FD956BFDF9FFF000226FF00E2EB1F51D16C2FAE6DB4E9
3CD9172669034D2B00A8368EAC704B30FC01AD41A4AA28486EA789546000F9
000FF781A70D3EE474D46E31F484FF0038E94D9DFAFF00AABF73FF005D2346
FF00D0425578EC7558EE64BAFB5C2EF22AAF30370A99C01893D49A9F7EB4A7
1E4DBCA3D7CC74FD3637F3A827D5A6B2FF008FEB6083D5668F6FFE44319FD2
B1EEBC47A7BCB05DC4B217B770AC110C80A4BF295DD1EE5EBB5B19E48C0E6A
B8F172DFFF00C7AFFA2C47F89CC6253DB81232A0FAE5FE82B5ECD1C38B9B7B
0692561FEBEE2646620FA3299303D9463DAB44C9AC9E05BDBAFBF9CE7F4F2C
7F3A026B0DC99608FDBCB77FD77AD2187593FF002F700FFB60DFFC7693ECDA
B9EB7B18FA43FE2E697ECBAA77BE1FF7E87F8D73BAF5A6AE8A9258DE66F995
C2158C2B14552581209E3B0C8E188E950E91A63DCDBC68F711CAF1AA9F2E78
9A450A795655F302107B30504F7C1C8AEA443AB818FB4C1C7A40DFFC76909D
693A2DBCBFF0278FFA3D2F9FAB28CB5A447D92724FFE3D1A8FD6817F763EFE
9D38C770D111FF00A333FA50356B7FF96914E8475CC12103F10A47EB542EAF
34CB975B8B3BC856EE318019C0DEA7AA383CE0F6E320F3EA0D2D0EE7EDD3C5
6B8651A5ABAB2BF5058ED8B27B911EEC91C1CE4715D7D1594DA69B7264D2E4
FB31EA63C6616FF80FF09F75C73C9CD02F6297FD07548442F2E576BFCD1C99
ECADD0E7D080DED4D865934E952CEE58BC121C432B1C907B46E7D7FBADDFA1
F9B96D7AC16B3B7BFD52EA47043C29146B229DAE8C3739DA47B38C8E87B822
A7FB55D5871A80F3601D2741F747FD3451D3FDE1C7721456AA3AC8A1D08656
19041C820F715909FF0012A9D62FF97299B09FF4C9D8FDDFF758F4F43C7420
0D76557528E032B0C1079041AC69AC26B789E2B41E7DAC8A55ED98E30A4608
8D8F4FF74F1E854562F85FCEBF844B7DC3DA4920284FCC66DC41761DB03850
7DCFA576B59BAB1C5AA7FD77B7FF00D1C95A5597A39DB6096E4E4DB1683DF1
131504FD4007F1A68FF40D436F482F4E47A2CC0723FE06067EA0F76AD6AC1D
6F4F8A6B696EE3985A4F1A86F37F87E43B9778EF83C83D47D0906DD8DC0D57
4E06E6231BBA949A36E0AB630CA7FA7B106A98B890F86E496425A58ADE4572
7AEF8D4AB7FE3C0D3EDE1BFD26DE2B6451796D0AAA2EDC2CAAAA3038E15BFF
001D3EC4D695B5EDADDEE103E593EF21055D7FDE53823F1155F4B00C12BF76
9E7CFE1232FF0021526A703DCE9D730C5FEB1A36D9ECE0654FE071562DE74B
9823B98B949543AFD1864567DAFF00A75DB6A0DCC3166383D0F6793F13C0F6
191C356A3BAC6A5DC855519249C002B2FEDF35E7CBA5C61D0FFCB693223FF8
08E0BFE1853FDEAE7AFB4E1746E6F5DDAE5F4E52E8EFD1A751BB0AA380AA06
381C93CE4AD747FD93A63FEF6184445F9DD0931120FBC641354B5082F2C6CD
E6B3BD943295545936C8B9660A324AEF3C9FEF52D9DD6B336E590DBB4D1712
4455E32A4F421B2F953D41DBCFB1C8170DCEA899F32C95BD3CA9437FE8612A
9E9F737365616D6971633A986244246C7195500E36B93FA55E3AADB0EB1CFF
00F80F31FE495126BBA748824432956E87C99707FF001DAA1737F6425FB6D8
C852E3003031C812551FC2DF2F5F46EA3DC6416699ACDB33DE4F2C73446798
30530C84E0468BFC2A475535AC357B43D127FF00C069BFF88AE33FB426BFD5
E7B3D2D2492DEDA632BB2A6191DD02E02C9B46ECEF3CF009CF2460FF00FFD2
FDE67D16CE650B72D2CFC8277CAE549072095042F5F6AACCBA25ACE52D2CE3
96E97F8618D4B83FED37017FE04455AF2753BBE6E2516919FE08BE67FC5D86
07D02FD1A9CD1596916B3DE4717288CEEC49677DA3382CD9627D326A7D3ED9
AD2CA182420C8AB9723BB9E58FE2C49AB9591248FA9BB5BDB314B642564954
E0B91D510FE8CC3A741CE4AEA471C70C6B144A111000AA060003A002B3AEE1
92DE6FED2B352CE0012C63FE5A20F4FF006D7B7AF43D88BA8D6D7B6E1D76CD
0CAB919190C0FB1AA5FD930C5CD8C92599F48CFC9FF7EDB283F000D1E66AD6
FF00EB624BB4F588F96FFF007C392A7EBBC7D2A58753B39A41016314C7A472
028E7E81B1BBEA322AFD65699FE9066D48FF00CBCB011FFD724C84FC1B2587
FBD572E2F6CECC03773A439E9BD82E7E99AABFDA91C9C5ADBCF707AFCB1941
8F6693629FC0D279BABCB8D90456EA7BC8E5D87D51401FF8FD1F64D424CF9F
7C53DA18D507FE3FE61FD452FF00645A363CF6966F5F3257653F55CEDFD2A7
834FB0B56DF6B6D142C7BA22A9FD05557FF4DD4963EB0D8FCCDE86661F28FF
0080A9C9F72A7B54B3E990C8ED3C0C6DA76EAE98F9BFDF53F2B7E2323B1159
2F6B676CFBB53B18A3E7FE3E605DA3EAD8F9D3EB920776ED5A29A78D824B2B
D9E35700822412823B10650FC7D0D3B66B117DD921B803B32B44DF52C0B8FF
00C7451F6FB98B1F6BB2913D5A3C4ABF801F39FF00BE2A68353B0B87114732
894FFCB36F924FFBE1B0DFA55EACAB1FF4BB897523CA1FDD43FF005CD4F2C3
FDF6FCC053552DACC4B1496AAC629EC25648A41C9546C3A8C775DA42907AE3
D402346CEF1A666B6B95F2AEA31964EA08FEF21EEA7F4E879ABF51CB2C50C6
6599C468BD5988007D49ACFF00ED7B57E2D15EECF6F254B29FF819C27FE3D4
79BAB4FF00EAA18ED94F46958C8DF8A2607FE3F54EFAD8A5B96D46E65B9DE7
6AC31E220EE7A2AEDC37E6C401C9E01ACD4F0C5BD842B776F0837039956325
3783D9082082BFC273CFF172723660B48E6892E2C2F6748DC647CFE667EBE6
8720FA8E2A5F2B578B3B2E229C0E81E328C7EACAC47FE394BF6BD463389EC4
BFBC322B81F5DFE59FC81A8E5D4F4B96330DF7EE91F822E236453ED97014FE
04D577B57FB395B4617F6520C1859B2D8FF624279F60C7E8C314697A92B49F
609A42EEBC2338DAE7033B5C1E4381FF007D0F9877C5CD30F986EEE318F36E
1FFF0021E22FFD92B4EB29EC65B5733696426E39685B8898F7231F709F5030
7B8279A962B8B6D4524B49E32AFB7124320F9B078F7041F5048A8ECE592DE6
FECDBA62EC0168A46E4C918F53FDE5E87D783DCE352B9EB0B04B9D3E0BA563
0DC3EE91254FBC04AC64C1EC473C83C7E3CD5D8EFA48245B6D49446EC76A48
BFEAE43D80CFDD63FDD3F81346A6379B4847FCB4B84FFC73327FECB5A95976
DFBAD4EF60CF1208E71FF0206323F0D80FE356EF2D96F2D9EDD8952D82AC3A
AB039561EE0806996172D756E1E501264252451FC2EBC1C7B771EA08354E3C
EAB32DC1FF008F384E631FF3D5C747FF00747F0FA9F9BA6D34E9BFD0B504BA
1C437788E4F4127446FC7EE1F7DA2B3AEC98F4DD66D33D3CCD83BE2740D9FF
00BED9ABA7AA973636B77B4CE9974FBAE09575FF00758608FC0D5086DB50D3
10A5B11790EE672AE424B9762CD86FBAD924E010BF5AB706A56B3482062619
CFFCB3946C738EB807861EEA48F7AC34B90B60BA589445E5B491C92676F950
44E54127B165C05FAE7B1AD38EF1E58D61D22DF31A8016470638801D368EAC
31D30369FEF548BA62C8C25D464376E0E40618894FFB29C8FA16DC47AD4DA8
5CC96F084B7C1B89DBCB881E9B8F73ECA0163EC3D6A5B6B58ED6D92D532CAA
304B72589E493EA49C93EF5574727FB36088F580184FB98498C9FC76E68D58
66D507FD37B7FF00D1C94FBDB479596EAD58477510F958FDD607AA363F84FE
879152D9DDA5DC64ED31C8876C88DF791BD0FF00307A11C8E2ADD1599A28C6
8F63EF0464FD4A826B4E90900124E00AE7EF2F5EEADE49A1DC96483EFAF124
E4F0123F40C70377539F97FBD4CB1B15D26E6CE30029B88E449360C2B4A087
503D80DE17D06057FFD3FDE7FB0DD5DF3A8CE429FF009650928BF8B7DE6FFC
741EEB5A10C10DBC621B78D628D7A2A8000FC054B597A8FEF64B5B21FF002D
650EDEC917CF9FA160AA7EB5A958F24926A7235BDBB14B542564954E0B91D5
10FE8CC3A741CE4AEAC71A448B144A111000AA060003A002A9CFA8C114A6DE
20D7138EB1C432C33FDE24855FF81119ED50FD9EFEEF9BC97ECF1FFCF2809C
9FF7A4E0FF00DF217EA6A111A68D28310DB63290197B44E780DFEEB1FBDE87
9EEC6B6E8ACFBFB8D3913ECF7FB64F33A4457CC66C7A20049FC0572FA943AA
A59B7F656FB38A52B1059DF7E7CD2106D5F98A019CF0E318FBB54ED1759920
57D4276100CA81144FB23DBC156585D1C118C104328F5AE8AC6D5D10DC6972
59386E0B47095CE3D5839C9FAD5EDFADAFFCB1B77FFB68EBFF00B2353BCED5
C0CB5AC3F413B13FAC429A2FAF870FA74A7DD1E223F5753FA5075408713DAD
C47FF6CFCCFF00D165EABDDEBF61696EF2BB32381F2AC88D16E63D065C0EA7
BF6A9F4A92CC5BAC505D47732125A46460773B72C7827BF41D8715AB4565BE
9C61669B4C7FB3BB124A6331393EABC60FBAE0FAE7A53E1D401956DAF63FB3
4EDC282728FF00EE3F00FD386F6AD1A8A6B782E50C5711ACA87F85C061F91A
C0BDB08E368AC74E965B692E0904239D8B10FBE42B6557AE01001C91EF5D0C
71A451AC512854400281C0007402B38FEE35853FC3770E0FFBD09C81F521CF
FDF3562F2CD6ED5486314D11CC720EAA7FA83DC7422B26D7EDD792496DA85D
18278FEF450A845653D18336E620FA823078EB5A51E95A7C7209BC9124A3A3
C84C8E3E8CE49FD6B42A29E78ADA179E76091A0C927B0AA1690CB7130D46ED
4A36088A33D6353DCFFB6DDFD0703B93A958F38FECB99AF107FA2CA73328FE
063FF2D07B7F7FFEFAFEF6763AF228A2B06F23D02298899634B96E7F759139
FA797F39AC4BFD1AE754DAD65E7DB94C18E59DC02B83918C8694F3CED62A33
4FD3F51D574E87C8BD86296249244F3F794CB8739DC30C1598F232429C8E72
715D17F6A04E2EADA783EA9E60FCE2DE07E38AB36D7F6579916B3C7291D42B
0247D40E945D59C37617CCCAC91E4A48A70E84F707F98E87A104564DD34CA8
B6DA93796CAC0C376A3E50FD1770FE127A1FE16071919DB57A3D401B29A799
7CB96D4379A9FDD651938F504720F707F0A9B4D85EDB4EB5B793EF451229FA
AA806AD491C7346D14AA1D1C60AB0C820F620D60DC595DD9CB6D35BB35C5AD
B397319F9A55051930849F980DD9C1E7D09E056DDBDC4375109ADDC3A1EE3D
475047504770791546E7F75A9D94DDA412C3F8B0120FC821FCEB52B9C7B63A
8DFCDE4395B26016E31D2574E36A9F4C70E7BE028E871D1001405518038005
43736F1DDDBC96D37DC901071C119EE0F623A835C8CB71234E22B9C19A4F22
2971C7CD05C20271E8EB2861ED5DAD159F36A9650C8610FE6CCBD6388191C7
D42E48FA9C0ACDD465BA9ED246B8B68E1806389409A466CE1408C1DB927EEF
CC79ED587E1AD363B5B8F3751413CF74CED1C8E77ED6858AED04F1F7402A40
048DDD862BBEA2B9AD2B508B54D4AE2E70C1514A5B93F75E3070EEBEB96033
E836FA9AE96B2F4FF92E2FADF3C24DB947A2C88AC4FE2DBA8D4B2D2D8C5D9E
E067FE008CFF00CD6B52B3AF2D65F305ED9605CA0C104E1644FEE37FECA7B1
F6241B1697515E45E6479041DACADC3230EAAC3D47FF005C71834DBF98DBD8
5CDC0E0C51BB7FDF2A4D3ACE2F22D2083A7968ABF90C53EE2E21B589A7B870
88BD49F7E807A93D877ACD104DAA1125F218AD7AAC07ABFBC9EDE89FF7D67A
07C9FE9BA8AC3D61B2C3BFA1948F917FE020EE3EE54D2EABFBB862BA0706DE
68DF3D8293B1CFE08CD5FFD4FDE9C6B326496B7B7F6C3CDFAE63FE549F61BC
71FBED42504F511AC6ABF865588FCE94E9168DFEB5A693D774F2107EABBB1F
A554D3ECACD354BAB8B5812210AAC00A2804B1F9DC9C75EAA39EE0D4F2C8FA
94AD696CC52DD0959645382C475443FF00A130E9D07CD92B34B796965B6CE0
42F22A80B0C40160BD071C051EE48151FD9AFAF39BD93ECF19FF009650B1C9
FF007A4E0FFDF3B7EA6AFC16F05AC421B68D6241D1546054D54AEEEF4F854C
37D3451AC8082B23280C0F0460F5AE7F4EF105A79D2E936AED7F2C1FEACC7C
E53D19D885CAF4249E460F2735B1F67D46EBFE3EE616F1FF00CF380E58FD64
201FFBE4291EB572DACAD6CC116D1842DF78F5663EACC7927DC9AAB7DFBCBC
B0800CFEF1A561FECA2119FC1996A39FFE25F782F0716F7042CC3B2BF4593F
1E15BF03D01AB13E9B6B3C9F6800C33FFCF58CED7E3A648FBC3D9B23DAA1DD
AA5A7DF517D10EEB84947D41F95BEA0AFB0AB56D7D6B7659217F9D3EF2302A
EBF556C11F955BA2B253FD3B50327582C8955F46988C31FF008003B7EA4F71
576E2CACEEF1F6A8239B1D37A86FE62AAFF63D829CC48D07B4523C43F24205
27D82EE31FB8BF97D84811D7F1F9431FFBEA97FE27311E905C8F5CBC38FC3F
799FCC54335DACB118752D3E511B707E41329FC232CDF89515520BE581FCBB
3B817B18EB03B62E13E9BB05BE8DCFB9E95B297F6725B3DDACA3CA8F3BC9C8
DBB792181E411DC119AAFA7C52399350B952B35CE30A7AA463EEA9F7E496F7
247402B4EB3354F916DAE8758278CF3E921F28FE41C9FC2B4EA9DE598BA557
46F2A788E63900C953DC11DD4F71DFD8E084B3BB3701A2997CAB88B0244CE7
19E841EEA7B1FC0E0820599658E08DA69982220CB3138000ACC8629350952F
2E94A4319DD0C4C3049ECEE3D7FBABDBA9F9B85D7A649247121925608A3A92
703F3ACE3AC698D958A6FB47A8855A6C7D7606C550B19AFE00D6D6D6523DB0
C792D2B2C7B54F552092F85FE1F9738E31C64DFD9AC4DF7A486D87A2AB4A71
ECC760FF00C74D65DD69FF006EBA1A7BDD4F305C3CCDE66C0A9FC2988C2292
DDF2090A0F4241AD0D2563B457D34A2472C183F22851221FBAF8181938C37B
83DB15B159502AA6A5796CE0149D526C1EE48F2D863D0055FCE99F67B9D37E
6B1066B7EF013CA0FF00A664F6FF00649C7A11D0D809A66AD12CAF14770AA4
8F9D012A4750430CA91DC1E6A3FECA8A31FE8B3CF6E7FD990B01EC164DCBFA
523DAEA615916E63B88C8C6D9A2E581EA0B2103FF1CAE3758B7D674C8A49E0
B70D6D2C66091124F336ABFCABB7705276B1F957071920100E075B6DAFE9F7
502DCC7E688D8677189CAFFDF4015FD6AD47AB69733058AF21663D848B9FCB
357C10464722B3EE2C0994DDD93F917271938CA4807675EFEC7823D71C1CDB
EBF568D16E53C8BAB79629369390543857646FE25DA4E7A11DC0AB934B26A1
2B59DA314850ED9A55E0E475443EBFDE6FE1E83E6E9A91451C31AC30A84440
02A818000E8052BBA46BB9D8281DC9C0ACE3ACE940EC4BA8E47FEEC67CC6FF
00BE5727F4AE5358950EB3A76A30432EC79444E193CADEF82D181E66D39DC3
938EC3D05755FF001399BFE785A8FF00814C4FFE8B03F5A3FB2A3979BD9E5B
AFF65DB6A7D0A205523FDE06AFC30436F1886DE358917A2A80A07E02B126B8
F3C4DAA91BEDAC15DA21FF003D2450773FD072ABF89F43560E9AEBA4C16913
013DAA218D8F4F310753ECDC86F626B42D2E52EEDA3B8405438E41EAA47054
FB83C1F7AA1A8B8B971A6838465DF3B7F762F4CF62F823E818F502A95BDB4A
348B5BDB74FF00488F37014719F349778FF10C40F700F6AE8219A3B8852785
B747228653EA08C8359E3F75ACB823FE3E20523FED8B1CFF00E8C14B744BEA
5630FF0077CD97FEF95D9FFB3D69D1599776B2ACBF6FB0C7DA00C321385954
7F09F423F84F6FA66AB5FDDC379A25CBC59FDEA34454F0CAEFF26D61D8826A
FDDDEC76BB630A659E4FB9127DE6C77F400772781514165234C2F3506124E3
EE28FF0057167FBB9EA7D58F27B601C54BA8DF45A6D94B7B30C8886401D598
F0AA3DC9C0149A74020B44F9C4AF27EF1DD7A3B3F248F6F4F6C0A9AF2DC5DD
A4D6AC702646427FDE18AFFFD5FDEC8F56D39DC446758E43D124CC6FFF007C
BE0FE95A1514F3476D0497129C244A598FA051935CA2DE7976D1D834862772
5AE19325FCC90EF78A20B925B2DC91F757DF9179DCC70C71DCCA9A4DA01B51
37AAC8C0762D9C2FD1727FDA1535B5E58DBC7E56996B2CA09C9D919018F762
F26D5627D77126AC79BAB4B9F2ADE3814F43239661F54418FF00C7E97EC9A8
C87335F14C768635407EBBFCC3F911596F1584CC60B7497537070DBE576841
FF0068B129C770A091E9553FB39A691ACEDFCB8DBA4A20411C3103D891F348
F8EC485C72CBD01D91A35B5BD8A5AD8010BC2DE646FDFCC1DDB18CE47047A7
02AFD95D0BB804BB7638255D09C9475E0A9FA7AF71CF4356AB2D7F7BACC8DD
ADA0551F5958961F922FE75A32C71CD1BC32A874705581E841E08359FA7492
2799A7DC31696DB1863C978CFDC627D7820FB827A115A7556E6CADAF02FDA1
3714E55864329F5561823F0355366A565FEADBEDD08FE16C2CA07B370ADF8E
D3EAC6AADDEB96AB079704AB15D48420497E46427AB32B63E551939E871807
9152DAEA1A4DB4096B69379E231FF2C834C73DCB7960F24F24F73530D49DF9
82CAE2503BED58FF0049190FE94A2E35571BA3B3441E92CDB4FF00E38AE3F5
A00D664FBCD6F07B61E5FD731D27D9F576FBD79128FF0062020FFE3CED4EFB
0DD91F36A1303ECB101FAC66ABDC68CD749E55D5ECB3275DAE9011F97955CF
C3E1BB7935376B5BBB858E0C090865DACE086540BB76E13A9E30090077AE9B
1ABC1DE2BB5FC627FF00D9813FF7C8A3FB5ADE3E2F51ECCFACAB84FF00BF8A
4A7FE3D9A96FE317DA6DC45090DE744C148391923820FD6AC5B4EB756D15CA
70B322B8FA30CD2CF716F6C9E65C4AB127ABB051F99AC1BDBEB4B82B75A6BB
4D730E423451BC88C0F5466505769FAF079ED4C53ABDF5C09AE6C3CB8E2398
E296550B91D198A6F25BD06303AF270469F97AC4A32D343067B2A34847D18B
28FF00C7683A63499FB45E5C4A08E30E23C7FDFA087F3AA1A75858C721B4BB
B78DEEE0F984AEA19A44ECE19B273D98763EC467A3A2A95EDD9B7558E150F7
131DB1A1EE7B93E8ABD49FCB92053ACED45A43E5EEF324625A473C1773D49F
E83B0C01C0A8750825609776A33716F92A338DEA7EF213FED0E9E8403DAADD
BCF15D4097109DC920C8EDF98EC7D4552BBFDD6A163703F88C909CF60EBBF3
F9A01F8D69D626A91342D1DDD89115E4B247183D56404F21C77C2E483D4638
3D41BB6B7C2776B6993C9B941968C9CE47F794FF0012FBFE601E2AF565EA7F
3B59DB67025B84FF00C860CBFCD2B28594BA6EA256C18442E72F1A9FF56EC3
968DB1D0E39461C8190415502B660B8B6D451E19A3C4898F321900257D3239
041EC4707B537FB1B48E71650827B88D41FCC0A6FF0063588FB9E6A7FB93CA
BFC985656B9A2D8C9A5CEADE6C8F8C461A795B1237CAA70588EA6B374EB4FE
CD47B1BF333C76A7699239A552AA79566456C6D23F894704104705ABA54D27
4D955641BE6460082D3492020F43CB10454A348D255B72D9401877F2D73FCA
B40000000600AE4FC5104777F6782562891E672CBD40478D491EE15CE2B7F4
FB892E6D819F0278C98E503A6F5E0E3D8F51EC455EACABD91EE651A65BB156
701A571D5233D81FEF37207A0C9EC329A8C6820B5D3E250A92CB1A00380163
FDE118F42A847E35AD5833DCAE8F7323329686EFE68D47533F00A0ED97E08F
70C4D32EAD9EDF499A39581B9BE65491874DD3111F1EC80F1EC39E735D0F4E
05655B7FA1DE4962788A6DD2C5EC49FDE2FE04EE1F5207029D7798F50B0947
F1B4909FA3217FE718A82E6DADAFF5648AE625956DE027E600E0CAC00233D0
FC879A9BFB26D9462192688F6DB34840FA2962BFA52FD86F147C9A84C4F6DC
B111FA203FAD021D6071F6B848F781B3FA4A3F95711AD5DDF1D460B7B0649E
69A41E618A3215BC83E66082C433AEDC707D891C5775A7C16A908B9B77331B
8018CAC72CFC7049F4F403007602B42B96D44FF68EA9696D9FDC5BCEBD3BCA
8A64FC94003D32DEA2B461FF008965C8B46E2D6727C93D91CF263FA1EABF88
FEE8AD8AFFD6FDF99238E6431CAA1D1B8218641FA835992695A7408D2C59B2
551926273120C772A0ECFCC1AE5AFA7D5B5459F4DD2666B8B70A0CB3491AAB
6320858F1B43161D8A804739C106B5748D02C22B649A2BA9A7120CEFDFE593
9E4E4A057EBFC24F073C66B7ADF4FB1B425EDA048D8F560A371FA9EA7F1AB9
59B2EA49E635BD921BA994E08538443FEDBF41F4E5BD8D33FB3E6BAF9B5497
CC53FF002C532B10F63DDFF1E0FF0074531E57B973A7E99FBA8E2F9649540C
263F810742DFA2F7E78AD282086D6258205D88BD07D79249EA493C92792793
52B32A29662028E493C002B9CFB7C09A80BCB40D25ACD849A403F741BA2386
3F7BFBA4AE46319236D749597A5FEF16E6EB3FEBE7723E91FEE87E6133F8D6
A565EA4AD1797A944097B5C9603AB447EFAFD780C3DC01DEAD4D7D676F12CD
3CE888FF0074961F367FBBEBF8555FB7DCCFC595A3B0FEFCDFB95FC882FF00
F8E63DE8FB25FCFF00F1F776517FB902EC1F42CDB9BF1056B98D4B41D3EF67
B89FECE66161B382CCCEEC7E7901624B13B0AEDE783F8D5F4D316D5566855A
EAD98021A0768640A79CED8D955C7D0038ECC6B46DADE3B95F36C3509D501C
15DCAE41F43E6AB303EA0F353F93ABC79D9751480740F110C7EACAE07FE3B4
7DA7548C03359AC83FE98CA09FC9C20FD68FED6823C8B98A6B723AEF8D8A8F
ABAEE4FD6ADDBDE5A5D82D693A4C075D8C1B1F9557BEB9954A59DA1FF499F3
B4E321147DE723D06781DCE07B8B56D6F15A4096F08F95077E49279249EE49
E49EE6A7AAB737B6B6617ED12042FC2AF5663E8AA3927D80AC26B296E98C9A
65B9D34B73E713B09F7F25786FFB69823D2B9558FC476731B29EEBCDB4B661
026331E3006C04C6D1F2CA4637305CF19CE0574166AB0DC2AC505A9BAF4951
E098FAE19BCC2DF5048F7ADE375A947FEB6C77FF00D71955BFF4679747F6A4
6876DC413C247AC4CE3FEFA8C32FEB5341A969F74DB2DEE6391FFBA1816FCB
AD5DAA37D6AF708B2C0425CC27746C7A67BA9FF65BA1FCC7201A92CEE92F20
12A828C095743D51C7553F4FD7A8E296EEEA3B48BCC705998ED445E59D8F45
51EBFA01C9E01A82CED64476BCBBC35CCA3071CAA2F645F61DCF73CF4C01A1
4564A7FA05FF0095D2DEF4965F459BAB0FA38F9BEA0F7229DAC7CBA7BCF8CF
D98A4DF844C1CFE60115A959771FBED52D21ED0AC931F638F2D7F30CDF955A
BAB38AED00932AE8728EA70E8DEAA7FC82383915560BB9A0956CF51C0918E2
3940C24BEDFECBFAAF7EA33C804BFBDD5E04C6441148E7D99CAAA9FC407AB5
796AB796ED096D8DC3230EA8EA72AC3E87F3E95411175481657CDBDE5B9285
93EF46E3A8E7AAB707078230719C54F6F7B22CC2CAFD44739FBAC3EE4A0775
CF43EAA791EE39AD2ACCD4F2EB6B6E3ACB711FFE433E69FD12935056819353
8412D0022451D5E23F787D57EF0FA103AD30DA4907FA5690CBB64F98C44FEE
9F3CE548CED27D4707B8279AB76B7B0DD16400C72C7F7E371875CFA8EE3D08
C83D8D5CAE775087ED73EA108E596CB62FD65DF9FF00D056AC453225EC3771
F106A483FEFE2AEE53FF00024C83FEE8157AF6EFECB18D8BE64D29DB1A7F79
8FF203A93D80A2CAD7EC9110EDE64B21DF239EACE7A9F61D80EC00155DBF7D
AC28ED6B096FF814CD81F88087F3AD4AC8B6FF00898DD0BF6E60849100ECC7
A349FD17DB27A30A7DD7EF752B2B7ED1F9939FF808D807E6F9FC2B52B9FBB5
B8D4A726CDB68B06DC8DD9E7030549FEE804AB7BB11D56A5BBB84BAB1B5BE8
7231342C33C15DCE1181F420120D58B53E66A77B28E9188A1FC5417FFDA95A
7505C5CC169119AE1C22F03DC93D0003924F60393598E2E2FA3696F09B3B25
0494CED9180EA5D87DD5F6073EA4722B3F4F804BAA437053CB0B119163C6DF
2A33F242B8EC76F9848EC491D8569C7FF12EBDF20F16F76C5A3FF6653CB2FD
1B961EF9F502AD5FDCBDB41FB901A79484894F42E7A67D80C93EC0D50B5B65
87508ED90EE169012C4F5679DF258FB92849FAD6ADCDBC57503DBCC32AFE9C
10472083D883C83D8D52D3AF4CAF2D85CB86BAB4203E38DC08CABE3B64751D
8FB609FFD7FDECB8D4152536B6C86E2E7BA29C05CF42EDD147EA7B03595710
5C4F3A412B8B8BC387031FB9B75FEFEDFE26FEEEEC924646D19C6EDADAC567
08862C903249272CCC7AB31EE49EB59EFF00F12CBBF34716974D871DA3958E
037D1CF07FDAC1EE4D5AB9BF82DDC40019A7619114632E47A9ECA3DD881EF5
5FEC9777BCEA0FE5C67FE58C4C40FF0081BF05BE8303B1DD5A51451411AC50
A08D14602A80001EC05664B34BA848D6B66E52143B65997AE475443EBFDE6E
DD07CDF76FAADB58DB851B618221F45503DEA97DBEE2EF8D362DC87FE5B499
58FEAA3EF3FB630A7FBD4ABA5C723093507376E3901F88C1FF006631C7D09C
9F7AD09628E789E19543A480AB03D083C1158C97D259585D25C1324F60A793
D645C6636F72DD0FFB40D69DA402CACA1B62D91046AA58F19DA304D55FED58
E6F974F8DAF0FF00793023FF00BF870A7DF6E4FB51F66D46E79BAB81021FE0
83AFD0C8C327F0553EF55348B2B4D3AE27B18E25578F0C8F8CBB42DD14B1C9
3B082B8EC02FAD6FD4734B1C113CF29DA91A9663E800C9AA7A5C5245648D38
DB34C4CB203D43487711FF0001CED1EC2A2D3BFD1DE7D34F4B721A3FFAE526
4A8FF8090CA07A0153DCE9F14F27DA10982E00C0963E1B1E873C30F66047E3
55C5FCD66766AAA117B4E99F28FF00BC0E4A1FA923FDACF15AD4565EA7169C
22FB45EDBA4ECB85405433963C05527B93D39A34AD3CD8C4CF292F3CBCB92C
CFB476452C49DAB9E3F13819C54936A56F14A6DE2DD7138EB1C43730FF0078
F017FE044545E56A777FEBA416719FE18BE793F176181EE02FD1AAD5B58DA5
A16682301DFEF39259DBEACD963F89AB7591731A47A946D22868AF50C0E080
4165059323D31BC1FC2ABCD0258C661BC4173A69FEF8DE61C7AE73941EBD57
BE472B645A5CDBA87D36E37C78C88E625D08FF0065F9719F7DC3D053D35345
7586F90DA4AC7037F28C7FD971C1CF6070DED5727B6B6BA4F2EEA24993D1D4
30FC8D52FEC8B44C9B5692D8F6F29D9547D1394FFC768F2355873E4DCA5C28
FE19936B1FF81A600FFBE0D62EA1A9DC68D37F68DC59388E4F9661132C8AC4
292ACBF75B200C1CA8F97927E514CD27568F517FED08E17BC9C8E046D16D89
4FF0AAB3AB0CF762013EC3006F0B8D55C663B3441E92CDB4FF00E388E3F5A4
0BACC83264B783DB63CBFAEE4FE547D86F641FBED42504F511AC68BF865598
7FDF551CDA1D9CD190CD2193AA3B4AEE51C7219431201079E9535BC9FDA563
24372A164C345328E81B186C7B1EA3D4106A4D2E679F4DB59A53991E242C7F
DAC73FAD4365FBEBCBCBBEA372C2A7D562193FF8FB30FC2B52AA5FFD8FEC92
7DBF1E463E6DDF5E31DF39E98E73D39AE4B46D5248F53BD4BF5758D3CA8924
9082557E62824C7424B119F518273D7B8AC9BAFF0041BB4D407114B88E7F41
CFC8FF0081383EC72785AD0B8B786EA230DC2EF43F810474208E411D88E456
6ADC4DA69116A0FE6404E12E0F6CF41263807D1BA1EF838CC97189355B388F
48D259BFE0436A0FD1DAB52B26C7FD0EE1F4C6FB801920FF00AE79F997FE00
48C7FB25476356EEACA1BBDACF94923E5245387427D0FF0030720F706A98BC
B8B0F9354C18BB5C28C2FF00DB41FC1F5FBBEE3814FD388967BEB81CABCDB5
4FAAA22A9FC376EAA9696C6EBC3F6F6F19DB2C7120463D165871827D832F3E
D536941EEC7F6B5CF12CA0AAA75F2901E53FDEC8F9FDC63A015B3597A5FEF4
5CDEFF00CFC4CC47FBB1FEED71EC42EEFC69B7AED7937F65C2700806760705
50F4507FBCFF00A0C9E0E2B511163508802AA8C0038000EC2B36D3F7D7F7B7
3D94A40BFF00001B89FCDC83F4A92FEE25409696A717371908719D807DE723
D173F892077AB36D6F15AC096F08C220C0CF24FA927B927927B9AE7B5606D2
1BE84711DD4524B1FF00B33229623FE058DC3DC31AD4D2CF98B7373FF3DA79
3F28CF943F44A59B506791ADB4F417132F0C7388E33FED37AFFB2327D7039A
7DBD804945D5D3FDA2E4670E460283D422F451F993DC9A86EFFD3AE974E5E6
18F124FE87FB91FE2793EC30786A7589F3AEEF6EBA82E2253FECC439FC9CB8
AB9756D1DDDBBDBC9901FB8E0A91C8607B107047BD64E95F68BE93FB42F00F
DCEE862DBF75B070F28F4DE4703B01D706AD69DFBC92EEEFFE7ACCCABEBB62
C478FF00BE958FE3566F6E859DB34DB77BF0A8BD0B3B1C2AFE27BF6EB59FFD
972456D1C903837D1167F30F02477E5D5BFD96E9DF1818FBA2BFFFD0FDE795
A2D3624B3D3E25334B9F2D3B67F89DCF5C0EAC4F24F1C922AD59DA2DA46416
324B21DD2487ABB1EFEDE80761C549717305A4666B8708BD39EE4F4007524F
603935992A5DEAD1BC2EA6D6D24055B700657523D0E4203EF96F65346951A5
934BA6B002443BC39FBD2A1E8EC7A961F758FD0F715B558F3CED7ECF041279
56D11226981C138EA887B63F89BB741CE4AA4576648D6DF45841894604ADF2
C2A07F771CBFFC0783FDE15347A6465D67BE7375329C82FF00714FFB09D063
B1E5BDEAECF736F6A9E65CCAB127ABB051F99AA5FDB1A7B1C43234FEF0A3CA
3F3404520D42E5C7EE6C263E858C683F1CB6E1FF007CD71FAFDFEA5F6DB748
6DA3596365329590C8AB1AB2B80E36A0E0807EF700F380C0D7436E96375288
B536796E8F222B901471FDC41F2363D46E23FBD5D1D1595A9FFA3987521FF2
EC7127FD727C07FC1786FF0080D6AD656A7FBF6834E1CFDA1F2FFF005CA3C3
367D89C29FF7AB56B2EFBF71756B7C3A06F25FFDD94803F270BF404D6A5210
08C1E41AC93653D87CFA5E0C5DEDD8E13FE007F80FB7DDF61D6ACC1A85ACD1
C9216F28C0332AC9F2B47C67E61E9EFD0F5048AC34D4A3B8B86BE286631644
518C05881E0BC8C70AAC4763F305E3192C29C6F6D6EB9BDD451D7FE785AB93
F9B27CEDF86D1EA2AFC37D656F108ACAD660A3A225BBA0E7FDE551FAD2C7AB
4B2CB2429A7DC6F8F1904C4386E87993A549F6AD55BEE58A8FF7E603FF0041
56A5F3759EF6B6FF00F810FF00FC6AB275AB8D592CB26D21693CC8CC6A9333
317560C0006319E9CF238CD74B14B1CF124F11DC9228653EA08C83592C8FA4
3196005EC4F2F1819317AB20EEBEABDBA8F4AD5221B987076CB14ABECCACA7
F420D677D86E2D3E6D324C27FCF190931FFC04F2C9F86547F76A6B7D423964
16D3A1B7B83FF2CDFF008B1D4A11C30FA74EE055F2400493802B26CC1BF9FF
00B4E41FBA00ADBA9FEE9EB27D5BB7A2FF00BC45615D689059DD8F29104333
7EEC3AE63591BF80F75DDFC0EB820FCBC8DAB5A56A26DE60B7B992DAE1065A
0B8FDF2E3A1656243B0F421F03B8078ABDF6EBBB7E2FAD580FEFC19957F150
03FE4A47BD5CB6BBB6BB4325ACAB2A8E09539C1F43E87DAAC5654DFE85A825
D0E22BAC4527A07FF966DF8FDD3EBF2FA54367711D969D77238245AC970481
D71BD9C01FF0123157F4FB77B5B28A194E64032E7D5DBE673F8B12696EAF62
B4DAAC0BCB2642469CBB91E83D07727007735562B5919C5F6A6CA5E3CB2203
98E2E3A8CF56C7563F801CE7334A40264F3973FDA16C656561FF004D0B9523
DBCEC56802FA470E4BD8F663CB43F53DD3DFAAF7F9795D49238AE2268A401E
3914823A8208E7F3AA3A6CB2047B1B862D35A90A58F5743F71FDF23827FBC0
D68B2ABA947019586083C820D72F6E92E9FA8DDCB6F1B4D67108E12A0EE78B
0379D83A95C38F97AFA7402BA58668AE2259A071246E32194E41154F51B792
58566B719B8B76F323ED92382BF4604AFB673DAAD5BDC47750477309CA48A1
8763CFA8EC7D6A638C73593A1C689A55BB46A15650650A06028958BE00F6DD
8A7E9236DA3AFA4F71F979CF8A6DB7FA2EA13D9F449C79F1FD49C4807FC0B0
DF56AB1A8DC3DB58CD345FEB71B63EF991BE541F8B115048EBA5D9C1676CBE
64B858A143DCA8EA4F6000CB1F4F7C0A6E8C36DA32C9CDC2C8E273DDA40796
FA1182A3B2E05694D3476F0C93CA7091A9663E800C9ACEB26161A52CD7A7CB
214CB2E79C3C84BB01FF000224014FB0825CBDF5D2EDB8B8C7CBD7CB41F753
F0CE4FB93DB15A558DAE1B56B26B799F6CAE331000B3975E410A392077ED8C
E78AC7F0E4336A1A1D9B4936CB629CAC4C773B7F1177E08F9B3C2FE24F4AEB
628A28235860411C68301546001EC05417B742D2032EDDEE485440705DDB80
A3EBEBD873D05430226996324D72FB99434B33E3EF3632C7E800C01D80029D
A643241610A4DC4A577C9FF5D1FE67FF00C789A8F5191E431E9D031592E73B
981C14887DF61EFC803DCE7B1AB33490E9F6524AABB62B68C90A380150741F
80A6E9D6ED6B6305BC98DE880391DDF1F31FC4E4D558B37D7E6E3AC1685923
FF006A5E8EDFF011951EFBBDAB5ABFFFD1FDEDB2B47877DCDD10F75363791D
001D1173FC2BFA9C9EA6A27D41E776834C413329C3487FD521EF923EF11FDD
5FA122A4B7D3D22905CDC31B8B9C7FAC7FE1CF5083A28FA727B935A159FA85
BCB2225CDA8FF49B73B93B6EFEF213E8C38F6383DAB98BDF14417D22D8693B
E62CA1A568C365437F0E543153FDE2012BD00CF2B6E0B6BA991049646658F1
B1242B0DBA01D30837B123D5D4FA8C74AD8F2B57973BE78A053DA342EC3E8E
C707FEF8A5FECB5739B9B99E73D3990C63F28B603F88A960D334EB66DF6F6D
1C6FFDE08037E7D6AF566DE5CCC641636447DA1C64B11911274DC47AFF0074
773EC0D52B4B1B737771085DF0C11F92777259E5F9E52DEA586CC9FAD4F651
C77368FA7DFA89DAD9BCB6DE036E030518E7B95209F7CD3FEC97B67CD84BE6
C63FE594E49FFBE64E587FC0B77A0C54B6FA8C32C82DE556B7B83FF2CE4C02
71FDD2090C3FDD271DF1579D124468E40195C1041E841EA2B3F4A77FB2FD9A
53BA5B5630B13D4EDFBA4FBB290DF8D32CFF00D26F6E6F8F2AA7C88FE887E7
23EAF907FDD15AB55AF2D96EED66B563B44AA5723A8C8EA3DC75ACEB6D6EC9
EDE233CAA2E5946F8932EE1C70C362E5B8391D2A6FB7DCCD8FB2D948C0F469
48897F1072E3FEF8ACF9EFB53690DBC4F1F9E3AC50A995973DDA4628ABFF00
025E7B035889A15CF8825927D52F1E4B740523D9B57273CFCC15772023B801
8F6C004EC59D969B632476979630452E711CA106D93D81392ADFEC93F4279A
E980006070052D65C9FB9D5E193A2DCC4D193DB7467720FC8BD6A515936FFE
9D7AD7A7986DF74717A16E8EFF00FB28FA37634ED27F776CF687ADAC8F163D
141CA0FF00BE0AD6A562BAB690ED3C43362E499107FCB227ABA8FEEFF7876E
A3BD6CAB2B286539079047422A2B8B682EA230DC20910F63EBD88F423B11C8
AE6251792BBDBC65EF34C89B127795B19CA03FC6AA71BBB9E572C722BA6B7B
882EA2135BB8743C647623A823A823B83C8A74F045730BDBCEBBE39010C0F7
06B21221704E99A8126783E78A5070ECBD03823A30E8DDBD786C54F15DCD69
225AEA441DE42C73818573D830FE163F91EDCFCA2C5C69F6974E25913128E0
4884A4807A6E5C1C7B67155FCBD52D7FD548B7918FE1930927E0CA369F6054
7B9A64B75677F1B69F75BADA598150920DAD9F543F7588EB952715816975F6
99E6B2BA21245B8135C67850B04718279E81A4008CF55CD7426F6E2F7E5D31
7119FF0096F203B3FE00BC17FAF0BDF27A55AB5B186D4B382649A4FBF239CB
B7D4F61E80600EC2ABEAF97B2368BF7AED961E3AE1CE1C8FA264FE14B70426
AB66E7F8D268C7D4ED6FE486B4EB9D9263A35E25BC2AD259C88D2320193005
2A32A3A953BBEEF6C1C71C55ABD7485A1D62160D1A0DB210720C2FFC59FF00
64E1B3FDDDDEB5B1597A47CF6AD744737323CB9F5566C21FFBE02D135A4D6D
235DE9B80CE77490938490F723FBAFEFD0F7EC45AB5BB86ED0B47956438746
18646F461FE41EA3239AA707FA15FBDA1E21BADD2C5ECFD645FC7EF0FF0081
7A54BAB3BA69B71E51C48EBE5A7FBF27CABFA9157A344891628C6D5400003B
01D2B3B4DCAC97D17F72E1BFF1E457FF00D9A8D57F750A6A0BD6CDBCC3FF00
5CFA483FEF924E3D40A8353B8856E2D9256C4516EB893BE427CA8303A92EC0
AFA95E2ACD9413348D7F78313CA30ABD7CA8FA85FA9EAC4753C7200A637FA2
EA8AC3FD5DEAED3ED2C6320FFC093393FEC8A5D57F7B14363FF3F722A11EA8
3E7707EAAA47E34C5FF8995DF99D6D6D5BE5F49255EA7E88781FED73FC233A
3717305AC666B99046838CB1C73E83DFDAB3FCEBFBDE2D90DA427FE5A48BFB
C23FD943D3EAFF00F7C9A82FAD21B2D32EDADC16B89A329E631DD233BFCAB9
63EE780381D80AA3A228D38AC038B7B89268D476592176503E8C8BF9AFA9AE
AEB26DBFD3EE8DF9E60872907A31E8D27E3F757DB2470D4ED5BF79047663AD
D4AB19F75FBCE0FD515855F9E78ADA17B899B6C7182CC7D00AA7A7C1280F7B
74BB67B9C12BFDC41F713F0079FF00689ED4CD53F78B6F67FF003F33229CFF
00753F78C0FB10A47E34FD46795112D6D4E2E2E4ED438CEC1FC4F8FF00647E
6703BD5BB7822B5812DE11B5230140F6155AEAF842EB6D0279D72E32B1838C
0FEF31FE15F7EFD00278AFFFD2FDE5FB35D6A1CDFE6183B40A7961FF004D18
7FE82BC7A961C55A9AEEC34F448A59238063089900903B2AF53F402A0FED09
E6E2CAD24933D1A41E4A7E3BBE7FC90D53BA9EFA32A97172B13C9CA436C9E6
4A71E8CF918F525001DC8AA32E8B1CF1BDE6B8CEF0C40C8616919C70324BFF
000E7D9028EC770AD0D3F44D3C69B6B15D59C2D22C481B746A4EEC73DBD6AD
FF00645981888CB081D0473488A3FE021B1FA551B84BE8AE22B4B2BE91E66C
3159151912307966C2AB73D07CD927D8122F7FC4E63CFF00C7BDC7FDF70E3F
F4667F4A4FB7DCC78FB4D8CABEAD1959147D003BCFFDF35149AC4321FB3590
2F76FF007637468C81FDF60C010A3B9FC072455CB5B64B2858BBEF7625E591
B82CD8E49F4007007603150E90A4D8A5C30C3DD1331F5FDE1DC01FF75485FC
2927FF0046D4A0B8FE0B91E43FFBCB968CFF00E843DC915A950DC5B4175118
6E631221ECC33CF63EC476359FE55FD8F36CC6EE01FF002CDCFEF17FDD73F7
BE8DCFFB5DAB266D56286EA67B43FBDBA8C288DC152B3A90AA194E08DC187F
C0573D2B46DAFAC6D608ECAC4B5E18404FDD0DFC8EBB9F8404F53922A7DDAB
DC7DD58ECD4FF7B32BFE2015507FE04D47F65452737934B75ECED84FA144DA
A47D41A91E5B0D2A258511620D9D9146BF331EFB51464FBFA77A87C9BFBEE6
E58DA407FE59A37EF187FB4E3EEFD139FF006BB542D147331D22C14436F1FF
00AF64F97AF3B148FE26EAC7A807D4823691123458E3015540000E0003A014
C9A186E62682741246E30548C83599E6CFA51C5CB19ACFB4A7978BD9CF75FF
006BA8FE2EED5AE082010720D66EA9F22DB5CE7986E23FFC887CA3FA3935A7
599A84D23B269F6CC5669C1CB0EB1C63EF3FD7B2FB9CF406AFC31470449042
A1238C05503A003802B15AED2C355B98DD24659D23947971B3FCDCA367683D
956AD8D5AD3AEC9C0F7B7987F34A41AD691D1AF2243E8EC10FE4D8355619E0
D3D879122C9A7CA70A548221663C0E3F818F4FEE9E3A1F967926935276B6B4
6296EA4ACB329C1247548CFAF666EDD07CDCAE9C51470C6B0C2A111000AA38
000E80552B8B0DD29BBB37FB3DC9C6580CAB81D03AF1B87BF04763DA96DAFB
CC93ECB749E45C804EC272180EAC8DC6E1FA8EE053AFAD5AE23578084B884E
F898F40DD307FD92383EDD39C52C12C1A95A1F323055F29246E33861C32B0F
63F81EDC553F325D24EDB8632591E9231CB45ECE7BAFFB5D47F171C8D9A8E6
861B88CC33A2C91B75560083F506BCFECEC624D66F35286DFCFB5022223259
DB6A974F314124120A12A3FBB8DB83C1F408A58A789668583A38CA91D08352
565BFF00A46AD1C7D56D23321FF7E4CAAFE4A1F3F514B7E3FD2F4E3E93B7FE
8992B4EB2ECFF7D7F7975D94A40BEE231B89FF00BE9C83F4A86580E9FBDE18
FCDB2933E6C2064A6EEAC83B83FC4BF88E721AA457AD1691710C32799340A2
385C1CEF12710B67BE72013DC835D0410C76D0476F10C244A1147B28C0A96A
8DD5889DC5C42E60B94185900CF1FDD61FC4BEC7F020F359F3CD2DD47F6499
45BEA119F321C9F91D939CA3770470C3A804E460825F2DC47A80D3D63076CD
279ACA7AA88816E7D0AC9B411EBC56DD66D88C5D6A3EF3AFFE898EB45B6ED3
BF1B71CE7A62B90D0B4F9A799AFAECEFB788AC7683FBD147909237A9E4EDFA
E7D31D8552D42D9EEAD1E388812AE1E327A0910EE5CFB6473ED5CA5C6B10DF
DFA88E5FB3A242AAEE4E1A332FCCE8075F330AAAA0723E63DB077E27BC9625
834E805A40802ABCABCED1C0DB1E41FF00BE8AE3D0D5AB7D3A0864170E5A7B
81FF002D643B9867FBBD028F65001ABF597A97CEF676B9C79D3A93F488197F
9A01F8D5682DC5D5BDF5893B0C770E51875566C4AADF83366986F24D4E34D3
D331CAC0FDA769FF0054AA76B007D5C8214FA6587415BC8891A2C71A855500
0038000E805669FDFEB007F0DA459FF81CA7F9855FC9AAA5C5D25DEAB05930
3F6789892DFC2F3A80CB1FFC047CDF5039C822B7EB25A446D55E59182C7650
724F406539393DB6AA0FC1A9DA7C6F33BEA73A9579C011A91CA443EE8F62DF
79BF007EE8A496F26BA91AD74C232A7124C46510F703FBCDEDD077F436ED6C
E1B342B1E599CE5DD8E5DDBD58F7FE43A0C0E2BFFFD3FDE8FB05CCDCDEDE3B
0FEE43FB95FCC12FFF008FE2AC436B61A7A3C9146902E32EF80320752CDDFE
A4D5417773A881FD9DFBAB76FF0096EC39607FE79A9EBECCDC7A061576D6CA
0B40DE5025DF05DD8EE7723BB31E4FB761DB02AB6B196D3DE01FF2F0C909FA
4AC11BF2049AD3AA979762D21DFB7CC91C858D0705DCF403F993D864F414DB
2B536E8D24CC1EE263BA471D09EC07A2A8E00FEA49AB8CCA8A5DC85551924F
000158177AA4B245BEC415898ED5948CB48C7A2C2A7EF13FDE3F28EBC8CE2C
691A52E9E924F31F32EEE08695C92C78E8A09E481FE40E824D5F2F69F635FB
D78C21E3AED6FBE47B840C7F0AD4AA5A8DBBDD594B0C4712E03464F41221DC
84FD180A96D2E12EED62BA8F859915C03D4646706A3B9BFB4B4609349FBC6E
55141676FA2AE58FE02AB79DAA5D7FC7BC2B6A87F8A6F99BF08D4E3F3607DA
B2B54D1ED4247A9DF13792DB3A92D2805446480E36001701493D33C75AEA55
55142A8000180074028660A0B31C01C927B564FDB2E2FF00E5D300588F5B87
1953FF005CD7F8BEBC2FA6EE956ED6C60B52D22E5E57FBF239CBB7D4FA7A01
803B01515EDC4BBD6C6CCE2E2519DD8C88D3A173FC94773EC0E2B41A7DFD8C
220B3BA5745C9FDF47B98927272C8CBC93C92549CD4DF6AD4A2CF9F65E60EC
609031FC43F97FA66946B160A717121B63FF004D95A21F4058007F026B4815
750CA41046411D08AC731C9A4B192DD4BD91E5A3032D17FB483BAFAAF6FE1F
4A7EACF1CBA2DD4F1B07510B488CA720951B94823DC03576EAEA3B4B76B893
240C001792C4F0140EE49E0543636D244AF717241B99C82F8E4281F7507B2F
EA727BD5FACC9405D62D9BA6E8665FA9DD191FA66B4E8AE6F54D3B4FD427FE
CF16D134920DD349B14B24678EB8C867E40F4E4F6AE6B49B7D5B4E8ADE382E
E5922963531A121B951F3A2EFE32841F972B91D1B822BACB6D46F648FCC112
5E203B58C47CB915BB868A423691DC6FCFB55FB7D46CEE64F251F6CD8CF96E
0A498F5DAD838F7E9535D5AC1791F953AE403B948386561D0A91C823D45528
EEA6B3956D7513B95C811CF8C0627A2B81C2B7E8DDB078A4B8FF0040BC17A3
882E0AA4DE8ADD11FF0092B7E07A035AA402307906B1B9D1CE473607F383FF
00B5FF00E83FEEFDDB1A94CFE525A5B3626BB3B148EAABD59FFE02BD3DF03B
D450C71DB6A82DE15D91FD991540E8046C401F86EA2546D3657BB814B5B39D
D346064A93D6451FFA101D7A8E721B516447412A30646190C0E4107BE7D2B3
B49CC96EF7CDD6F1CCA3FDC2004FFC700CFBE697523B5EC9FF00BB70BFF8F2
B2FF005ABB713C76D0497329C244A5DBE8A326ABE990496F63124C312B02F2
7FD7473B9FFF001E26AF579DEB722E9DAB4177611B4D0F9AA9711024466539
74C6031DCADF31001EBD32C73D647A85F3C6B2AD989A37008686556041F4DF
B2A5FB7DD7FD03A7FF00BEA1FF00E3947DBEEBFE81D71FF7D43FFC72ABCED7
57D19824D34ED273FBD9557047420A17208EC4722B074C5BED3753BB975106
5B78B80E877F9465C33EFF009549CE15890BC6727A935DBA4892A2C91B0746
19041C820F706B3ACCE2FEFD3FDB46FCE351FD2A1909D5A56817FE3CA22448
7FE7AB0EA83FD907EF7A9F97FBD5B359AFAADA07315B93752A9C14846FC1F4
63F757FE0445336EAB75F7996CA33D97124BF991B14FE0DF5AE5749D2FEC77
09A8453189B532D2248C15FE6625951F233864C1E0AF208CF205757E7EA907
135BADCA8FE285B6B1FF008039007FDF6681AC5829C5C39B63E93298867D01
6014FE04D692B2BA8742194F208E41ACE6FDEEB0A3B5B4049FACCC029FC023
7E74B638177A88EE6656FC0C518FE951C8A2CB511720622BCDB1C87D241C23
1FF787CA7DF6815AD5CE417320B5335B60DCEA72B3C591C04C055723D1630A
4FA9E3A9AD33A6C06C3EC0A59540C87CFCE1C1DDBF3FDEDDF367D69D6172F7
11159C05B884EC954740C3B8CF620823D8FAD73D0CD15E24B24EE12D5DCDC5
C3B1C2953810A7E2815987A601FBD5AF8BAD53EF87B6B4F4E565947BF745F6
FBC7BEDE875638E386358A2508883015460003B0029F5FFFD4FDEEBABF8EDD
C408A66B86195893EF63D4F655F73F873C54296125C3ACFA9B09594E5625FF
005487B75FBCC3FBC7EA00A6DAFF00A0DE3E9E788A5CCB0FB73F3A7E04EE1E
C70385AD6ACBBDC4B7F616FD4ABBCC7D36A215FF00D09D6B46491228DA5958
22202CC4F0001C926B36CA37BA9BFB4EE54A920AC287AA467B91FDE6EA7D06
075CE6D5D5EC369B55B2F2C99D91A0CBB91E83D07727007722A8496ED2A1BC
D69D5628C6EF241CC4A073973FC647BF03B0CF352D9C525CCC352BB428C411
0C6DD6343DC8FEFB77F41C7A93AB5967FD235703AAD9C79FF81CA703F15553
F8356A5674BA9C024682D95AEA65E0A4583B4FA331C2AFD09CFA0AA569A76A
1E5B477371E4C4CEEE2387AE1D8B1064201C73C6D0A47AD6ADB59DAD9A95B6
8C26EE588FBCC7D58F527DCD59A86E604BAB796DA4FBB32321FA30C1ACCB7D
550585AC93664B99D07EED065D9C0F9801D803C127007734F1632DE112EAA4
328E5605E631E858F1BCFD460761919AD6AA77B762D63508BE64D29DB1A038
DCDF5EC07527B0FCA92CAD3ECA8CD237993CA7748F8C6E6F61D80E80761EF9
35768A8669EDE15FF48916307FBC401FAD603B786158B437705AB9EA619844
49F521480DF88349FDA890730EAD6B74BFDD99D118FF00C0D381FF007C7E35
8379AFE9D6B1CF0EF5486E95D5E357591559C1CBA1427033F795B6E7A819C8
6D5D3756D3AFFC9BEBABB8916250228DA45CEEC61A4233D4F2147619F5C0DB
FEDAD33B4E1BE809FE428FEDAD33BCD8FAAB0FE62A9CD7F6373A8E9CB6D3A4
8FE6382AAC0B60C4C7A75EA0574154AF6EFECCAB1C4BE65C4C76C699C64F72
4F651D49FEA402B65682D22219BCC9643BE473C1673D4E3B0EC07618159F69
691DD69AF6EE4AE279CA30EA8CB33ED23DC7FF00AE9228CDE969377D9752B7
F91D90707B8CA9FBC8DD46791C8041CD4C2486F08D3F568104DF782B0DC8F8
FE28C9EB8EE3A8FA60977D8AF2D79B0B82CA3FE594E4BAFE0FF7C7E2587B53
5AFADDC1B4D561FB3997E5C498689F3C603FDD39EC0E1BDAA27FF4253677FF
00BEB19BE4577E4A6EE36487B83D031FA373826D69D2C815EC6E18B4D6A429
63D5D0FDC7FC4707FDA06B418AAA96720281924F4C561E8D68837DF2E44727
16E8DFF2CE1EA00EE371F9B1D86D1DB02CBFFC86E2FF00AF793FF434AD5AE5
3535FECF51648E12CEFDF611FF003C431FDE118E8AC33CF45623B1E3AA0001
81C01597AAFDCB6FFAF88BFF0042A5D4BF7ED6F6039F3E40CFDFF771FCCD9F
6270A7FDEAD4ACBB9B896798D858B6D718F364EA2207B0EC5C8E83B0E4F60D
4F56B0B61A645688B8884D12F079C4AE118E7AE487249EB9E6A2B3375043F6
B817CC60CCB750AE066453869231D8B7DEDBFC4083D7AEFC13C37512CF0307
47E847F9E08EE3B54D4565E91FBCB53787ADDBB4D9F556E13FF1C0A287B092
0769F4C71133125A26FF0054E7E83EE93FDE5FA906B943ABCB73AD5DE951C1
224AE10CAA8C9BF0ABCAA316039F5CE40EC0F4EA234D50C6B1431C36512280
A3994803A0DA362AE3EAC29FFD950CBCDEC925DFB48DF27D0A28543F8826B4
91122411C6A111460003000F615435691E3D3E6111C492011A1F47908453F9
91534B6504D69F62C6D8B6855DBC15DBF74A9EC570083D8D47617324A8F6F7
381736E42C98E037A381E8C39F6391D8D5F20118359ADA469A58C890085CF5
6889898FD5908355F4781637BC99599D5E6288CEC5DB6C402E3279C070D8CF
AD4D6FF2EAF78BFDE8A07FCCC83FF65ABB736F1DDC0F6F2FDD9060E3A8F707
B11D41EC6B06F35268F479D6E6411DCA1FB3BB0E30CDC6F03D369DE07A7157
F4DB5651F6C993CB79142A27FCF2887DD4FAF76F7E390056B571FE28BB6D3E
379EC4EEBC9E330989725995B211B03A1563C13C72475C543A1DB4915AC134
F652DC1003A6C687CA527F897F79C9FF0068F41C2851C57446E75463FBBB25
51FF004D260BFF00A0ABD297D65C60456F11F5F31E4FD3627F3A3C8D5D861E
EE25CF7484823F16761FA57FFFD5FDF3B5B382CD0A423963966272CC7D598F
24FF009E9566A8EA16F25C41BA0C09E1224889E9BD7B1F661953EC4D4F6B71
1DDDBC7731676C83383D41EE0FA107823B1AA51FEF75799F395B789107B339
2CE3F20951C9FF00133BA300E6D2D98173DA4947217E8BD5BDF03B30A925BD
96791AD74D01DD0E1E56E638CF71C63737FB23A77238CD8B5B18AD77382649
A4FBF23F2EDFE00760300761593335E6A77092DA2472D9DBB70AEC504B229F
BD90AD9543D38E5B9EC09BDFDA3347FF001F5653460705900957F0084BFF00
E3B5341A9D85C3F9514EBE6F74276B8FAA9C30FCAB9DB5F1069D0C72482559
27BB91A5C17555553854DCC781F205C8196F6A9FED2978375E492CE87A456F
14BE51FAB81F3FE2429EEB5A51DCCF146B0DA6992468A30A0989100FA06247
E54F326B2DC2C16E9EE6576FD362FF003A530EB0DFF2F50A8F681B3F9993FA
51F62BC61F3EA1286FF612203F228C7F5AC5D51A5B449122BCB8B8B855DC46
E550A0F00B6C55E58F0AA3963E832464693A56A3A6FDA24373348E926DB831
ED67DC407CA8656DCBF3FDDC67A9192715D5C31DDCD124F63A8F9C8E320C91
A383FF007C797531FED98FA7D9EE3FEFB87FF8E561E7C4697D2DC4966858FC
A8E8C25558FF00BA159A2209EA4F393EC00163EDA4FCF7BA8CB69F5B710A67
FDE955C7FE3D57A0B2B2BA5F3A3BB9AE01FE25B8703F28D82D4BFD8BA49399
2D6394FAC83CC3F9B66A78F4CD3A1398AD6243FECA28FE42AE2AAA8C28007B
54734D15BC4D3CEE1234192C78005660865D50892ED0C76839585860BFA348
3D3D13FEFAE780981A44B91C58CCDF842EC7FF004063FF007C9F63F2ECD159
77DCDF69CBE92BB7E5138FEB56AEEED2D1012A6491CED8E35FBCEDE83F993D
00E4F150D9DA3C4CD7574C1EEA518623EEAAF644CF61EBD49E4F60342B334B
FF005538EC279B1FF7D9A4D411E075D4E052CF08C48A3ABC5D48C772BF797F
11FC46AD4D05AEA16EA1F1246D865653D3B86561C83E845548AE66B3996D35
06DCAE7114F8C073D95F1C07FD1BB60F15A6E892234722865618208C820F62
2B25F4D920465D3D8794C086B7972D1107A81D4A7A606571FC35CDBEA4347B
EB7FB5068514F97893A88DB195DDC870A70CAD9240CAB6188CF49707FB4AE1
AC13FE3DE123CF3D98F5117F57F6E3B9C6C5659E75A53FDCB73FF8F38FF0AD
4AC8B654BFB9B8BC9007870D6F183C82A0FEF0FF00C09863E8A0F7A5B577B1
9D74D989689B3F6773C920726327FBCA3907BAFB8269DA98DC6CD3D6E13F4C
B7F4A4B4FF0049BFB9BC3CA45FB88FFE03CC847D5BE53FEED135D4B752B596
9E7050E259BA88FD97B17F6E8BD4F606F5B5B436910860185193C9C924F249
279249E493D6A9EB07669EF2FF00CF268E4FFBE1D5BFA520FF0045D54AF48E
F5770FFAEB18C1FC5931F829A27B59ADE56BDD3C65DB9922CE164F71D83FA1
E87A1EC45BB5BB86F22F3613C038604619587556079047A556D59D858BC319
DB25C110A91D4190EDC8FF007412DF8568222468B1C602AA80001D001D0552
BFB99225482D806B99F223079031D5CFFB2BDFD4E07522B98BAD36D2D2FDA6
75F3228208BCDDDCB3233C864933FDE56C3961CF071D6BA0F2F50B2FF50DF6
C847F039C4AA3FD973C37D1B07D5AACDB5FDB5D318918A4CA32D1B8DAE3DF6
9E71EE383D8D5DACBBCFDF5FD95AF652F3B03DC463681FF7D3823E95A95997
F14913A6A36CA5A58461D475923EEBF51D57DF8E326AFC52C73C49342C1D24
01948E841E41A6DC4E96D6F2DCC9F7225676FA28C9AAFA6C0F6D6104528C4A
14193FEBA372E7F1626A38B8D62E7DE083F4697FC6B4AB9B7B18355D616F48
3E4D91C75F9659933838F48F730CF7638FE1AE8D98282CC7007249ED593F6B
B8D43E5D37F770F7B8619047FD3353F7BFDE3F2FA6EE950B59C305E595AC23
24B3CF2331DCCFB1766589E49DCEB8F4C7153CB6D3594AD75A7AEF4725A583
380C4F564CF01BD4746EF83CD5FB6B986EE21340DB97A1EC411D4107904770
79153D21200249C015FFD6FDE8F2F56B7FF552A5DA8ED28F2DFF00EFB4057F
0D83EB47F6AC31717F1BD99F5907C9FF007F14951F8907DAB49595D43A10CA
C3208E41159907FA1EA125A9E22BACCD1FB38FF58BF8E430F5258D660BB648
AE0C522C535E4D2B1738DB145111119093C70AA319EA48ED9C5AB785EEE148
2DC35AD820C0EAB2CA3EBD541EE7EF375E3A9DA8A28A08D61850471A0C0551
8007B0ACEBB91EEE6FECDB762A300CEE382A87A283FDE6FCC0E782573A6889
122C71A8544000038000E805437375059C7E65C36D04E00032CCC7A0503924
FA0AE275CFB76BA3FB3D87D9E03222328019F7311805B90182FCEC17A28E4F
CDC74B1E85636CC5F4EDD64CDD7C9385FF00BE1814FF00C76A5C6AF6FF0075
A2BB51FDECC4FF00891B949FC145451EB9665A44B90F6A626DAC641F2038CE
0C8B941F42D9AD7474910491B065619041C820FA1A7566DD5DCAD2FD86C706
E08CB31E56253FC4DEA4FF000AF7F619354D2D62FB6476316592DF13CCCDCB
492B709B8F73C16F6C2E30302ADDB65354BD8BF85D6297F160C87F48C524F6
72C32B5E69D85958E648CF092FD7FBADE8DF81078C5AB5BB8AED0B265590ED
746E191BD187F904723239AB54573B7F676BA8DD35B410A2CAB8F3AE0280F1
8EA155873BC8FF00BE4727A806F7F674B1736779347E8AE7CD5CFBEFCBFE4C
28F375683FD6431DD28EF11F2DCFD11C91FF008FD324D6EC2DD0B5E17B665F
E1950A927D14F463ECA4D2C36D35E4A979A82ED0877450E7213D19B1C17FD1
7B7A9D6A6BA2488D1C8A191C1041E4107A8359966EF693FF00664EC5860B40
E792C83AA93DD93F5183C9CD6AD60EA37896DAADA2ED32C8629B646BF799C9
403E9C6724F0067357AD2CDD1CDDDDB092E9C6091F7517FB899EDEA7AB1E4F
603428ACDD24EEB576F59EE3FF00473D69564D97FA15D49A69FF0056C0CB07
B2E7E74FF8093C7B10074AD29A18AE22682740F1B8C153C822B321965D3E54
B3BB62F0C876C32B75CF6473EBFDD6FE2E87E6FBDAF585AA4716AEB268CB1A
CA1B899D80658811DB3FC78FBBE9D4F6064D380D35974793EEA82617FEFAE7
241FF6C679FEF7DEF5C6CD664473AC5C8FEEC107EAD2FF00853B519A458D2D
2D9B6CF7276291D507F13FFC0474F7C0EF5761863B78520846D8E350AA3D00
18151DDDAC77903412E4038208E195872181EC41E4572FA96AB25AC76CB73B
45DDBCFB4E78472F148237F6563D7FBB8233C66AFDA472DC5B476968CD159A
28066FBB24C7B95F40C792FD4FF0F66ADC8618ADE25820411C68301470054B
597ADFFC81AFBDA090FE4A69DAAA3FD90DC440B4B6AC26503A9D9F7947FBCB
95FC6AFC6E92A2CB1B064700823A107A1AA37364E64FB659308AE40C127EE4
807F0B81FA1EA3E990694370DA86A51C7244D0B58A97911BB492655307A30D
BBF91EA3A1E06C5C5C456B0BDC4C708839EE4FA003B927803B9AA9636F2EE7
BEBB18B8980F9739F2D07441F4EA4F73ED8C472A83AC4208CAC96F3020F43B
5E3FFE28D2E98C615934D90E5AD080A4F5689BFD59FC002A7D4A93572E6D2D
AED425CC61F69CA9EEA7D548E41F71CD52FB36A36BFF001E938B88FF00E79C
F9C8FA48013FF7D2B1F7ACEB4D521FB6DD5D5FAB5AFDD854B8CC6047924F98
32A32CC4724741DF8AE911D2441246C195B9041C823EB4EAC84FF896DDF947
8B5BA6250F6495B92BF47EA3FDAC8EE053F55FDE450D9F5FB54A8841E8547C
EE0FD5148FC6B52B2CF1ADA8FEFDB9FF00C75C7F8D2DF4D2C8EBA75A36D9A5
19771FF2CA3E85BEA7A2FBF3D01A1EE6D74E48EC6D90BC8AA02431F2DB4719
393C0FF69881EF9A60B196F08935521C0E440BCC43D376705CFD463D0679AD
6ACB87F7DAB5CCB8CAC11A440FA3365DC7E20A56A5675C593F9A6F2C584570
461B3F72403A0703F461C8F719064B4BE4B92D0BA986E231F3C4DD47B8F553
D88FE79022D5D9869B3A21C3CC3CA53E8D29D8BFA9AFFFD7FDF6B79E2BA823
B981B7472A8653EA08C8A9AB31B49B50C64B5DD6921392D09DA09F52BCA31F
AA9AC4D72EAFB4CB45B8B831DC340C2488A7C9292A391B0E43657218823009
3B78ACED1208EDA28E6D799D66508023452089360F977395DAC475EB804923
9E6BB5B7BDB2BB245ADC47315EBB1C363F2351DF5D35BA2C7000F7131DB129
E84F727FD951C9FC87240A92CED56D21F2C31776259DCF5773D58FF9E07038
1505C5F3095AD2C504F703A8CE123CF776EDEC0727D31C8A1242F0CEB1C727
9FA94E0FEF58710C7FC4CABC851D80EAC71927048962B78935082CE11FBBB2
8CCA72724C9292AAC4F7246FCFB9CD6DD665DDC4B2CDFD9D64DB65233249D7
CA43DFFDE3FC23F13C0C1BB6F6F15AC2B6F02ED441C0EBF524F724F24F7354
DF4AB4DE65B60D6B21392D09D993EACBF75BFE040D62C7AADFCD7A74BD3E44
BDF972D71B4AAC23A65B195918F60B8E41CE3071BA896BA4D9C921276461A4
91DB96638C9627B93FFD61C6051A6C12456FE65C0C4F3B19641D70CDFC3FF0
1002FE15164C7AD63FE7BDBFFE8A7FFED95A959F7766F238BBB4611DD20C02
7EEBAFF71F1D47A1EA0F23B83259DE25DA302A639633B648DBEF237F507A83
D08A86F2E26320B1B23FE90E325B191127F78FB9E8A3B9F606ADDB5B45690A
C108F9464E49C924F2493DC93C9353D2160A32C703DEA94BA869A80A4F7308
078219D467F3358C5F408BE6B1D462B33E914C813FEFD9253F1033EF47FC24
115AFF00C7C5CDB5D20FE3865557FC6366FE4C49EC2B62C353D3F538CC9613
ACC07500F23EA3A8FC453EFAD4DD41B636F2E68C878DFF00BAE3A1FA7623B8
2452D95D0BCB759B6EC719574CE4ABA9C32FE07BF7EB59C2CED750D4EEE6B9
85251088E15DC012A402EC41ED90EBD3D2AC0D1EC94FC9E6A7B2CF2A8FC830
14BFD9F327FA9BE9D07653B1C7E6EA5BF5A4DBACC5C8920B9F62AD11FF00BE
817FFD06AAD8CF3E9D6915B5E5A480C60069231E6AB377202E5F9393CAD6A5
B5F59DDE45B4CB232FDE507E65FAAF51F8D41A943249009EDD774F6CDE6463
FBC40C15FF0081292BED9CD5C8668EE218EE213BA3954329F50C322997496D
25B48977B7C92A77EE3818F73DBEB58968DA9DDC6D6D1C856D94E16E48FDE4
89DB6A91D7B173C1EA073C6EDBDBC36B12C102EC45EDD793D49279249E493C
9351DE5AADE43E593B1D486471D51C7461FE791907826996374D731B24C025
C42764AA3A06EB91FEC91C8F6EBCE4556B678D6F352BA9582AC4C8849E0054
8C3E49FF00819A75823CEEFA9CEA55E6188D5872910E83D8B7DE6FC01FBB5A
9542E35086193ECF129B8B8EBE547CB0CF763C051EEC467B64F15CB6B7A3DC
EA7736125E48A93F98FE5AA0CA2610B609E19B240C9E3D80EFB36893DCAB46
6FAE209A2C07888898AFA1C98FE653D9BBFD4102D7D86FBFE8232FFDF117FF
00114E16177DF519CFFC061FFE3759DAB69910D2AF6479A79184121E66703E
E9FE15217F4AE92B2F4AFDD432589FF9747318FF0073864FC9481F506B5090
064F00565E95FBCB77BF6E0DE31979FEE6004FA7C8013EF9A8E01FDA73ADEB
8FF4588E6007F8DBFE7A9F6FEE7B7CDDC6362B36721756B463FC514CBF8928
7FF65A66A3FE8D245AA2F4832B2FBC2DF78FFC0480DF40477AD5A82EAE12D2
DA5BA93EEC2ACE71D70A3350E9D6EF6B651432F32E3748477918EE73F8B126
A27D26C59CC9121B791B24B42C63249EE76E037FC081A6FD9F5487FD45D2CE
3D2641B8FF00C093681FF7C9A8AE24BB9617B6BED3CC88E304C322B01FF7D7
96D91DB03E9583A6EBB6D7779BEEE5C258AB47E6B295576723E6271B5582AE
0FB938E2BAC82FEC6E8E2DAE6394FF00B0EADFC8D62EB1A8C1A56A105D4C46
5A0991149C6E7DF1E067F1E7D0734EB282FE5462A4DBF9C774B332FEF5CFFB
0873B140E1776480395CF35B56D696F6885205C6E3962492CC7D598F24FB9A
B34565E91F3DAB5D91CDD48F2E7D549C21FF00BE02D6A53599506E72140EE7
8AC5BDBBD126DA26BD8A3963394759144887DB9FCC720F4208AC57D7167BCB
6D32657B96471333C51BE1D101DA4AE383BF6FAAFBF61FFFD0FDE7B5FF0043
BD96C4F11CB99E2F6C9FDE2FE0C437FC0B03A56AD65C97D2CF235BE98A2474
3B5E46FF0055191D471F7987F747E2477A379611450A23334D73772471B48F
F799376E7518E157606E071F8F35D1551BEB7D39E269F5086378E205899143
600EBD41AA5A558A5BABDF488616947CA8C4E218FB28C92013D5B1C678EC29
FE7DC6A795B2630DAF79FF0089FF00EB9E7B7FB67FE039FBC2791ADF4AB409
6F167276C71AFDE776ED93D49EA49F727BD3EC6D5ADD5A59C87B998EE91C74
27B28F455E807E3D49350E95FBD8E6BE3FF2F5233AFF00B8BF2263D8AA86FC
6A5BDBA921D96F6CA1EE66C8407A003ABB7FB2BFA9C0EA6A5B4B54B387CB52
599896773F79D8F563EE7F41C0E314DBABE86D4AC67324CFF76341976F7C76
1EA4E00EE6B12F16EEE996DAE76B4B28CADBA926345EEF33705C0FEEF009E3
07EF0DCB2B38AC61F262E4939663D59BD4E3F203A018030001556F3FD2AF20
B01F71089E5FA29F907E2C33F4522B56B3651FF138B53FF4C27FFD0A2AD2AA
D737B696601BA9563DDF7413CB1F403A93EC2B96D735496DA21AA58DA48268
BE5579079624519664287E72000586546319CE320D7D327D685BBC92A6D677
26778E312B871C1072E0E47400464018C64735AF1BDADC4A2197549B79FF00
964FB6073FF01088F57CE8F62C7320924F692691C7E4CC453BFB1B47CE7EC3
067D7CA5FF000AB915B5B41FEA6248FF00DD503F954D5952DDCD7323DA69A4
6E438926232919F403F89FDBA0EFD8151A369FB0078CBC99C99492252DDCEF
18607E840C7038E29B8D4ACBEE9FB7423B1C2CC3F1E15BF1DA7DC9AA91DFDA
457C6E63936C373F2CA181531CAAB952CA705772820E7D171D6AF6960A582D
C4DF234E5A66CF18F30EE00FFBA085FC294EB1A66ED91DC2CCFF00DD8BF7AD
F9264D20D4C39C5BDADC4BFF006CCC7FFA376521BEBD3C269D28FF0079E21F
C9CD28B8D50F4B341FEF4DFE0A6AADD47737407DAB4D8A52BF748946E5CFF7
495041F706B32E2F751D293CD11C8B1E701279227527D15CBABE4FBEEFA550
D33C477004B651E9F344FE63B287562A8A70CC3080B36D66E0051C11922B65
66D38BACFAACEF23A9CAF9D13C31291DD5580191EA4923D6B622D534C9DB6C
3770C84F659149FD0D5EEBC8A2B2B5056B6917558812621B6551FC51753C77
29F787E2075AE76D2FEC2F4B99EE238ED5A792462EE079ECAE4205CF550AAA
4E3A9C0FEF0AE8FF00B4CCBC595B4B393DCAF9483F17C647BA8349F65BFBAF
F8FC9FC98CFF00CB380907E8643863FF00010B57ADEDADED23F2ADA358D3AE
146327D4FA93DCD51BCE751D3C7A348DF9211FD6AC5DD9FDA0ACD0BF937116
7648067AF5561DD4F71F88C100D36D2F4CCED6D709E4DD4632C99C823FBCA7
BA9F5EDD0E0D5FACCD6BFE40F7FF00F5C25FFD00D69D65C9FE8FAB452FF0DD
A188FF00BF1E5D3FF1D2F9FA0A355264852C10FCD78DE59F64C6643EDF2820
1F522A2947F69C8D671716711DB291FF002D08FF009663FD91FC7FF7CFF7B1
B3C01E805659D4D662534D8CDDB7F794E221F59391F82EE23D2B12537C3C47
A7ADCCFBF6AC859106D8D4C88DB31D493F236493E9802BAE20302AC320F041
ACBD30983CCD324396B5C6C27F8A26CEC3F860A9F75CF7A5D43F7F35AD80FF
00968FE63FFB9090DFAB6D07D89AD4A42428249C01DEB2FF00B4C4E76E9911
BB3FDF076C23FE07CE7FE021BDE8FECE92EBE6D525F3C7FCF251B61FC4756F
F81123D851A3A86B56BA518174E64503A6CE163C0EDF22AD5CB8B4B3B95FF4
B863940FEFA8603F3AE16E34782EEEECF53B489205919D2DD14796A542160C
DB7046F0A791D015EF907A7B3B3B1BA8BCC8DAE119495746B89B7230EAA46F
FF00EB11C8E083564E971FF05C5C27FDB673FF00A1134DFECB3FF3F971FF00
7D8FF0AA5A959341632BC7757065202479908FDE39DA9D31FC4455C8F45B28
62486369C24602802E25180060747A77F63581FF0058AF2FFD7496471FF8F3
1A77F63E8EA77FD8A00477F2D7FC2ABACF2DEA8874AC436C3833E0608F4897
A1FF0078FCBE9BB9C36CAD60875495605216DE200B1392CF31CB9627927089
C9AFFFD1FDEBD4E291A05B981774D6ADE6A01D5B030CBFF025247D4E6AB47E
7EB11ACA4982C64019554E24954F20B11F754FA0E4F723915AF1C71C31AC51
28444180AA30001D80ACFB8FDEEA9690FF000C4924C7D9B845FCC337E55A75
8375710DC4ECF3B6DB2B36193D7CC981E1401D769C703397C0EAB8330B69B5
2224D417CBB7CE56DCFF0017BCB8E0FF00BBD077C9E9ACEE91A34923055504
9278000EA4D6659A3DDCDFDA770A54608810F5543FC447F79FF4181C1CE65D
525922B19042DB659711467D1E42141FC09C9F614E9A5834CB44545F9502C7
1C6BD58F4551FE78EA78CD36CAD5E00F7376C1AE66C191874503A2AFFB2BDB
D7927926A0FB5DC5FF00C9A6E121E86E18641FFAE63F8BFDE3F2FA6EE9432C
1A526CB64335D5C1C0DC72F230EECDD76A8EA7A01C01D055AB3B316AACF237
9B3CA77492631B8F6007651D00EDEE724DC665452EE70AA3249E800ACCD2D5
A489EFE4187BC3BC03D447D117DBE5E48F526B4C90A0B31C01D4D73573A9C7
36A56674E4374712AE5788F900FDF3F29C639DB923D2B4BECBA85CF37771E4
A1FF00967071F8191BE63F550A6ACDB58DA5A12D6F10576FBCE7976FF798E5
8FE26B02F87DBED2EAF8F31BA982DC7A872159FF00E06781FEC8047DE35AB7
91BDA4DFDA76CA5B802741D5D07F101FDE5FD471C9C62F32DBDE4003AACD0C
A01E406560791EC4552FECA863E6CA492D0FA46DF27D0236E41F80146FD5AD
BFD6469789EB1FEEE4FF00BE58953F5DCBF4A960D4AD27904058C531FF0096
72028FEF807A8F7191EF554CD2EAAC63B5631D98E1A5538693DA33D87ABFFD
F3EA3561862B78961810246830140C002A2B9BDB5B30A6E6558CB70A09F998
FA28EA4FB0AA9F6DBC9FFE3CAD1B6F679CF94BF82E0BFE0547D6B9DF106897
3AB471DB5C5C2FDA26384312040AABF336E24B3119007040C91915258A5925
BC371AB5B2CA9285617126650A4FF0BEF2C5083C673B73E8702BB1000002F0
074A5A6492C70C6D2CCE111464B31C003DC9ACEFED41371A7C0F75FED01B23
FAEF6C647BAEEA3ECFA9DC7FC7C5C0B753FC100C9FA1771CFE0AA7DEABCD05
B69E5458C41EFAE32A8D212EF8EECCCC4B6D5EA79F403922AC369718B38EDA
272924277A4BD5849C92E7D7712770EF922A7B1BB3751B0917CB9E13B254FE
EB0E78F504720FA1F5E2AC4B04370BB278D645F46008FD6A8FF636918E2CA1
5F758D54FE60034DFEC5D3FB2BAFD25907F26AC99B4DB1BE95ACAD23DD1A1C
4D3333385F544DC4FCFEA7F87EB4DD23491611CEBA530824865911E361BA36
19DC9EE0EC2BC838EE41AD95D5122223D450DA39E01639898FB49D3E81B04F
A56A5159B360EAF6AA7FE78CE7F10D18FEB5A5552EECE3BB55DC4A4919CA48
BC321F507F983C1E8455782F648E5167A800933708E388E5FF00773D1BD54F
3E99009A4D6FFE40F7ABFDE85D7FEFA18FEB5A959BAB2B7D89A78C6E92D889
940EA7CB3B881FEF0CAFE35CE4DAA437BA8CCD15CAC30C63C812E79C70D208
FF00BCEC703807685CF700EE4334E625B7D2ACFCA850615E6CC6A07B27DF3F
42173EB55ADAD1AFAE2ED35593ED4209151531B62C1457FB8090796E3716C5
7420050154600E0015CCAFEF6FE0BC3FF2D6F5D17D9228644C7D370623EB5D
3D656A40DB98F5441CDB67CCF785B1BFFEF9C06F5E31DEAB457B68B7571A85
CCAA884F910E4F2C23FBDB47524B92303AED1567ED77D73C595BF9487FE5A4
F95FC4463E63F46DB4A34B8E521F5190DE37F75F88C7D231C7D37648F5AD4A
CDD59DC5934311DB25C910A11D419382C3FDD196FC2B411122458E30155000
00E800E82B2AF7FD3A71A5A7FAA0035C11FDC3D13FE07DFF00D9CFA83526A9
948ADE75E0C53C58FA3B08DBFF001D6345DDACC92FDBEC40F3D400E84E04A8
3F84FA11FC27B74E84D5BB5BA86F2113424E39041186561D411D88EE2AC565
DEFEFAF6CAD3A80CD3B0F558C607FE3ECA47D2B52AA5D5EC166ABE6925DF84
45197723B28EFEFD87538154C59CF7E77EA7858BAADB8395FF00B687F88FB7
DD1FED706B5EB2F4A3E64771779FF8F899D87A613F76A47D5501FC6BFFD2FD
FCACAD3FFD1E6B8D34F488F991FF00D73909207FC05830C7618AD5ACCB5FDE
6A57B3E31E5F9700FF0080AF999FFC898FC2A0D6B526B38E2B5B505EF2EC94
895402463EF360F1851EBC6719E3242E9FA58B711CB7386923188D41252207
AEDCF258FF00139E4F3D01C56CD63CDFF132BA36839B5B720CBE8EFD553E83
AB7E03FBC2B62B26EA447D46159182C5668D7123138009051324F6C6F3F855
61709BD755BE0577656DA2C12F83DC2F5DEC3FEF95EB8F9AAC0B49EFCF99A9
8DB1755B70723FEDA11F78FB7DD1EFC1ABD75731594066973818015465998F
01547724F02B2E3D3EFCCA75137023BB9060A150F12AF5083A371DC86193CE
31802C7F68C96DC6A709800FF968A77C5F8B6015FF0081003DCD41AB5D5B49
0C56AD2AAC373F348E5805F25705B9E986C84EBFC59A9FEDB7775C69F0610F
FCB598155FF80A70CDF8ED07B1A51A547290FA8B9BC6EB87FF00560FB463E5
FA1393EF4979FF00211D3FFDE907FE386B56B2F517698C7A642C55EE73BC83
82B10FBE7EA72147B9CF6349A9AA47670C5180A04F6CAA0700012A703F015A
B5916E3FB3EEFEC278B79F2D0FA2B7568FFF00665F6C8E8056BD0480327802
B0A48935E0048A0E9E0823239988E411E883B1EADFEEFDEB92EA16D03FD960
533CCB81E544012BE9B8F0ABEDB88F6A8FC9D4AEF9B9945AC67F821F99FF00
19187E8AA08ECD56ADAC6D2D0968230AEDF79CE59DBFDE63963F89AB759969
FE93793DE9E523CC11FD14FEF08FAB707FDD069BA780925ED9360AC729651F
ECCA039FFC78B0FC298619B4BCC966A65B4EAD08E5A31EB1FA8FF63FEF9FEE
96C3777DA9C4B35885B7B7906448F87723D901C0FA924FAAD598F4BB557134
FBAE665390F29DE41F551F757FE020568D53BCBC4B4551B4C92C8711C6BF79
CFB7B0EE4F0075A8ECAD1E267BABA60F752E3711F7540E88BFEC8FD4F27D06
85655FA9B5917558867CA1B6603F8A2EA4FD53EF0F6C81C9AD404300CA720F
208A86E2E6DED23F36E6411A74C93D49E807A93D8560C5A849ACDE4B64824B
4823EA48DB24C07DE0BDD40C80DFC5CE3E535D0C50C5044B0C081234180A06
001542D731EA77D0F67114DF8B029FFB4C56932AB29561907820F435C54304
F69712DEDB5C35AD94933441140314451B603B0F015981DDB704120E719AE8
BCED560E26B74B951FC50B6C63FF00007E07FDF7543EDF18D4BED3750CD02C
70EC1BA26232ED96CB2865E36AF7EF5A1FDB5A38EB7D00F632283FCE94EB3A
38EB7D07FDFD5FF1A867D4B42BA85A196E619D1BAA860E4FD00C9FCAB1A7B9
BA688595B453DF40EF1E0B46E922AAB02C0B48155C60100E73EB9E48DD371A
A4BFEA6D5611EB348370FF0080A6E07FEFA15CFEAF26A9283636D7A4DC48CB
19312F971A16E9FDE72D8F9880C30A093D8369F87B4FB3D3ED9ED6089565B6
76899F680CC01DC8588EA4A1527DEBA1ACCB0FF8FAD4BFEBE17FF44C753DFD
C9B4B39AE1006755F901FE273C2AFE2C40ACF7B65B3FEC7B5539114BB73EB8
824E7F1AD5B8BAB7B48FCDB8708A4E067A93D801D493D80E6B16FEEAFE4B29
EE514DA411A330CE0CD271C000E4264F1CE5BD94D60785F4D9AC6058ADE658
EE1A357CBC6196446EBC8DAF956C8C6E200C1C735D67DB2FA1FF008FBB32C3
BB40C2403EA1B6B7E00353E3D5B4E91C446711C87A24998DFF00EF97C1FD2B
46B29BFD275644EA9649BCFF00D74932ABF8850D9FF78559BDBAFB2C20A2F9
92C876469D3739E83E83A93D802696CAD7EC90EC66F324725E47C60BB9EA7F
A01D86076A875743269578A3EF794E47B100907F0357629527892688EE4914
329F50464550BAB59A298DFD801E71C79919385940F7ECC3B1FC0F1D2D5ADD
4379179B0938C90C08C32B0EAAC3B11552D3F7DA85E5D7F0A6D817FE003731
07EAD83FEED35AFA5BC262D28071D0CEDCC4BFEEF4DE7E871EA73C559B5B18
6D59A5C99667FBD2BF2E7DBB003D8003DAAED53D42E1AD2C67B84197442547
AB63E51F89C0A92D605B4B586D54E56145404F70A319AFFFD3FDE7FB05C5B7
3A7DCB201FF2CE5CCA9F812778FF00BEB03D2B32F7507B3BAB4BABE80DBB2B
F92CE0EF89925C0E1B031860A7E60BC038CD75158FA6CD143A636A1336D8E5
325C163FDC762CB9FA2E2A3834C8AF375FEA30FF00A44D8DBD9E241F75030E
41EED83D49ED8AB1FD9D247CDADE4D10FEEB309573EFE6066FC985453FF6F4
70BAC3E44CE470E374654FB21DE1BF1614DB6BDB5B0816DE7865B4541CB4AB
B979E4B3489B9324F2493926B5E29A1B88C4B03AC887A329041FC4570F1DE3
EADA85D4568827512FCD9E13117CA81DBFB8082F81CB1200E03575D6B62B03
9B999BCFB97186908C607F7547F0AFB0FC493CD5C7748D1A49182AA8249270
001D49ACBB447BD986A5700AA2E7C843C1553C1723FBCC3A7A2F1D4B0AD6AC
4D43594B6574B44F3E543B4E3EEAB1E0293DD8F651CFAE0735C7E87617C752
B9D52558E5B8016448C2AAA152CEADB0FF000B657E56CFCDDFAE47A25B5CC5
77089E13953904118208E0823A820F0476A9EB2EEF9D4EC07A79A7FF001DC7
F5AD192448A3696560A880B313D001C9359FA6C72387BFB852B2DD60ED3D52
31F714FB80727FDA268D430D71A7C6790D3E48FF00763761FA815A7552FAD7
ED76ED106D920C323E33B5D7953F81EA3B8E28B1BAFB5DB24C5763F2AEB9CE
D753865CFB10467BD625CDFC17D2088E64B63F7634197B823DBB440F52701B
B9DBF7AEBC5753A19751985A5B81CC71B6D38FF6E4E0FE0B8FA91443A968B6
D1AC162E8E83A2DBA9931F8460D4C752663FE8F677130F5D823FFD1A50FE94
86EF516FF536047FD759117FF41DF552F6F3598610AB6D02C93308E3226662
19BBEDF2C6428F98F3D01AD9B6823B5B78EDA2CEC89428CF2703D7DEA8A909
AD480FFCB6B74C7FDB276CFF00E862B52B227864B095AFACD4B44E733C4BDF
D5D07F78771FC5F5EBA91C91CD1ACD13074701948E4107A1154AEAF4C520B5
B54F3EE58642670147F79CFF0008FD4F6079A75A59081DAE277F3AE6418690
8C71FDD51FC2A3D3F1249E69B2EADA5C0DB26BB85187F0975CFE59CD30EAF6
B8CC693499E9B609083F43B71FAD1F6DBD7C086C2419E8D23A22FE3B599BFF
001DAA96763AB4500B66B88EDE252422C6A64754CE5543BE071D0653A0A927
B7B7D363376886E2F1B091B484B3B3B700027EE83D485C00327151DCDA8D3A
C60B9425DAC4EF76EEEADFEB89FAE4BE3FBC056F56592535A503FE5B5B9CFF
00DB2718FF00D0EB4D99514B31C003249EC2B2F4B8849A4C2B70A1BED085E4
5238265F99811F563459C8F6B2FF00665CB1620130B9EAE83B13FDE5E87D46
0F5CE3568ACADA8FAD285503ECF6E49E3FE7B38C7FE8B35AB45654D7335DCA
F67A7B6DD8712CDD427FB2BD8BFE8BD4F6060B0B785EE9A485716F69BA28BB
EE909FDEB927A9CFCB9EB9DDEB5617F71ABB2FF0DDC5BBDB7C4707F12AC3F0
5AD4ACDB021A7BF71D1A7FFD063453FA8A6DE7FA45EDA590FBAA4CEFF48FEE
83F57208FF0074D45AB2CCF369EB6EE2390DC361997701FB9933C647F3AB76
FA7C1049F6862D34E460CB21CB63D0740A3D940150EA1FBE9ED2C87FCB4904
AD8FEE43F367FEFBD83F1ACEB68656D2ADAE6D9775C5A172A3A6F50C4327FC
080E3DC03DABA08268AE614B885B747200CA7D41A7491C73218E550E8DC10C
320FD41ACD6D274D894C8886D95464F94ED0AE077210A8FCEA3D2105B69C6E
EE1C833969DDA43C8523E5DC4FF750283F4A92CA37BA98EA770A54B02B0A1E
A919E7247F79F827D06075CE6E5D5DC1671F993B6013B540196663D0281C93
EC2B9FD56DEE6FAC2537C3624BB628E007A1958206908FBC4139C0F947B9C1
1ADA371A6410FF00CF00613F58498CFEAB5A7581AC49169AADAAC4FB270394
EA270A33B481DC0E8DFC3D4FCB915CEE8B2DFEAD66A27B7DD18F9DA1326C05
A425CB49C1660C4E40C05C766EB5D6EFD5D542C76B6EA0703F7ED81F87954A
17597E4CB6F17B6C793F5DC9FCA8169A8BFF00AEBE2BFF005CA355FF00D0F7
D67DD589FB559C125CCD3B3CA243B9800162F9B3B502AFDFDA391DEAEEA04D
DC8BA54678946E988ED174C7D5CFCA3DB711C8AFFFD4FDEEBABE5B76582253
35CB8CAC6BD71FDE63FC2BEA4FD064E05561A5ADCABBEA644F2C8AC981C246
AE30420EDC7058F27D8702037B38D0E6959BFD2A247889F5997E4071FED360
8F6229CB0A5C4F169F17FC7A69E137FF00B52280517E8A30C7DF6FBD6E5048
0326B30EB1604ED824372C3B42A65C1F4253207E2454725EDFF96D28B64B68
9464BDC4A176FBE1370C7D585727A8596A1791C9A8412FD90F0165862F2249
9D8ED51C967C16206588FF0077BD74B65A55CE8F6EB6DA64A92429FC132852
4FFBE8075EE4AB1AB5FDA8B0F1A8C4D69FED37CD17FDF6BC01FEF6D3ED5096
5D5E6F2D087B18482C41C895C72147AAAF56F53C76615AB3CF0DB44D3DC388
E34E4B13802B2A479EF63696766B2B24058E4EC95D472493D635FF00C7BFDD
E873DA2716E93C51FD9DA43E4D9C4063CADFC190AFF7B6E588ECA31D4B674A
1823B5D5238611B63FB28451E8226C0FFD0A9F750CB6B29D46CD4B938F3A21
FF002D147F101FDF51D3D4707B634619A2B889278583C7200548E841AA3373
AB5A83DA299BF2318FEB51DEFF00A65CC5A68E6318966FF701F954FF00BCC3
F1008EF5AD5993E1F56B443FC314D20FA828BFC98D69D654FADE9D0872B2F9
DE5FDEF2C6F0BFEF30F957FE044571F74FADEB32DD41A4446CEDEE163924F3
880EC394CA8191870A07240217D0F3A769682CD0A5DADE46ADCB6C518623FD
A84BCBC76DCDD2B5ACE1D0279736C219A75E49621E51F52D971F8D6E514565
47FE99A9BCBD62B21E5AFBCAC32C7FE02B800FBB0AD5ACC97FE4336A7FE9DE
7FFD0E2AD3A867B9B7B58CCD7322C483F898803F5AE677EADBE58B428316F3
92DE64F98C44C796D8A4163BBA8CAE01C9E47157ED749BA86231BDE18F71CB
794A03313D4BBBEF627DC63FA0B5FD8FA731CCD17DA33FF3D99A6C7D3796C7
E1525CD8432D935A40AB063050A80023A9CAB003D0806A5B1B9FB5DAC7395D
8C410CBFDD753865FC181156A9199554B31C01C927A01593680DFDC0D49C11
0A022DD4F707AC87DDBA2FA2FF00BC40D620302AC320F041ACDD2095B4FB23
9CB5A3184FAE13EE13EE5369FC6897FE4336BFF5EF3FFE871526B07758496E
3EF5D15807AFEF4ED247D0127F0AD4000181C01556F2D56EE1F2F76C752191
C75471D187F51DC641E0D476576D70AD14EA23B98702441D013D08F556EA0F
E079040BD59967FBCBEBE9CF3B59215FF751437FE84ED5A448009270056479
D36AA765AB18ACFBCC38693DA3F45FF6FF00EF9FEF07DD11676D15869EA239
66FDDC400E107567C7A28E7DCE075357EDE08AD608EDE11848C051DFA7AFBD
51D57F751457BD3EC922C84FA21F91C9FA2B13F856A565E923FD1E673D5AE2
E3F49597FA51A7FEFE6B9D40F495FCB4FF00AE711207E6DB883E84525F737F
A70F491CFE5130FEB5AB5976BFE91A8DD5D755871027E1F3391F52403EEB49
A2FF00C7801E924C3F291A9B17FC4BEF8DB9E2DEED8B47FECCBD5D7E8DCB0F
7DDEC2B5EB2F54FDFA45A70FF97B6DAFFF005C9797CFB11F2FD5854727FC4D
2E4C039B4B76FDE1ED248BFC1FEEA9E5BD4F1D9854971A9013B5858813DD80
0B2E70B183DDCF6F60393E98E44B6D622290DD5C3F9F72C305C8C0507F8507
F0AFEA7B9279A8AF7F7B7D636DE8CF337A6D8D76FF00E84EA7F0A769D947BC
83F8629DB1FF006D15643FAB1A75D5F18E4FB2DAA79F724676E70AA0FF0013
9FE11FA9EC0D66DF5888ACE533BF9D73785206908C612570A5507F0A8049C7
B649279A2D2C9648E44898C375672C88B2019C2B3798AA47F12ED61C1FC307
06B46DAF99A41697AA21B9E703395900EE87BFB8EA3B8C609D1A2B124B88E3
BEBABE9B263B38D6218E4EF7F9D940EE48F2C0F53C55CD3EDE48A369AE71F6
8B83BE4C763D941F451C7BF27A935FFFD5FDF2B5B386D15B6659DCE5DDB977
3EAC7F901C0E800156AB89F105D9D32E9611B42EA12C522973851243C92C7B
2FCB1E7DB3DEB62CEEA386DD6DF4E865BB2325A4C6C5662725CB3E01DC493F
2E6AD795AB4FFEB668ED54F688798E3FE06E00FF00C729469164C775D2B5DB
75CCCC5C67D429F957F002A4B9BD8AD596DA1432CE465624C671D327B2AFB9
FA0C9E2A28AC1E6916E752612C8A772463FD5467D81FBCDFED1E7D02F4A2F7
F7F7D6769D402D3B0F5118C01FF7D3291F4AD4ACDBE9E5675D3ED1B6CF30CB
30FF009671F76FAF65F7E7A0348D2DAE95045656B1EE6C622853EF103BF3D0
7AB1FCF26886C649255BBD4584B32F2883FD5C5FEEE7A9FF0068F3E80038A8
BFE42B71EB676EDF84B2A9FF00D050FE6DF4E5E3FD2B5566EB1D92ED1E9E6C
8327F154C7FDF469F29FF89C5B0FFA613FFE851569563BFF00C4AEE4CC38B4
B86F9C7FCF3918FDEFF758FDEF43CF76345DCD1DBEA70CD2B6D8E3B6B8663E
8034449A9F4D864585AE6E176CF74DE6383D573C2AFF00C05703EB93DEA4B9
D42D2D58452BE6523223405E423D422E4E3DF18ACDF2F54BABDFB6451ADA20
8FCB532FCEE32724EC438E703AB76E4525DDBD9C2556F9A4D46793EE44C410
D8FF00A6636A607F79871DCD5A834E690A4BA86D631E0C70A7FAA8F1D3038D
CC3FBC7A76029D63896F2FAE7AFCEB129EDB63507F4766AD4AAF71696B76A1
2EA14994740EA1B1F9D53FECD7879B1B9921C7F0B9F350FE0F9603D959693E
D97B6DC5F5BEF41FF2D20CB8FA94FBC3E8377D6A49B528058BDE5AB2CFFC28
14FDE918E157D896207B54F656DF63B58EDF76F65C966FEF3B1CB37E249356
AB1EE668A1D5A1966711C715B4C5998E000CF1F527E95527D6D246F2A29A3B
443FC737FAC6FF00722FBDF8B63D8114B0496114A26482E6EEE3FE7A490BEE
E7D19D55541F45C0AD037F75DB4E9CFF00C0A1FF00E3947DBEE072DA7CE07D
623FA0909A6FF6C5928CCFE65B8EE6589D147D588DBFAD5F86686E2312DBC8
B2A1E8CA4107F11542D0793A85EDB0FBADB271EDE602A47E684FE3576E2E60
B588CD70E2341C64F727A01EA4F603AD677953EA8C1AE90C5663911370D2FA
171D97FD9EA7F8B1CAD6C5158769756EDACDD5BC126F1222B9DBCAF988763F
3D3206CC8EDDEAC4873AD5B81FC36F367F178F1FCAAB5FCEFF00DA56EAB0BC
D1DAA995F6004AB382887048278DF9039E9C569DB5F5A5DEE16F28664FBCBD
1D7FDE53C8FC455AACFBCB492465BBB4212EA218527EEBA9EA8DEC7D7B1E7D
419AD6EE3BA8CB8051D0ED746FBC8C3A83FE3D08E464566D85D4169A5C5757
0769BA2D28500B39333170A00E4900E38F4A97ECB3EA277EA4BB20EAB6E0E7
3EF211C1FF00747CBEBBB8C6ABB24685DC85551924F00015CA595EDDCF7136
B8D097B52C614500991224EAE075396CEE5C6781D48C1EAA29639A3596160E
8E32ACA72083DC1A49A28E789E0946E4914AB0F50460D53D2E5925B18FCE3B
A58F31C84F778C9563F8919ACC82E258F428A480E27BD24C7ECF3B16CE3B85
C963EC0D6F410476D0476F08C244A1547B28C0AA37037EAB66BFDD499FF2D8
BFFB355BBBB94B3B596EA4195894B6075381D07B9A8F4FB77B5B38A194E64C
16908E86463B9CFE2C49AAFA3FFC7937FD76B8FF00D1CF572EED92EEDDA090
901B0430EAAC0E430F7079150585D3CE8D0DC00B7301DB201D33D987FB2C39
1F97506B067BD135E5CC89288828F2BCD24010C4A70EF93D19DF2AA0F5DB9E
40C568C114F730A5BDAAB58D920C03C895C7B679407D4FCC7FD93CD3D2DE0B
3D52DA1B7411A3413703B90F1919F53C939EF5B359707EFB55BA9BF86DD121
19ECC7E77C7D414FCAAA4CB79FDAF2C16AC2159E28D9A43CB0DA5836D53C13
82BC9E07A1E95AF6B6B059C7E540B804EE624E5998F52C4F249F53552F3325
FD8C03F85A498E7FBA8BB3FF0042706921FDD6AD731670B3C71CA07AB2E51C
FE412AEDCDB417717953AEE5C823B10474208E411D88E4567F9F75A6FCB7A4
CF6C3A4C07CC83FE9A28EDFED0FC40EB5A8B246D18995818C8DC181C823AE7
3E95CC68C0EA5B6EDC7EE55DA6E7F8E573919F5F2970BFEF03DD457555FFD6
FDE83AB4127CB628F7A7D6200A7FDFC2427E19CFB567DEDE6A2998DE448242
A584711DCC147F1BC8E36A28EE4A1F6C9E2B16D74B96044F11DFC8F34D1C8A
EBE61621203F2B9C31247CAC5F1DB0071C8AEFA8AC83773EA07CBD308587A3
5C1191F48C1E18FBFDD1FED7229BA2C290413C3CB4B1CD22C8CDCBB73942C7
B9D856B66B2ED3F7D7F7973D90A40BFF00001B89FCDC83FEED5BBBBA8ECE06
9E405B180147566270AA3DC9E0563C0F711BC9040166BF94869E4EB1C5C70A
7A13B47DD51827A9C6735AB69651DA06604C92C982F2372CC474CFA01D80E0
76155EF6592E251A65B314671BA571D638CF1C1FEF37217D393D803719ADEC
2D0B604705BA1380385541D87B01506990490D9A99C626949924F67739233D
F6FDD1EC054537FC866D3FEB85C7FE85156A53248D25468A550E8E08604641
07A835C04B2DC49ADC3A522B5EA5A236E6420EE4DCAC88EC4E0306501B2790
3D5B15D6FD96FEEB9BC9FC94FF009E70123F390E18FF00C042FE3576DAD2DA
D10A5B46B183C9C0E49F527A93EE79AA93DECB24A6CF4F01E65FBEE7948B3F
DEC756F451CFA9039A9ED2CA2B4DCE099259305E47E5DB1EBE807603007615
6C900127802B374704E9B0CA7ACE0CC7D8CC4C847E1BB14E9356D3E3731098
4920EA9183238FAAA027F4AAD36AD70AD0A43632133BEC432158D49C16E465
9C7009E56A6DBAD4A325E0B7F60AD37FE3D98FF951F60BB71FBCD42607B845
8D47E194247E755CF8774D79C5D4BE6BCE3FE5A79D22B1C74FBAC071DB8A8E
E6DB48B5611CD2CED2B0C88D679E4908F50A189C7BE315917314E5C5B59432
C3338CAABDCCACF8FEF32A49B557DCB67D149E2A2B6F0CC73DF4B16AB7535D
CB0C70C8199C954666932006C820607DECFEB8AE8A0D2EE6C54A69F72A8A7F
85E14DB9F611797FD69F25F5ED946D2DF5B068A319692170700752CAFB481F
42C6ACD8EA563A947E6594CB281C903861F553823F1157A8ACABDB3D2D03DE
DC62D9875991BCB6F6CB2E09FA1C83E95C6EA7A8EB9A7DDC1750A79904AAD0
89264DB2E0953B8AAFA76F941EB95F5DEB1693E5BEFB29BE90E40996659187
A801C4613D08007BD6B7DBEEBFE81D3FFDF50FFF001CA4FB4EA92FFA9B358B
FEBB4801FCA30E0FE6283A7CB71FF211B8332FFCF341E5C67EA012C7DC1620
FA536E234B6BBD3DA0508819E1C01801190B607A728B4078D756BA964202C3
6F1658F0172CE5BF400D3F4B46685EF2552B25DB79A41E085200407D085033
EF9AB3736569798FB4C2B215FBA48F9973FDD3D47E155BFB35E33FE8D793C4
BFDD2C241F9C819BF2349E4EAE80FF00A5C25477681B3F891201FA5715ACDE
DFDDDCC569A54B1CD73761A2F3123648CC641CE58BB6E03920807041C1FBC0
F63A4C16CD0ADEA9692661B59A4C6F5C1C14C0E14023040F4E7279AD8AE7F5
5B95944D1637DBDA0DF301FF002D1B195847D782DED81FC55AB616C6D2CE2B
76219D17E761FC4E7966FC4E4D50BB89B4C136A36642C601796263846EE594
FF000B7E87B8CF22F59DF417A84C79574C6F8DC6D7427B32F6FE47B6455133
2E9D797A64FF0057247F691EE506D907E0021FA9AAFA5C2CEF6D13FDCD3614
8FFEDB320C9FF80A6003FED1ADE9668A08DA69DD638D7AB31000FA9358B15E
25DEB301891C46B6F361D97686CBC5D01C1FC7183D89AB37BFE91776B623EE
EEF3E4FF007622368FC5CA9F700D6AD65E8DFF001E47FEBB4FFF00A35EB52B
8FF106A6B6B711A6947CDD55C18D6351B832E32439E836FDE1DFF026AD681A
2D9DADA413F9C6F1F0195D860038C642F638E327E61D320703A6ACCBDC2DEE
9F27732BA7E062763FAA8AD3ACBD1FE7B21747ADD334DCF5DAE7299FA2607E
14B73FBBD4ECA53D245961FC58071FA466B4EB2E1FDEEAD732E32B0469103E
8CD9771F882945E7EEAFAC6E7B16785B3D848BB87FE3C8A3F1AD4A2BCFFC45
776F6727F65E97218E6BF6F2A5551BA240FC33E3F858039F97AF561C835D3D
BE9F7F04496CB769143180008A2C3607BBB3FF002A9BFB2D5F3F69BAB898FF
00D7431FE916C15FFFD7FDE89AEE59A46B3D37064538924232917B7FB4DFEC
F6EA71C03463B38679DACE2CBC11306B891B969A5182149EE0705BB7451C64
56F4B1473C4F04A37248A5587A82306B36CAF562D2E39AFA4C345989D8F25A
48C94380392588E00E4E69BF67B8D4F0F7CA61B6ED0777F7908EDFEC0E3FBD
9E835C00A02A8C01C002B321FDCEAD731670B3A24A07AB0CA39FC004AD0965
486279A53B5230598FA01C9AA7A546F169F0F9A0AC92032383D9E425D87E04
9AC40F73AE5FB3DAB18ACAD49459BFBCFD1DA3CF523950DD0738C93F2F4B6F
6F0DAC4B040BB117B7B9EA493C924F249E4D457B75F648772AF992B9091A0E
0BB9E83E9DC9EC013DA92CAD7ECB110EDE64D21DF23F4DCE7A9F603A01D800
2AB6A5FBF7B6D3C72277DCFF00F5CE2C337E04ED53ECD5AB59571C6B1647D6
29C7EA87FA54936A51AC8D6D6A86EAE17AA2745FF7D8F0BF8F3E80D47F61B9
BBE75297E43FF2C622553FE04DC337E80F75A4B68A28B549A28504691DBC21
55460005A4E807D2B5AB2249E7D41DADEC5FCB854959271D723AAC7EA7D5BA
0E832738D1B7B786D6258205088BD07D7A927A927A9279279354DF55B50E62
B7DD752A9C15846FC1F466FBABFF000222A09A2D575085E17096514AA54F26
4970DC1E98553FF7D0A91747B52A05D33DD01C6256CA63B7EED709C7FBB5A5
1C51C2822850222F0154600FA0159CDFBFD6157F86D22DDEDBA53807EA02B7
FDF55A954EEAFADED0AA392D2BFDD8D06E76FA01DBD49E077355BCAD46F79B
87FB2427FE59C673211FED3F45F70BCFA35418481DF4FD1A35494E0CB29190
991D58F57723A0273DC9C633A56B690DA2158F2CCE72EEC72EEDEAC7FC81D0
607155ACB0D7BA849DC4A89F808D1BF9B1AD3AC723FB4EE8A9FF008F4B57E7
D24954FF00E8287F36FF00779AE6C6D8EA125ACC9812869E175255D1B204A1
58723921BDCB1ED567ED371A710BA8379B6E4E04F800AFA0900E07FBC38F50
3A99AE6F9965369649E7DC800919C2460F42EDCE3D8753E98C9041A7AACA2E
AEDCDCDC0E8CC30A99FEE2F217EBC9F526A2D4E28E79AC62954323CCEAC0F4
20C32020D52B5B36324B124A61BDB620197AF9B191FBB6914FDEE06D278390
70455F8F50689D6DF52416F231015C1CC4E4F656EC7FD96C1F4CF5AD4A2B2F
57C0B4594F1E54D0B93E8048BB8FFDF39ACA526FEEAE2D1794B898BCA7D218
B116D3FEFBA118EEBBABA9A6492C70A19667088BC9663803EA4D66FF00693D
C71A6C06E33FF2D1BF7717FDF4465BEAA08F7AA779010106A0DF6E9E524456
E3E48891D495E72A3A92D9C76192014D32CF75FCD792379AD166332631BA43
8DE40E70ABC228ED86CE4924DBB90DA7CEDA8C609864C79E839C60604807A8
1C30EE3DC60CB7978C0476F6443DC5C8CA1EAAABDE43EC33F89C0EF9AA8F6D
1C72D9E950E4A2B19E424E4B6C39049FEF348437BE0D6ED6437FC4C6F3CB1C
DADA302C7B3CCBC85FA2753FED607F09156EEAC61BA2B21CC7327DC910E1D7
F1EE3D41C83DC5721E29B8BDB1D31A5BB45976868D6543B770954A15653C8E
A1BE5C8257A0ADBB08F5416A90C51ADB672CF2CBF33B3B1CB111A9C0C93919
6E3A6DABF16996E922CF396B999790F29DC54FFB2000ABFF000103DE9AA37E
B2EDFF003CADD00FFB68EDFF00C45269BFBF69F523FF002F0D88FF00EB9479
0BF813961ECD5A9581617D6D6960A266CBBCB3EC45059DF12B7DD51C9F7F4E
F49772DDBC5E65DEEB789CED482261E74AC7A2971C2E7B853C0E4B63355746
D3916FA5BB655CC03CA5083E4563CB84F65FBB9EA5B793D715A52E74B9DAE8
7FC79CC7328FF9E6E7FE5A7FBA7F8BD0FCDFDE35B1599AA8022826EF1DC438
FF0081B843FA31A5D5D9869F2C519C3CF88548EA0CA4267F0CE7F0AD04458D
1634185500003B0159DA9E512DEE17EF453C58FF00B68DE59FD1CD69D65E93
F3C125D9EB752BC99F55CED43F8A2AD3B58563A74D220CBC189947AB444381
F895C5682B2B287520A91907B62B0EEAFCDCC32496F2186CE3077DC01CB7FB
310EE4F4DDF82E4F4E7DEC1522BD9E48C46F6D6AEFB41C8466CB22E7BB2804
B1E492E4F715DF552D46E1EDACA69A2E650B88C7ABB7083F162057FFD0FDE7
B8616304561A722A4B2E5625038503EF391E8BD4FA9C0EA6AF5ADB4769025B
C59DA9DCF2493C924F724F24F7350DDDEA5AED8D54CB3C9F7235FBCD8EA7D9
4772781F5C03C869A350FED8BDBC9638EE30DB9235254AE331C862DC719053
049C6EC8E474AECED6EE0BC42F0364A9C32904329F4653C83F5AB359979FBB
BFB19C7F134909CFA3AEFF00E6807E349ABFEF2D05A0E4DD3AC581DD58FCFF
00F8E06346A123CCE9A65BB1579866460705221D4FB16FBABF89EC693FB261
80674D6364C3B47FEACFD633F2FD48C1F7A3EDB7369C6A50FC83FE5B440B27
D597EF2FFE3C0776A65811A84BFDAEDCC6415B71E89DDFEAE47E031D0E6B62
B2ED3FD22FEEAECF2B1E204FF80FCCE41F763B4FFBB562EAFA0B52A8E4BCAF
F72341B9DBE83D3D49E07722B3DEC2E7519A3B9BF636E91860B144C4310D8C
EF718F4E8B8C7F788AD786086DE3586DD1638D7A2A8C01F80A96B2E139D66E
FDA0807FE3D29FEB552E2E92F9198CC2DF4E4E1E62DB7CDFF655BB2FAB77E8
3D6AC47753CA8B16976BB225002BCA0C71803FBA98DC71DB8507B1AC8B6B2D
5751B586FEF2E23B959D12410323246BB86769DAC770FF0078356C24D7F6C8
B19D3D4A01802DE453803D9C4607E14EFED7B34FF8FADF6BD89990A283E9BC
FC87F06AD18E48E541244C1D1B9054E41FC69F593A7BA08EEF5095822CB2BB
649C0091FEEC1C9EC42EEFC693ED177A871659B7B73FF2D987CCC3FE99A9FF
00D09B8F40473576D6CADECC3792BF33F2EEC773B91DD98F27DBD3B7158DAB
EAD2C730D374E4696E082F2B2004C512E0B119E0BE08DABEE09E319D9B28ED
A2B58C59E0C2C3729073BB773B89EA49CE493D6AD566696018A79BBC971367
FE00E507E8A29DA84D2811D9DB36D9EE4901BFB883EFBFE03A7FB44678AB90
4115B4296F02ED8E301547A0154355FDD470DE8EB6B2AB1FF71BE47CFB0562
DF8569B2860558641E083DEB12CE28F479C582A85B6B862D0903EEB9E590FF
00353E991D86772B36FBFE3EB4FF00FAEEDFFA264A66A3FE8B245AA2F4872B
2FFD726EA7FE0070DF4CFAD69491C7323452A8747182AC32083D88ACD16171
6DC69F725107FCB39479A83E872187FDF440EC297ED1AAC6079B66B27FD719
727F27083F53593AF6AAF0E8F766E6C67895A364DC4C470CC30381213D4F60
699A0C5A9DB69C8C96A8D2CE04923C92EDDCCC3391B15F8FCBD7A935B3F67D
526FF5D74B0A9ED0C7F30FF8139607FEF914F8F4BB349166914CF2AF21E526
420FAAEEC85FF8081525DDE0B72B0C4BE75C499D91838CE3A927F854773F96
4E01A1224B610B4DB84DA85D911AB11C6E392001D9106588F4049C935A96B6
C9696F1DB4792A83193D49EE4FB93C9F7A65E5DADA461B6992473B6341F79D
8F61FCC9E80649E2AB697A6A69F13138334A77395FBA39242267A22E4E07E3
DE934DFF004869F513D2E1B6C7FF005CA3C85FC092CC3D9A9F7D712965B0B3
6C5C4C33BBAF969DDCFBF651DCFB038B96F6F15AC296F02ED44181DFF127B9
3D49EE6A1BBBD4B5DA814CB3C99D91AFDE6C753EC07727815877FA71B9583F
B476CD3DC4D1A85FE08D14F98CA80FAAA9058F27D8600D7D2E491AD7C89D8B
4D6CC62727A92BD18FFBCA437E35A35CC5ECAEFA8DD5AC2DB64B98E08148EA
A33233B0F754248F7C7AD6E4B3D9E9D0A2C8CB120C2228EA71D1554724FA00
2AAF99A8DEFF00AA5FB1427F8DC06948F65E42FD5B27D56912DF4ED0EDDE64
4DA58F2DF7A49198F033D4924F03DF815564FB4C08750B800DF4DFBA823CE5
632FD17DFF00BCE476071C015B1696C9696D1DBA12C10724F563D4B1F72793
EF539008208C8358F113A4C8B6D21CD94840898FFCB227A46DFEC9FE13DBEE
FA666D647FC4AEE64FF9E2BE68FAC7F38FD4525C7EFF0053B5B7EA200D3B7B
1C6C407EBB98FF00C06B46596386369667088832598E001EE4D73DA89BED52
C2E05AA982108CCACCBFBC91946570A7EEAE40E48C9EC0706B4AF2F31A5497
B6A77178F745EECE3E4FCC91572DA04B5B78ADA3FB90A2A2E7D1460525C4F0
5B42D2DCB048C7073DF3D001DC9E800EB585A7D8DDDCD94106A03CBB685422
C3FC522AF0A65F40401F27FDF59FBA2DA6DD42E449FF002E768C420ECF2AF0
5BFDD4E83FDAC9EC0D456F035EE917321FBFA8891F9FEEBAED4FC420507DEB
56CA5FB459C13FFCF48D5BF300D54BDFDFDED9D9F605A771EA23C051FF007D
B291F4AFFFD1FDE9D3E191D9F50BA5DB34E0614F58E31F757EBDDBDCE3A014
B737B2198D958A892E063713F72207A17C77F451C9F61C896D6D21B2579598
BCAFCC92BFDE6C7AF60076038158D681A08B4ABD93869B72CB9EC6E7F787FF
00220007D6B62EAC23B8713C6C60B85185953EF63D08E8CBEC7F0C1E6A286F
A48E55B4D454452B708E3FD5CA7FD927A37FB279F42C01349AC7CB60F3919F
B3B24C7D7113076FCC022A1BE9E28EFE3926FF00556713CCD8ECCDF2271DC9
1BC0156B4FB796347B9BA18B9B83B9C75DA3F8501F451C7B9C9EF5A14566CB
A6A891AE2C5CDACCC72C54651CFF00B69D0FD461BDEAADC6B234E85DF564F2
191490C0E6390A8CE158F427FBAD83E99EB58D61ACDBBDA456B6D7714600CC
92E433BBB1CB98E3E4F2C49CB0C7A2915AF6D73A7598630C570CEF8DCE6099
9DC8EE58AF3EDCE076E2AD8D4647FF00556570FF005554FF00D0D968FB7DD7
FD03AE0FFC0A1FFE3950CFABC96D119AE2C668A35EACCF001FFA36B96B5BBB
AF135EDC9D3FFD1ACE458F7B4A3E7915772E1554E0AEE0437CC3D3A641EC6D
F4BB685D667CCF327DD79304AFFBA061578FEE81EF4FD4E56B7D36EE74FBD1
C5230FA8526AC5BC22DEDE2817A46AAA3F018A9A8AC8BBB2D2600D75295B36
279951FC9249FEF10406FA364573D7FE2497494430B9D444A76C61A331BB13
C021C008E33FDD03EB5A3A259ADCD95BB5E3890DB05410F216274007CC0F2C
FDF2471C151DCF4F59D7B732EF5B2B323ED328CE4F2234E85C8FD14773EC09
14F43B5892392F6307139F909E58C6A4E189EE5C92F9F71E9535B7FA0DE358
1E219F7490FA039CBA7E6770F627B2D6BD6668C3FE2596F27FCF55F37F1909
7FEB59B69A8DBFDA65D42F4342B3E16191C7EECC23EE90C381B892DF3609C8
1CE0574B50DCC09756F2DB4BF7265646C7A30C1A834D9DEE6C209A5FF5A540
71E8EBC30FC181152DDDB25E5BBDBC84A86E8C3AAB0E430F7079150D85CBDC
44C9380B710B6C940E9B87391ECC0823D8FAE6A3BFE2E74F27A09CFEB1482B
45955D4A3805586083D08359562E6D64FECA9C925066163FC710ED9FEF2743
EA307B9C6B54734D15BC4D3CCC123419663D0015CD4F14DA95ED9BDCA14567
F32388F05238BE62EC3FBCCDB571D9491D49AD5D1BE5D3A2809C9B6DD01F7F
298A67F1C66B52B326BE92495AD34E512CAA70EE7FD5C5FEF63AB7FB239F52
01CD4F69651DA066DC649A4E5E46FBCC47F203B01C0ED552CFFD3AE5B536FF
0054014B7FF73F89FF00E06471FEC807B9ABD7777159C5E649962C76A22F2C
EC7A2A8EE7F9753C66ABDA5ACBE61BDBDC1B87180072B1AF5DABFF00B31EE7
D800135491CC2B670B1596EDBCB523AA8232EC3FDD5048F7C549733C7A7DBA
470C7B98E238625E371C7007A000727B019A5B2B436EAD24CC24B898EE91FD
4F603D147403F1EA49304D7D24D235AE9A049229C3C87FD5C67DF1F79BFD91
F891C558B4B28ED773EE32CD260BC8DCB363A7D00EC0600F4A82EBF79A9594
5FDCF366FF00BE5447FF00B529B2FF00A26A51CFD23BB0227F4122E4A1FC46
54FA9DA2B56B958ACAF67D7350BA8A65863529106C6E90663466DB9F9467E5
E486E9D2B76DB4FB6B5632A02F330C348E77391E9B8F41EC303D054B73730D
A446698E146000064B13C0000E4927A01552DADA696617F7E3128CF971E722
207F42E7B9EDD0719273CEA36CFA9BCD71BD61B5CC719F2DCA17E9236E0BB7
8FBA39E3E6F5AD25D5F4966DAB7B0163DBCC5CFE59AD056560194E41EE29B2
471CD1B452A87470432919041EA08AC2B857B6B7974DBB62D6B708D1C7331C
94DE301243F8FCADDFA1E705A8E93AAADC46D7888D3DCDD04091AF50918DB9
63D1577EF393D7B64F15B715849348B73A93096453B9231FEAA33EA01FBCC3
FBC7F003A569D72F6D992D74ED34F3E54CCAD8FEE5A310A7FEFA54FCEB6AEA
F920716F1299EE5C65635EB8F563D157DCFD064F151DBD8B79AB797CC26B81
F740FB91E7B20F5F563C9F61C536F6592E251A65B315771BA575EB1C678E0F
F79B90BE9C9ED82CD4A344B04D36DD760B82B6EA076423E6C7A610311F4AD6
0028000C01DAB33453FF00128B307AA448A7EAA307F514597EFEF2EEF3F877
0813D0AC59DC7FEFB6607E82BFFFD2FDDEBCD4A49264B4B22551A4F2A5B800
158D883F2AE782D91B73C852467278AD7B6B686D2210C0BB57927B924F5249
E493DC9E4D53D64FFC4AEE231F7A65F297FDE94EC5FD4D3F5385E4D3E64807
EF1143C63FDB8CEE4FFC780AB70CD1DC431CF11DC9228653EA08C8A26821B9
89A09D0491B8C152320D63CE24B28A4B7BD267B0914A990F2F1823187FEF2F
FB5D47F16796AE7F48BC8F5099AFEFE65482DBC947776015E58D01DBCF1F23
B313EFB71D0D753FDAD6F27FC7A249759E86343B4FD1DB09FF008F51E7EAD2
8CC56A9083FF003D64F987FC050303FF007DD2FD975290FEFAFB60EDE4C4AB
F9F9864FE959F7305AA38B6DD717B74467679CEA31D8BED2A8ABF873D813C5
7372E876D7505D6B33471ECB689DA111A05466519DC3BB018C066CE7961818
AF47A29090A0B31C01C926B2BEDF35E7CBA5A074FF009EEF9F2BFE02072FF8
617FDAAE76FADCDD9C239B862DE4895F9DF21C82A8A38545192E472C015C9E
6B72E2D134DB5B7B8B4538B01823BB447FD603EA78DDEE47BD6DAB2B286539
0790477159BAC9FF008964F1FF00CF6022FF00BFA427F5AD09244891A49582
228C924E001EE6B3BFB4FCFE34E85AE73FC7F722FAEF6EA3DD0351F66D46E3
9BAB9F254FF04031F8176C93F5014D54686D2DAE7C9D360596FB1932484B98
D4F7776CB7D17393EC324635BD92DEEA96B7323198166955DB19758BF8FD81
765D8071B413FC46BA5BBB59565FB7D8E05C018653C2CAA3F84FA11FC2DDBE
84D0DAA43F631750A991DCEC48FEEB993A6C23B1041CFA004F4154AE2DDE0B
4FB317DD77A8B8479071D412FB7D02203B7F0EE4E77911634544015540000E
0003B564EB2C7CA8A2B71BEF0B8781471F327524F65C1C31F4381C902B42DE
EA3B9B54BB8F3B1D7760F51EA0FA11D08F5AC288B9D034EB24243DDC514591
D4294CB9F62101C7BE2BA3088104614040318C718F4C5651B19AC7F79A5602
0EB6EC7119FF0070FF0001F61F2FB0CE6AEDADDC57684C795643B5D186191B
D187F90472322AAD87EE6E6F2CCF0164F3507FB33724FF00DF61EB52B9A6B8
9DAE7FB6EDD07D8D5763F04B4B1839F3001D9392BD4B0271FC357F55643602
ED4EE485E29B70E7E4460CC47FC0735AD55AEED63BB8C23928CA7723AF0C8C
3A11FE7047072091543FB4FEC5FB9D5BF76E3847504A4BECA064863FDCEBE9
9A7456F3DECAB777EBB110EE8A03CED23A3BF62DE83A2FB9E43AD7FD2351BA
BA3CAC5B604FC3E6723EA4807DD6ABB5D45A66A13C7393B6EC09630AA5999D
40475503278014FE24F63537957D7FFF001F04DA41FF003CD5BF7ADFEF3AF0
A3D94E7FDAED5A50C315BC4B0C08238D0602A8C01F8566DEB1BD9BFB2E23F2
900DC30EC87A203EAFFA2E4F07152DFEA36BA5C2A64EA78441804F6EFC051D
C9E077A5B5B3712FDB2F0892E586063EEC6A7F8533FA9EADEC30068560ADDC
3E6CDABCC49897F71001C96E7E6DA3B977181ECA0F4352C7B6D73A9EAAC126
93E555CE446A7A4698E598F7C72C7A7000A76CBCD4BFD6EEB4B63FC00E2571
FED11F707B0F9BDC722B4E28628235860411C68301546001EC0524F7105B46
65B9916241FC4E428FCCD64DA5D417FAACB2C3B8AC10A05255941F3198B637
0191F22F238AD2BCB65BBB67B7662BB870C3AAB0E5587B820114CB0B96BAB7
0F200B32129228FE175E08FA771EA083DEABE960937931FF0096B70FFF008E
011FFECB56EEAEE2B38BCC9727276AAA8CB331E8AA3B93FF00D73C555B6B59
A4985F5FE3CE19F2E3072B103E9EAC4756FC0719CBF519E48E35B7B638B8B9
3B233D76FF0079F1E8A39F7381DEAD5BC115AC11DB4236A46A140F61523A24
836C8A187A119ACF6D1F487397B18093EB12FF0085674D6FA15BCA60860DD3
8FF9676F90E3D33B480A0FAB102B3352D32E65B5657792D84C4471C4B3C923
3B3F00312DB42E396001E01C3569595A2786A116F1AEFB0EA5C01BE33DCBE3
EF2FBF55EFC723A3565750E8432B0C8239041A5AE492DAFCF882F5202228F6
A3AC87928B28C3ED5E84B347D4F03D0F4AE92D6D20B3429083963966639663
EAC4F24FFF00ABA5477B77F658D446BE64F29DB1274DCDEE7B003927B0A5B2
B4FB244559BCC9643BE473C1673D4E3B0EC076000AAEBFE93AB33754B24D83
FEBA49827F1550B8FF0078D6A561DADD2DA6957370467C896E70BEB895F6A8
FAF00546219160834389FE7D81AE245E30A7EF107B348D9C7A727A819FFFD3
FDEBBCB20FA6BDA5A28428A0C407015D3E64FC030156ADAE12EADA2BA8FEE4
C8AE3E8C3354F52CBBD9DBFF000CB3AEEFA46AD20FD54569D65E91F25AB5A9
EB6B23C58F4553F20FFBE0AD6A56349792DEEE5B07F2EDD33E65C63238EA23
07827D58F03DCE40CAF09D8DA43A7AB7D9D16E236397DA37FEF009402C79E0
381D6BAEA4665452CC40006493D00AC9FB45CEA3F2D8130DBF79C8E5C7FD33
53DBFDA3C7A039C8AE6DA291DB49B35D9003BAE5F24B316E76163C9661CB12
7217EA08BFA94224D2EEADE3180D0BA003DD48156ADE4F3ADE3987F1AAB7E6
3355AE6FE3864FB342A6E2E48C88D3A807BB1E8A3DCF5ED93C54234F92E889
355612F710AFFAA5FA83CB9F76E3B850692E6496F676D3ED98A469FEBE41C1
5079D8A7FBC4753FC23DC834DB48E39AF1A58942DBD90304200C0DDFC647D3
0147A61BD6B62B2B4DFF00476974C3FF002EC418FF00EB8BE767FDF2415FF8
0E7BD26B4AEF64A9130491A683692370044AA7A6467A7AD491E976FBC4D745
AEE55390D290429F555002A9F7001AD2ACB9EE66B995ACB4F6C32712CB8C88
FD8762E7D3A0EA7B03566B6894268B699026CBCEF9CB7967824B75DD21E33E
9923A559B15592F6EEE14008856DD31D36C63271FF000262A7FDDAD4242824
9C01DEB134FB78EEAEE4D68A6DF340110E47C838F308FEF38C73D76851EB56
23FF0048D56597F82D10443FDF930EFF0092ECC7D4D5CBAB98ED2069E5C90B
8000E5998F0140EE49E0557B2B5910B5DDDE0DCCD8DD8E4228E88BEC3B9EE7
27D00A833693DDD9FF00CB3991E78BD8F4907FDF4437FC08FA557D1F170F04
9D52D2DA2887FBF22AB37E4A131F535D1D159F7966D2B8BBB56115D463018F
DD65EBB1C775FD4751DF39CB78AD7D05C953149CDBCE87AA337CD1927B8C82
14F7DDF5156EF7FD36E0696BFEAF01E73FEC13854FF819073FEC823B8AD600
0181C01584EA9A66E8275DDA74F91CF484B7553FEC1EDFDD3C74C62DE97239
B6FB34CC5A6B53E5393D4EDFBAC7FDE521BF1A96EEF52DB6C6AA669E4CEC8D
7EF363A93D828EE4F1F8E05456F64E651797CC25B819DA07DC881EA101EFEA
C793EC38172E674B5B796E64FB90A339FA28C9A834D81EDACA28A6FF005A41
693BFEF1CEE7FF00C789A66A304B244B3DB0CCF6EDE6463A6E2060AE7FDA04
8F63CF6AB56F7115D4097109CA48323B1FA11D88EE3B557BEBB6B7558A050F
73312B1A1E99EEC7D157A93F875201A10C86DC358E9DFE9373926699BEE2B9
EA5C8EA7D10720607CA306AFDB5845007694F9F34A31248E32587A63A051D9
471F8924D31E668E369CC9603A1EAD08F43DCA7BF55F75E563D6F5486D2C97
64DB5AEBE5475E485232CCB8EA40FBBDB2476ACEB379660975044A8B12ED89
E4388208F18F97BC8D8EAC085C701BAE6EDBDC69314A2E3ED06FEE718F3114
CC57D401182107D00CF7CD5EFB65FCD8FB358B28F59DD6318F60BBDBF3028F
B2EA33FF00C7CDE7963FBB0205FC0B3EE3F88DB52C1A658DBC82648B74A3FE
5A393249FF007D3127F5A8EC0EFB9BF97D660A0FB2228C7E0DBAB4EB26E3FD
02F56F7A4171B639BD15BA23FF00ECA7FE03D8555B3BE4B6B3C2A99669A7B9
F2E35FBCDFBE7E7D80EE4F03EB8AD0B5B37593ED97AC24B923191F76307F85
33DBD4F56EFC600BE48009270056569E0DDCAFAABF4946D841ED175CFD5CF2
7DB683C8AD29A686DE3335C48B1C6BD5988007D49ACFFED279F8D3ADDA7FF6
DBF7717FDF44648F7556149F61BAB9E750B9257FE79C398D3F160779FCC03E
957E0B782D6310DB46B1463A2A8007E42A847FE99A934DD61B3CA2FA19587C
E7FE0230A0FA9615AB590D6B3D831974D5DF09397B7CE073D4C64F0A7FD93F
29F63926F5ADDC179199206CE0ED60410CAC3B303C83EC6AA4BFB9D5E07CE1
6E2278CFBB210C83F22F57AE2E22B585EE276DA88324F5FA003B927803B9AA
7656F3348D7F78313C830A9D7CA8FAEDFA9EAC7B9E390055E9A68EDE179E63
B638D4B31F400649AA7A64324768AF38DB34E4CB20F467E76FFC046147B0AD
0AE32EEE84376FA7C4BE63B5DF98B1E7058AC692019EDFBC60C4FF007413DA
BA7B2B5FB2C443B7992C877C8FD3739EA7D80E8076000AFFD4FDFCACBD37F7
2D73627FE584A4AF6F924F9C63D812547FBB44B89358B75EBE5432B11E8599
029FC8356A5640963B2D46EFCE711C52C693E5B8195F91CE7D804A6EC9B55E
675686CBB21E1E51FEDF755FF67A9FE2C0C8326AE02E992DBC784F382C0B8E
02F9A4463F2CD2DBE22D5AEA15E04B1C52FD5BE6438FC156ADDD5DC3671892
627E63B5540CB331ECA0724FFF00AFA5515B49EFD84BA90DB10C15B7072BC7
4321E8C7DBEE8F7201AB17D7324212DED406B99F2101E8A07DE73ECBFA9C0E
F535A5AC76702C11E4E324B1E5998F2589F5279352CB2C5044D2CEE1235196
6638007B935CE692D7D7FA559A479B5804318321C79AE4280768E428FF0068
F3E80706B7EDAD6DED23F2ADD0229393DC927A924E4927B93CD56BDB9977AD
8D9902E6519DD8C88D3A1723F451DCFB03882EE58745D30884856C848F79FB
D2C8700B1279CB1CB1EBD4D685A5B25A5B476D1924463193D58F727DC9E4FB
D58ACAD47FD1E583521D213B24FF00AE526013FF000160AC4F600D2EA5CCB6
11FF007EE07FE3A8EDFD2B52B2679E6BC99AC6C5B604E26987F07FB2BEAE47
E0BD4F38156FFD174CB3240F2E0814B1C73C0E4FB927F327DEAB59A1B5B696
FEFBE4965CCB2E79D800E1723B22F1EE727BD49A546F169F079A312B8F31C7
FB721DEDFF008F1350DEFF00A6CEBA5AFF00ABC079CFFB19E13FE0641CFF00
B20FA8AD47748D19DCED540493D80159FA4A30B18E690624B8CCCC08E4190E
EC1FF741DBF85456DFF131B917EDFF001EF092201D98F4693F1E8BED93FC43
1AF595AC42CD69F6988665B53E6281D4800875FF008129207BE0D61786AF91
347B7114725DCF20DEFE58C819E80BB109955C02376463A56F03ACCD82160B
61EFBA627F01E581F99A3EC57EE7326A1229F48D2351FF008F2B9FD683637A
394D46627FDA4888FD101FD6B9AD7A0D427FDCDB4B14F7CA06C112323A8C82
379DCCB8CF2376DE4641CD59D0F5A85A0792FE2920B89584B292994F9C7CA7
2B9C2850002D80707BE6BAB86786E23135BC8B2A374652181FC4548CAAEA55
80208C107A115CB4F65A869171F6CD2944F0326C689B3B900E54AE32595493
F2F5C12067E503634C8ADFC937314BF69926E5E5EEC476F60BD02F6FAE49D2
ACBD630D64216E44D2C3191EAAF22861FF007CE6B528AE7EF2E5745B833229
962BA249853993CCC67722F521BF880E87E6EEC6A1B3B0D4AF19EEF533F666
9800C88D970A3A26F1F75477DBC93CEE1F747450C315BC4B0C08238D380AA3
007E14DB8B9B7B58FCDB9956241DD8803F5AA1F6DBAB9E34FB73B7FE7ACC0C
6BF82FDF6FC803FDEAE562F0B43A9CD26A134ECCD14AE21006D846D3872114
8232E1BA373C1C9AD94B016ADBEE34B8EE587FCB58C87727D4897047E0CC6B
4C6B1A6AFCB2CBF673D84CA61FCB7819FC335A40860194E41E4114B456668F
9360929E93B4928FF76572E3F43535C6A3676CFE4C926E97FE79A02F260F7D
8B938F7C62B2752BAD425B2936DB2C31C836059B0EF233FCA17629C0C93D4B
71DD6B17C316FA95ADAAC7E6C525C491A4B9915B7488E3230FBB80A49046D3
83CFF173D57DAB528CE26B1DF9EF0CAAD8FAF99E5FF5AC6D5F556758ECFEC5
74D1C84F9F888E022FF096FBB863C1209F973DF152A6A82EF0ADA8DAD983FC
31BABC9F9BE00FA6C3F5AD5B7D3AC032DC81F6894749646F3187FBA4E76FD1
702B4A8AA57F72F6D6E5A101A69084894F42EDC0CFB0EA7D81352DA5B25A5B
476E84B6C1CB1EACC792C7DC9C93EF5628AA1736093482E617305CA8C0917B
8F461D197D8F4EC41E6B1F51D41ED9207D494412DBCD1B090731382763907B
1D8CC769E7D338CD4AB7B6577325F5E4F1C56F11CC08EC1771FF009E841C7F
C047A73D48C5EFEDAD289DB1DCA4CDE911F30FE499354750BE176915ADBDBC
F2ABC8BE67EE5D3E45F9B1970A3E62029E7A1357FED9A839DB158327BCB222
8FFC70B9FD28FF0089CC99CFD9EDFD3EFCD9FF00D1758561A3C973A85E6AF2
DDBACAEE620D12AA82B180AD80C1C8F9811C1CE00ADDFEC7B0639995E7F696
47917FEF96257F4AFFD5FDFB04300CA720F208ACC97F71AB412F45BA8DA23F
EF27CE83F2DF45B7EF354BD94748D6287F150CE7F471572E6EA1B48BCE9DB0
32000064B13D0003924F602B02E2DE69AFEC352D4142AAC863588E0840EA48
2C7BB9755F61DB2793D3D665F7EF2EEC6DF19FDE348C3FD9443CFE0E56A0D4
64B8B7BFB39EDE2F35A41240013B46E601C127D0043D013E82ADDAD8F9521B
AB97F3EE5860B9180A3FBA839DABFA9EE4D59B89E2B585EE276DA88324F5FC
87727B0EF54EC20972F7D76B8B89F1F2F5F2D07DD41F4EA7D493DB1896EAF9
2DD96145335C38CAC4BF788F539E157DCFD3AE0543158C92C8B73A93096453
9441FEAE33EC0FDE6FF68F3E807228D1C6CB05887489E58C7D237651FCAAC5
EDD0B487785F3247212340705DCF41FD49EC013DA9B65686D919E56F32E263
BA57F56F41E8A3A01E9EF927135122F75BB0B76F9A0B694EF53C8691A27233
FEEA807FE042B53FB2608B9B077B33E9111B3FEFD9CA7E2003EF50C97F7960
F1477D109D656DAAF003BB2016398CE4E0007A163ED57E39ACF5281D63659A
36051D7D3239561D41C75079AC6864918E9F6F3B169AD6E5E2727A9DB0C9B5
8FBB290DF8D685CCF2DCCC74FB26D8C31E6CA3FE5983CE076DE474F41C9EC0
DE82086D6158205D889D07F324F5249E493C93C9ACFB8FF4DBF8ECC7315BED
9A5F76CFEED7F31B8FD17B1A7EB1F358B5B83FF1F2C909F759182B63FE0249
AB775731DA5BBDC499210741D58F4007B93C0F7A874FB67B784B4F837131F3
2523A6E3D87B280147B0A8757F9ECCDA8EB74CB0F1D76B9C3E3E89B8FE1497
ECD73226971120CA374AC3AAC5D0F3D8BFDD1F891D2B4D1163508802AA8C00
38000EC2B35F51699DA1D323FB4329C17271129F76E727D941E7838ACFD52C
09D3AE66BE98DCCBB182291B620EDC2E13A1F988C162C47AD33C2EED0D8A69
9231636EA3613D4A64A9FF00BE5830F61B7D6BA7A42400493802B196E25D5C
66CA4F2ACF90665FBF260E084F41DB7753FC3D9AB4EDEDA0B48FCAB7408B9C
9C7524F524F524F7279358B63662E34F85918C5716A648D2403246C72A411D
D4EDE47E582010B1C367737063BD845ADFE092D1B143201FC4AEB82C3D41E4
771D09B9E46A96FCC170B72BFDD9C6D6FA074031F8A1347F68CD17179672C7
EAC83CE5CFB6CCBFE6A2A8C93E9134DE7DADEA59DDBF5E423363A078DB19FC
4647622AE8BDBBB618BF80B27FCF5801753F54E5C7E1B80EE6A1BCB9B6BB4B
492DA55963173182548201E7838EF9C55B9B53B38A4302B19A65EB1C40BB8F
A81F77EAD81503B6A33A9691974F87D721E5FCCE517FF1FF00C2A0B7BAD0ED
19BECD32CD33FDE284CF2B63D76EE6C7B741DAAD7DBEE65FF8F4B29181E8D2
E225FC41CB8FFBE28F23549FFD7DCADBA9FE18172C3FE06F907F0406A6834D
B3B793CF48F7CDFF003D1C977E7B6E6C903D87146A370F6D6723C38F35B091
E7A798E76AE7DB2467DAA7B6B74B5B78ADA2CEC89428CF5C018E7DEA7A4203
0208C83DAB38E8FA66EDF1C0B0BF768B3137FDF4841ACB32D8C64C765A94EC
7BA427ED241F7DCB211F89158F77AC7886249C69E8B2ADBA3348F70A0140A3
272626DB9C7F0F07D401CD7476BA3BC76D0DB5DDD492A448A8110F9498518F
E1F98FE2C47B56A5BDADB5A27956B12C49D708028CFE159DBBED77AF727982
C772A7A34B8C3B7FC047CA3DCB0ED505A59BCDA2E9ED0B04B98218CC6E7A03
B0020FAAB7423F1EA01AD4B3BB5BB88B1531C8876C887AA38EA0FF00307B8C
11C1AB748CAAEA558020F507A5739A8E97A64D22584369089AE325DC46BB92
21F7981C753F757DCE7B1AD0FEC5D347FAB8CC5FF5CDDD3FF4122946936A3F
8E7FFC099BFF008BA63E8D66EE92179F7464953E7CA7048C64658F6E2ABDCC
361685526BB9C3B7DD45964676FA28258FE02A85CDB4E6DE4B8669ECE08D4B
1679E479481FDD457DA09ED9279E0AD5FB0D1B65944B7D3DC493E32E7ED128
E4F38F9580E3A671CE2AD7F63581FBE247FF007E695BF9B1AC69346D2F5877
863B58D2D23CAB48A80348E38C06EBB54F53DCF1D01CAE8F632D9594571A72
23646258580521D7E5708FD47CC0F0D91D81515BF6D7F6F72E61198E751968
9C6D703D71DC7B8C8F7ABB4553D42E1AD6CE49A31BA4C058C1E85D8ED41F8B
102A4B4B65B4B58AD50E444A1727A9C7527DCF534DBABCB7B350666F99F855
5059D8FA2A8E4FE15FFFD6FDE63612D9932E94420EA606E226F5DB8CEC3F41
8F519E6AADEDEC57166F305315C58959DA37E1D421CB63190432EE504120E7
AD3ADAF62852E6E98177B9B8711C69CB398F11607FDF1924F007278AB96D67
21945EDF10F7182140E52207B2E7BFAB753EC3001ABAB1D3A691065E102551
EAD110E07E256B41595D43A1CAB0C823B8359C3F7BACB73FF1EF00C7FDB663
9FCBCB1F9D26AB848A0B9E8609E223E8EDE5B7FE3AC6B52B207FC4C6F73FF2
EB66D81E8F32F7FA27FE85EEA29D25E4D76ED6FA6E30A4879C8CA291D428FE
26FD077E46DAB76B670DA2911E59DF977639773EAC7FC81D00038AB5591A74
896F05D899822C13CCCC4F000663264FE0D4EB28DEE653A9DCA94661B6146E
A919EE47F79BA9F4181D8E74279A3B6864B898ED8E252CC7D028C9AC1B481D
2EECBED23134893DC38F4918A0C7FC0436D1EC0574759507FA56A535CF54B5
1E4A7FBC70D21FFD057D886AB173A7DBDCB89F0629D4604A876B81E99EE3D8
E47B5715AB5C5F69DAD5A2493467CECEE9429F936A385774008CE19B9CE1B1
D14035DBD9436F05B225AB6F8CFCDBF3B8B96E4B13DC9EB9A96E278ED6092E
66384894B1EFC0E6AB69B0490DBEFB81FBF9D8C92FB3376FA28C28F61515DF
EF351B1831F70C937E08BB3F9C82AADF2DCDF5E086D180163B643BBEEBCA79
546F60BC9F4254F6C56A5A5D25DC5E62828CA76BA37DE461D54FF9C1182382
2A86A13C515EDBB4EDB63B68E5B863E9B4041F9876FCA88245B0B76BDD43E5
B8BA604A81B9B247CB1A81C9DA38C0EA727B9A77D9AE750F9AFF0030C07A40
A7961FF4D1875FF7471EA5AB551123411C6A1554600030001D80ACDD50864B
6B7C7335C458FF008037987F443596A0DBC2F7718264B0B89FCC03BC52B798
C3F0565603B9502BA7560C0329C83C823BD6363FB61B71FF008F053C0FF9EE
4773FF004CC76FEF7FBBD65B7FF43BF96CCF11DC6668BD037FCB45FCC86F7C
9F4AD5ACCD37286EEDFB4370F8FF00B6804BFCDF156EE6D60BB8FCA9D77007
208386561D0A91C823D45657DBE7D3EE3EC779BAE630BBFCE45CB22E703CC5
5F5ECCA3B1C80066B6A29639A35961712230C86539047B114AE89229491432
9EA08C8ACE6D17476E4D9420FA88D41FCC0AE7EE3C37A3EA97D24620F2E3B7
1B5E446218C8C38507D101C9EC4903B115463D0868F8867988B71C2C9202F0
007B32865287DC92A7D46715B8BA6984ABFF006559CC57F8D30AC7DC2B21FF
00D0EB47FB4264C07D3E7451DC796C3F25727F4A71D56D8758E7FF00C0798F
F24A6FF6C59FF7671FF6EF37FF00114BFDAF687A24FF00F80D37FF001159B3
EA4973A9431C504F2ADAA995808990EF6CAA7DF0BC6377E38AD2FB75EB0FDD
E9F283DB7BC407E38763FA526ED6641811C107B97697FF001DDA9FCE97EC77
F21CCF7CCBED0C6A83FF001FDE7F23552E6D347B5DA2F55AE5DB3B125669D9
88EBB518B7E381C77E2A65B6BBBC50B71FE876C3A4319C391FED3AFDD1EC9F
F7D76A3538618B4CFB2428238A468E1DAA3002CB22A1C0FA135B159FA85C49
146B05B1C5C5C1D91F7DBEAE47A28E7DCE077A65CC51D868F3C708C2430BE3
3C9E149C93DC9EA4F7ABB6D1F936F143FDC455FC862A9DE5B4CB28BFB1199D
061909C09507F09F423F84F63C7426AD5ADD4379089A13C1C8208C152382A4
7620F514F9E78ADA17B89DB6C7182C4FB0AA7A7C3280F797436DC5C90CC3AE
C51F753FE023AFFB449EF5A0CC141663803924D661D561978D3E36BC3EB1E3
CBFF00BF870BF50093ED49F66D46EBFE3EE71027FCF383AFD0C8C33FF7CAA9
1EB56EDACAD6CC30B68C216FBCDD598FAB31E49F726AA5C7FA65FC566398ED
F134BEED9FDDAFE60B7B6D1EB5AB5913C8FA84CF636CC5618CE27914E0E7FE
79A9F5FEF1EC381CF235238D22458A2508880050060003A002B3AC7F737779
67D830993D02CB9CFF00E3EAC7F1AB773696D76A16E1036D3953D194FAAB0E
41F706A9ECD4ACBFD5B7DB611FC2C42CA07B370ADF8E0FAB1AB16DA85ADCB9
8918A4C064C6E0AB81EBB4F247B8E3D0D54BC9237BE8639582436AA6E24662
0283CAA673DBEF1F62A29DF6BBBBDE34F4F2A23FF2DE50791FEC2704FD4E07
71B854115C68D612366E965BA6E198B0799BDB0BCE3FD90001D857FFD7FDE8
FB66A120C4360CA7FE9B488A3FF1C321FD2B0B5892FEE7F70B1C0973182C0A
B348620472CCF840AA475073B87F0919A6786E0FEC9B5B75D481F36741B676
395F9FE6F2FF00D8393F463DF3C0ED28201183C83599A3E469D1427ADBEE87
EBE531407F10334961892EAFE6C7598203FECA22F1F8316A9F5281EE74FB9B
78BEFC913AAFFBC41C7EB546F35256B284DBC8226BB4DE1CF48E3C02D21CF1
C0231FED11DB34CB7B67BC812DD15AD74F4015539592503FBDDD54FA7DE3DF
1C83B8889122C71A84440005030001D0015566D474FB66DB71731447D1DD54
FEA6A01ACE9CE710CA67FF00AE4AD2FF00E800D7316FAAD85FEA178B24BB2C
5275767756457758D00425800369524838278ED9AEDA2962990490B8911BA3
29C83F88ACFD47F7F25B69E39133EF7FFAE71618FE6DB54FB1341F9F5A43FF
003C6DDBFF002238FF00E22AD5EDC8B4B596E71B8A2F0BDD9BA2A8F7270052
58DB1B4B48EDD8EE751976FEF3B1CB37E2C49A6DEDDFD9515635F32794ED8D
3A6E6F73D801C93D87BE01E7F51D3187D8E257DF7524AD2994F19996362A71
CE1410001E9C5684109785351D20884CE03B42DFEAD89EA081F71B3D48EFD4
1A6B5D2EA77505814688C47CE9D1C608D87E41E8416C1041C1DA456FD625C5
C2DBEA171752E4A5ADB29503A93233640F73B140F7ABDA7DB3DB5B2ACC4199
C97908E85DB938F61D07B0150DE5BCB14A351B25DD328C489D3CD41DBFDE1D
54FE078391CC4BA926A3AE986C57ED2AB1C2C54700B216650C4FDD00B02DC6
41503049C57556B63E5486EAE9FCFB96182F8C0507F8507F08FD4F726B428A
CCBD21AF74F4EE2577FC044EBFFB30A2DBF77A9DEC3DA4114DF8B03191FF00
90C7E758E414BA4F0DCCC23B760CE849C19211FF002C97E8721BFD803D491D
500140551803800552D42DA4B880341813C2C24889E9B8763ECC0953EC6A6B
5B98EEEDD2E22C8571D0F0548E0823B107823D6A9AFEE75875C71750861FEF
44D86FCC3AFE55A959763FBDBBBDBAEBF3AC4A7FD98D791F83B353A4D35448
D716321B5998E5B68CA39FF6D3A1CF7230DEF4CFB75CDB71A85B9DA3FE5AC2
0C887EAA3E75FC881FDEA927D461162F7968EB71FC29B4E4348C76AAE47AB1
03DAA7B2B61676C96FBB795E598F567639663F5249AB4402306B27FB3E5B43
BF4B711AF785F988FF00BB8E53F0E3BED269F1EA712BAC17A86D2563801FEE
31FF0065FEE9CF61C37B0AD3A28ACBD2BF7B0C97C7ADDC8D20FF00707CA98F
AA807EA4D6A555B9BDB5B40BF6890297E15464B31F4551924FD0553DFA95EF
FAB5FB0C27F89B0D311ECBCAAFD4E4FAA8AB76B636F69B9A25CC8F8DCEC4B3
B63D58F3F41D076AB7593A93C6F3D8DA3300D2CE1B19E711AB3E71F5515AAC
C141663803924F6ACBD3C35D48FAA4830251B6107F862EB9F62E7E63EDB41E
453F59FF009045F7FD7097FF004135A545665D5ACD14A6FEC00F38E3CC8C9C
2CA07BF6603A37E078C639C9BC4FA45E5EC70F9A4A404318FA16981E1496C2
809D792016C60F06B6E3BABEBE1981E1B643DF709A4FC948553F8B0AB0349B
5621EF0B5E38E7331DC07B8400203EE141AD3A2A0B9B88ED2DE4B997EEC609
38EA7D87B9E82A0D3ADE482DCB5C7FAF9D8C92E391BDBB0F650028F61505C4
F2DDCCD6164DB36F134A3F801FE15FF6C8FF00BE4727B03A104115B42B040A
12341800555B9BF8E193ECD0A99EE48C88D3A81EAC7A28F73D7B64F159CD1D
DDB5FDB6A179229F3498191061230FCAF3D58EE017278E7802BA0A2B1F5192
D6E18590805DDC0C109D3CBCF4667FE0F623E6F406B8CB3D22FEE353925B9B
8FB41058C71BB3AAB085CC670E373028DD09C9C376E6BA311E8D19DBAADB34
4C7BDD932A7E1231651EC0907DABA48A38A28D52150883A05000C7B62BFFD0
FDE4FB45C6A476D83186DBBCF8E5FF00EB903C63FDB3C7A03D432FED60B6D3
1ECAD9428BA6588F766F3582BB12792DB49249E78AD89238E58DA29543A30C
15232083D88AC9FDFE923F8A7B21F569211FCD93FF001E1EE3A6BA3A488B24
6C1D1C020839041E841ACDB3FDD6A17D6F8FBC639C7A61D7663F38C9FC6974
7CB69E929FF96ED24A3E92B971FA1AB575770D9C5E6CC7A9C28032CCC7A2A8
1C927D2B89D1B48D4E766BC9E58D042DE5451BA993CB5818AAEE01946E1D41
CB0C9C8AEB3FB3E77C7DA2FA671DD576C6BF81550C3FEFAA3FB1B4D2732C3E
7E7FE7B334DF97985B1536DD3F4B81A4548EDA21D76A85C9EC0003927B0EA6
B07539AEEEA10B2936B14C1B6C67EF6C5196925F4551CED1D4E031E48A4F08
D92D8DA5D4214A6660C54F505E28DF07D719C56E49A569F2399BC911CAC725
E326373F564C13F89AA7A5C2DF6BBBB8799E75461046CF82404E5B0401FC44
839E7E5EB56623FF00138BA1E9041FFA14B4977FE917D6B67D55333C9F44E1
01FAB1DC3FDDABD717115AC2F713B6D441927AFE43B93D877AA7656F2B3B5F
DE0C4F28C2AF5F2A3EA13EA7AB11D4FB014DBFFF008FDD34FF00D3671FF909
E92CFF00D1AF6E6C8F0AE7CF8FE8E7E71F83F27FDE1566EECA2BB0AC498E58
F25245E1949F4F507B83C1EE2A1B7BC91661657E024E7EE30FB9281DD73D0F
AA9E476C8E6B26306EF5CB9B63CA412A4AFF00458D7CA5FF00BECB37D56BA8
AC9D4752FB2ABC7061A5442EE48256241FC4D8E4F4E17AB1F419230747D12D
63B89E3D5604B9B9B855B96695558E64C865E9821481D077AE87FB1346FF00
9F0B7FFBF49FE159F1693A7AEAB709145E4AAC309022263C12D267EE11D702
AFFF006614CFD9AEEE21CFFB7E6FFE8D0FFA567A35C8F105BDA5CCC9318EDA
593E5428402C8A093B8839E7A01D2B42E4795A9D9CF8E2512407EA479809FA
6C23F1A6EB1A7ADF5B8654124B01DE80F1BBD573DB23A1EC70DD40AAD6D7CF
6D04734AE6E2C9C656623E78C7A4A3DBA16EDFC4382D5BAACAEA1D08656190
472083594DFF0012EBDF33A5B5E300DE8931E01FA3F00FFB58FEF1A7EA9FB9
582FFF00E7D640CDFF005CDBE4727D803BBF0AD4ACCD1C86D3D261C099A494
7D247671FCEB4EA9DD5EC56BB508324D27DC8D3976C75F6007727007735C86
ABA65CDDDEC7732616E62469CA41F29C4657085C6198B64E0F006381D49E8E
28EFFCA49ACAF56E2290065F3901C83C8C326DC6477218D49F6CD422CF9F62
5FDE1915C63DF7F967F20697FB5ECD7026F321F79227451FF022BB7F5A3FB4
B47BA060FB541306E0AEF56CFB119A68D39A01BB4CB8300ED1B7EF22FC1490
547B2B01ED4BF6DBCB7E2F6D58AFFCF483F78BF8AF0E3E815BEB505EEA76D3
69F3FD867532B0118C1C323CA422961D4609EF4E5D52C218960B05370B100A
043CA000742E484181D8B66A9C9A8F9A76DDEA36F62BFDC8E45693F176C01F
40A7D9AA6B6BAD1EDB74966924ACFD6448E5999BEB261B3F89E2AE7DBAEDF0
20B0939E8D23222FE3F3161FF7CD263599739682D87B06989FC7F778FC8D1F
D9864FF8FBBB9E61E81FCA03FEFD0527F126AABD8DA5BEA36296B024441924
62AA013B536727A9FBFDEAC5EFFA75C0D2D7FD5E03DC1FF63B27FC0CF5FF00
641F515AD59BACFF00C822FBFEB84BFF00A09AB573776B6881EEA55894F037
10327D07A9F6154FEDB7971C58DB155FF9E93E635FC13EF9FA10A0FAD53BEB
5F2ED9E7BF90DEC9C2A45F7216763855D83A8248FBE5B1D6A8E9BA3FD8DEF1
6C5C4773148B9247C928312121D7D0B6E231CA9271C641D2861D2AF9DA2BAB
2892E5065E3745271EA0E3E653D88FC70722AD0D17471D2C60FF00BF49FE14
7F63E93DACE11F4451FC8527F62E95FF003EC959C34DD3E5D5112DEDD152CB
123B01D643F7173EC3E63FF01AD0B8B89AE656B1B16DACBC4B2F51183D8762
E4741D00E4F6067CD96956AAACC22897819392CC79FAB313F524FBD56CDFEA
1F777595B9EE71E738F61D107D72DECA6AF5B5ADBDA47E5DBA6C04E4F72C4F
52C4F249EE4F34CBFB6377692C08DB5D8651BFBAE3956FC08069B05FC12582
5FCCC2142A19B710021EE09F50783EF557CCBDD4788375A5B1FF00968C312B
FF00BAA7EE8F7619F41D0D5C48AD74DB5731A88E28C1763D49C724927927D4
9E4D638825B6D22CEEF6113DA2899D4753B86661EE4E4903FBD8AE85592540
CA43238C8239041ACD3A4DBC64B5933D9B7FD32202F3FEC10533EFB73EF5FF
D1FDFCACBBAFDEEA56506388FCC9F3EEA04607E3E613F856A51591241369CE
D7160864858969201EA7AB47E87B95E87A8C1CE69DF5F430BC3ABC0DBE2782
64C8EECA3CC5CFD0238C763C55D59574AB1B5B200CD3AC6B1A46BD5CA0009F
603B93C0FC8196D6C9D64FB65EB096E48C0C7DD8C1FE141FCCF53DF8C00DB3
CC77D7D01E373A4ABFEEBA05FF00D091AB4EA95DDEA5B158914CD3C99D91AF
538EA4FA28EE4F1F8E01AE96C222752D5240F244A5BFE99C431CED1F4EAC79
3EC3819B3452DC4224B852B36A6E91053D520196287D0940C5BFDA38E8056A
587FC7D6A3FF005DD7FF0044C756EEEE16D2D66BA71B8448CD81D4E06703DC
D47616ED6B6714121DD22AE5CFF79CF2C7F1624D57B7E757BD6F48E15FCB79
FEB469DFBF96EAF8F3E6C8634FF721CAFF00E85B88F6351C7FF133BA17079B
5B662231DA491782FF0045E8BEF93D94D6C5665F8FF4AD3BDAE1BFF44C94DD
4FF7021D487FCBAB65FF00EB93F0FF0080E1FF00E035AB505C5BC375118675
DCA79F4208E8411C823B11C8AC8F0FDB79568F76CED2BDEBB4BBDB1B8A1E23
CE00FE00091EA4D5DBBBA94482CACB0D72E3249E5635E9BDBFA0EE7D812293
DA4492DBE971E583B7DA2766E59FCB23058FAB3EDF6C020703156AFBF73776
779D83185FD02CB8C7FE3EAA3F1AD4ACE8BFE42D75FF005C60FF00D0A4AD1A
E5EC7F7DACA5F9E7ED31DCEDFF00AE68F122E3D8E377FC0AB5B56466B19248
C6E9202B328EE4C443E3F1C63F1AD0474951648C865700823A107A1ACA3FF1
2EBDDDFF002EB76DCFA4731EFF0047FF00D0BFDEA56B39AC58CDA60063392D
6E4E14E7A943FC27DBEE9F624B54F1CD67AA41242C3702364B1B8C32E7B30E
A3DBD7A838E6ABDB927CCD1F50FDE1D842B37FCB588F049FF68670DF81EF8A
9B4B9647B5F2676DD35B131484F5257A31FF007970DF8D374518D1EC07FD30
8BFF004114FBABB916416766A1EE58679FBB1AFF0079F1DBD07563E8324496
9651DA067DC659A4E5E46FBCC47F203B01C0AAF6BFBCD4EFA6C63CB1143FF7
CA993FF6A52587FA25C4BA6370AB9961FF00AE6C7951FEE371EC0AD6AD453C
C96F04971270912963F45193546C2CD574E821BB8D5A42BBA40C33FBC7F99F
AFAB134A746D21B96B180FD625FF000A827D2B40B689A79ECEDE38D0649F2D
401FA5648F0CE99AA069EF2C63B78D94AC51AA047507F89881F7BD0741DF27
A54B5F0FD959CCB66EA90CBFF2CD9A349239B1FEF82C1B1D5430F55E338E8E
35D52D17CB8E1B79907F70987F2521C7FE3C2A4FED2287FD26D2E211EBB048
0FFDFA2E7F3140D674AE8F74911FEEC87CB6FF00BE5F07F4AD14749143C6C1
94F420E41A75616A5762CF51B6936EF7304CA880E0BB97882A8FA9EFD87278
156226B5D26DF37D708B2CC4BBBB10BBDCF5C03CE07403B00052FF0068CB37
1656B24BFED483C941F5DFF363DC29AA7A85A6A5776172B7170210D138F2E1
5F50782EE0E47D154D5ED3ED2CA38A3BB8231E64A809918977208CF2ED9623
F1AD2ACAFF008FCD4FD62B1FD6671FFB2A1FFC7BDA9D161358B91D3CC86160
3D486704FF002AB375670DDAAF999574E51D4E1D0FAA9FE63A1E841154D6F6
6B2222D531B3A2DC01843E81C7F01FFC74F63938AD6AAB7974B676CF395DE4
602A8EACEC70AA3EA48158B13491C2F6704A159097BBBAE02A39E582E78DDE
99E10633D81B16F2BB44B6FA2C21211FF2DA50761C9C92070D213D73900F5D
C6AEDBE9F14327DA2566B8B8C63CC9304807A85030147B2819EF9A9EE2F2D2
D003753A421BA6F60B9FCEA9FF006AC527FC7A4335C1FF006632AB8F50D26D
53F81AC5D475DD4600D1DAC11F9C080177194866FBAADB76AA93E8198F7C63
269746B1B886E5A2D69966B9C7DA230388D0B93BC22FAAB756EBF30E95D6D6
5EB3F369F2419C7DA0A43F84AC109FC01CD6A56569DFE8CF2E96DD20C345EF
137DD1FF0001395FA01EB5AB5FFFD2FDEE9B53D36DDFCB9EEE28DFD1A4507F
226B261D4ED1B52B9B81E648BB23890C7149203B72C4828A460EE03F0AD13A
983FEA6D6E25FF00B67B3FF466DAA516BE27BB6B18AC676954313831151B48
046EF33191B8646722AE1BBD48FDCB0C7FBD2A8FE5BAB8CF1447A8C76AD3C7
6EB0F9CD97459376FC29DCC06D183B370639E5783938AED34C8A068BEDAB2F
DA259C7CD2918271FC207F085391B7B1CE72724E9D65B622D66323FE5E2060
7EB1302BFF00A1B53AE2F64698D95800F38FBEC7EE440F76C753E8A393EC39
A9AD2CA3B40CC09925939791B96623D7D00EC0703B0AAB71FE9F7A2CC7305B
1579BD19FAA27E1F78FF00C07B134EFF005FAC7FB3690FFE3D31FE6027E4D4
EB0FF8FAD47FEBBAFF00E898E9BA8FEFA5B4B2EBE6CA1DBFDC87E7CFFDF414
1FAD6A5604B3BDB36A97110DD2031A20F5728020FC5980A7C91948A0D0AD1D
86D8D44920FBC910E339ECCF8C0FC4F6AD8458A08822011C71AE001C05503F
4005677F684B77F2E9718957FE7B3F110FA1EAFF00F01E0FF78553B9B47827
B2BDB89DE795670393B5143AB2615071FC5D4E4FBD6FBA2C88C8E032B02083
C820F6ACED29D9606B390EE92CDBCA24F24A819427DCA919F7CD1AB12F6A2C
D386BC6108FF0075B973F508188F7A7DE5D35B88ED6D103DC4BC46BFC200EA
CD8E8ABFAF00726A5B3B45B48CAEE3248E7748EDF79DBD4FF203A01C0E2AB6
9DFBF92E3503D277D89FF5CE2CA8FC0B6E61EC6ACDFDB1BBB396DD4ED7753B
58FF000B8E55BF03834EB2B9179690DD01B7CC5048EEA7B83EE0F06AB447FE
271723FE9841FF00A14B526A73C96F6334909C4A46C8FF00EBA39DA9FF008F
1154FC94B4D434F8221848E09625FA0F2F1FA2D6D565E95FBA864B03D6CDCC
63FEB9FDE8FF0025207D41ABF34315C44F04CA1E39015607B83593A4DF9981
B494962993148DFF002DA2538DE3DC743EBC30E1855EBAB18AE59650C619D0
61654E180F4F423D8E47B565DDC9208C45AAE20643BA2BA8C7EED5BA0241C9
4F42092A4719E714CB7BC68F5106E144524C1629947DD120C98DD7FD97195C
F5C855EA08A92CEE9E0D174E8ADC07B99E08C46A7A7DC1966FF657A9FC0752
2B5ACED12D232A18BC8E773B9FBCEC7A93FD0740381C0AB5599A71DD35F49F
DEB83FF8EA22FF004A7EA104AE89736C33716C77A0E9B87F1267FDA1C7B1C1
ED56ADEE22BA812E213B924191DBF31D88EE2A96B03769D243D04E5213F495
C21FFD0AB4EA29E78ADA269E76091A0C927B566C104B7D2ADEDEA944439861
3FC3FEDB8FEF7A0FE1FAF4D7A86E2DE1B985A1B850E8DD41F6E4107B11D411
C8AC2B6D556DD9A2924373689D2E802557D9D80C1C7F7D781FC58EA7A20410
0839068201182320D67C9A3E93292CF670963DFCB5CFE78CD51BAB5D32CC24
63CFF31FEE450CD2866C7A287000F527007722B9486C750BCD4A1BE7669224
499A1844CE495528AC5652C0E5B770785207A1CD771A743A6F97F69D3E244D
FC3305C3E4750E4FCD907A83CE6B4A9ACA1D4A9E8462B3F4624E91625BAF91
167FEF91566F2E459DB4970577951F2A8EACC78551EE4900532C2D8DA5AA44
EDBE43969187F13B1CB1FA64F1E838AAF7188F55B394F491258BFE0476B8FD
11AB529195594AB0C83C107A11590D6B3E9C0C9A7B0302E4981CE140FF00A6
6DFC3F4395F4DBD6B92BDD66FB5BBC8D744B7924820C8690741291820303B7
2AA700838E4E0F461B36B6174AB1EEB2F33CAE55679152343D72891F9A33FE
D312DEF5B1E4EAF2E7CCB98A007B4719661F4666C1FF00BE297FB2D5CE6E6E
679CF4E64318FCA2D80FE22985349D230D1C29149270AB1A664723D028DCDE
FF00AD4172F73242D3DFB9B2B61FF2CD0E667C9C005973827A6D4C9CF46ED5
2E9FA7842B73344222A088A15C6D854F5E9C173FC47F01DC99354CC0B1EA4B
D6D1B73FBC4DC483F01F363D5456A5665E665BEB18073B5DE66FF7514AFF00
E84EA6B4EB2F52568847A8C4097B5C960392D11FBEBF5C00C3D4802A69F50B
781232A7CE79866348FE667F71DB1EA4E00EE6BFFFD3FDF686DEDEDD765BC4
B12FA280A3F4A59A68ADE269E7711C6832598E00ACCDB77A9FDFDF6B69E9CA
CB20F7EE8BEDF78FFB3D0ADA4512EA5388502456D1C70A05180A4E5D8003D8
A56BD62450A6AAF717537303ABDBC5EE87876FF8111C7B00475AAB69F698AD
62D4EDC191D940BA887F1BA7CAECA3FBE0823FDA1C75C11D0413C5730A4F03
078DC6411DEB2B5A8E564B592190C252740CE002C164063E33C672C3D7D706
B4EDEDA1B5884302ED51CFA924F5249E493DC9E4D457D75F64B73222EF9588
48D338DCEDC01F4EE4F6193DA96CAD459DBAC45B7B9CB3BF42EEDCB37E27B7
61C556D2FF007893DE7FCFCCCEC31D36A7EED48FAAA83F8D2D87FC7D6A3FF5
F0BFFA263AAC9776AFAECB14932AC90C6B1223100967F9DF00F5E3674ADCAE
42F2E522BF9A3705C0B812941D5FCB8A308A3DCC8E98FA568C137D937C0ABF
6BD4653BE6087E556238DCC78550300679239009CD595D39EE48935471391C
888710AFFC07F88FBB7D4015AB599AB0CDB467B8B8B73FF9192B4EB2EE3FD1
75186EBF82E079127B1E5A33F9EE5F72C2AADDDD226A265237FD9502220EAF
34DCED1EE157AF60C49E3357ECAD5E10D3DCB07B99B05D87418E8ABFECAF6F
5E49E49A3539A486CA4301C4D26238CFA3C876A9FC09C9F6AA966CDA598B4B
B83987012DE53DC01C46DFED01D0FF0010F7EBB559765FE8F7975627A6EF3D
3FDD973B87FDF618FE2284CAEB5303FF002D2DE3C7FC01DF3FFA1517DFBDBB
B2B51D0B9958762B10E3F276434B7B85BCD3DFB995D3F031393FFA08AD3ACA
9FFD175286E7A25C8F21FF00DE1968CFFE843DC9146A0CD70E9A64448330DD
2B0EAB10EBF42DF747E2474AB175631DC4091447C9787062651FEAD80C0C0F
4C704771914595D9B80D14CBE5DC4381227A67A30F556EC7F03C8205C20118
3C835C86B9A1C4B68D3D8DC7D88C5F701059012410140E5496C602E467042E
EC1107876ED6D2D81D615ADEE615580965FDDC6B18185DE32067EF1DC46723
A802BB48E449504913074619041C823D8D3EB2F4D1B5AF10F5170FFA80DFD6
B52B23FE41D7BFF4EB76DF847337F47FFD0BD4B70FD5BFD440BFDEB883F491
4FF4AD09658E08DA699822202598F0001D49ACC82192FE65BEBC529121CC31
3751FEDB8FEF7A0FE1FAF4D57748D4BBB055519249C0007AD667F6935C7CBA
6426E7FE9A13B21FFBEF0777FC0411F4A3FB35AE3E6D525FB4FF00D33036C2
3FE0193BBFE044FB62B500006D0300718AC93673D81DFA660C5D5ADD8E17FE
D99FE13EDF74FB649AB76D7D6F741B6928F1FDF47F95D3FDE1FC8F43D89155
0DECF7DF2696008FBDC30CA7FC007F19F7FBBEE7A55696D23593FB3AD8B34D
72035C4C4E5FCAE9C9EC5B90A0600192318C55B7548F56B38D005516F38007
0061A2C014EB9B496398DF69F8131C6F43C24A07AFA301D1BF03918C59B5BB
8AED094CABA1C3A370C8DE8C3FC823919156AB2F47056C447DA29268C7D124
651FA014927FA66A4B1758ACB0EDE86561F28FF80AE588F52A6B56B3354FDD
C705D0E0DBCD1B73D02B1F2D89FA2B1357A69E1B68CCD7122C51AF5662001F
89ACD6D4279D4B58C388C0C99A7CC68077201F99BD7A007FBD59234D7D6D84
97B2BCD69D79F9164FF710744F466CB1EC40E4EBC48967AA186350915C420A
A8E14342769E3DD5940F65AD6A86E2E20B588CD7322C683BB1C0FA7D6B3FCF
BFBDE2D50DAC27FE5A483F7847FB319E9F57FF00BE4D48B0D969714975213B
881BE573BA46F419EBC9E8A38CF00536DA09AE665BFBE5D857FD54479F2C1E
327B1723AFA0E0772752B25EFDAECB43A6209C74695BFD4AFAF3FC67D978EC
48A4D23CCB785B4C9DB7C967850D8C6E8CFDC6C7D3E5FAA9A7A625D62563CF
D9E1451EC6462587E4AB5A95926F66BD263D2F053A19D86631EC83F8CFD3E5
1EB918AADA55A45A5DCCBA79CB3380F1C8DF79E31C1524607C84F000000230
3AD7FFD4FDF0BBBD8ED76A60C9349C2469CB363F400772781DCD410D9492CA
B77A8B0925539445FF00571FD33F79BFDA3F801CD69D65E95878A7B9EA679E
563F446F2D7FF1D514ED4A490A25940C566BA3B411D55072EDED81C03FDE22
AFC71A431AC512854401540E800E00ACED3FF7735E5A67FD5CA5D477DB280F
9FFBECB7E54C9E36D3A57BDB752D039CCF1819C1EF220F5FEF0EFD473F7A5D
497ED5A54ED6D8918C66488A9C82CBF3211F8806AF452A4F124D19CA48A181
F62322B360FF004EBE7BB3CC36A5A38BDDFA48DF87DC1FF02EC6AD6A170D6B
633DC4782E88C501EED8F947E2702A4B5B75B4B586D50E5614541F4518AA76
1C5E6A4BFF004D94FE70C63FA547A6C30DDE9E65B8412ADE334C4380415739
4C83E89B47E14FFECD6839D3A77B7C7F01FDE45F4DADC81ECA56B8A86DF50B
FF0010DDDE302F143B57FD1D80666C142CA5CAEDCED2A707239C1E86BB0B7B
A86CA3107D867B541D311F99927A9FDD17393DC9AB29ABE9AEC13ED088E4E0
2487CB7CFF00BAD83FA568D65EB59FEC9BB71D638D9C7D506E1FA8AD4AC7D6
2E6C12D25B7BB9C44CCA5971F33A95E43851C9DA467A76AC6F0AC8BAA2C9AC
DC91F68958B08FA794AD80A707BB2A819E981C77CF635973FF00A46A96D075
5B6569DBD99B289F982E7F0ABF3C10DCC2D04EA1E371820FF9FC8D675BCF35
A4CB617AC5C3710CA7F8F1FC2DFED81FF7D0E47701751FF4792DF511D206D9
27FD729301BF221589F4069D31DBAC5AFF00B50CE3F1DD191FD688FF007BAB
CCD9C8B785107B3484B30FC82545AD410CD0DB99D03A477117CAC320EF6F2F
FF0066CD49FD96B1E3ECB733C1EC1FCC07F097781F862AADF5BEACF69240CD
0CE08C871985D19795600EF048201EAA33543C31AD596AB13DD19145E5C31D
E8782A1380AB9EA147271DC93C66BADAA17B66D314B8B6611DD459D8C7A107
AAB7AA9FD3A8E45241A8C32412CB3FEE1ADC1F3918F31E0679F518E41E8454
36B14B792AEA178A502FFA988FF003FC4C3FBE47FDF238EB9252EFFD06E975
11C4326239FD00FE193FE024E0FB1C9FBB52C9A4D933B4B121B791B92F0B18
C93EADB701BFE040D37C9D560FF5372970A3F8665DAC7DB7A600FF00BE0D67
595F5CC3757EB7566F9332B31888914031201FDD73D3B25690D674CCE259C4
07D2606227E81C29AB924705E5BB452012452AE0F7041F715CF5D4D2C49158
5DB6E9619E06473FF2D63F355777FBC32037BE0F42054925F5ADD4C93DD481
6D54EE82319679D81FF581064B283F7401FED7F7717FED1A95D7FC7AC02D93
FBF3F2DF846A73FF007D3291E94E4D2A066125EBB5E48A41065C1504770800
5047AE33EF566E2FACAD08175711C39FEFB85FE66AB7F6C69EC7113B4FEF14
6F2AFE6808FD693EDD7920FF0047B09327A1959117F42CC3FEF9AA1737BA9F
986DD1E31391FEAA1532BA83DCBB14551E9B979ED934D834033CEB7BADCC6F
255042A1C79680F38C00A18FB9007B56E5D5CC7676ED3B8242E0055EACC4E1
547B93802A2B0B57B78DA4B821AE273BE523A6EE800F651C0FCFA93515E00B
7DA7CBDD9DE3FC1A3663FAA0AD3AA375622775B981FC8B94185900CE475DAC
38DCBEDF91079A65B5F16905A5E2791738385CE55C0EA51BB8F51D4771D09A
91DC4760FA9B499223904A147521D17007BB38603DEAFE9F6CF6D6C04D8334
84BCA4742EDC9C7B0E83D80A6CDA9DA432180319661D638C1771F50BF77EA7
03DEAA5C45A8EA70496D222D9C12A956DD89252A783800ED53E872DF4A7B5A
E9FA78FB6DDB19655E924A77BE4F1841D89E984033E942DBCDA8912EA09E5C
00E5203DF1D1A4C704FA2F41DF2718D7AC7D6A58AD2DE2D4657082D245724F
F74FC8FF008ED6240EE714FF00B55F5DF16317931FFCF59D48FF00BE63E18F
FC0B6FA8CD4D069D04520B894B5C5C0FF96921CB0CFF00740C05FF0080819E
F9AB371710DAC4D3CEDB517F1249E000072493C003926A8416D35D4CB7D7EB
B4A73143D4479FE26EC5C8FC0741DC99AE75086093ECF1869EE08C88A3E5B1
EA7A051EEC47B541F62B8BDF9B5471E5FF00CF08C9D9FF00036E0BFD385F50
7AD6AAAAA2844002A8C0038000ACBD47FD1648B545E90E566FFAE4DD4FFC00
E1BE9BBD6AADB5F4301B999C9792EAE24F2E241B9DBCAC45C0F4F93249C019
E4D58FB1DC5FFCDA910B176B753953FF005D1BF8BFDD1F2F63BBAD6B001405
51803800552BFB69278964B7C0B880EF889E9B80C60FB30241F639EB5FFFD5
FDF0B4B28ED7739632CD27DF91BEF363A0F400760381F9D5CA82EA75B5B59A
E9FEEC28CE7E8A335169F03DAD85B5B49F7E28D15B1EA0007F5AAD61FE973C
BA99E55FF770FF00D7353CB0FF007DB9CF750B5A84850598E00E4935CBDAEA
827F11148D36C13DB0DAE7FE5A14625481D810588F5C67A609EA6B188FEC89
4B8E2C656F987685D8F5FF00718F5FEE9E7A138A904F243A545616CD8B8DEF
6B19EEA2362BBC8F645DDEE703BD6F5BC115AC11DBC236C71A8551EC2A96A5
FBC6B4B5ED34E84FB08B32FF003503F1AD3AE6EF1DE06D5563256499221191
FDF941894FFDF42BA18A34863486318440140F40381543519A5C2595B36D9E
E72030EA883EFBFE00E07FB445430451D9EA8B6F12ED8E4B65541E8206C63F
F220AD8A63C692A949143A9EA08C8359DFD8F62B936CAD6A7AFEE58C633EA5
54853F8835937D35E2ACDA7DB4C3527752AD11401C0618F9A44C22FB6E5C9E
D5A30DA6A7710C6BA8DC08B0A03240482C475CC87E6E7FD90A47A9AC7D4ADA
192DE7B1B04114219639197AC934842A02DD4EC2C19893CF03FBC2AF69B609
269568D0B7913C08563914720038DA4775E3907F0C1C1AD3B5BD6790DA5E28
8AE946703EEBA8FE243DC7A8EA3BF6263D3FF7B35DDE1FF969298D73D961F9
31FF007DEE3F8D6A543716F0DD42D04EBB91BF0E9C8208E4107904720D6746
ECA4E95A9FEF04AACA8E7812AE39538E8E0751DC723B8146395C1B049CEE9A
D2E0C1231EA731B6D63FEFE51BF1AD1D33F786F2E718F36E1FFF00218117F3
4A5D647FC4AEE64EF0AF9A3FDE8BE71FA8AD2041191D0D676B05BFB3A68D0E
1A702153E8652101FC0B571EBA62417B3AC312B0926914C6DF71DC7EF557D8
98D86C6FE12BFED1AE92D5EE843E769D21B988121A19C912211D577F2723D1
81CFF7B157EDF51B79E4FB3BEE82E3FE794836B71E9D430F7524545A8E9897
BB278C84B88482AC4655B69DC15C775C8CFB1E47353DA5EADCEE8A45F2AE22
C7991939233D083DD4F63DFD88205B744911A3900656041079041EA0D66583
BDB4A74B9C96318DD0B1EAF10E304F764E01F5183D4D6AD6627C9AC4CA4604
D04657DCC6CC1BFF00425AD2201182320D673E8FA53B6F3691ABFF0079542B
7FDF4B835CFEA7A0D9EB337F672BCC2383E6924333BED623E5550EC4670727
D063FBD90ED3F4AB3B397EC5706582E24E8C92BAACD8EE1B39CFAA9248F71C
D6E8D26D47FCB4B83FF6F337FF001749FD8BA5B1CCB6CB31F597321FFC7F35
6E0B2B3B5FF8F68238BFDC50BFCA99777F6D640099897604AC680BC8D8FEEA
8C9359F6F2DCEB1109964FB35B37F0C64194FA8661C21F50BC8FEF0E95AB6F
6D6F691F956E8235EB81DC9EA49EE4F7279A9EB263FF008985F1B83CDBDA31
58FF00DA97A337D17951EFBBD8D6B565EAD84861B8EF0CF1107D033846FF00
C758D6A515917D77A4CA1AD2E184EEA73E5C60BC8A47420265948EC78C7AD7
39E46B126AF02B00B0BA82AD718DEC6124A8658C90C46F2C395271CE31CF4D
FD9AD3F3A85C3CF9EA8A7CB8FF00EF95E48F6666ABF0C105B4621B78D6241D
1500503F0155AEAF96DD8411A99AE1C65635EB8F527F857D49FA0C9E2996F6
4FE68BCBE612DC0CEDC7DC8C1EA107F363C9F61C09EE6F6D6D368B8902B3FD
D5192EDFEEA8C93F80AA9E76A577FF001EF18B48CFF1CBF339FA20381F5639
1DD6A48F4BB55632CC0DCCA4106494EE6C1E0803A2823A85001A6E94CC2D7E
CB29CC968C61627A90BF749F7642A4FD6ADDD5D4367179D31C0C8000196663
D0281C927B0AC969522992F355389CE7C8B75F9D9077C2AE4B3E3AB0E00E07
1926C6CD46FBFD6936509FE1520CCC3DD8642FFC0727D1855EB7B5B7B48FCA
B7408B9C9C7527B924F249EE4F26AAB6AFA686D91CE26607056106561F5081
88FC69BF6DBD9BFE3DAC980FEF4CE23047B01BDBF35159BAA3EA71C1B24BA4
49250DB5228C60281F33397DD9551D70173C0EA45657866C2FB4DB6FB34522
7DA02248EB2AF2EAE3230EB8200395390D82338008AE9FFB466878BDB4923F
F6A31E721FA6DF9FF12A2ADDB5E5A5E296B5992503AED6071F5C74AB35FFD6
FDE9306AEDC1BB8547FB301CFE66423F4A0D8DDB75D4671EB85880FD6327F5
ACDD4F4E02D364B753CBE749146433E01123AAB70A141E09AD2D4E476892C6
162B2DD9D808EAA9D5DBDB0BD0FF00788ABEAB1C1105501238C6076000FE82
B2555B5922490116039553D67F76FF0063D07F1753C75A5A87EEF5292F47FC
BA8B5627B052F2A3E7E88E4D74F505CCB6F0DBC925D102103E6DDD3078C63B
E7D3BD79F6913DD5AEBD776F141F21DA21170E50A075076642B72C141C1E70
3939073DA7DBAEE3CFDA2C24007568D91D7F0190E7FEF9AA0753B1935689A5
93ECE228582F9C0C5B9A461F7438524809DBD6BA2041191C835CD5D1F33C41
1DA6787582461EAB1999B3F83ECAE9199514BB90AAA3249E0002B374E569CB
EA72821AE71B01EAB10FBA3EA7EF1EFCE0F414B7798F50B1987F1B4909FA32
17FE718AD3ACFBFD52D34E8CB4E4B3852C2341B9C85EA703B7B9E077350082
F2FC07BC93C885B91144DF3107FBF20C1FC171F522B4A1821B68C436F1AC51
AF4551803F01552FEE258D52DAD7FE3E6E0909DC281F79C8F451F99C0EF551
EDA28AE74FD3E207644649892724EC1B79F525A40C4FA8CD59D246DB3283A2
4B32FF00DF32B0A5D552036134D3A93F6756954A9C3A9404E54F63FF00EA3C
5733A24FAC5BC634CBC9E28A6898C619A22EAE473D43AFCC41DD83D41C83D4
0E901D663EAB6F71EF9787F4C4949F6FBB8C7FA4584A3D5A3649147EA18FFD
F3514D7FA45E21B5B99444588C2CBBA17CF505778539079047435CEEAD733E
993235E9CEE68B3263024585C48ADC701C00CAC3BE411C640EA346C9D2EDA5
6FBD32F9A7EB29DE7F535A2E8B22346E372B02083DC1AA1A43B36996C24FF5
88811F3FDF4F95BF50699A861EE6C6DCF21A62EC3DA346607F06DB5565B613
DEDED916D9E7A453A37712292BB87FBBB50D246279D7FB46D14477A9FBBB88
89C2BB27054FA1EE8DE84678357D1ACB56B62248C3A8386471F3238EC47661
FF00D71C60D45F65BEB4E6CA7F393FE794E49FCA4E587FC0837E1552EAE2DA
729F6CDFA75D27FAB91F00027B07194607BA9393E80E2AF5B5F3F9A2CEF944
57041DB8FB9201D4A13FAA9E47B8E4CD7D686EA2531B79734477C4FF00DD61
EBEA08E08EE09A5B2BA17711665F2E543B24427251C751EFEA0F7041EF55AF
3F757F63719FBCCF09F4C3AEECFE6807E35A954AFEE5EDA11E480F3CAC1225
3D0B9E99F60324FB034FB3B54B3B75854963C9663D5998E598FB93CD49716F
0DD4461B840E87B7B8E841EA08EC4722B37CEB9D33E5BC267B51D26C7CE83F
E9A01D47FB43FE043AB1B93DFDA5BA23BC80F9A32817E7671FECAAE49FC055
6FF8995E7FD38C47E8D31FE6ABFF008F7E06ADDB595B5A06F2130CFF007989
2CED8FEF31C93F89A86E34F4794DD5B39B7B93D5D464363A075E8C3F51D88A
886A2F6C447AA2083B094730B7E3FC07D9BE809A93509E40A9696ADB67B925
548FE051F79FFE023A7FB440EF56A28E0B3B7489311C51285193C0038EA6A9
9D634C276C5389D87F0C20CAC3EA1031AAB7B3DCEA16735ADAD9C83CF46412
49B635048C648277F1FEED5911EB1301E6CB15B0EE2353237E0CDB47E6868F
EC9B7939BC924BB3E923FCA7EA8BB50FFDF35A1143141188A0458D17A2A800
0FA0159FAAFEEE286F7A7D9655727B04394727E8AC4FE15A9590F7B2DE663D
348118CEEB86E5171D760FE23EFF007477248DB505ADD58C0AC9A623DF48E7
2F227CDBD877695B0B91E80F1D00C71567C8D4EEBFE3E665B643FC107CCDF8
C8C3F9283EF56ADAC6D6D3718230ACFF0079CE59DBFDE63963F89AB74C7912
243248C1147524E00FC6B93BEF10E91A65EFDB12E52759E328E90B091F7479
6438078046E049FF0066B3B4FBED475A93FB45217C7215A3D84C60F555F319
554FAB618B7A2F41D15ADB5FC01BECF6D0DBB49F7A492469A438FEF7009FFB
EF8AB7F63BE90E6E2F98678DB0A2A2FF00E3DBDBF26A068FA79C19E33718E9
E7334B8FA07240FC2B45555142200AA3A01C0151DC4F15AC2F7131DA88327B
FE007727A01DCD60DDDBCADA75CDC5D0DB737C16003FE79ACAC1157F0DD963
DCFB631A5A8432E23BEB65DD3DB64851D5D0FDF4FC40C8FF00680ED9ABB0CD
15C4293C2DBA39006523B83D2A0B9B0B2BB21EE215770301F1875FA30E47E0
6ABFD82E61E6CEF2441D925FDF27E25B0FFF008FD7FFD7FDF88A58A78D6685
C488E32194E411EC6A4ACCBEF9EF2C21033FBC6908FF006511867F0665A6D9
9FB55D4FA831F91330C5FEEA9F9DBFE04C31F4506A924EBAD5E3DBB022CE25
49003D270C4807FDC057A7F1707EEF5E8AB123B74BC9B56825FBB23084FF00
BA6253FF00B31A9EDB5041A5C37B78C036D01F03FE5A7DD6500724EEE001DF
A52436D35D4AB7BA82ED2873143D447FED36382FFA2F41DC9C536F1DC6A933
4CA4C77334907070432C51B2B03EAA62383D8D6F595C4BBDAC6F0837310CEE
E8244ECE07E8C3B1F6209D020302AC320F041ACD3A3D829DD6C86D5BD60631
8CFA90B853F883542D2CA44D7E59E69DA7315B222960A1B123B120ED001FB9
E83AD5CBFF00F4C9E3D2D7EE30F327FF00AE60F0BFF033C7BA86AD6ACAD64A
C7662E58ED16F245216F45571B8FFDF39A6FDA2EF50E2CB36F6E7FE5B30F99
87FD3353FF00A1371E808E6AE5BD8DADB46E91A67CCFBECC7733FF00BCC793
FD3A0E2A0D1D99B4BB60FF007D1023FF00BE9F2B7EA0D5E9658E089E695822
460B313D001C935434F8A4919F51B952B2CE06D5230638C7DD5FAF76F738E8
0525BFEF755BB9BB42B1C233FDEE5DB1F50CBF951A41FF004694775B8B8FD6
573FC8D1AAFEF2382D7A9B89A35F6C29F3181FAAA91506A16F0ADCACB3A07B
7BBDB0CC0F40D9FDDB7B1C9DB9EB92BE95224F369CCB05F399206388E73D46
7A2C9EFE8DD0F43838DDAF4D744914A48A194F0411906B96D7B42D2DF4AB88
D22F28B0C22C64A29958ED4F907CA4EE23922A6D2ED2F0DA0B7FED09925B5F
DCBAED88A8280608FDDE704608E7A1AD2F23565184BB89BDDE124FFE3AEA3F
4A87471345F6BB4B82A648A666F9410089407C8073C6E2C3AF6A99B2FACC40
7486DDF77FDB475DBFFA01A4BCFDD5FD95CF662F0367B0906E1FF8F201F8D3
2EBFD02EC6A038865C24FE83B249F8746F6209E16A7BAB37693ED966C23B90
31CFDD9147F0BE3B7A1EABDB2320C9697A975B9194C53C78DF1B7DE5CF43EE
0F62383F5CD5B6557528E01561820F208358B71A15ACB198ED99AD94F3B539
8F23A10878520F394DA7DEA9586A17F66D341A911756F6EDB3ED518C60E324
3A727E5E858647AF4635A5731B2BAEAB61FBC6DA37AA9044D1F518EDB8672A
7BF23BE425FC8B77A4BDD5A1F336859A3C7F118887031EE5706B551D254592
33B95C0208EE0F4ACCB61F6CBE96F5B98E0DD0C5F507F78DFF007D0DBFF013
8EB5AB552E6FAD6D0AACCFF3BFDD45059DBE8A324FBF1C555FF899DE7FD38C
47FDD798FF00345FFC7BF035358E9963A6A15B388216E59BAB31EBCB1E4D4D
3DE59DAF3733C70FFBEC17F9D54FED9B0604C0ED700778637947E6808FD697
EDB7B2604162E33D1A57445FD0B37FE3B5953DE6AD72CF6D6AD0EF190E1417
441DF74AD8507DB631F6C7358963E19BCB8B317B1EA5343348498F67EEE3F2
B39501171B777DEE3A679048AB51D8476AEA979E5C32E787BA8567563ED302
9F806C1F6AE976EB1181B5EDE5F6D8F1FF00ECCF4A25D67BDB5BFF00DFF7FF
00E3541B9D4D7EF592B7FB9283FF00A105A6FDBAFBBE9D2FE0F17FF174BF6F
BCFF00A06CFF00F7D43FFC72A96A1A9BC7672FDB74F95617528D978B9DDC60
00E4927B01CD7396D2F89B5FB182454892DB68565773BA465E09700719EA17
91CF208ADC8F4CBD217ED56B0DD6DE825B866518E988C421063D42E6B508D6
5BEEFD9E11E98793FF0088A5F23566186BB897DD2020FF00E3D230FD281617
47EFEA339CF5016203FF0045E7F5ACE9134D491ADD64B9BC9C70D1C7348C47
B361822FFC0B14D8F424988796DE1B35F48915A53F591871FF0001191D9AAC
C3656D0EAA915B46116DE23239EA59E43B558B1E5880AE324F7AD09F4DD3EE
9FCCB8B68DDFFBC546E1F46EA2ABBE9D1C21A58AEE7B70012C4CA5C003BFEF
7781556CCEB33C4668E78CC4C7F77E7447CC74F5255940CF6F9738C679E05C
FB46AB191E65A23AF7F2A5CB7E4EAA3FF1EA43A998F26E6D278547392A241F
F90CB9A82D664D6A44BE8CEEB28B98B208F31FFBF83CE17A2E7BE4F65353EA
3879AC6DCF2249C311ED1AB383FF007D05AD4AC88FFE25D7BE41E2DAED8B27
FB129E597E8DCB0F7CFA815AF505C5CC1691F9B70E117381EA49E8001C927B
01C9AFFFD0FDE896CE5B691EEF4DC0673BA4889C2487D47F75FDFBF7EC45AB
5BB86ED0B4795643874618646F461FE41EA091CD636A93CABA8225B1C4DE49
890FA3CEE30D8EFB446CC7D85490431DFC496B00DBA640020FFA6DB78C7FB8
3B9FE2FF0077EF5BBCFDC5F59DD0E149681BD0090654FF00DF4A00FF007AB5
2B36C7FE3E7503EB38FF00D1318AA763688BA8DD0998B981F7C2A7A22CC373
30F72FBC64F403031939DEAE65F0BA4CD783ADBDCCB3123AE2299B763EA808
AD9BDB43728AF137977109DD1BFA1EE0FAA9E847F500D3ACAEC5DC458AF972
21DB221E4A38EA3FA83DC60F7AB758F6B2C51B6A37F2B623129F98F6589143
7E4C1AA7D3629044D7770BB67BA3BD81EAA3A2A7FC0475F7C9EF525D5F456A
56300CB3C9F7224E59BDFD001DC9C0155E3B092E1D6E354612329CA44BFEA9
0F63CFDE61FDE3D3B01DF568ACBD37E46BCB6CE7C99DC8FF00B6A04BFCDC8F
C29B71FE9F78B643982DCAC937A337544FFD98FE03A1AD6ACCD27E7825B927
719E691F3EAA18AA1FFBE1451A780B35FC63A25C7FE851A39FD5A925C4BABD
BC79C88227908F4662150FE5BEAF5C411DD4125B4C32922953EBCFA7BD53B1
95AE6D9EDAF0079A1262981030DC75C74C3A9071EF8A8019347E18992C4742
79687EBDCA7BF55EF91F7761595D43A105586411C820D665FF00EF6E6CAD01
E1A4F3587FB310C83F8394A6DDFF00A15DA6A0388A4DB14DEC33F23FE04E0F
B1C9E16B5AB2DBF73AC237F0DD4257DB744D951F8876FCA8B725B56BC7ECB1
C29F882EC7F461526AB1492D84BE48DD2C604883D5E321D47E240AB4AD0DDD
B86189219973CF219587F222A8D83BDBC8DA64EC59A21BA263D5E2E9C9EECB
D1BF03DEAC5DD925D6D70C629A3FB922FDE5CF51E841EE0F07EB8A860BD749
459EA0A2398FDC61FEAE5FF749E87D54F23B64734ED42E258D12DED8E2E2E0
EC43D76FF79C8F451CFB9C0EF566DADE2B5812DE118441819E49F524F724F2
4F73545AC65B6733696C232C72D0B7FAA63DF18FB84FA818EE41359CB7C967
72F2846883FCD3DBB0F997D658F190C3FBFB73EBC364174174D6DA4C96D6CC
0CB0BFD9E1390C3E7C7927DC046527D81AD3F36CB49B786D4B636A854400B4
8DB7D14649F738F73552E535AD42075B69069B91F2920492FE3D557F0DDF85
67E9B622291AD4DDDC5B5D91970DE5334807F1090C7971EFD47703A56C8D2D
4FFAEB9B897FEDAB27FE8BDB48346D389CCB199BDA577947E4E48AB36F6163
68775ADBC7093DD102FF002145D5EDBDA0512925DF3B1146E7723FBAA393EF
D877AA7F67BCBFE6F49B780FFCB146F9D87FB6E3A7D17FEFA238A6DEC51B2C
3A35BA08E39812EAA301615FBC303FBC485FA12474AD9E9C0A6B2ABA947019
586083C822B9DB98FEC320B7D15C8B82322DFEFC207AB024796BFEE919EC18
F157C6A325BF1A9C0601FF003D13F7917E2C002BEE5940F7AD28E58E68D658
5C3A30C86539047B114FAA977791DA2A820BC921C246BCB39F6FEA4F03B9AC
4BDB4927F292F583DCDDB796157EE451119936F7C940577E32491D0715A31F
FA2EA9245D23BC5F317FEBA4602B0FC576E07B135AB504F736F6A9E6DCCAB1
26719721467D39AA3F6FB8B8E2C2D59C1FF96936624FC882E7FEF9C1F5AA46
DEE64D405B6AB70658A64CC691E628F72FDF538259B208201620FCDC715BD1
430DBC6228116345E8AA0003E80549597A68F31EEEECFF00CB69980F658BF7
7F912A4FE35A958CDFF13698C63FE3CA16C31ED33A9FBBFEE29EBEA78E80E7
66AA5D5EC368143E5A49321235197723D07F32781DC8AE7AEADAEB59B8FB0D
DB6D8861A5890FCA8A790ACDFC4EDE9D1473D76B1EA91122458E350A880000
0C0007402B39FE7D6610064430485BD8C8CBB7FF00416AD3A82E6DE3BB81ED
E6CED7EE38208E4107B107907B1AC6B5D4AF2E11AD208C4D710B18DE6E90E4
7F1647527BA8E878240C1AD0B7B048A4FB4DC39B8B9FF9E8DFC39EA117A28F
A727B935FFD9
>    % End-of-data marker for ASCIIHexDecode data. Observe previous line doesn't end in ">".
def  % /ImageGray_data


/ImageColour_data
currentfile
<< /Filter /ASCIIHexDecode  /Intent 0 >>
/ReusableStreamDecode filter
FFD8FFE000104A46494600010100004800480000FFE100404578696600004D
4D002A00000008000187690004000000010000001A000000000002A0020004
0000000100000280A0030004000000010000019000000000FFED003850686F
746F73686F7020332E30003842494D04040000000000003842494D04250000
00000010D41D8CD98F00B204E9800998ECF8427EFFE207E84943435F50524F
46494C45000101000007D86170706C022000006D6E74725247422058595A20
07D900020019000B001A000B616373704150504C000000006170706C000000
000000000000000000000000000000F6D6000100000000D32D6170706C0000
00000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000B64657363000001080000006F6473636D
000001780000059C637072740000071400000038777470740000074C000000
147258595A00000760000000146758595A00000774000000146258595A0000
078800000014725452430000079C0000000E63686164000007AC0000002C62
5452430000079C0000000E675452430000079C0000000E6465736300000000
0000001447656E65726963205247422050726F66696C650000000000000000
0000001447656E65726963205247422050726F66696C650000000000000000
00000000000000000000000000000000000000000000000000000000000000
00000000000000000000006D6C7563000000000000001F0000000C736B534B
00000028000001846461444B0000002E000001AC6361455300000024000001
DA7669564E00000024000001FE707442520000002600000222756B55410000
002A0000024866724655000000280000027268754855000000280000029A7A
68545700000016000002C26E624E4F00000026000002D86373435A00000022
000002FE6865494C0000001E0000032069744954000000280000033E726F52
4F0000002400000366646544450000002C0000038A6B6F4B52000000160000
03B67376534500000026000002D87A68434E00000016000003CC6A614A5000
00001A000003E2656C475200000022000003FC7074504F000000260000041E
6E6C4E4C000000280000044465734553000000260000041E74685448000000
240000046C7472545200000022000004906669464900000028000004B26872
485200000028000004DA706C504C0000002C00000502727552550000002200
00052E617245470000002600000550656E5553000000260000057600560161
0065006F006200650063006E00FD0020005200470042002000700072006F00
660069006C00470065006E006500720065006C0020005200470042002D0062
00650073006B0072006900760065006C007300650050006500720066006900
6C0020005200470042002000670065006E00E800720069006300431EA50075
0020006800EC006E006800200052004700420020004300680075006E006700
500065007200660069006C0020005200470042002000470065006E00E90072
00690063006F0417043004330430043B044C043D043804390020043F044004
3E044404300439043B002000520047004200500072006F00660069006C0020
006700E9006E00E900720069007100750065002000520056004200C1006C00
740061006C00E1006E006F00730020005200470042002000700072006F0066
0069006C901A75280020005200470042002082725F6963CF8FF00047006500
6E0065007200690073006B0020005200470042002D00700072006F00660069
006C004F006200650063006E00FD0020005200470042002000700072006F00
660069006C05E405E805D505E405D905DC0020005200470042002005DB05DC
05DC05D900500072006F00660069006C006F00200052004700420020006700
65006E0065007200690063006F00500072006F00660069006C002000520047
0042002000670065006E00650072006900630041006C006C00670065006D00
650069006E006500730020005200470042002D00500072006F00660069006C
C77CBC1800200052004700420020D504B85CD30CC77C666E901A0020005200
470042002063CF8FF065874EF64E00822C0020005200470042002030D730ED
30D530A130A430EB039303B503BD03B903BA03CC002003C003C103BF03C603
AF03BB002000520047004200500065007200660069006C0020005200470042
002000670065006E00E9007200690063006F0041006C00670065006D006500
65006E0020005200470042002D00700072006F006600690065006C0E420E1B
0E230E440E1F0E250E4C002000520047004200200E170E310E480E270E440E
1B00470065006E0065006C0020005200470042002000500072006F00660069
006C00690059006C00650069006E0065006E0020005200470042002D007000
72006F006600690069006C006900470065006E006500720069010D006B0069
0020005200470042002000700072006F00660069006C0055006E0069007700
65007200730061006C006E0079002000700072006F00660069006C00200052
00470042041E04310449043804390020043F0440043E04440438043B044C00
200052004700420645064406410020062A06390631064A0641002000520047
004200200627064406390627064500470065006E0065007200690063002000
5200470042002000500072006F00660069006C00657465787400000000436F
707972696768742032303037204170706C6520496E632E2C20616C6C207269
676874732072657365727665642E0058595A20000000000000F35200010000
000116CF58595A20000000000000744D00003DEE000003D058595A20000000
0000005A750000AC730000173458595A20000000000000281A0000159F0000
B83663757276000000000000000101CD0000736633320000000000010C4200
0005DEFFFFF326000007920000FD91FFFFFBA2FFFFFDA3000003DC0000C06C
FFC00011080190028003012200021101031101FFC4001F0000010501010101
010100000000000000000102030405060708090A0BFFC400B5100002010303
020403050504040000017D0102030004110512213141061351610722711432
8191A1082342B1C11552D1F02433627282090A161718191A25262728292A34
35363738393A434445464748494A535455565758595A636465666768696A73
7475767778797A838485868788898A92939495969798999AA2A3A4A5A6A7A8
A9AAB2B3B4B5B6B7B8B9BAC2C3C4C5C6C7C8C9CAD2D3D4D5D6D7D8D9DAE1E2
E3E4E5E6E7E8E9EAF1F2F3F4F5F6F7F8F9FAFFC4001F010003010101010101
0101010000000000000102030405060708090A0BFFC400B511000201020404
03040705040400010277000102031104052131061241510761711322328108
144291A1B1C109233352F0156272D10A162434E125F11718191A262728292A
35363738393A434445464748494A535455565758595A636465666768696A73
7475767778797A82838485868788898A92939495969798999AA2A3A4A5A6A7
A8A9AAB2B3B4B5B6B7B8B9BAC2C3C4C5C6C7C8C9CAD2D3D4D5D6D7D8D9DAE2
E3E4E5E6E7E8E9EAF2F3F4F5F6F7F8F9FAFFDB004300020202020202030202
030503030305060505050506080606060606080A0808080808080A0A0A0A0A
0A0A0A0C0C0C0C0C0C0E0E0E0E0E0F0F0F0F0F0F0F0F0F0FFFDB0043010202
0204040407040407100B090B10101010101010101010101010101010101010
10101010101010101010101010101010101010101010101010101010101010
FFDD00040028FFDA000C03010002110311003F00F60FD8FBF698F17FEDFF00
2DCF843E3A7C0ED135ED034A4905DF895018ED2DA42B98E18E0B959A433BE7
930DC02A0EE2AA08AFD28D53C45A3783B41B0F01FC3F852CEC348B68ACA1F2
B252DEDEDD0471C5112493B5540DD9381EA790BA77813C1BF08FE1D5BF833C
24963E01F01F87A021E4675855621CBBC923B00371CB492C8FBDC925BA9CFC
57E3FF00DBDFF676F871713689F08B47BEF8B1E2584951FD9F1B1B35914818
6BA646041EAAD0452A9C6370AFB6E1AE18CFB3D8AC0E5B4AA55845DECAFC91
6FAB6DA847D5B47356AD4A97BD3697E67D47A57847C43AE112DBDB32C6FC99
65F914E7BE4F27F006B91F88FF00137F676F8091B37C61F1BDAC1A8A00C34C
B76335E36ECEDFF47803CDB5B180EC117D48AFCA7F897F1D3FE0A49FB4279B
69E1EF07F88FC29A04E7096FA1E977962ACB938DF7CEBE73120E1C2CAA8DFD
C19AF9DB49FF00827B7ED8FE2293CF5F87D710F9A4B349797B6501C9E49612
CEAE4FAF04D7F45F0B7D1AB29A36ABC579CD1A2BAC21521CDF39C9D93F2519
7A9E4D7CE2A3D28536FCECCFB43E28FF00C15B1ACE39747FD9EFC0D0E9B070
06A1ADE1E561820E2D2DDF6860704334EE0F74AFCC6F8ADFB46FC70F8DB2B3
7C4EF18DFEB56EC5585A1904164AC9F7596D21090061FDE09BBD49AFAF749F
F82537ED55A8853789A1E979EBF69D40B63EBE4452FE95EA1A07FC1203E311
BAB793C4DE33F0FDBC01D4C8B6C6EE72573F301BE187922BFA438673BF0AB8
6173602BD1535F6EEEA4FE52B49ABF68D9791E3D6A58EAFA493FC8FD5ED7B4
DFEC2F87DF0FBC3AC363699A3DBC057D3CB8214C7FE3B5CAD8EB1AAE98DBB4
EBC96DBDA372A0FD40E0D7AEFC58BAF87769AA41378CFC73A4F85560B70045
7F7304076EE63BFF007B2C7807A74ED5E1727C50FD922D41375F1DBC26F8EA
23D6B4F27F259D8D7FCE0F8BBE13F17E73C5D8DCEB2FA0E31A924E32552117
A462AFF1292DBB23FA4F87B88F2EC3E5F4F0D5A77693BAB37BB6FB58F51D3B
E2AF8A6CC08EEDA2BE8FA112A60E3EA98FD41AF20F1E7C13FD90FE3399A4F8
9FF0A74D17B74E2496FAC62FB1DD3B8FE292E6CCDBCEDF46661D8E4553BAF8
FF00FB12E9E09BAF8D3A3498FF009E37B0CBFF00A2D5EB8FD43F6C6FF827DE
8F9FB67C5AF371FF003C2D6F2E3FF4459BD7BBC33C37E2BE5F68C6BC6715D2
A4E33FC7597DD247163F1DC3D5B7834FBC535FF03F03E65F1F7FC11EFE0478
C99EF3E097C49BEF0E5CC8CCE2CF548E3D421C1FBB1C78FB34E801FE27329C
7AD7E7CFC54FF82547ED81F0D525BDD3340B4F1BD8428D234DA0DD09A4555E
83ECD3AC170EE47F0C51BFA67A67F62BFE1BABFE09D4BFF353EE5BFEE13AB7
FF002057D53F06BE35FC1FF89EB04DF09F55F126AB612E3CBB99345D5A0D3D
BE97177671DBFE4F5FD0DC339B714BB4338C1535DE54EA3FFD224BFF006F3E
331F87CBF7C35597A4A3FAA7FA1FC65F897C2BE28F05EAF3787BC63A3DE685
AA5BE3CDB4BFB792D6E133D37452AAB8CFB8AFE8F7FE0939A3B689FB16F8B3
5B65C49AD789AE994FAC49059C007E0C1EBF573E267863E14F89BC3135BFC6
2D3346D4FC3F07EF241AE436F2DAC647F193720A291D437047635E037FAFFE
C97FB307C0FD33ECBA8DBF857E1C6B3A8BFD864D385D6A104B757464B96F28
C2B72DB1BCB7208FDDA801570368AFD532FC0D7C5D78E170B4DCEA4B68C539
49FA2576FE478D3A528D3F6D25685ED7E97ED7D8AB5A3A4EA977A35FC5A8D9
B6D92239C7661DD4FB1AF22B3FDAD7F618D4706DFE2798F3FF003D6D6F21FF
00D1B68B5D4597C7AFD8EB53FF008F3F8B9A5C79FF009EF7490FFE8D54AFA9
C47871C434BF8B97568FAD29AFCE2722C6527B4D7DE8F6CF1DE8B6BE21D2E3
F1CE84B924017718E48C71B88F55E8DEA307A64D7E67FF00C14B7E04FC43FD
A63E307C11F81DF0D2CC4B79A6E9BA9DE5FDD4B916BA7DA5CC96B0F9F70E01
DAB9B760AA32CEC36A826BF4FF00E1278AFE15F8A67D42DBE1B78EB4BF1745
122B5D5BD8DDC176620F90ACE22762BBB047239FC2AF7C6FF0A7C42F15F82B
50D17E13788ECBC19E23D5D16DA4D5A7B7334E96C9BCED84AB215705CEC73B
B66E62A0310C3F26E1EF0B30B95F1162B1937F57789E453E74D2834E579B49
397BDCC9B4936DA6F5E63DBC5E7752BE129D07EF725EDE6B4B2F95BFAB1F8E
FF00137E2D7C28FF00827A7C36B9FD9B3F65F923D4FE235F2AFF00C247E257
546961B80A412C46E1E72EE222841296E092DBA42E5BF1C2FAFAF753BD9F51
D4AE24BABBBA91A59A6958BC9248E7733BB364B33139249C935FACDAD7FC12
1BE3BC92CB75A6F8DBC3DA8C92B1767B992F216766392495B797249EB93F8D
7946B7FF0004B2FDACF4ADDF61D3B49D631D3EC9A946B9FA7DA443FAD7FAEF
E0E710F879C3797AC1E5D99527525673A927CB29BFFB7AD68AFB31BD979B6D
BFCD731A38BAD3E69C1DBA2307FE0995A15C6AFF00B61784EFA2FB9A35AEA9
772F1FC0D652DB8FFC7E65AF62F8BDFB577C7BF0D7C6EF1DC1E11F1CEA569A
6DAEBBA8C36B6ED289E08E186E1D11523983AAAE1460018AF78FF8271FEC9B
F1D7E087C75D77C59F167C2CFA1587F605C59C12B5C5B5C2C97135CDB380A6
DE5907091BE6BCD93FE09EBFB4E78EF5CD4FC41ACD9E99E1E9751BA9EE196F
EFD5DB3339727FD0D6E077F5AFE19FA6E711ACDF89E8CF28AAAAC214A31E6A
72525BCA5F145DBED773FAABE8BD3C9708B1B573E9538C6D14954E5D6EDDED
196AEDCAAF65A5D7739CD0BFE0A2FF00B4EE9057EDFAB586B417B5E5844B9F
AFD98406BDAF44FF0082A4F8B19162F1B7C3ED335553C37D92E65B51F82CCB
73F967F1AC0B9FF8277683E10B559BE2DFC6AF0FF84A600174915360F5C497
3736A71EFB7F0AC1BEF857FF0004D6F05C5FF1597ED04DAA4D17DF3A4DCDBD
CA363AE16D6DAECE0FB367DEBF92B0984CF16AA4D7AB4FF3B9FB6F10F11785
93BA9D18C9FF00D3B84E3F8C5417DCCFA6745FF82897ECE7AE6C87C59E0AD5
34576EAF6C90CD12FD5A39227C7D10D7B9F84FF695FD93BC4370973E1BF88A
341BA6C0D979E6D92AFB335CC6A847AFCE457E6A5F7C6FFF008246784E3F2A
DB4CD7FC64D1FF00CB5853518CBE3DA69ACD79FF00745635C7FC143FF606F0
DC5E4F82BF67797550830A755B7B0527EACEF787F9D7D3E129E6ABF8B283FB
EFF858FC2B88719C0152FF0050A3898BF5872FFE4CE4FF0023F7225D1FE1B7
C66D0E3B3D5EF349F1ADA5B3ACD05DD9CA865B79570565866B7919A2941191
244E8476AD3D73E12F84FC47AFF83BC5FACC4D75E24F024F24DA66A6E17ED4
82E217B6B88DD9400C9342ECAEB8C13870032823F03A3FF82C5E8BE191E57C
33F803A2F87923E232B7A8303FDDB7B3831F40DF8D50D2FF00E0B1DFB4AF8D
3C55A3F857C35E10F0BE9EFACDEDBD9C66482F6E240D7122C6307ED71AE72D
DD4D7BB4A0D7BD24B9BAD8FC9B1F8A8CBF73465274936E2A5D2FBEDA2BF5B6
FA5F63F6FBC6DE0AD76FFC5D77269162F343701250C30A9B88C30DCD85CE41
38CF7AA96FF0A35C584DDEAF756DA75BA02D2348FB8A01D49C7CBFF8F57A97
8CBC51A343713F847579EEB4F8EFED7FE3F2D2468E584C85972AC9F32B2E01
0C33CF518AFC47FDAE7F60FF00DA2A7171E38F02F8D356F8C1E1CF9A516D7B
7925D6A96E83FBB196297007FD310AFD845819AFCA7C29FA2AF875C63C498C
A599675EC6B7B4939537A24E4EED69CAD6AEC9CA693DA377A1F439871AE6D8
3C252E4A3EED95A56DECBE6BF03F4CEF7F683FD983E0CDADF5878C7E2A6937
8970AC97165048B7C791821ADED7CF901238208E475078C7E317EDC3FB2468
FF000DC59FC7AF81EC9AAFC29F16ECB889ED89923D3A4B9F99133D7ECF267F
74C7EE9FDDB60ED2DF9D3736D7365732D9DE44F05C40CC9247229574753865
653C820F041E95FA31FB0EFED6BA47C3C177FB3F7C7109AAFC28F176FB775B
BF9E3D325B9E1DF9E96D293FBD51F71BF7AB83BF7FFB07C03F472FF885D97C
315C1D5675A14FF89424EEAA53DDFB3BDDAA91BB946F277D52DED2FC8B31CF
E7995572C5D949F5F3F3F2F91F7B7FC137FC627C73FB226B9E07B89035DF81
F539FCA53C95B5B8C5DA1F6CBB4E07D2BE99D2755BDD13508752B07D934272
3D08EE08EE08EB5E0FFB2CFC03D57F651FDA7BC5BF0E6DE47D43E1E7C48D21
AF745BD63B834BA7CA0FD925238F36386E2521BA488030E772AFB7DEDAC963
793D94DF7EDE468DBEA8707F957F893FB49B2DC3D2E37C3F14E4B53F77898F
3C64B469E93D7B494E534FAA71B3D8FDD3C28AEE782AB83ACBE17B793D3EEB
25F79F15FF00C1477F631B4FDA07C2337ED2BF05F4E0DE38D1A01FDB9A6C0B
99753B58131E622A8F9EE6041F28FBD2C4028CBA221FC4FF00D9BFF6B1F8CF
FB2DF893FB6FE196AE574FB8756BED26EB74BA7DE81C7EF62C8DAF8E048855
C0E036320FF545E13F13DDF85B545BD872F03E1668F3C3A7F88EA0FF00426B
F183FE0A83FB14D9F8135193F69FF83B69BBC17E23983EB56902FC9A6DF4ED
813A81F720B8738653C4731DA0ED91113DEF03FC5CA7C4D80E4AED2C5534B9
D7F32E934BB3EABA3D366AFE071570E4B035AF0FE1CB6F2F27FD6ABE67D95F
0A3E26FECFDFB6EEB361F11FE0FEA4BF097F683D1BFD28D9CA47977B22025F
7050AB770BA964774026084F9B1B20553DFF00ED3BF0135EF156B7E0FF00DB
1FC1FE1D9B47F8B5F0AAFACAEFC45A45A1DCDAC69D64E1A75B775E272600FE
438F9A488B40E04A8234FE5B34CD4F52D1751B6D5F47BB96C2FACA459A0B88
2468A58A4439574752195948C820820D7F419FB07FFC1513C4DE2ABCB0F849
FB42585DEAF72764169E23B1B5927939E11750860563EDE7A0F4F317EF495F
B3D2C1C29CDCE1A5F7ECFCFD7F3EA71E3B88F138BC2D3C2E29F3FB3D20DFC5
15FCB7EB1EC9FC2FE1B26D3FD45F8AB690AEBD06AD6A43C1A940922BAF218A
8DB907D36ED3F8D705A46AB79A26A30EA760FB2684E47A11DD4FB11C1AFA2F
E237856EB5ED26C1343B75925B47DA88A551444CB838C903036AF15E6D17C2
6D6E388DCEA9796B636E8373B3393B00EE780BFF008F57F9E9E29F84DC40F8
BF1189C8F0B39294A352338AB252959BB49D95D4EFD74D0FD2B20E21C1FF00
66C218AA895938B4FB2D36DF63F2BFFE0A95FB24D9FC48F0A37ED77F0A6C89
D534D8153C516712E5A5B685428BDC2F3BED940598E0E610AFF28898B7E497
EC4BF137FE1517ED55F0DBC692CBE4DA2EAD158DDB13855B5D441B3999BD42
24A5FEAA0F5C57F5307E32FECE3F0896F6D3C5FF0015742956E90C73D97DA6
199883C1DD044F2C9D320E570470457F3A1FF050EFD9223FD9ABE28C1E2CF8
7D1B4BF0D3C6F9BDD16E22712C56B2901E4B3F317F85321E027EF44400CEC9
2357F7F70BE073F8E5186C4710E0E542B4959DD7BB26B7716AF177D1B49BE5
BDBB37F91E65F565889C7093E6874FF2D4FD57F889F136F7F641FDB8F5BD6A
4523C19E3D8ED6FF0051B58F27315C02925C85EF2C7729338FEF2B32F05B23
F482E3516F0B5C5AF89FC2D3A5EF87B5B449E2F2DB742EB22EF0518646194E
E461DB8E40AFC9EFDB2AFC7C60FD9C7E04FED1F16C79F57D363B3D46403E66
BAB8B7598A67D239A1B91F535E93FF0004F7F8FD6DE21D267FD9B3C7975925
649B419A43F36065E4B504F74E648C7A6F5E814578781CC7EAD8FA983A9F0C
9DE3E4DEB6F9FE7EA7F46F15F077F6E708E0F89B08AF5A94392AA5BCA34FDD
527E714937DE2FFBA50FDB03FE09FBE1FF008B3697DF193F66FB68EC7C4677
4DA9E829B6286F1FAB496E3858AE0FF12711CBD46D7DC64FC84F865F1DBE3A
7ECEFAE5CC3E01F11EA1E1AB8B69DD2EF4E9326DCCC8763ACF673868CC8BB7
692C9BD718041AFE9B926D63C1BADC891BF95716EDB5875475EA323BAB0E47
F435F347ED61FB1B782FF6AFD22E3C7DF0FD20F0FF00C4FB2887999C241A9A
A0C2C77047F18002C73E3206124CA8529FE807827F48CA50A31E1DE2F4AB61
65EEC6734A5CBDA334EFCD0ECF571EB78FC3FC8799650EFEDB0FA4BFAD8F06
F843FF000558F05F8AD2DF40FDA4BC2634E98E13FB6348569601927E692D99
8CF18518C98DE52C7A201C57E9578A75EF0A78CFE19F863C61E09D41354D0E
F021B2B94CE2485E3383F3056046CC10C0104104020D7F24FE2CF09F893C0B
E23D43C21E30D3A6D2359D2A530DCDADC2EC92371CE08EE0820A9190C08209
041AFE8E3F641BE3AD7EC1DF0FA62D97D3A7BD85FDBCBBEBA451FF007CB2D7
E71FB437C0CC872BE01C56779241C554B27152E685ACEA2946F76BE0E8F96C
F448F7BC3BCD6ACB34A54EA3D9FCFB7EA7AA693A6DC6B1A95B6996A3325C38
51EC3B93EC0726BC5FF681F8DF069FFB567C1BF81FE1C9B6E9FE19D634F935
0C1E0DE5FE2DE146E3AC704A5890707CEE795AFA2BFE128D1BE0E7C33F127C
6BF132EE8349B6716B1138334AC42246A70706594AC60E38C9278AFC05F0DF
8E358D63E36E91F11BC437067D4EE75FB6D4EE65E9994DD2CAC40EC33D00E0
0E0715FE54780DC2DFD8F93C730AAAD5B14D35DD528BF77FF037EF79A48FEC
FE00E13FED9C562B17515E95084E11ECEACE2D3FFC022FE4E499FD3CF88FC4
7AB5869BAECFA159FDBF51D0D56E52D07DEBB842091A243DA4701D6339C07D
A5BE5C83E11AC45E1BF18F86B4FF008A9F0EEE52FF00C3DADC6270D17442C7
072BD5486CABA1C14705480781EAFAF6AC340F8876974E76C3736E91CBE9B5
999727E8403F857E7B5D7C47FF008633FDA7B5BF01789D4B7C27F88F27F6A4
4A4129A74D764ACB222F4F2D650CB2A0E7CAD8C32542B7EF9E2D70460F3DCB
BEA98CD3F967D69CFA3FF0BDA4BAAB6CD5CFC1BC37C0D5C53AD4F04AF5E0B9
D47FE7E417C715FDF5A4A1DED25ADD5BE96F0D787EEFC4BAB45A65AFCA0FCD
23E321231D58FF00203B9C0AF6BD575BF09DBEEF8797B630DEF87A6B792CAF
63994491BACC0ABA3A9F95D48244808E727D306EDFD8DBF81FC33713785616
98DF3166B8521FCB8DB254E47F08070A7A739279E7C24924924E49AF9FF027
C225C2D8475F10D3C5D4F8A4BECA4F48C5FE2DE977E88F9AE2DE2378FAAA10
D29C765DDF77FD7E67E107EDBFFB24EA7FB32FC42FB56851C975E01F113BCB
A45DE4BF907EF359CCC727CC8C728C4FEF23C302584817D93FE0961F19A3F0
4FC6BBEF853ADCA068DF10AD8C088E7E41A85AAB3C3D781E646648F1FC4C50
7615FB25AF783FC1DF1D7E1DEA9F04FE25C3E7E9DAA4645ACE3026B699798A
4898E76C9137CC84E411946054953FCD17C4DF871F11BF653F8DADE1ED589B
4D7BC2D7B05F69D788A445711C52092DAEE13DD18A838C92AC191BE65603FD
9EF0BF8F687889C2B8BE16CDE4BEB6A9B577F6D2F82A79B8CB979D77B3FB56
5F916330AF075E35E9FC37FBBCBFC8FE8FBC41A4C9A16B577A54993F677214
9EA50F2A7F1520D7CD9FF050DD2C6AFF00B1058DE9F98E8DAEDA5C67D373CF
6FFCA6C57D5573E2BD27E2D7C35F06FC69F0F802D3C47630BC880E7CA91D77
18CFFB51B878D8FAAE2BC33F6BEB23ACFEC1BF10A20B97D3E7B2953DBCBBFB
5763FF007CB357F897F44CE19ABC1DE3BD3C9EB45C6D539527D232AB4DDBFE
DD578BF34CFDDF8C71CB1FC3B1C42D5F5F549AFF00827F34D5FD1FFF00C126
FC0FABE85FB3DEA3E33D56E2778BC53AA4A6C61799DE04B4B2CC3BA3889DB1
B35C79C1CA8CB055C93818FE7374DD3AFB58D46D749D2E07BABDBD95208218
C6E79259182A228EE5988007AD7F619F0A3C2767F08BC23E03F837A73A3A68
3A44704CE8BB04B345180F2EDEC659048E7DCD7FB81F4CEE2A8E1B21A19545
FBD5E777FE1A7ABFFC99C7F13F05E1DA1CD55D4ECBF3397F056A4DA1F8A228
E53B63998DBC9E9F31C03F83015FCF07ED81E00D6FF664FDAD75B9BC172C9A
328BC8BC43A14F0854F263BA6332F940701219C490A823911F2083CFF403AE
AF93AF6A28BC6CB9980C7B39AF857FE0AA5F0D078DBE10783BE3CE9906FBDF
0DCDFD9BA93228CFD96F0E11E46EBB62B850AA3D6726BF98BE8A9C611CBB89
E380C435EC715174DA7B736F0BAEB77787FDBE7B59E61F9E8F32DE3A9F56FE
CF1F1DB43FDAF7E1043E31B248AD3C6DE1F54B6D6AC223F765C12248D4E5BC
99C0678B39C10F1E58A935D75ADACF7975159DBAEE966608A3DC9C57F377FB
347ED05E28FD9B3E2AE9BF113C3D9B9B41FE8FA9D896DA97B6321064889ECE
301E36FE17552415CA9FE9FAD7E207C295F87F3FED3BA76A8971E0F1A4CBAB
09500CE11499005EA26C831988FCC25CA9F9B8197D20FC10ADC399C4679753
72C36225FBB4B5E593FF00977FFC8778E9AB4C794E64AB53F7DFBCB7FF0033
E58FDA47F6BAB0F801F1E7E107C1BD2EE9174E5BA4B9F133E784B5BE57B481
5C83C6D691EE9D48CFC9111C1E7EAFFDA27C49F17FC0BE0A9BE21FC1BD361F
14DF786D5AE750F0E4C086D52C3ACA2D6540648AEE30A5A2C07571BD0C4EE6
329FC9E7C59F895AFF00C61F893E22F89BE276CEA3E21BB92E5D012CB121F9
628509E76451858D33CED515FD387ECCBF1A6EFE25FECD1E02F8AAF29B9D47
4D84699AC296CB3C96C7ECF2BB7FB6E55261E81FD0915D3F49CF09E8F05F0A
65B9C725FD9479310D6BAB6E6E5A6EA0B9FD6318ADEC69C3D899633152A09E
AFE1FD17CF4F9B3CBBE05FED61FB2E7ED689058783B57FF843BC6F38F9B43D
4B64134B260922DF9F2AE07048F25B7851B9E35E95EC5AFF0083F5EF0E39FE
D0B7261CF1347F3467F1EDF43835F8A3FF000545FD8D60F86DE211FB4C7C24
B427C13E2B9C3EA90DBAFC9A66A539CF9A00E520B96E99E239B29950F1A0F2
9FD9CFFE0A9FFB43FC144B7F0F78E261F12FC2B18D86D75695BEDF1A73C437
F8793A91C4EB300A36A851CD7F9BDC77F47AE1FCFE1F5BC1DA85592BA9C2DC
B2BEA9B8ECEFBDE2E2DEEDB3F47CA78CF19837ECEAFBD15D1EEBE7BFDF73F7
74120E470457D47E20BB33780F54F16DBA17B993449DB6A0DCC5842D205007
53B8918AF8AFE0A7ED43FB2B7ED5AB15A7C3CD7C785BC5F38E743D502DB5CB
BF2710A6E31CFC293FE8F23155E5D54F15F78F82F4CD4746D022D235303CCB
56755656DCAE85B7023BE39C6081D2BE37C0EF0BB38E18CE71384CC29A950A
91528D48EB1E683D2FD62F9652DD25BA4D9E9F15E7F86C7E161528BB4E2ECD
3DECD6BEBAA47C73F09BE15C5FB37FECCFE04F81F12AAEAD1DAADD6AC5086D
F7B3B79D73F300372899CA4648CEC451DABB8BFB2F07FC35F0ADCFC48F8CDA
AC3E1EF0FD8A86613B157727954DA3E72CD8C2C680BB1E00F5E4FF0069DFDA
B7E0C7ECCB7373AA788E61E26F1D4F18363A2DBBAF990A63E4698FCC2DD0F5
DEC0BB64F968466BF9D6F8FBFB48FC53FDA43C547C4BF117523241096FB169
D0652CAC91BF8618F2793FC4EC4BB6065B0001FD97E107D02F30E3FE229715
715FEEF029A54A0FED423B593F8B99DE5FC8AFAF3BBC57C8E3B8FA397E0960
B03F1BD652F37DBB5B6BEFE9B9F687C7BFDB2FE247ED85E38D27F67FF82D0C
BE17F066BB7B0E9B0C0BF25CDF895C207BB319C240A3E630A9DA0025CB606D
FDBFF87FA9F867C2D75AAFC08F07AAAE9FF0C7C3DA4C521041657BA8E711C6
E0747115BAC8C7F8BCDC9AFC50FF00825C7C36D2E1F16F8BFF00692F192F93
E1FF00871A74FE54CCB902EA6899A675F530DB070475CCAB8AFB93F615F176
ADF11ED7E3AFC54D6B22F3C4B7D148CBB8B08D5629DA38958F3B62491517D8
0AFDE7E9419965794E6581E0BC8A9AA7430E9B925D6728DEF27D5A8F2EAF6B
C968958BE0AE18A98BC9F31CF313AAA6A0A2FF00BD2A915F8479AFEA99F5BF
833C50BA34EFA76A43CCD32F32B22B0C852C31BB1E8470C3B8FA560F8E7C20
DE1ABE171679934CBBF9A17072173CEC27D8743DC7D0E312BD60788BC23E1E
F07683A37C48D522B14F165FAE97A609CEDDF73323C90C48D820330898A16E
09DAA39201FE1CF167C23A7C5B80FAB528FF00B4C2EE9C92BBBDAEE2EDAF2B
4B5ED6E6E967BF0DF10CB2FADCEFE07F12FD7D57FC03E27FDBDFC163E21FEC
E1A17C4AB640FA8F822E963B8624E7ECB7656DE5E07526510373D06E3EB5F8
A1A6EA5A868FA85B6ADA4DCC9677B65224D04D13149239232195D58721948C
823A57F4E10F8222D5B48F177C1AF1393F61F10D84F1248A3AC732189A44CE
7E600823D197DABF9C2D1BE1AF89B57F89F6DF09160F2B5E9B551A43A7DE11
DC09BC97DD8FE1420963E809AF83C831589C5E5985AD898B55E2BD9544F755
29BE577F392B4BE7A1FDCBE01F11D0FECFC5E5D524B928BE78B7B7B3A89CBE
E5252BFA9FD017C2DF177C57F8F3FB21DC7882258345F1DF88346D42C6C2F5
898D24B85592082E8ED5CC5B9C6FE0100FCCA0A90B5FCAD789FC31AFF82FC4
3A8F84FC55632E99ABE933BDBDD5B4C36C914B19C329EDF423208E4120835F
D716B22D7E1FD8F86FC0DE12636D67E17B4820880EC23411A061DCEC193EBB
8E6BE31FDB77F64AD3BF69DF073FC5BF86768B07C49D0600B736B1803FB56D
A31FEA5BD66403F70FFC43F74D9F90C7FE9D7D143C5DC3F0DE2A595669654A
BF2DEA758CD2B2E67FC8EFBFD97AECDB3FCF1E39A54B1B8BAD8AC143920E52
718AE916EE92F447FFD0FDB9D5EC3C2DE3DB5B4D46DF4BD1BC5B6F6E4BC135
C3457091B11D626F2A50091DC1158777AA7C41D161F2348F0D5ADB5A47F756
00241FF0158D94FF00E3B5F91BF123F650F057C7BD126FDA03F60DD65B41D7
81DDA9787209FF00B3D9666F9B10ED7516B2E73842DE438E63640BF3FC11A2
FED9BFB62FC28D52E3419BC79ACC17BA6CAD05C59EB4A2F658A48CED78A44B
F491D1948C11C11ED5FB6E07E8B7538EF2DFACF0A7134A36D5D26A30706FBD
A355B4DED24ECF5D6F74B4C4E6B5328C4CB0D98E0D29C5D9F35EFF0075D5BE
E3FA2BD53E21FC40B79025D13A731FE136E173FF007F0135CE5CF8EBC5D763
12EA932FFD73223FFD000AFC93F06FFC15CBE3AE9412DBC71E1AD13C4D6C3E
F3224B6370FEB9757922FCA2AFA57C2FFF000545FD9B3C4E121F887F0FB53F
0E4D21F9A4B2F26EE153DCB3A35B4A47D233F4AFE5BF11BF672F8BD439E784
CCE7888F6F692B7DD19B7F7535E87D6E57E2464DA2A986517E497EA97E67D8
32EBFAEDC0C4FA8DCC80FF007A673FCCD68F83E16BEF166968E4B9FB4239CF
3908771FE55E7FE14F8F7FB1C7C4BDABE12F89D67A5DD4B80B06A6E6C4863F
C216F1612C7FDD739EC6BE97F04F807EC1AD59F892CB52B6D4F4D08ED14B0B
6779652A0AE37291C9E4357F1AE2BE8C3C7B94679838F1060E6A9AAB0E6949
BD1292BBB4ED2DAEFE13ED9F1A657570B53EAD34A5CAECAD6D6DA6DA7E27F2
F5FF00054BF114FAFF00EDB9E3D81E512C1A447A5D8C18FE054B082475FC25
924AFCF98E39269121850BC8E42AAA8C924F00003A935FD39EADFF000495F0
D7C51F8DBE34F8C3F1C7C7177A843E26D6AF750834BD2635B7F2EDA5999ADE
296EA50ECDB62DA8C1234C63873D6BED4F07FECBBF0EFE01E9B1C5FB37FC3B
F0D699AA842BFDA7AA493C9768D8E0B4C629AE2553D4AF9F18F4AFEFF9CACA
E7E3F86A0EA4D4134AFD5BB2FBD9FCC4FC20FF00827AFED69F19FC8BAD07C0
B73A2E973608BFD6FF00E25B06D3D1D566026914FAC51BD7DF5A2FFC12DBE0
0FC1EB78F54FDACFE34416F72A9E6B693A314864603AEC69565B9994F43B2D
90FA1CD7E95FC40F819FB60FC4A3243ADFC68B0F0D584841FB2E876935A22F
1823CD0EB70CA7B879483E95F349FF00825DF9D23CFAA7C5BB759A462CEDFD
99E612C4E4925AF14924FAD7838BCC71BB61F0EDF9B697E17FD51FACF0F705
F0CE93CE3388C57F2D385493FF00C09C2C9FFDBB2479CE97F19BF606FD9E98
47F00BE0E2789F56B561B355D554649C7FAC8EE2F3ED370A73D5562887A605
79F78FFF00E0A1FF00B4778C8BC1A36A369E12B36DCBE5E996EBE6143D374D
71E6B8603F8A329EB8F4FA393FE0985E168BFE3EBE2FC47E9A6C69FCEF4D5B
1FF04C9F00639F8B433FF5E707FF0024D7CCE2E86795B7D1764D2FD6FF0089
FB9F0F669E15E59674DFB492FB5521527F83872AF9451F941E25F1778AFC67
7C354F17EB57BAE5E01B44D7D7325CCA17D37CACC71ED9AFBA3FE0A572CFE0
AF81FF00B3F7C218D822D9E9AF71771FF179D6B6D6D02311EED24D9F7AFA23
49FF008265FC3D4D52D1DFE287DB9525466B71670E6555604A71704FCC38E8
7E95F107FC157BC5F6FE20FDA7E2F0FDACE5C785F43B2B39A3E76C73CED2DD
9E0F19314F1648EC00ED5FD49F425E0DC44B8DA9E23131FE1C273EFF0065C6
EFFEDE947E67E5DF49CF13B28CE32FC260F26A9CD08B9397BAE296DCB64D2E
9CDB1F9995F507ECBBFB2A7C42FDA87C64345F0D466C341B1653AA6AF2A130
5A4679DAA38F32661F7230727AB15505875BFB237EC71E31FDA73C40DA8DCB
BE85E03D25FF00E267AC38001DA373416DBBE5798AF249F9630773FF000AB7
A7FED83FB75783BC23E0E7FD93BF62DD9A2F81F4D57B5D535DB36224D498FC
B2C76B30F99A373FEB6E49DD39E1088BE697FBD3C7EFA4661F87212CAF2A6A
78D6B5EB1A57EB2EF2ED1E9BCB4B297F22E55943ACF9EA691FCCFD03F839F1
E7E0FF00803E3EF827F61EFD936CE0BDD36DA7BBB9F167884ED9FCC6B2B592
578D2403134F2CA891CB2FFAB8D4F9710CF317D37E06F8F3E1AF8E5F117E24
FC0ED40259EB5E12D46E134C7208FB4416AC2195BBE5E39830603198DD4804
8623F197FE08C5E15B66F8C5F103E2A6A602D87843C3A61691BEEC725F4C1F
7E7B1115B4A3E84D795683F15FC5FE19F8AD1FC63D1EE043E208F5297532DC
EC7927767951C02098E40EC8E33CAB119E6BFC82F1273678E728E68DD555F9
BDA733BB927BB6F7BEB74FBA3FAC7C11F0D639E50C7BA6F96A528C7D9BED36
DB5F26A367E4CFDDC9E1BBD36F24B698341710314619C1041C1E957A2F11F8
860188753BA403B2CCE07F3AD94F12F877E33FC39D17E35F82FF00E3DB5385
45DC39CBC1329D8E8FD3E689C14638C11861F2906B8DAFF2D78EF86B1DC2F9
AD4C053AB251F8A124DAE683F865A5BD1F669A3DDC24D5783588A769C5B8CA
2D6B192D1AFBCFA0FC09E21D6DFC33AD6B5A9DDB5D0B51B61127387552793D
4E4B2F7AD3D1BE29585C6D8B5A84DAC9DE44CBC67EA3EF0FD7EB5CC5A44DA6
FC275D8A449A94C59B8E7EFF005FA158C579857FA5BE1061F114F86701F5A9
B94E50526E4DB7EFFBCAEDEBA276F2D8FC138927078FADECD2493B69A6DA7E
8779F17743BBD7F4C9356D2FE1AF86BE2C59B03BECEF5E182E768EA10DC417
10CA71D99A2F4AFCBEF1B4DFF04E7BFD6DFC35F18BF67BD4BC07AC03FBE4B7
B56D3921CF4602CAE60665F422220FA115FA27A7EA7A869538B9D3AE1EDE4F
5538CFB11D08F635B7E2493C01F14F471E1AF8C1E1AB5D76CF90B2B47FBC88
9E0B23021E36F568D94FA0AFB6C661F10FDEC3D4B3ECD5D7F9FE67B5C399BE
4D0B52CDF06E71FE7849C66BE4DB83B76B47CDB3F226EFF63CFF0082607C49
91D3C0DF15356F075E1190979318ED573D89D42D53763DA7AE2B55FF008238
DFF896CDF54F815F1A340F17DAB64A7DA2330A0F63359C9780FD760FA57D65
F16FFE09B56DA8DBCFE24FD9DF5F5BE8B963A4EA3200E33CED8AE3039EC166
55E3AC86BF31FC59E0BF1DFC2DF119D1BC5DA5DE787758B460EAB32B42E307
878DC70CB9E8E8483D8D7CBE278931B8476C55156EEAF6FBF53F79C8FC14E1
7E20A7CF90E67252EB09A8B92F58AE476F3575E6CE77C79FF04BCFDB3FC0BE
64C9E0A4F125A479CCDA3DE41739FA42CD1DC1FC22AF37FD9E7E0BFC4EF0EF
ED61F093C35E37F08EA9A05CC9E2BD21DE1D4ACA6B463141771CB3102645CE
23463C7615F5C784BF6ACFDA33C12D9D07E206AA570008EF26FB7C6A0740B1
DD89517F002BF487F63BFDB33E367C6BF8A7A77C35F19596977FA78B4B9B9B
ABD8EDDE0BB51027C8FF002C9E49CC8514811AF5C8E98AEECBF8BF0F5E71A5
CAD49E9E5FD7C8F95E2FFA38E7195616AE3956A7529534E4ECDC6564AEF46A
DE8949B67D79F14AE3CEF195D27FCF04893FF1C0DFD6B9BD0BC4DACF8727F3
B4BB828A4E5A33F346FF00EF2FF51CFA1AF95F5DFF00829E7EC909F13FC49F
0F7E24E81ABE8D73A1EAB7DA63EAF0C09736728B299A013130482E30FB3705
F25F00E09AFA1FC05F137F65BF8D06DD3E12FC54D2EFAF6F3261B09E7486F5
B1D71693F937231EF19AFE37E3BF01B8BA19DE233CCA6A46529D494E3C93E4
9C536DA5EF72AD169A49DCF97CA78BB2E7858613109A4924EEAE9DBD2FF918
DF19FF00674FD9F3F6AEB6793C61603C2BE3565DB0EB364152576030A25CE1
275E00DB2FCC07CA8E3AD7E1C7ED23FB167C67FD9AAEE5BDF1158FF6CF858B
ED875BB1567B6209C289D79681CF030FF293C233E335FD13EA5F0BBC59A7E5
A1852F507785B271FEEB6D3F9034699E2DD5F42824F0F78A6C8EA1A5CE8629
6D2F23CE6261B5940704152382AC0A91C715FD73F47BFDA07C67C073A594F1
C61A73C2AB252945A4979349A5EB0BC7FB97BC8F95E20F0EB058E4EBE55517
37F2DFFAFC7EFE87E71FFC1357F6CBB6BD3A4FECE1F16AED5E7B5609E15D42
E48241DA505833B7DD6DACCB6E7BA93083FEAD4FEA7788FE17EA1A9EBF7DAA
43736F6B673BF99972DB81201724631F7B3DEBF35BE3F7FC1387C1DE3F137C
4BFD94AF93C39E20B76172DA23C861B732A9DC0DB499DD6B26E1F28C98B38D
A630335B5E1D7D57F6D1F843A8FC03F8D16AFE19F8F9F0D233343F6D530BDE
C60045B82BFC51CC36A4EC9950E5254F95D52BFA1FE925E1EF06F89394C78B
B871FB6A29AA9568C65CB2849DD73AE5BFB926FDE71BA53B3BEAD47C3E04C5
56C06631C0E3EAFB1527CAE6E3CD65DDC5B5B7ADED7B27D7EBFD5EFF00E05F
846692DFC63F13F47B3B88865EDFED96C9301FF5CCC8CE7FEF9AF37D73F6C0
FD8D346F0AEB1E0BBCD7AE3C5DA56A714B6D79602C279A39E2954A491E658A
18995D4E0FCD83EB5F835AF685AC785F5ABEF0EF882D24B0D4B4D99EDEE209
46D78E58CED6523D88FA7A564D7F0FF0EE4193E4B5BDBE55818D3A8AEB99B9
CA5AEFACA47F7A51FA3C607134D7D7F1D52AC5D9FBBC918BFBA32D3B59FCCF
D1FB5FDA1BF612F8771C6FF0AFF672B2BFB88C8DB26AF05A2CABEE26905FC9
9FC467D6BEC6FD9B3F690F8C3F1D35696E7C31E0FD0FC01F0C741DCDA95F4A
B24A46C5DC61B670D6F08936F2EC632912FCCDC9547FCDCFD977F64FD6FE3A
5EC9E2CF144E7C3DF0F3472D26A1AA4A562F35611BA48A067F972003BE43F2
46324E4E14F99FEDCFFB77E89E2CD047ECC7FB2FA0D0BE15E8CBF65BABAB6D
D1B6ADB0FCC884FCFF00662D966663BE76259F83F37EBF90D4C7E2DAAD5E76
A7D924AFFAD8FC57C5AC170870F425966558655314F47294A5254D79ABF2B9
F656D377D13FE863E1F7ED0FE06F8AFE02D53E24FC3D76D5340D3B549B4C8E
E7EE2DD1B7748E49A1CFFCB32CC76138DC06780457E6B7EDB3FB11F893E2DD
ADF7C65F813AEEA3E2098B35C5F7872F6F26B93BBEF3B5879CEC55875FB393
82322123E48CF5FF00F04E083ECFFF0004FDD3A4FF009FAD5EFDFF002BB0BF
FB257D43A1EBFA9F876F45F6992EC6E8CA79471E8C3B8FD476AF92C57D2CF3
6F0CF8E6854C3253C3CA945CE364F79CD37E77496974D5AF1945DEFF008865
BC134B35CB652BDA6A4EDDB65A7F5F33F952BAB5BAB0BA9AC6FA17B7B9B776
8E58A4528E8E870CACA7043023041E41AFD76FD90BC71E0FFDACBE076B3FB0
AFC6FB902ED6DDA7F0A6A3200F340D002E8B19241325A9CB22861BE0324470
8307ECCFDA73F639F877FB5C69D71E35F04183C2DF13EDE2F9DD86DB7D4760
C2ADD051927A2ACEA0BA8C2B8750817F00355D1FE26FC00F898B69ABDADD78
5BC63E14BC8E640E02C90CD13078E446195746C065652C8EA720953CFF00B3
BC3BC7FC2BE34F08CA197558AAAD73257BCA9CD68A4B66E37F765A26936A4A
32B1F8FE332EC4E538AE5AD1B5BF147EB77C34F0078BC7FC13EFE27FECF3E3
DB458BC5FF000375DB9FDDB12CAB6C8F1EA42E62620131CD04F70626C0DC84
7001AFCD9D135AD57C39AC59788343B97B2D474D9A3B8B79E33878A5898323
29F504035FD17FECEFE3CF879FB587C22D43E23DBDAC56DAC78AF4A5F0FF00
89AD90E76CD6E92AF96CA49F971732346DD5A39143125405FE72F53D3AF747
D4AEF48D4A2305DD8CB241346DD524898ABA9F704115FE4678A9C3F89CB331
787C5C1C2AC1B8C976717FF0747D56A8FF0043FE89F9D431395E2F012D5464
A493ED3566BD3DDD579F99FD167C2AF8A3A5FED2BF072C3E23E9CA9178874B
5FB2EAF6A9FC13C6017C0EBB181F323E7EE92BCB038B9657B75A75D4779652
18A688E5587F9E9EA2BF21FF0061EF8B7E2BF855F17ED8E9BA7DEEABE1DD78
A596AD6F69049705509FDD5C048D58EE858E7A1250BA81935FB7FE20F877AB
1D665FEC4B70F6737CEA772A88F3D57923A1E98078C57B3C399ABC5E1D4A5F
12D1FF009FCCFE7CF1A3C3F8F0FE712A543F8353DE8792EB17FE17B795BADC
F9B7F697FD983C07FB63F853ED11987C3FF12F47848B0D476E12745C9FB3DC
85CB3C0C49C1C17858965C82E9241FB0FF00C34F1B7863F661BBF84FE35D3A
4D235ED0BC417969710CB8F9019629B7A91F2BA3249BD194957520824115F4
65C784E1F07DA9F11F8B3C4765E1DB4B4F9DAEA7996248F1DDA494C683F138
AF6B696E358F0CB4FE1CD4E133DF5A16B3BF082E20DD2C798A708ACA244C90
F80E030E030CE6BF51CFB8B71F9970856E12CC2F3C1CDFBB7BDE0ED2528C65
D9A93D3A3D55AEEFF9060A9C6962E18AA6ED256F4DF767E257FC1467E375A6
B9E26D37E03784A61FD8BE0FDB2DF9420AC9A814DAB192073E446C41C1FBEE
E1865057E674333DBCD1CF11C3C6C194FA10722BEB2FDA0BF649F8EDF08F51
D43C4FE29B57F13695712C97136B7665EE119A462CD25C83FBC8989396671B
4B1E1DABE48AFE56CD154559A9C392DA25B2496892F24BB1FEACF86382CB30
F92D0C3E575A356096B24EFCD27AC9BEA9B6F67AA565D0FEA27E26BC77579A
66A517DCBAB5057E992C3FF42AF943F6E1F877FF000B63F67183C7765179BA
E78025334840CBB5A3ED4B91F82F97313D82357D25AADD1BFF0000F80F5263
9375A541213EBBA185BFAD5DF02BD85FCB7FE12D6625B8D3B5DB792DE689F9
570CA4329F6642C0FAF15FB4E330B1C4E1E54A5F697FC31FE6A70D67B5724C
E2963A96F4A7F7A4ED25F3575F33E10FF827A7ED56264B5FD9F7E21DE92EA0
AF87EEA639CA8E4D8B31F41CC19ED98C1E2353FA1DAE7873C37AEEB3A8695E
1ABA8EDF5CD39524B8B063B18C727DC9554F3B1F042BAE50B02B90CAC07F36
FF0015BC0BAC7C19F8B1AFF825A6960BBF0E5FB2DB4EA4A48635224B69D4AE
0A968CA3823A66BF553C07E39D5BF6C4F8396FAD785B573A17C7AF8649E65B
DDC0C2092F6323072384686E82ED9148D893019558DC06F8DE1FCFAA462F09
515E71D975696EBD574EFB799FD2BE30F84F82AD5E9F1060A7C987AF672925
EEC253B72D46BF924DA53B6B16F9B5BF29F51DC5B5E6997660B947B7B88587
07E565239047F30457977ED5BFB3BE99FB5EFC2465D352383E23F852379B4C
9C909F690465EDA42703CB9B030491E5C803642960DC67C10FDB6BC1FF0013
A54F86DFB435AC7E14F17DAB9B54D408F22DA5990ED64937FF00C7B4B9E195
FF0076483CA9C2D7D6F75A3EB9E02D4E1D5ADCF9F6CA7E5993EE3A9EAAE39C
647FF589C57EA5C11C6F5F2FC6D1CDB2AA96A94DDD7EAA4BB3574D754D9FCC
1C63C118ECA6B3C16674B96FB3DE325DE2F66BF2EA93D0FCF4FF00826178EA
F7C47F0C3C77FB35F8A124B5D67C2572F79676F700C72C51CCE44D1146F997
C9BA4CB8201065C57D3DF1BACBFB4BF637F8BD60EB930E9B753907B1863493
F4F2EB94F8A1F0DAD7E16FED11E10FDB3BE1D43E5689AD4C9A378D6DA3E152
DEFCAC09A8328ED14BE59B8C7744930732357D09F1C3C3FE5FC18F8E3A422F
EEEFFC35A9DC45FEF4D6571FC9D4E07A62BDCF14B2FC1E33C52E1DE3ECAE3C
B1C4CB96A2FE4A89394A2FD25172BF55562F4BD8F232AC54A394E2B2FA8F6B
35F7A5F935F733F027FE09C1F0A07C50FDA93C3D777908974CF06A49AEDCEE
C81BED4AADAE08E370B9789F07AAAB7A57F443A5EAFF00DA7F1392F15B3117
9624F4D8B1B28C7D719FC6BF3EBFE0991F0E3FE15C7ECE1E20F8BD7B1ECD4F
C797662B46CE4FD8AC4BC111C11F2B79ED3B1C7DE5087D2BED7F063ECF14E9
C7FE9AE3F30457EC1F4A6E33FED6E2CAD4A9BBD3C3A5497AABB9FCF9DB8FA4
51F3B9261FD9D04DEEF522F16C5E4F89B534F59DDBFEFB3BBFAD41A8782F4F
F8C1F09FC6DF06B572822F10E9F34703C8BBC43332E239B1DCC5288E45F75A
DBD5FC51F073C59F12F58F873A7F8C2CECFC75A6C9125CE953C8239D9A4812
74314726C694189D58B445C0CE0E0822B5F4AF0EF88BC21E20B4BFB8B732DB
2BEC9248BE75D8FF0029240E4019CF22BF078471996E228E21C654E6B96706
D35DA5192BEE9E8D3D9F43D3F7669ADD6C7F253A07C3FF0016F897C7D65F0C
74DD3E43E23BED4174C5B571B5D2E8C9E5147FEEEC6CEF27850093C0AFEAC7
C1BF0E7E19FC2CF85BA0FECC77F6916A5A01D2DEC750328C24F25D64CCF20E
C67919DCF20A6E5C1006478EF823F648D03E1A7ED5FF00123F69FD66384E99
74AB73A240A773477B7F1FFC4C66607A3B4BB963EC44CDE82BA9D5352B9D5F
51B8D4EF0E66B872EDE833D00F60381ED5DBFB41FE9A7384728CBF209FBEB9
2B4D7695936BC9C7F869AD53752CEE933DCF0E781D621D6A988F855D2F5FEB
5FB8FE7CBF6B4FD9B75DFD993E2CDEF836EFCCB9D0AF775D68D7AC38B8B366
E1588E3CD88FC920E3901800ACB5FA11FF000493F88B1EA11FC40F807AA4D8
8B5281759B152785750B6D74467AB1060603FD927E9F77FC6EF839A37ED6FF
00052FBE1D6AAD1C3E2ED114DDE8B7D27549D06143375F2E4188E5EBC157C1
6518FC0FFD9A7C65ADFECE5FB54785F52F13C32693368BAB9D2F58826F94C3
0CEC6D2E838E87CB572C3B654107A1AFED9F0EFC52CBBC68F0AF154749623D
97BD1EAE51D53B2D9C9A7095B677B7BAE37F87CCF2AAD93E66A32D2CF47FD7
DE8FE8C74AB7F0FF0089745D67E107C49B24D43C39E218A5B1B9B69F3B4190
1465C820AE4F46520AB00CA41E6BF957FDAF7F663F12FECA7F19352F877AB7
9975A3CD9BBD1750603179A7C8C42312A0012C6418E55C0C3A9206C6427FAB
0F89DA50D33C593C918DB1DEAACEB8F56E1BF12C09FC6BC5BF697F801A2FED
A3F026EFC097661B7F1E78695EF341BF9460ACE17063771F3086E0011CDD40
3B25DACC8A2BFC4EF0338EA796E6588E09CD27EF519495193EA937EEFDDEF4
7CAEBA247ECBC5994AAF4219AE1D69249C979F7FD1FDFDCFE45D599183A121
94E411C10457F62BFF0004FBD37E27787FF64CF0B6B1F1B3C477FADEA9ADA3
EA7136A52B4D3D9E9F75B7EC90995BF78C3CB025F9D894F3360215401FCD47
EC9BFB317887E35FED49A47C13F13E9D358C5A3DECB2F88E1914A496B69A74
98BA8A4EE8CEE0400F67715FD6441E39D33C5DE0DF17FF0061471C7A6683AA
3E8B6CD18DAAFF006310473617000093992318E0840475AFEB27512693DD9F
074B095274E7562BDD8DAEFD5D97CDFE8FB1FCE07EDD1FB387897F67EF8CB7
D2DE5CDCEAFE1DF15C935FE95A95CC8F34D2AB366582795C9679E166019892
5D4A39C162A3E2D44791D638D4B331000032493D00AFEAF3E247C2FF000B7E
D39F08F53F833E347105E6DF3F4ABE2A1E4B5BA894F952A838CECC95750417
8999723AD7E317EC65FB2778A753FDB05FC13F1274C36D0FC2F9FF00B47578
DC131BC96EC0D9AAB118649E4292A9C62484311C1AFF0052BC19FA43E171BC
2F5EBE6924B118385E6B6E78A568C979C9DA2D2DA4D6CA491F0198E5128D74
A1B49FDC7D4BF1AEC57F656FD8A3C11FB3B5A62DFC51E37FF898EBBB7871CA
4D70AC54820890C3029C61A389C1EF5ED3FF0004E7B616BFB37F8EB55231F6
9D6A5833EBB2D6DFFF008E57E71FED6BF1807C6CF8E7AFF8AACE6F3B47B261
A769641054D9DA960AEA700E2572F30CF237E3B57EA3FEC3FA77F66FEC792D
CE36FF006AEAF753FD76CB143FFB4ABFC8DC671457CF38971199E265794DCA
4DFABD6DE577A765A1FDEBC61C24B877C37A38192B54A9384A7FE27EF59F9C
54547D51EEBA369B26AFAA5B69B1759DC2923B2F563F80C9AFC85FF82AAFC6
5FF849BE3468FF00097C3F70534DF8776AA641192BFF00131BC5495B041C37
95088554F556320CF5AFD897F16E8BF093E1CF8B7E33F89B1F60F0DD8CD2A2
160A6591572B1216E37CAE5224F566C57F281E2BF136B1E35F146AFE31F10C
DF68D535CBB9EFAEA4C603CF7321924200E80B31C0ED5FDFDF433E02FADE6B
5F3EAF1F7282E5879CE6B57FF6EC2E9FF8D1FC3BC458AE5A6A92EBF91FD187
EC03FB5CD9FED0FE1AB4F017C42BB0BF11FC231EE49DC80FA9D901B0CC3D65
0A42CEBDCED9075217D23C3BFB35DAF87FF6CFF167C74BD8163D0A3D322D46
D084DA8BA8DEABC17241E8CCAB0C923F7067535FCF47ECC5E0AF8D5E34F8CB
E1F87E02472C7E2AD3A74BA8EF01296F651A1C3CD752608583076B820EF07C
B0AECC14FF005C979A5DFEABE195D3358BB8E3BC9218C5CCD6E85623228064
28AEC4AA160700B1207049EB5F9A7D297C21C9B22CFE388CB6514ABBF68E9A
DE124AD7B2DA32D397AFBBCABDD8AB7D670571A63F0B87AF4A949AF69074DB
FEEB69BF9E96F9BEE7CCDAA6A12EABA8DC6A337DFB872F8CE700F41F80E2AC
E85ADDE681A825FD99E470E87A3A9EAA7FCF06BAC9BE1CEA72DBA5EE89756F
AA5B4A3746F1B81BD4F420E4A907D9AB91BFD0B59D333F6FB296151FC454ED
FF00BE871FAD7F3C34D3B3398FFFD1FD7AF871A9782BC2B75A67C3DF86BA05
BE85E1F42E02C49B0BB2C670E71CB33151B9DCB3B752735F0CFC7CF873FB3B
FEDA5F10BC5DF0A4CF1F817E38783A792DED6E25000D52DE340F117C63ED11
34454903F7D0755DD1821FE9AF0B5C1B5F12E97383B76DCC409FF64B007F43
5F8B5FF0529B2D4BC11FB666AFE27D12E65D3AF6FED74BD4EDE7B7768A58E5
8A05B71223A905583419041CE79A3F66C711665C618ECC235F16E8E2E9DE74
A7049463FC34A0E1B4A9B5CD78BDFBDCFA3F15B070C2D4A73B73297C576DB6
EEEEDB7ADF6D4F8DBE2DFC20F881F03FC6B77E01F891A53E97AA5AFCCA4FCD
0DC42C4849E0907CB244D83861D082AC032B28EABE09FECD9F193F683D5BFB
37E19787A6BEB78DC25C5FCBFB9B0B6F5F36E1BE5C81CEC5DCE47DD535FA87
FB3DFED65F067F6AFB0D07E0AFED9FA2D8EA1AFE9D3C6DA46B3723C886EE60
4011CCF19430CB26006008867E159436D0DFA91E2CBDD4FC07656DE11F0A69
76FE1CD02DD3CBB55B18D638C463F85022AAC78FEEA8041E72457F797D21BE
9A598F87594359C6552FAE2D39A29CA8CBA29C1E8F965D549C795FBADC9E87
C070DF082CCEBA851A8B97CF47E9EBE97F91F077C1CFF8271FC07F82C96FAF
7C71D4078FBC4918571A7A294D3A27EB8F2721A6FF007A62A8C3FE59E6BF41
7C19E3817BAFE9FE1AD26C20D27468A378A1B681155515109500280AA06385
5000E9CD7843BBC8ED248C5998924939249EA49AEA7C0D37D9FC5DA549EB32
A7FDF7F2FF005AFF000CB8CBE9A5C65C6DC4B83AB99E25C687B587B89E9CAE
6AEB64926B46A2A29F54F73F7AC3F87B81C0E0EAF2C79A7CAF57DEDD17F9DC
C7F02FED6FA2FC59F1EFC40F80DE1FBBB5F097C56F056A97F6B6B63AAA99ED
353B6B495C453C7B1A37659210AF22230922277012229DDE25AEFEDD91780F
C5B73E01FDA4FE16CFA3EAD6780F71A74A972B2C6C485961594444C4D8E196
56E84750457E277FC1462EF55F02FEDF7F10B5AF0BDE4DA56A36579A55F5B5
CDB3B453453BE9B6937991BA905583B13907AD7E867C00FDA6FE16FF00C141
3C1767F00BF69068741F8AF63195D0F5E8912317D2E3AA0F9544AD81E75B64
24D8DD1ED70A23FEC7CCE8621C79F0B3B49747B3FF002F5FBCF9EE06CD726A
75BEAD9EE1F9E8CBED45B5383EEACFDE5DE2D3EF1D747FA09E13F8EBFB29FC
4BD89E1AF1CC1A2DEC9802DB5226D0863FC3FE92115CFF00B921AF5DB9F871
AB340B79A35C41A9DB480346F1380594F719F948FA31AFE75FE31FC19F1CFC
0CF19DC782FC7567E4CE997B7B88F2D6F770670B2C2E40DCA7B838653C3004
11595E07F8B1F133E1ACE2E3C05E27D434339DC52D6E1D2273FEDC59D8FF00
46535F1F478DAAD393A78AA5AADEDA7E0FFCCFE91CC7E8BD81C6508E2F22C7
5E12578F32524D3FEF46DFFA4B3FA0ABED2B52D31B66A16B25B9CE0175201F
A1E87F0AA15F9BDE01FF0082987C6BF0F2C767E3BD374EF185A0C07678FEC5
74C3D3CC8418BF384D7DA7F0C7F6C4FD9D7E346A56BE1DB8D1F53F0CF882F4
848E18ED5EE51DCF68DAD0499F767892BE9305C4F83AED454ECFB3D3FE07E2
7E21C4FE057126571955A987F6905BCA9BE65EB6D25F7C4FA27E1C597DAFC5
10C84656D91E53F96D1FAB0AFC7CD17F663D57F6BBFDA33E25FC7CF897A8AF
87BE11E9DACDFB49AB48EB00BDB2D35CC31AC124876AC49044BE6CE7E44C10
32C0EDFDDFF0C7832DFC35717734770D38B95555DCBB59146490483CE78E78
E95F99DFB6C7ECABFB607ED0D656BF0ABE13EA9E13F06FC23D21224834A4BC
BC827BD3081E59BA58AC4C6B14440F2A04664040762CC13CBFDAFC3EF13317
C354B193CB95B115A2A0A7FC91BDE565FCCDA8D9ECACDDAF6B7E298BC146B3
8A9ECB5B1F987FB6AFEDF3A6F8D740FF00866EFD97ADFF00E116F847A427D8
E496D91ADE5D5914E197070E96AC724AB7EF26C9697EF14AFCA5AFD65B9FF8
2347ED6902E62D4BC2D707D23D42E41FFC7ED16B98BCFF008243FED936D9F2
74DD1AEF1FF3CB548C67FEFE2A57E735EBCEACE552A49B93776DEADB7BB6FA
B675A56D11F527EC53A67FC2A6FF00826D7C5CF8A571162F3C7B7936996E7E
E97B5223D39483DCA4935C37D16BE11AFD9EF8B1FB2DFC63D2FF00638F847F
B3B7C36F0F7F6B5DE80915DEB861BBB68523BC113BCC83CE963F355EE6E656
0573F70138C8AFCFBBFF00D8DBF69DD3B3F68F87BA83E3FE7898A7FF00D14E
D5F96718D1AF5712B920DC52DECEDDCFEEDFA36E679565F91C9E23154E356A
4DB71738A924928ABA6EEB66D69B3EC7BAFF00C13E3E3DC5E01F1FCBF08FC5
5303E18F1CB88A30E4EC835261B236EB80271889B8C96F2CE40535FA63E29F
0F4FE1CD6E6D2D8164CEE85BFBF1B7DD3F5EC7DC57E0F6A5F00FE3B680FE6E
A3F0FF00C416BE59C893FB32EB6823B871195E3D8D7EF3FECE1E36BBF8FBF0
B3C3BACF8C209AC7C5FE159E3B4D552E62314933C382252AC14EDB850AF9DA
007DEA3A66BF1FF117C399F12E5D0C2C236C45277837A5E2DA538EBDBE25E6
ADD59E7F8CD81C2E1316B8830338CA9D4F76AA8B4ED24BDC9E97DFE16FD376
CF9EFF006DFF00DB43C6FF00B256A9E04F037C3CD3F4AD52F2F74E92E7505D
4E29A4DB0A3243018FC99A1DA59926C96DC38181C1CFCC3A5FFC1606EA5891
3C5BF08ECB5090E37C96FA99857DC8496D66FC8BFE35E41FB737C38F8F5F1F
BF6ABF125E7827C01AF6B1A469220D1EC6EA2D3AE3ECA56D13F7B8B82822DA
6E1A520EEC5796F86FFE09A7FB606BF3A25D78420D120719F3EFB51B4551EC
521965947FDF15FEE1F007857E1BE0B8572FA39FBA31ABECE2DF356E49EBAA
4F96716DC5351B791FE7BE3730C6CF113953BD9BEDFF0000FD10D1BFE0A89F
B2BEB5E4C5E27F046BBA34B2101DE086DE6863F72D1DC46E47D2327DABDC3C
3DFB5B7EC41E349D2D74CF888BA45CB8CECBF86E6CE35F632DCC2B17E5257E
7AF87FFE0905F1BEE66DDE2CF18F87B49B6C025AD9AEAEE407DD1E1817FF00
1FAF57D2BFE0913E0FB19D64F167C6212C38F9A2B5D362B77CFB4925D4BFFA
2EBE0B8A3837C1D8DD51CCEA5397454F9AA2FC69CBFF004A5EA74D0C4661D6
09FAE9FA9FA63E105F0578B8FF00697C29F881A5EBA6338DFA7DDC371B7D43
34123FE208FA8AEC7C55E01B1F889A19F0A7C5CF0C59F89F4D39C4802978C9
E37A6763A37FB71156F415F9C569FF0004BBFD93EC4A3EA5E39F125D3A104F
957168AAD8F65B3761F8367DEBEC3F86FF000B3E12FC3092D61F0BF893C5DA
9790024505CEB9A94F01F41F6632AC07FEFDD7F38716641C294E2FFB2F30A9
553FB32A16FBE4EA6BFF00809EF65D8EC5D1A91AB0F724B54D49A69F95B55F
79F0EFC73FF82686AD6293F88FE036A0DA95B1CBFF0063EA0C23B951D76C13
B6D57F65902103ABB1AC6FF827F785351F859E2CF8B3F10FC7B6171A44FE03
D04A5D5B5D46D0BA24CCD74E487008C2D9F07A60E7A57ED04DAF69DA769136
B7AE48348B1B65DF24D7AE90A220FE27666C28F5DC4578FF00C69F8D5F00FE
1AC7A2F853E376B1A7E9D69F110CDA5C306A5186B6BA88C67CD5B9DEA516DF
120476971183200C40635F88C38630D0C547114B4B6B6E9FF00FDD715E3A67
58AC8ABE518FFDE2A8945547A4959A6D3D2D2BAD3A3D6EDB3F88ED5F54BCD6
F55BDD6B507F32EAFE792E266FEF492B1763F8926B3EBFB3EF12FC04FD99FC
24F1DCA7C08F07DC5AB60C7731E89A705C9E993F66254FA7AF6354ED6DFE0B
69E823D3BE13F87AD907411D8DA20FC96DC57C7F10F8D9C359562A582CC312
E1523BA74EAFDFA42CD3E8D3B3E87E5F82E16C76229AAB46178BEB78FF0099
FCACFC2EFDAEBF697F830B041F0E7E236AFA659DB27971594B3FDB2C635F45
B4BA12DBAFD4479AFD21F867FF0005A2F8936491E97F1BBC05A578BACBE446
B8D3D9AC2E40FE391E393ED10C8D8E42A884678C8EDFB331EAFF000E61FF00
51F0EB458FFDDB6807F286A76F12781DC6D7F01E90CBE86087FF008D57CE56
FA46F05CE2E13C5DD3DD3A752DFF00A41DD1E09CD13BAA7FF9347FCCF99BE1
4FFC1403F625F8AB77049A7F8AAE3E19EBAC58AC3AD2FD8631B7A96B8DD2D9
853D94CCA48EABD457DCF7DE03F087C4CFEC0F1BCF35ADF6AFA2B0B9D1BC43
A63A89915C10C12442CAD0CAA4AC911678A45272A38C79349A87C31B8FF8F8
F86DA24B9FEF5ADB9FE7057ACFC3FD36CB4B32CBE17F00D878620BA20CB240
915A1931D0948E1566E3A6463DEBABC3DF12784963DBE19A9285497C4A952A
CA2EEACF9A2A1C8AEB472695D68DD9B44E6D93664A95F1A934B672946FF277
BFCBF03E1BFF0082847ECB67C67A24BF1C3C0D69BB5FD1E11FDAF044BCDDD9
C43FD7803AC9028E7BB463AFC801F8CBF675FD912CF5EF0F3FC71FDA1AF97C
21F0C34A8BED8ED7527D9A4BF85790431C34703F0378F9E4C858865838FDE8
D53C65E1CD3651697374B248EC15953E7DA09C12C47000EE3AFB57C35FB73F
ECF7F0DBF6964F0FFC39F18FC56BCF006A811A7D2AC5DE31A5DECDBB66F782
4110B89D321555270C8AD90A37E5BF48C5F0DE16789FAD54DBAAE8DFF5D3A9
FA3F0F78DB9F61B24FEC3C126E4AFCB357738C2DAA4ADD3A4BECAD16C9AFC5
0FDB73FE0A0577F1B2CFFE149FC0DB63E13F845A56D8120853ECF2EA8B11F9
4CA8B8F2EDC119483BF0F265B0A9F9835FA1DF1D3FE0989FB547C15171A9D9
E84BE39D061CB7DB741DD7322A0E7325A10B70A40E58AA3A2FF7FBD7E7B4D0
CD6D33DBDC46D14B13157460559594E0820F2083D457D2A492B23F0FA9394A
4E52776F73FA8CFD86FC75F0BBE187FC13A7E1DEB9F16352FEC5D0F55D4752
B6375B6470B7126A978232DE5AB151FBBC1241518CB71935F605B78334DF14
E8D178A3E19EB967E28D1EE798A6B59E391587A2C884C6C477E41F6AFC80F8
CF65FF00086FFC1297E02F85F3B64D53548F5023D63BA5D42F0FEB3A9AFCEB
F867F187E287C1CD646BDF0C7C4B7BE1EBB2417FB349FBA9B6F41342D98A55
FF0065D587B57ED380FA05645E2670C4339AF55D2C65E518CBA72C5E8AE95D
6ADEEA6BB4519E138F31795D6F654B586F6FEBF4B1FD31E354D0AFD58ACB65
79010C320A3A9FA1F5FD6B23E34FC10F85DFB61F8497C35E398D746F1958C4
CBA5EB30203346DD429191E6C44F2F0B119C928CADF30F86BE0E7FC15634BD
6A0B7F0CFED35E154B98F84FED8D25395CF1BA5B562083DD9E171FECC7DABF
473C2B1FC3CF8B5A20F187C0CF15DA7886C4618C71CA3CD858F215C1DB244F
E892AAB7726BF8AF19F473F15BC0FCE639CE4AA556846577C9B4BD2D78F35B
45F6A4B495371BA3EFE5C519467D47D862FDC9F47DBFE07AE9E773F1AFE00F
8A7E26FF00C13B7F6993E07F8C16ED67E18F1114B5D46442CF673DB6E220D4
AD9F037AC2C496E37042E8CA1F81F7E7ED65F193E08FEC99E27D3B555F815A
778B6F3C6426D4A2D62436D1C134ED2169C099E1B993CC05D5C80A14ABAED3
D40FA47E257C38F047ED09E0F97E10FC74D39A2BB193A7EA1809756D3E36AC
B0C84101FB774907CAC0F7F993FE14078C3E207C0BD7FF00626F8CF2A5C78A
BC2309D43C0FE203958351B2B6F92DDC31DC51EDCB8B5BA88E5A38A542BBF2
9237F7AF0CF8B7C19E24CF07C4D9A61D7B6A4D53C5D17CD095B655524D494A
9BB7B485DBE4B38B718DD7E7F5B0D99E4CEA61B0F55C54968E2F492EDA68D3
E9E7E67C69E23FF82B7FC6365FB0FC3CF05F87BC33A78521239127BC950FAA
B2BC11FE06235F2E78D3F6F3FDADBC7503DA6A9F11AFAC6DD98B04D2D21D31
94139DA25B48E29481D3E673EF9AF95359D1F54F0F6AF7DA06B76CF65A8E9B
3CB6D7304A36C90CF0B1492371D99581047A8AEFFE0CFC22F187C73F88DA47
C34F045BF9BA86A9261A4607CAB68179967948E91C6BC9EE4E14658807FD18
CBFC2AE0CC9B0EF194F03463082E6E79454AC92BDF9A7CCF6D6F73F3EA9986
26ACAD29B6D9F667EC31FB3D7883F6A7F8BD27C46F8AD7573AC7847C22F1DC
6A573A84CF39BEB85F9E1B4324A58B2FF1CDC9C46369C17535FD13587C40D2
468DA87886FD85B6976B7B15A46F8C05495A2891DB38C2EF93249FBABF4AF9
F347F07F847E027C32D23E05FC3B5DB69A6C43EDD718025B99DFE6924908EA
F2B7CCDD9576A0F9460711F1CB27F631F8B7B4E0AD85C118F658CFF4AFF197
C48FA4A2F10FC5DC170C65F2E5C0D26E9AB79B4B6DAEB7979DA3F62EFF005C
C1F0A3C0E4B3C7565EFCACD7A7FC1E9E5AF53E8DD575FD6BC15AF4FA729175
A749FBC8E19790237FE153D401CA81C8F6AF963E2AFEC75F007E3B79DA9F85
80F0178AE6CB6EB58D45ACD21FF9E96D9546C9EF19472796CF4AEE3E0D7C4D
1FB407ECD3E0CF8AD24826D62080596ADF7777DB2DCF933B32AF0BE63A8954
7649056AD5F13F0CBC362AB65B8F82E7A72945AECE2ECECFE5B97C33C598FC
B2AC717965774E5E4F46BB35B35E4D3477FACF85B53F0BFC3CF05787EF585C
CFA0E9D058DCCD1063199218628CB02402158A123201AE22D2E65B2BA86F20
3892075753EEA722B88FDAC7F6ACD7BF65AF097C37F135AE890788F4BD7649
2D752B699DA299912047568651B82B039CEE470C38C03F30D7F843F1BFF67D
FDA7ECBCFF00857AE2E99E2108649B44BE020BB4C7DE221C90EA38CBC2CE83
201C1E2BEA65E1CE710C9E96790C3B9616575CF1D54795B8BE6B6B1D56EF47
D1DF43C0C46651AB889F3BF7DBBBF9EBA1F1AFFC14D7E1C42DA9784BE37E91
0E2DF5C8069B7AC07027894CB6ECDEACD19753ED1815F9F5F04FE24F8D3E14
7C4CD0FC63E02124FAAC33AC22D10330BD8E6215AD59172584B9C000121B0C
BF30523F7D7E387C28D4FE247ECEDE31F8717F685B54B185AFB4C206EDD3DB
FEFE358DBA12E55A33E81F9AF957F625FD972D7E18E8B07C7EF8B367B75BB9
8F768BA7CAB87B6490713BA9E9348BF7011FBB4CB1F98E13F07CDB20AD3CC9
4A868A5ADFB5B7F9FF0099FDA7E1F78B79761B826A51CD129CA95E92A6F79A
92BC57F86CDA6FA28F7B27C8FF00C1413F66C96EB4D83F690F09695269F35D
4709F1169F852F0492280B70DE59652CA488E62A48276B8CFCED5E03FB32FE
DCBE30F83A96FE0AF1FA49E29F04102310B90F77651F4FDC339C3C607FCB17
38FEE94E73FB1BA5F8B23D66FAFF004AF17A25E691AEA35BDC4328DD084914
A152A78D854ED607A8E4FBFE0F7ED63FB3D5FF00ECF5F13AE345B74797C35A
B6FBAD1EE1B277419F9A166EF2424856EE46D7C0DD8A7C4782AB82ACB1D857
6BEFEBFE4FF327C18E28C071365D2E16CF60A6E0AF4EFBF2AE917BA943A3BD
DC7C93BFEFB7C3ED53E1F7C49F0C4BAE780AFADBC4BE0DF1044F05DDA30122
A798BB648E489F91956DB245200707B8C0AEE3C6BE14975DF871AFF83B4F7D
F73A969173A74524EC49669607890C8FC93CB649FA9AFE62BE0FFC6DF88BF0
37C4CBE27F87FA9B5A48DB45C5B4997B5BA8C1FB93C5901875C11865CE5581
E6BFA25FD99BF682B1FDA33E1F1F18DB68F71A35CD9CDF64BB8A41BA0370AA
ACC60978DE9861D406527047427E9B8678BFDBCA0B69C5F325D2EBAAFD7F53
F24F16BC10C570EDF17425ED30CDDB9B4528DF6525D7C9AD1F54B632F56D07
47F87BE11F0B7C27F0DE4699E17B0B7B54DD8DCC218C4485F1D5C80598F72D
9AA3E146D9E25D30FF00D3C463F338AD5F18E89E20B7D52EB53D4EDC98E790
B0953E78C0E8A33DB0300640AC4F0D9C788B4BFF00AFA87FF4315F4B89C4D4
AD5255AABBCA4DB6DF56F56CFC2D249591F817FF000520568FF6D0F8844719
FEC9607FEE1569CFE756FF00678FDB77F6B0F04F88F45F047857C42DE2D875
4BA82CAD74CD7035F46D2DC3AC51224C596E23009015525083FBA6AF7FC14D
62F2FF006C3F163E3FD6DAE96DFF009250AFF4AE97FE0979F097FE160FED1F
0F8C750877E95E02B47D45D98653ED72E61B553E84167957DE2AFF005A3DAE
530F0D70B8ECDF0F0AB4E96169B4A6935CCA9C5452BECDCACAEACF5DCF84B5
478C9469BB3727F99FD21F88FC389E27D186997D3342F957DF174DEA3BA9EA
B93D09FC735F317897C1DAD78625FF004D8F7DBB1C24E9CA1FAFF74FB1FC33
5F55DBEB5657505B4B0B1692F2DDAEA1887DF78D36EE201F42EA3EA457E547
C7DFDA67C7DFB15F8EB47F165F5AB7C47FD9E3E236D96D02B07BCD1AE251E6
BC16B3BFC92DB491932DBC1290BB418A378A38B07FC1EF143C17CAB8B20B19
19FB3AEE2B96A2D535BA528ECD6BBAB357DEDA1FB5643C4B89CBEF071BC2FA
AECFD7A3D3F03E93D2754BBD1B518353B16DB35BB6E19E847707D88E0D7C35
FF00052DFD9B2CBC69E1A87F6AAF87369FE956E91C3E23B78C659A25C24776
40E7745C4729EE9B1F80AC4FDDFE00F10FC24FDA23C243E20FECFF00E21835
8B3E05C59EE29716B29CFEEE589F1242FC1C2B8C30F9918AE09EA3C277F0E9
3797BE10F175A87D275746B6BBB7B95CC78954A1DEADC15653B5B3C15393C0
AFCFBE8C9E24F117835C654566716B095A5CADA7FBB95F4D25B2BAD1DECE2D
466D7BAAFF0047C5581C267D817570CFF7905B75B76B7E5F35D4F3EF861E3A
3F19FF0065FF00875F141A433DF8B24B4BF6CE49B9B7CDB5C33771BA68B701
E8C3EB5A1A46AB79A26A306A762DB6581B23D08EEA7D88E0D607ECE7F07B51
F81F75F147F6753BE7F0DCD38F10F85A694962D69783CB96DCB73F35A4F0C6
1FB9F315FF008F03AEF0B6872788B5CB6D313211DB748C3F8635E58FE5C0F7
22BC3FA68703FD57C478633879BE5C5B8CE8B5A3BB6B957938C6504FB493BE
C74787D99C67954E9E276A77BFA7FC17730BE396A5F0D3E007843C75FB53F8
5F4B8F4EF1F78F74FB1D2526380F35D20916070AC305910F99263891204FEE
8279CFD93E1367FB17F8526933E6EA9777D2C85BEF337DBEE00273D7223073
5F037FC143BE34C7E3FF008B31FC38D0260740F012B5A6D43F249A83605C1E
3AF95B561008CAB2BE386AFD33F863611E8BFB2EFC2BD3221B567D26CEEF1E
F3C1E731FCE535FD3792632AD6C672559F33A70516D2B272D399A5D2ED7DC7
D5F17709C727E0AC34A71B55C556551F750509F245FA29737AB68B96D733D9
DC47756CE6396260CAC3A822BA9F8F769E2B93E0278E3C57F0DF4641E36D6B
458E095E15DB752DB465B7EC65C3B3C50CB33C2B9DC19B0B93C1A7E13D14EB
BAE5BD930CC2A7CC97FDC5EBF9F03F1AFC82F8EFFF00052BF107803F6FA6D4
FC37732DFF00C36F0486F0CDFE9F131F2EF10480EA1731A1C2F9F1CE36C4C0
E19615C10B2367ECAAA94A9CE9C64D732B3B7F5DECFD51F856558EFAAE2A96
2B914B924A567B3B3BD9F93D9F91F0E57F41FF00B31E99369BFB1CFC3DD3A1
4CCDA84B3C981D58CF777322FE85457E747EDA9F02BC3FA0DE699FB417C227
8AFF00E1D7C4054BB8E4B5E61B6B9B95F346D1FC314E32E83F8583A6140407
F613E0BE99A5F83FF67BF8777BAFCD1D8E9DE1EF0EDAEA1772CA42C7095B45
9647727A2A6E7627B62BF3FE11CAAAD1C7D4A525792565E776AD6F53FAFBE9
03C6D84CE385B018AC24BDDA9539ADD538C649C5F9A72FD568D1F9A9FF0005
57F8BA9E13F04784FF0066DD067C4FA905D5F58D848CDBC4CCB6D1B7182B2C
E1E4233953121E86BF32FF00664FD94BE257ED41E2B1A4784E1FB068566EA3
52D667426D6D10F2540E3CD988FB912904F058A265C7DB9E01FD987C7DFB7B
7C67F11FED21F13DAE3C27F0DB53BD692D649408EEEEEC60C476F05B2B6555
52145592E08285F3B039DFB3F5A6CDFC23F0FF00C2967F0D7E12E971683E1B
D313CA8D2DD4AEE1FC47272CC5CE4BBB92EE492C72493FE9B63BC5DC1F87BC
374786726B54C7DAF565BC69D496B2BF494E3A452D928AE6DB95FF00054701
2C5D675AA690E9E68C0F86FF000F3E19FECCBE0A1F0DFE0F598599F0750D4E
5DAF7575328C6F964006E6193B40011012140E6BE99F05CB249E15B1958979
195CE58F2C77B7526BE5FAB3F143E259F85DA37C12D5A697CAB1D5FC6B6DA3
DDE4E14C5A8D96A302163D952568DCFF00BB5FC5F4A18ECF73193AB51CEBD4
E66DB77726A2E5F7BB5974DBA1F4578D2868B447E7E7EDC5F057E22FC16BCB
9FDA7BF660D7F54F0EE81AC4E27F10D8E957335B25BDDB363ED4D0C6C15A29
1FE5991810927272AC427CBDE01FF82A77ED49E110B6FE23B9D2FC656FB973
FDA366229820EAA925998064FF0079D5CE7AE6BF79F54BDB1F0FF8A759F0C7
88AD92F3C39AF86FB44132892264B95C484A1C864396575C72BEB8C1FE78BF
6E5FD916FBF66AF1DAEB3E198DEEBE1F789646934BB8C97FB3487E76B395F9
F990731B1FBF1F392CAF8FE94FA21F8D1C3DC7F86ABC29C5986A73CC30ADD3
BCA2B9A4A175A4BE2D95E0D3F7A3A36DC1B7C9C599156C04A389C3C9FB39AB
AF9FE175B3FF00827FFFD2FD148A4786549A338642181F71C8AFCCEFF82BFE
8CB0FC6AF05F891170351F0F0B7CFA9B6BA99FF3C4C2BF58BC43E1582DAC2D
BC4FE19BB8F58F0EEA31A4F6D776EEB346D14A0346C1D09564604157538604
7A8AFCDDFF0082BC59FDAB45F831E2403E69ADF5489CFF00BC967220FD5ABE
13F65AE031D90789389C9731838549476E8D2855774F669BB59AFD0FB5F163
134B1797D1C4D177577FFB6E8CFC50AFD82FD8BBFE0A109A3DAD9FC12FDA4A
E8EA1E1A942DBE9FADCE4BCB65D922BA7FBCD08E892FDE8BA3129CC7F9CBF0
63F67CF8B9F1FF005DFEC2F85FE1F9B54F29956E6EDBF75656A1BBCF70F845
E3242E4BB00762B1E2BF6A3E087FC136BE0AFC1C4B5F127C78BE4F1DF89102
C8BA6C6A574C85C60E3CA387B8C1046E9B6C6CA7062CF35FECDFD24788F822
A6535727E28B559493B538A52A89B5BEBA453EBCF6525A5A4B43F12C969E2A
35155C3E96EBFD7E87D81E2AF07CDA108F51B0945FE8F7415E0B98C8652AE3
2B92BC720F0C3861C8F4185E1F97C9D7B4D9BA6CB985BF2715EC3A6F8F349F
DDE8171A54169E1F5896DE3822401618D46D50154050800002A81B40E3A572
BE26F0549E1DBEB6D674A6FB4E932C91B2480EE31E4820311D41ECDF81E719
FF0099EF183C0696458D8E759245CB0AA4A528EF2A7ADEFE70F3DE3D74D4FE
9AE1BE2E58BA6F0B8A76A96B27D25A7E7F99FCF4FF00C1603468F4BFDB12E6
F91769D6342D32E98FA95125BE7F2840FC2BF2FADAE6E6CEE62BCB395E09E0
7592392362AE8EA72ACAC39041190474AFD71FF82D34423FDAABC36E3ACBE0
FB163FF81FA82FF4AF8CBF67DFD8B7F687FDA5AE239BE1CF86648F4466DAFA
CEA04DA69A983838998132953D5615918775AFF404FC74FD47FD963F6B7F01
7ED95E0AB5FD96BF6B39D22F182811F877C48DB525B99F1B511DCF0B77D073
F2DC0F95BF798DFE69E25FD8A3F683D17E25DCFC37D27C3371ADB210F06A30
26CB096DD890B299E42238CF1F323B06041183C13F5CFC0FFF0082587ECF1F
059ED7C43F1BF5793E21F896DCAC8B65186B6D3A2917E618851BCC9483D0CA
EA8C3AC63A57E8D6AFF12F55BB1F66D1E35B0807CA08F9A4C74EBD07E0323D
6BC1CDF87686324A53D1AEABAAEC7EB7E1D78CB9AF0E52A987C35A74E5B465
7B465DD59A7EAAE93F53F3EFE197FC1367C35E1E8A0D73F680F142C8DC37F6
5E96C510E3F85EE197CC7F422345C76735F7E69A3E047ECD3F0E351F1841A5
58F813C2BA7C41A5B968C2DC5C01F7031F9E699DCE046A599DC9000E99E67C
67E2DF037C0FF055DFC60F8DBA89B5B2B7C7916EFF00BCB9BAB8604C714719
399257C7CA99C000B39545623F09FC6DF1B3E23FFC1403F690F07781F5712E
9FE17D435682DACF48B67CA59D9B3E6E2E1CF0249D600EED211C004280BC57
EF3E09F800F3A7531D517B1C1514DD4AAD6AD455DC60DEF2B6FF00662B57D1
3F8BE3DF16B38CDA5CB8FC4395F682D20BB7BAB4F9BBBF33FA35D07E25D9EB
FE0DF0A78C2E6C64D3AD7C590437696F73813436D73189231328E15C2BA798
B9214EE009C027F067F6C0F873E2FF00803F18AFB4BD1754BEB7F0DEB7BAFF
00492971285486463BE00437585F2A0673B3613F7ABF6BFE245E4526B71E99
6C0241A744B1AAA8C2A9233803D8607E15E1BFB4E7C2C1FB41FECF779158C3
E7F8B3C17BAF6C4819925545FDE443B9F3A20401DE44535F85717E0218BA73
9D08F2D9B7157BD97F2DFAE9F8A3EF7C0CE378E4D9D421896BD8D6B4277D97
F2CBE4F7FEEB67E15DB7C4EF89366775A78B35680FAA5FDC2FF2715F46FECC
DE33F8DBF12FE397837C123C7BE216B3BBBF8E5BB41AADDED3696B99E753FB
CC61A3465E7B915F1D57EACFFC1313C071AEB3E34F8C7A9459B7D12D069D6A
C4641966FDF4E57FDA54441F492BF2CC8E9D4AF8AA74949DAFAEBD16ACFEE4
F1531783CB321C5E3A54A3CCA2D47DD5F14BDD8F4E8DDFE47E9878DBC57AAC
5E24B8834CBC9208AD82C5847214B01962474CE491F8560278EFC591FDDD41
8FD511BF9AD72F71712DD5C4B7539DD24CCCEC7D598E4FEB5D2F86BC257FE2
297CC5FDC59C67F79330E063A85F53FCBBD7EDA7F96E749A178CBC73AA5DAD
959325DC87AEF8D42A8F562BB702BD6F4EF10E9B2BDFE9F3EA56D717FA308F
FB41613816ED2A798AB20C9DA4A61B04E7690D801867F1CBF6B2FF00828BF8
7FE1ED9DDFC27FD97E78AF754F9A2BFF0011AED9618587056D09CACD2FACA7
31A8FB81C9DC9F4E7ECCFE10D47E177EC91E1E8B5F9A59FC4DF1025935FD52
69DD9EE269750226DF2B312ECFE40851F7124B6735F63E2870562B84382AB7
17E76BD9B7A52A4F494DD9BBCBF962F48A5F13724EC96E64ED6371B0C1D2D6
EF57DBFADFE47DC3AFEA325C6A03C39A1EB5059EB82DCDD0B47D86492DF76C
3205605B686F94B004024038C8AF12D6757F18DA5CB59EAD77730C83AAEF28
08F51B7008F715F3CFED75E09D7FE2AFECEC9F10FC0B7971A7FC42F85123EA
7637767234577E42262E912443BC79900DFC72EF185E84D7CCBFB34FFC14D7
40F17DBDA7C3BFDAA618EDEE58AC56FE24823D913311806F228C7EE989EB2C
43CBE46E445058FA7E1F787B88E2DE12A3C59C36FDB46DFBCA4BF8907BE8BE
DAB68EDEF292924A566CCB33A9F53C5CB0988D1AD9F467DF12CF3CEDBA791A
43EAC493FAD3ED6D2EAF665B7B389E795BA2A2963F90AEF6FF0043F027877C
3373F1175CD7C4FE13B6B717A2EAD94CE8F6AC032C81A11217420E418C1C8E
4115F9DFF15BFE0A4F61A5413F87BF67AF0E25B47CAFF6AEA49F31EDBA3B70
4927BAB4AE7DE3AFCAB33CD2860F4AEECFB75FB8FBCE0CF0EB37CFEA38E5B4
79A2B4727A457AB7F92BBF23F402FBC39A278434793C4DF1335CB5F0E69507
DF79E648FE8BBD8EDDC7B01B89E8066BE2BF8A3FF0516F875E088E7D13E01E
8035CBD00A7F6ADFABC36B9F548CE27947B31887A6457E4E78FBE26F8FFE29
6B075EF883AF5D6B97BCED6B890948C1EAB1463091AFFB28A07B569FC1FF00
853E27F8D3F1074AF87BE14889BAD45FF7B315263B5B74E659E4F4445E7A82
C70A3E6600FC16378C3115E5ECB091E5BE9DDBFD17F5A9FD69C2FF0046EC9F
2BA2F1DC415BDAF22E66B58D38A5ABBFDA95BE4BBC4FD04FD9C6E3C79FB46F
8BF51FDA17F691F12492FC3DF86E5EFD92E1BC9D385DDBA79C02C08163096E
98924382C7F76ADB83363F197F6C9FDA5F59FDA9FE386ADF10EE0C906856FF
00E85A259B9FF8F7D3E263B372F20492926493AFCCDB41DAAB5FA0DFF0528F
DA0FC33F0DFC1DA57EC2BF036E0C7A2F87A388F896E63605AE2E0112ADABB2
E033190F9F71818F30AA0C6D75AFC4EAFB9CA32F787A569BBCDEADF77FF00F
E52F11B8C219C660EA61A9AA78787BB4E0924A315D6CB44E5BBFBAED247EA3
FEC53FF0528F1A7ECFAB69F0CFE2CACDE30F864C160489C892F74A8FA7FA33
39C49001C1B77381806364C157FDF8B5B5F07FC43F08597C51F837AB43E23F
0B6AB1F9D1496CC5F68FE218386050E55E370248D815619071FCD4FC0CFF00
82737ED55F1DC41A8697E166F0BE853F2353D7CB5842CA4060D1C455AE6556
07E578E1643DD857EF37EC85FB24F853F62083519EEBE266A9E27D4F5742B7
9A6C0A906945F20AC8B69FBD613A01B44AD3292BC6D00E2BF3CF17783B87F3
5CB9FF006E4E34B97E1A8DA8B8BF26F74FAC7AFAD9AF0F87332C661EB7FB22
72BEF1DD3FEBB9EA3A7695A96AF3FD9F4CB692E64E321149C67B93D00F73C5
7A6587C2D92DA117DE2CD422D36DC7254302FF0042C7E507E9BA8D57E2C5F3
235B7872CE3D3A1249DC406724F24E31B413DF83F5ACAF0B5ABF88750B8F13
78BAF71A4E8E8D7175717526D8956305C86663B551402CDD0051CF5AFE20E1
7E1BE18FED1A596E0233CC3113764DDE9515DE4D6B524A2B57F0A691FAA63F
1B8EF632AF59AA304BFC52F4FE557F99BBE35F897F00BF67887C3175E3DD5E
D7401E2BBE4D3F4FB9BCC96799A32FB9D88CC510000790858D0B2EE2BB855E
F1F5CF8AE09BFD22EB7E9971FEA9A0F96360790AD8E49C7A920F51DF1FCA9F
EDE5FB545DFED55F1CEFBC49A6CD20F076801B4FD0206DCA3ECAADF3DCB236
36C972E379CA8608238DB3E5E6BEB4FD813FE0A3F3FC308ACBE057ED0D72FA
A7C3F9F6DBD86A72E649B4807858E43CB3DA8ED8F9E1FE1CA00ABFE91E4D93
61701878E1B094A34E2BA462A2AFDECBFE0BF367E238AC554AD373A926DF9B
BB3F69AB89FDA93E198F8EDFB37DF8B38BCEF13781F37F698199248E243E6C
63B9F3210703F8A445AF62D7FC3B1595BDBEB9A25CA6A5A25FA24B6D750B2C
91B4720DC843AE559581055870C391563C07ACFF00646BF124A716F79FB990
1E9F31F94FA707BFA135D78CC2C6B529529ECD58F4B8733DAF9663E8E61877
EFD39292F3B6E9F935A3F267E0EFC25FDAC3E3AFC18305B784FC492DCE9306
D034CD4337765B173844473BA25E79F25A327B9AFA9B56F8DBFB177ED6500D
37F6A5F87B1F863C492A841E21D3036EDC00018CF028B81CFDD8E549E351CB
1AF997F6BBF83DFF000A57E39EBBE1BB283C9D1B516FED2D33030A2D6E493B
17DA2903C63D941EF5E01E19D0AEFC53E24D2BC3361FF1F3ABDDC167177FDE
5C48235FD5ABF23C366F8DC1557454AF676B3D57F5E87FA2F9D7875C31C4F8
18667528A8FB48A9FB487BB2B357D6DA36BAF32763F763F685FD8653E347C1
0F865F08FC07E305D234AF879691416B2DE5BFDA9AF628EDA3B785E4789A20
ADB50B31542096E00039FCDFD5BFE0913FB465A4929D2BC43E19D42153F266
E6EE19587BAB5A9507FE067EB5FB9FE2FF001A5DF847C4D676562A24B28AD9
04901E01F9980C1EC40031FAD747ACF8BB4AB8F0AB7896D34FBAD6ACA0E678
AC577DEC2BC6F65854877283E6648C99180FDDAC84853FD3FE10FD30734C15
7ABC2793E221CF87935ECE708EB7776E2F472577677774F4B256BFF9A59BF0
8DA9C319522F966B47FA3ECFF33F9A9D6FFE09ABFB6269170F15BF82E2D522
4E7CEB4D4EC4A37D1659E393FF001CAE1F49F803FB69FC12F1341E21F0B782
3C59A26AF6D9DB75A4DA5C4E02E795692D0488C87BAB12AC3A822BFA4CF0BF
8874CF88DA17FC257F06BC6A9E22D373B5912E37BC2F8C98A456F9A29003CC
72AA3AF719AAF2F8DBC6DA54E6D6FA62B22754962507FF004106BFA467F4C3
E23A6E783CD701465D251719C5F9A9294A4BD5729F35FEAFD17EF539BFC0FC
CAF863FF00051EF1AF86E2B6F06FED97E00BD8E062231AC4760F6970A7A6E9
AD6458D49EE5E02840E91935FAD1F0CBC6DF0C7E2DF86EC7C4FE00D7ED7C57
A659C824B6B847DF3DACA51976BE71246FB1994ABAABEC24364139E622F8A7
AFA8DB3C16F32F7CAB027F26C7E94FB1F1F691697EDAA0F0E5AC77AEBB1AE2
20A92953CE0B6CDC47B66BF9C78D737E1BCCF14F33CBF2BFAA625AB49D3A97
8497670704D2EC94B95748EA7B786788843D94EA7347B35B1F927FF0540FD9
4F565F887A27C67F86DA4CB7DFF09ADCC3A5EA3696B1977FED5236DB48AAB9
FF008F945D87000DE9924B495F67FECB9FB3BE8BFB1CFC2E2FA8886F7E25F8
A6257D42E170E2D93AADBC67FE79447A9FF96B273CAAA85FBAF41F1769DAFD
95D5F4D1FD920B22A5DA665D83BEEDC7818C6726BC9BC79E02F123DFDC6B90
C87538E53B8803F791AF61B475007036FE55F15F489FA487192F0FA970E64F
4A52E4F767523ACBD9AF86EB77C8B4564D68A52F875F6B84B20C154CC3DB62
A492E89ECDF6BEDEBF7753C8259649E579A662F2484B3331C924F2493EA6B1
FE39388FF631F8B8EDD0E9F70BF8948C7F5AD52082411822B9CFDA225107EC
49F15E4271BA029FF7D3DBAFF5AFF3D7E83B0954F1372BE6DDCD7FE9513F58
F11ECB28A96F23E18FF8249FC548C6B9E34F801AD4D8B4F105B7F6B582B150
A2E60021B9551D4BC9118DC7A0849E2BF4C6EEDA5B2BA9ACE71892076461EE
A706BF998F807F142EBE0BFC65F087C4FB62FB340D4229AE16300BC968FF00
BBBA8D73C66481DD07D6BFA9EF887696FF00DAB06B560EB2DA6AB0ACD1C887
28DC0E548E082369CF7CD7FB75F4C3E0BFA87114334A4AD0C4C6EFFC70B465
F7C791F9B6CFE75E1FC4F3D1707BC7F23F3A3FE0AC1B7FE145FC2CCFDEFED0
7C7D3ECBFF00EAAFC26B0BFBED2AFADF53D32E24B3BCB4916586685CC72C52
21CABA3A9055948C820E41AFDD0FF82B23EDF833F09E2FEF5E4CDF95B27F8D
7E21785FC33AE78CFC49A5F847C356AD7DAB6B37315A5AC09F7A49A66088BE
D92792780393C57F587D162508702E1E755A51BD56EFB5B9E57BF9773C2CF2
EF14D2F23FA0DFF8264FC7DFDA17E35695E20B0F899731EB9E18F0D471416D
AB5C211A84978F822069570B32A440B3BB83202CBB99B771F7FF00C47F0DEB
37F22EAD6B235CDBC0B8F240E631DD940EB9EFDFF01C70BF003E1A683FB3BF
81BC1FF037402935CDB4125CEA772A31F68BB910B4B29C8CFCF27DCCF2B1AA
AF4C57BE8D5E2D4F4D9EE7C3D3C171307B88222EC7CA3736CEF1491B15C91B
644656C02460F0718AFF00317C43E36C9F3DE22CC31192538D3A10ABECD28A
E58DD462EF6D9397326D2D9B71DD1F7187C0D6A1469AADBB57F95DFF0091F2
7527C54F85FA5FED2BF07750F871A9B245E21D317ED5A45D3F58E78C10993D
76303E5C9C7DD21B96031D07863C51E0BF8D69ACFF00C2279D23C5FE1BB86B
4D7341BA2A975677284821D41C147C1314C998E51C8208602AD95D6A1E1ED5
A3B95530DCDABF28C31EC548F423835F339CE4D568CE783C653717D53F3574
FD1AD535A35669D8F4B25CE6B60B134B1B849DA7069A7E6BFAB35F267E117C
24FD9FFC75F15BE2F47F082DED64D3750B49E44D52495091A7C36EFB279245
18E50FCAAB91B9CAAE46735F79F8C3F6DDF047C0AFDA7FE13FEC91F070C30F
817C31A8C7A4F892E46D612DDDF2B5B2C4640319B79A513DCB8E5A6054E363
06FA33F6DBF88DA9FC00FD9D3C67F1CBE06786D13C53E2F92CED353D5E151E
65846C86DD6EE51D59A1388A3C7024903B64021BF921FB6DE7DB3FB44CEE6E
BCCF37CEDC7CCF333BB7EEEBBB3CE7AE6BE5B21C821825277BC9F5F2E8BFCC
FD53C59F17711C4D3A30E5E4A5049F2DF79B5EF49FA6AA3D96BA36D1FD3BFC
6FFDAAFE33FECB3FB44EBFE16BADBE29F066A663D4ECECB5063E6C76F76332
2DBDC005D1567591115C3A2AA80AA057D27F073F69CFD9D3E38EA9A6A6937A
7C29E293344CBA65F6D84CD28618485B98A5DC7850855CF529DABE12FDB2EF
ADFE34FECF3F04BF6A1B358FED1AD69F1D86A2CA3E6FB44D179DE5E47F0C33
C572BF535F177ECF29E67C7DF8689EBE26D1FF002FB6C55F3388CE71583C7C
A85EF06F44FB3ECFC8FDCB27F0D322E25E13A59AF27B3C4420D4A50D2F2A77
5EF4767CD6BB7A377DCEB3FE0A870F95FB5CEB8FC7EF74ED31B839E9005E7D
3A57E93FEC11F0DFFE14EFEC8DFF00096DE45E4EB9F12673799230E2D08315
B2E7D3CA0F329FFA6B5F10FED9BF0DB52F8D9FF05188FE16695B84BAD1D1ED
64751930DBFD92396E25C7FD338B7BFE15FB19F109B4DD324D33C15A144B6D
A5F876D62B58614FBB1AAA2AAA0F6545503D39AFEB9FA71F8CDFEAF783D956
4B4276AD89A34FD6CE168FFEDD25E74CFE2CE00C93EB79C4A725EEC5B6FE5F
D25F33CE7E2EFC543F0B7E2AFECCCB71379361E2DBCBED06E4671BFEDD6710
B75FFC0A586BC96FB47F09FC4AF157C5BFD817E2DB91A76B534FAB7856ED91
435B8BC1F6F115BE7196B491CBC406772ACA8C4280A7E6AFF82BD6BDA8F863
E1D7C02D77479BECFA86997F35E5B38EA92DBC16CE8C3E8D835B9FB766B171
A85D7C17FDAB3C013C9672788749B79EDEE22C1104916CBEB5249182E45C38
C1CE447823822BF953075E587C9F07898FD8842FE69C526BF27F23F5CF0DF2
8A19B66989C9310EDEDE32E47FCB52179465F72945F7526B73F11EF26F8E7F
B197C71D5F46D1B57BBF0978D3C2B72D6B2CD68F849E3043A128E0A4D6F32E
C91564564752A4AF6AFDB0FD9B7FE0AA5F0BBE304165E03FDA9AC60F08F881
B6C506BF6C0AE9B339381E764B3DA31C8C962F09F9999A2185AF3EFDBAFE1A
E8FF00B60FECDBA2FED91F0E2C913C5DE0FB7367E27B28065CDB43F34C4804
926D59BCD427936F21663F2AA8FC0BAFA5C66070998E15D1C44154A535AA6A
E9AF47FD23F35C6613159762E742AA70AB4DB4FBA6B47FD753FBD3F0B41049
A5D95E25DC3AB42B0FFA1DFC455FCDB5982B290EB9043055E5490C02B75E9F
367C75F1D58FECCDF0A7C5BF10D5A3FEDAD4A56B3D1A32011F689F718460F0
446034AE38CAC78EA457E137FC1297E2B7ED2ADF1CF48F843F0F75A6B9F023
092FB5AB0BF56B9B2B4B18CE6596DC6E5682691DC2218D82B48EAD223AAE07
E9D7FC14E7C05E29F13783FC37F12743BB6BDF0F786E59EDAF6D50656092E1
D516E72392372089B3F7495DBF798D7CD679C3985A542862230729E193F66D
B6DC79972B777ABB2EAEEF4BBBBD4FB9F0BB0B4731CFA86071B351A5564B9B
B4ADEF28F973B5CBD37D3A23F162E6E6E2F2E25BCBC95E79E77692491D8B3B
BB1CB3331E4927924F5AFE9BBC49A3C3E15F0A783FC1B6C3645A269B0DAAA8
ECB0C71C4BF904AFE717E176810F8AFE267847C2F72BBA2D6357B0B3707BAD
C5C24647E4D5FD34F8A34C7F1278FADB4B19F2A1850CA476404B1FCF200F72
2B9780E97F16A3F25F99FBE7D2D31CAF97E163D39E4D7FE0297EA7CB1FB52F
C6D5FD95FF0065AF117C46B59441E2BF1101A5E843F896EEE9584728C861FB
98C4971C8DADB154F2C2BF911666762EE4B331C9279249AFD3EFF82AB7ED1D
1FC66FDA05BE1E787270FE16F86425D2E109F725D4491F6E94703856458075
1FBA2CA70F5F1BFC00FD9AFE2FFED31E2E1E11F851A2B5F3C453ED97B2E62B
0B08DCE049733E08418048501A47C1D88C462BF433F8D8FD1FFF008267FED2
9E1DD774DD43F623F8E4E2F3C21E34DF1E8524CDFF001EB7D31DE6D559B3B3
CD93124047DCB81C026418FE8B358F07786AEFC06BE09D7AC9B53D0E2B682D
A5B40ACC2E618368113A27DF8DF680F19F91D728E0A1607E0BFD983F638F82
1FB19C16B7712A78CBE26DD8093EAF3A01F65F346D68ED633B85BC78241209
964C9DCC10855FA1FC73FB48F8234CF8E3FF000CB77DAEBF843C63AFE8B6FA
9689A9BA452C134F3CD3C5F6754981432A980108DFEB558AA32B819F1B2AE2
5C1D6C656A781AAA55A872F372BD62DDDC55F652567A5EEBAD8F56A52C4AA1
4E8D66E34A4DB57BDAFA272B6AF6B5DA5AA5D6C6DF896FFC47AAA25843A5CF
A7E996E02C56E90B2A855E172000381D00E076F5AE164B5BA8BFD6C2E9F552
3F9D7C25F16FF6BAFDB37F67DF19CFE0CF1F26937522E5EDAE9AC0FD9EF20C
E04B1346F1E41FE21C153C100D7176FF00F0542F8FB180B3E85E1B980EE6D6
ED4FE9778FD2B82AF17E163371A9CC9ADEE8FD930BF474E20C4518627092A5
5212574E33D1AF2BA47E8D57CA3FF0538B9B8B1FD92FC09776923433C1E2DB
392375386575B4D40AB03D883C8AF264FF0082A4FC6803E7F0B787C9F68EEC
7FEDC1ADFF00F8282FC43D5BE297EC2DF0C3C79AEDBC1697FAF7886D6E658A
DC308908B3BF50137966C631D49AFDBFE8E19DE1B19C699753A4EFEFDF55D2
CCF80F127C27CE787F2FFAD66508A8C9F2AB493D6CDF4F247DE87C596FF157
E12F807E2FDA05FF008A834CB7927DBFC134918778FF00E0120914FB8A59F4
3F07FC63F01EA5F04BE28402F346D623F2E09090248251CC6D1B9CED911B0D
19EC7E5390715F25FF00C1383C67FF0009E7EC8DAE7812E240F79E05D4A6F2
94F256D6E3FD2D0FE2E6751F4AFA20120E470457F017D286399785DE2F6233
0CA24E169292B3B5E29D92D366E2A13BF4934CF67842952CDF23587AFD34F4
EB7FC5AF4D0FFFD3FD69F803FB33785FF673D22FFC27E04F106B57BE11BE76
961D0F579E2BDB5D3DA4C97166C6259A3490925D1E4914B12C00666267F8DD
FB2EFC2DFDA057C2565F11A0B9B9D27C232CB3436504C618EE3CD458FCB99D
7F7BB0050708E8C4E32D8C83B3A97C49D5754B84B0D02116BE7304577C3484
B1C0FF00647EBF5AFCCCFF0082957C55F1168BF13FC1DE11F09EB377A64FA1
69B25E49359DC4904825BD93600CF1B2B642C00FFC0BDEB28F1256C92AC736
C249C2B4138C651D2494B47696EB46F6FCCFB6E00E07ABC4798C729A73E552
4E4DB574B955F5575BBB2F9FC8FD32974DD47C11A141E11F877E188BC37A0D
98290C3610C6AAAA4E4954872A993924E324F24E6BCB2713899FED5BBCDCFC
DBF3BB3EF9E735F8E3E0FF00DB8BF69CF076C8E0F194DAB5BA758B538A3BCD
D8F59645337E520AFA9FC2BFF0543D72548ED3E27F806C3578F80D2D84CD6E
47BF95389C31F6DEB5F390E39C3579B9D794949EADBD6EDF5BEADFCCFD3F39
FA32F12615378650ACBFBB2B3FBA6A2BEE6CFB8ABBCF08F8BCE919D2B551F6
8D2E7C86561BBCBDDD481DD4F71F88E7AFCDBE17FDB47F646F1C958B549EFF
00C1B772E07FA65BB84DDE81E033C607BB05FC2BE88D0B48F04F8EED9AFBE1
AF8C34ED7E1C67104F1CDB47FB6626620FB1515ED50C761B10B9613524FA7F
C03F20CEF83B36CB1FFB761674EDD5C5A5F296CFE4CC6F8B7FB34FECF3F10B
E24E9BFB407C50F0E7FC25DAAE97A6DBE976505C1F3F4F48A29A6B8491ADF8
8DD99A7604CBBD70176A86E4EEEA5E39D4EE6D934DD251349B0854471C36E3
6ED45185504630001801428C718AED3C3F6BE25F0D6FD235BB16BCD2272549
8FF7C1377521465B69EE08F71EFC7F8BFC1D3E897693E9EAD3D8DD301111F3
1566E887D7D8F7FAD771F3270E033B6065998FD4926A7F889F10BE1DFECCFE
0397E28FC5BB9D928CAE9FA7261AE6EAE31958E242797EE49F9631F331159F
F16FE2D7C3AFD943C047E227C4B905D6B57419349D22261F68BA9D403B501C
ED0B90659482B1823AB9456FE6D3E3CFC7CF885FB44F8EEE7C77F106F3CD95
B31DA5A4648B6B2B7CE56181093803BB1CB31E58935FD25E037D1FF15C555D
6371B7A7828BD65B39B5BC61FF00B74B65B2BBDBC7CD3358D05CB1D65F91B3
FB47FED25F10FF00699F1DC9E30F1B4FE4D9DBEF8F4CD322626D6C2DD8E762
038DD236019252373903A2AA22FDC1FF000495F8650EB9F17BC4BF16F548D5
ACBC11A6F950330394BCD47720743D3E5B78E6561FED8AFC9CAFE96BF624F8
77FF000A7FF638D0E5B88FCAD5FE2048DACCFC863E55D8516F83FDD36B1C6C
476676AFEC8FA4867185E1AE08965997C153556D46118E968BD67F7C534DF5
72BB6DB3E7B27A72AD89E79EB6D4F6ED46F64D46FEE2FE5FBF712339F6DC73
8FC2BA0F05EB9FD85AEC3348D8B79FF752FA0563C37FC04E0FD335CAED63D0
1A42A47518AFF294FB93F1FBF6DAF82E3E0D7C72D520D320F2741F126754D3
F68C222CCC7CE84761E54BB801D90A7AD7EB27C07F037FC29EFD97BC29E159
A3F2755F10A7F69DF0230DE65D62521BFDA44F2A23FEED74DF147E07E83FB4
CF857C189ADB22DDF84B578269D9C64CD640A8BA833CFF00AE8C29CFF7947B
D743FB46FC74F847FB3B6929E3AF89F7A26BB2862D2748836B5CDDC89CB18E
2240C0246E91B08836E4EE2A0F95C27C1389C466B2A381A4E73A8ED08C55DB
BEAF4F2FC16AF43F73F10BC5D79AF0D6032EA92F7E17F6ADF5E45CB077EB74
DB7FDE1B359786BC19E18BCF887F14F5387C3FE1AD323F3A696E5BCB057381
9EF96242AAA82EE485519233F893FB61FF00C1427C4BF1A92EFE1A7C241378
63E1E2868242BFBABCD513A1F3B69FDD404702153961932139D89F36FED31F
B587C50FDA7FC4C753F17DC7D8341B4919B4ED1ADDCFD96D179018E71E6CC5
4FCD2B0C9C90A113083E62AFF55FC0DFA3061723E4CD33C4AAE2B751DE14DF
FEDD35FCDB27F0EAB99FF2BE679D4AADE14B48FE67BAFECCFF000967F8E1F1
CFC21F0D56367B4D4EF51AF8AE46CB1B7CCD7273D8F948C17FDA2077AFE9BB
E276A70DD6BEBA5D9854B4D2A35811130115BAB600E98E171FECD7E6D7FC12
8FE1545E1BF0CF8CFF00690D760E590E8FA56F18DCA8564B975CFF007E4F2A
3561D0AB8F5AFB8E79E5B99E4B99D8BCB2B17663D4B31C93F89AFF002A3F6B
978D4B1B9AE1B84B0B3BC696B3B77DDFDF2E55EB4D9FB1783791D94F1B35E4
BFAF4FCCEF3E1BEB49A678856CAEB0D69A98FB3C8ADCA92DF7091DF9F979EC
4D7F379FB607C136F805F1FF00C4FE03B684C5A3BCBF6FD289E86C2EF2F128
27AF9477444F76435FD018254865382390457C9FFF000544F866BF107E0A78
53E3EE990EED47C2F28B0D4D94609B4BB6D819BAF11DC80147A4C4D78DFB26
3C71965B9F56E13C5CFF00775FE1BF76F4FBA6ECBCEAB37F18B21528431D05
AECFFAF4FC8FCD7FD97FF6D6F8AFFB335F269BA6CBFF00090F8366626E742B
C90F93F33659ED9F0C6DE439392A0A31397462011FA1BAF7C0CF809FB66786
2F7E2A7EC9BA843A278AA0024D4FC3573B6DF1237383102440CDC85910B5BB
918CA90E47E16D7D83FB2BFC08FDABBC65E2DD33C75F0034FBED164B29018F
5E91BEC7608376D7065906DB84E312448B2E470C841C57FAF1F48CFA3D70C6
7F82A99962EA430B5D7FCBD6D46327D14FBB7FCCBDEEEA49289F9E787BE23E
6F9062E35F2DA8FCE3BA6BB35D57E5BA69EA61EB5E0DF15F873C4F2F82F5CD
22EACF5E86616ED64F1309FCD6202AAA632C5B236EDCEEC823208AFD56B3F0
EF89FF00626F813FD89F0E3C3971E2EFDA27E2641B2DACEC6037AFA6404853
2CBB032476F6A5C1776F9249C8059A34CA7D45F127E2BFC03F83D65E13F18F
ED59AA787EFF00E2B786A0DEBFD9103CB75E7B291986DF2D284C3651A7DA81
FE75D8718FCECF8D5FF0570F1B6B6D71A67C0BF0E45E1AB671B06A7A984BAB
E2A33864806608C8CF46330AFF003ABC31FA307116698A955C0D1E6A69B51A
B2F769DBF9936AF2FF00B75376E9AE9FD07E2C7D23659DE5D4B01087B24F5A
A93BF335B25FDDEBAF5B2FB377E29E04FF00825378DE6827F8A5FB63FC42B0
F875A4DC4A6E6F55EEA2BAD466924666944D75237D9A391CFCC195EE0B1272
B9AFBEBF647BEFF826BF833E20C3F0D7E07DB5B5D78C200A6CFC41ADDB34B3
DF5CE0A32DADD5C85292607290A428F9FDD86E6BF083C7FF0013BE21FC54D6
5BC41F11BC457DE21BF39DB25E4CD288C1EAB1A93B635FF65001ED5C447249
0C8B2C4C51D08656538208E41047422BFB8323FA12E0560A71CCB1B295792D
1C12508BEF67794FEF869D9D9AFE5EA9C492E65C91D3CCFEBABC79ACF8EADA
F5AC35A98DBC126760B7CA4322FB3753EE18F15E5D5F03FEC7FF00F0513B4D
42D2CFE0D7ED4575F6AB1936C361E2398FCF137444BE6EB8EC2E3A8FF96B90
59C7E96F8A7C1977A0C915D593FDBF4CBBDA6DEE23F98307E541DB91923A11
C30E47703FC18FA63FD14B8B7827369E2B319CF1187937CB51B72B2BF7FE5F
92E5D1492D1CBFA2F80F8C7058CA4A8462A135D1689FFC1FE979737A4E9779
AD6A10E9B629BE69DB03D00EE4FB01C9AFCEEFF82A97ED5B67F0F3C269FB21
FC2EBD2352D46249BC51750BE1A2B694074B225790F700879464621DA9F32C
AC07E8BFC5AF15F8CFE037C2D9EF7E1B784EF3C69F143C4AAD6DA3E9D696EF
3A41211CCF74CBF2C76F064348CCCA1DF647B86EDC3F1ABC29FF00049EFDA0
3C7F7FA8FC4DFDA6FC6DA6F8122D42696FF52B8BA9D750BF69256324B24C51
D2D97712496FB41C1FE1E315F7BF478F08FF00B0702F33C7C6D89AAB67F621
BA8FABDE5DB45D1DFE6F8C7885E36B2C350D6117D3ED3FEB447E36D7A67C36
F833F163E30EA5FD93F0BBC25A9F89EE03057FB0DB492C7113DE5940F2E31E
EEC07BD7EDC691F0CBFE097DFB3532B496F77F1A7C496A402D3917B681F19C
EDFDC58B464F1D2661EFCD49E31FF828DFC497D317C35F073C37A57C3BD1A0
409025BC297334401E426E44B75523B79048ECD5FBB63789B0743473BBECB5
FF0081F89F45C31E06F12E696953C33A707F6AA7B8BEE7EF35E9167D31FF00
04FBF83FFB537ECE5F0FF52F0F7ED2FAAE8D61F0E160696D6C2FAFC4D79A5C
A4EE71E72836C96EC092D1F9CD87F9976E5B77D83E23F0EDB5A5BDBF883C3D
709A86877E8B2C1710B895364832A43A9219581CAB0E08FD7F9C7F1AFC47F1
F7C47D406A7E3CF10DF6BD70A58A1BC9DE558F79C911A312B1AFFB2800F6AF
B3BF637FDB0A7F843771FC34F8952B5F780351728ACE0C8DA64921E5D0724C
0C4E6441D0FCE9CEE57F1F09C6D4AA56509C7962FADFF33F4AE22FA2F63F07
964B1586AEAAD68EAE0A36BAEBCAEF76FADACAFB2D6D7FAFFF006FCF8783E2
5FC07D27E2BE9F1799ABF82A5D976547CCD69705639738EBB64F2E41FDD52E
7D6BF35BF638F0A278C7F69AF00697283E5DAEA0350623B7F6746F76B9F62D
101F8E2BFA0BB7F0968BAB693AA785A774D53C25E32B19238E48DC488F1CF1
1042B0C83BE36255C7500115F96BFB0CFC3697E137C6CF8B7E22F1A3AC76DF
0BB4EB9B4BA90AE3EFCA6413A64F0A60B5908F50E39ACF3BCA39F31A1562B4
9357F96BF8AFC8EDF0BFC45787E0CCD3015A569D08CB93D2A7BABFF019BFFC
9923EFFF008946E9FC5F7B2DC44F1A1D8B1EE52032A28195CF504E7A560787
BC47A9786AFC5F69CF8CE04919FB922FA30FE47A8AFC9CF827FF00058FD59A
E9BC39FB4CF84E2D7B459E5629A9694891DE5BA312544B6CE5629B6E40DD1B
42C14676BB57EB1F80B59F83FF001F3C3CDE30FD9FFC5D67E21B3400CD6C24
2B3DB96CE1658A40B342C7076ACA833D41C735FC97E257807C4583CD6AF10E
4759D5939CAA5A3EED48B6DBD15ED24AF6D1DDAD3959F93E47C5F82A9878E0
B171E54925AEB176EFDBFAD4F07FDA17F66BD73C5F7B71FB49FEC8BAACFE10
F8A1663CCD4AC6CE51026AA010ECAE9FEADA562B9C3831CF8C38DD935E0DF0
63FE0A83A75ECC3E1FFED6DE1C3617968E6DA4D66CADDD5A2963F91FED7663
F791B820EF6873F37021500D7DEF6B71E20F056B0B3796F677517051C7CAEB
DC11D194FB1F7073835F327ED8BFB1BF87BF69EF0FDCFC5BF8456D169DF122
C2306F6CC1544D515178473C013803114A701C0D8F8C029FE80FD143E94590
F19D28705F89349431505CB4EB3F72A46DD399EBCABAC65750DECE1FC3FCF7
8CB83AB605FD772F77A6FA6EBFAECFAFAEFF0062D868BE1FF1A681078CFE16
6B56DE27D0AEC1314D6B324C0E38650C870594F0CA70CA782335CA491C90C8
D14CA51D0E0AB0C107D0835FCD4FC2FF008CDF19BF66FF00185C5F781357BC
F0DEA76D318AFAC6553E4CAF092AD15D5AC836B153B97E65DC873B4AB735FB
63F01BFE0A2FF067E38C76BE15F8E56D0F80FC58E0469A807DBA5DC3E07226
7C9B7C9CE1272500C6252C40AFE92F147E8B19D648A58CCADFD6B0DBDE2BDF
8AF38ABDD7F7A37EED451F1782CF29D4F767EEBFC0FA4FE2FDF0D27F650F89
F7F9DBE6D8CF6F9FFAEE89163FF2257CEDFB0EFED9571E28B4B5F823F13F53
11EBAA821D1355B9F9C5CE0612DAE3254B4A3A236E0641F2921F05FDDBF6C9
D26F3C39FB21F8C74DD303EA1F6E9ACD8C90216020FB5412348DB7385091F2
738E7AD7F3D114B243224D0B98E48C86565382A4720823A115FC37C4B9BD5C
263E1287F2EABBEACFEDBF04FC39C0F10709E2B0F8B5693AAF964B78B508D9
AF2D5A6BAAF935FD15CFF193E1AEB5F13A5F821F17625F879F12DB0F61E7B8
FB06B903B6C8A7D3EE582A4DBCE0181F64EAFB9007085CF15FB6AE937BE09F
D887E2759DFB2B49349621190E432CD7D67183EBEB906BE53F0AEA5E02FF00
8289FC186FD9EFE345CA587C4FF0F42F3F87B5D2A0CD23A272FD8B92142DD4
39FDEA0122E1D0347F21FC34FDBABE3C7EC91E2AD57F666FDAE7426F881E15
D2DCD85ED9EA1B6E2FE0B66C156B79A7F92EEDDE33BA38E7E194A04923518A
F7FC3EC9722C1713E0B8CA861FF7B4A7194B95F2F3A524DA92DB9B4F8AD7EE
DAB1FCE5C6D94E6B94CAB6459874DBAA6BA4A2FF0095FF00C0B2699F9DD5FD
33FEC71F1047C60FD8DBC317734825D57C0ECDA25D6148C2D90558473D7FD1
5E0663DD81FA57C1FE3AFD89FE0DFED25E12B8F8D1FB087892DB5184FCF79E
19B894C725BCAD92628FCE224B77E0ED8A7F9187CD1C813683D2FF00C12C7C
41AEF817E2B7C43FD9CFC7D6573A45DEAF622EC59DE2B4324375627CB96311
3E0EF9619B793DD6207A62BFD41F1AF89F25E3AE09AB8FCA2A5EAE19C6A383
D2715F0C935DAD2BDD3717CBA33F1DCB68D4C2E2542A2D25A5FA1BFF00F057
6BB783C1DF0574A1F7654D5253F5862B151FFA30D52FF825FF00ECEF6FA2E9
FA87ED57E3DB5C436C92DA787A39072CC731DC5D2E7B9398233EA6427F84D7
D2DFB6E7ECEDAE7ED1DF177E05FC31B22F0E95A75BEB175ACDEA0E2DAC51AC
15C8278F3242BB231CFCC7246D5623E93F165CE89A458E9BF0F3C1D6C963E1
EF0DC31DADBC110C46A215D8AA3D4228DA0F527272739AFE3DF1C7E93B4782
3C1FC1E51819AFADE255556ED1756A593F55ACBFB89AFB713EC786785A598E
6ADC97B91B37F72FE979FA1B7E00D42EB5AF885FDAB78774D32CCE71D07CB8
007B01C0F6AF9C3F63AF8AD73E34B6FDA07E1F25C86D5BE1C7C45F11DCDA22
A9CA596A1A8DC5DC59FEF6F9D6E94FFB3C57D0FF000953778B377F72DE43FC
87F5AFC5DFD807E2D8F0F7FC148FE28F84A79DFF00B3BE246A1E23816218F2
DAEEDAF25BD8647FA451CE8BEF263BD7F007D1C70D5330E12C4AAF37CD5AAD
5BCBADE518AE6BF7BEB7EE7DDF1B5454731A6E0B48C63A7926F43EC0FDBBFC
09E2DF0F8D17F6DFF8017B368BE26D0923B5D7BECB8264B6C8449654C6D956
36C452ABAB068CA1236A57A97ECC5FB62FC39FDAE34F83C25E2A487C2BF13A
DE1CFD9C1C5BDFF9632EF685892C300B342C4C883254BAAB357D2DA28D36C3
5AD6BE1D789A04BCD0B59F3ACA78261BA3749414C30FEEC8876B7D47A57F35
DFB517C0EF10FECB5F1DB50F0A58CF716F6904A9A96837E8EC92B5A339681D
645C112C2CA519860EF42C3008AFF467E897C499678AFC2B2E1CCF5AA79A60
AF08D45F12E576716BED413D545ED193516B91B3F3FE30CB6795E2FDAD1D69
4F55E8FF005FEBA9FD2EC1A169F776BAC7C28F88962979A1789ADE5B49E097
98A549D4C6C01E387538C8E41C7422BF91EFDABFF678D7FF00661F8DBAEFC2
DD5F7CF6503FDA74ABB718FB669D3126097B0DC30524C70245603800D7EE67
EC7FFF000507D0BE295AD97C1DFDA4EEA3B2D7FE58B4CF1036D8A2BB7E8B1D
CB70B14FFDD9388E4E8DB5F1E67B0FFC14CFF657BBF8F3F000F8BB46B6175E
39F87492DEDB3C4BFBCBDB0001BB830392C5144A8BC9F310A2FDF24FE7DC7F
E1E669C358F965F9A53E597D992D6335FCD17D57E2B6693D0C70B8B8568F3C
19F14FEC67AAFF00C2EAFF00826DFC4FF84D3C81F52F86D7736A36831BD92D
491A8A051D4348F1DD20C7F7ABE7BFD9A6133FED0DF0D514648F11698DFF00
7C5CA37F4AD5FF0082377C408745FDA1BC43F0C75260DA7F8EF439A3111E92
5CD8379C808EE3C86B8FCEBB8F811E0A9BC1DFB69787BC0970C6593C3DE279
6D0B9182FF006295C07C7FB5B322BF0AE2CC27FB561EAAEAD2FC74FCD9FD89
F47CE22B6419BE5F27F0465517CE0D4BEEE55F79FA9DE04F85D145FB68FC6E
FDA23C416FFE8BA0DB697A3698587DE9A4D2ED27BA74CFF10568E353DFCC71
5B9797535F5DCD7B72774B70ED239F5663935EE9F1775786D2DA2D06D02A49
7CE2E2E4A8C160A02A6EF5C951CF5F940E95E055FC9BF4D1F16AB71067B86C
B79BF7783A54E9DBA7346118FE493F294A48FC9FC38C9561F0B2C435AD46DF
CAFF00D7CAC7E6E7FC16A67922F0A7C04B007E47835A723DE38F4E51FF00A1
1ABBF0CB52FF0085DDFF0004A3B40E5EEB55F84DABB4076F2DB219BE5C8FEE
47677A3DB099ED58FF00F05B491560F819659F9A1B4D6D88F40C34F03FF413
5CB7FC12075883C69A1FC6EFD9CF539F6C3E29D156F205CF31E564B2B971EF
FBF839EDB457F68E1305CF95C30FFDC4BFF253E1F8673C797E7543304FE0A8
A4FD14B55F357458FD8A3E3E5BFC1CF8967C3DE2C911FC15E330B61AA473ED
30C4CD9586E1C371B54B1593271E5B312095515F0DFEDF5FB2DDC7ECB7F1DA
FF0042D2A071E0EF116FD474194E4A8B776FDE5B163D5ED9CECE49250A39FB
F5B93C135ACF25B5CC6D14B0B14746186565382083D083D6BF68FF0066DD3B
E1F7EDBBF05BC3DE0FF8DBA73EABABFC1ED5AC6E61B871C5C42809812572B8
74923468A78C925C22BB1C918F99E0BCD9DDE0E7EABF55FAFDE7F527D277C3
C8B84788F0ABB46A79F48CBF28BFFB77B31DFF0004F3FD9F4FECC3FB370F19
788ADBECFE3CF89422BC995C625B5B3DA4DA4041E4144632B8C022493637DD
15F6378624D1F59B1D47C03E2A816F344F10C525B4D0C9F74F9ABB181F4DE3
8C8E41C118EB55BC63E203E20D6649E36FF4587F7708EDB4756C7AB1E7E981
DAB95048391C115FA2349AB33F8CE9D49424A70766B54D7467E6BFC32FD9D3
50F855FB79F857E19EB68F73A7DA5ECBAAE9F72CBC5C5A5B412DCDBCA7B6E5
78823F61229038C57E87FEDB9F1EA3FD97FE0578B3E21D94C13C5FE2575D23
4041CB8BB96328928186188115E7391B58AAA1E5857D19E18D37C3FE33BFD1
BC71AA59AC9E22F0DC7716B0DD118611DD2A89067B870AA4FA10718079C6F8
8FE13F8787C61A37C4EF146807C41E20F0DC1245A43DC4665B7D39A6656966
877031C7349B1034A01902A0552A0B67E527570791E12BE2B155146926E57D
74565A595DB7DAD76CFD338F78DF13C5188C24E51FDE429A84BB392949B92E
D74D5FB3F23F9F4FD943FE0955E3DF89A96FF127F691B8B8F02F8409F3FEC3
261358BE53CE5C480FD95189EB20329C102301964AFDBDD125F037C29F08DB
7C34F81DA1DBF863C3B6236AFD9D0ABB9C00CE59B2ECED81BA590B48C79273
557C43E2AD63C4D71E76A537EED4E5225E234FA0F5F73CD7395FC39E2AFD26
B199929E0723BD1A2F473DAA4BD2DF02F4F7BCD6A8F6387F816950B55C5FBD
2EDD17F9FE46A691BA6D6AC8B92CCF711E49E4925C57E20FFC1636FE64FDAF
74D92DA568A6B2F0D69A11D0956461717520208E411BB20D7EE3F85D3CDF12
E949EB77067E9BC57F3EFF00F0565D646A7FB6BF8A6C81CFF64586936BF4DD
671DC63FF2357E91F43DA6FEA38FA8FACE0BEE4FFCCF0FC4997EF68C7C9FE6
7D91FB2AFED73E01FDB03C1369FB2BFED6D70B1F8AC011F877C4AE5525B89F
1B6349246E16EFA004FCB703E56FDE63CCF9CBE3BFC06F1CFECFDE3393C27E
3083CC826DCF617F1A916F7B029C6F8C9E8CB901E32772123390559BF2851D
A360E84AB29041070411DC57EE4FEC99FB6F7813F680F06DBFECA9FB68CCB7
3F68D90E87E279DC24C9381B615B89DB3E5DC2E711DC1F96404A4C0E58BFF5
167FC3D0C6479E3A4D75EFE4CFA3F083C64C4F0E56FABD7BCF0B27AC7AC5FF
00347CFBAD9F93D4F8A2BF45FF006D0C5AFF00C13EBE045974F36EED25C7FD
B95C1FFD9EBE75FDA37F669F1C7ECE9E29FECCD754DFE877ACC74ED5634221
B941CED61CF97328FBD1927D54B2E0D7BD7FC140AE8697FB257ECD9E1B270D
75A6C57457DE1D3ED837E467AFD2BE87D97545C7F82A538D9A6DFDD193FD0F
D67E9619F6171DC3383C4E0EA29D39CEE9AEBEEDBE4D5ECD3D53D1EA719FF0
496F8829A0FC75D77E1D5E498B4F19E92FB109FBF75A79F35063FEB8B4E6BF
55B54B17D3352BAD39CE5ADA578C9E99D848CFE35FCE27ECD7F103FE156FC7
CF0178F1E4F26DF4BD5ED4DCB6718B599FC9B8E7DE17715FD546B1E0FF00ED
4F89EBBD775A4B1C7772F1C613E4DBFF00026519F626B2FDACBE0F57C7E759
4E678185E75DAA7F37EEB6FC928D3BF64DB3F957C23CF61878D78557A257FB
BFE1D9FFD4FD62F0169C6FFC4F685937476E4CAC7D360CAFFE3D8AFC9DFDA4
BE08FED11F1C3F685F19789FC3BE04D567D3DAF7EC76734D0FD96192DECD56
DD1E37B831A947D9BC10707767BD66EA3FF0569F8FBE24D5E0D1FE19F80745
B56BA3E5C16AF15DEA574F237411F932C018FB088E6BE9EF861E19FF008297
FC61FF0089FF00C4FF008810FC27F0CCE0398174EB2FB788FA9D91797E645E
84CD32B2F5D86BF65E32FA3166784C22ADC458CA18482D6D3A9793B7F2C611
9B935E573EBFC34F16AA70FE2EA62B014155A928F2AE64EC9369BD9ADECBA9
F2B685FF0004E3FDA6B570A750D3F4DD137751797F1B63EBF6613FE95EC3A2
7FC12BBE225C6DFF00848FC6FA558E7AFD9209EEF1F4F33ECF9FD2BF427C27
63E0AF84F014B7D7F5FF001FEB47992FB5BD56E2F577FAC68EDF6787DBC885
78E09AE9744F16F89BC69E28B2B09A7FB3D9EFF3248A0CA2948F2C431FBC43
74209C73D2BF85F89B8F7833039953CA72DAF2C6559C9417268AEDA5ACAF64
AFD9B92EB147EED2F1B38D3134658893A7422937F0745D94B99FDE7E74EBBF
B027ECFF00F0CE582DBE2D7C698F4CB89D3CD489D6D6C25923070592396599
8AE4119008CF158565E02FF826D78235049A6F89BAE6A37D6E432BC0D70406
FF00624B3B1503F07CFBD7CEBFB767C431F10BF693F12B5BCA25B2F0DF97A2
DB9C608FB1E7CF07D7172F360FA62BE4BD3B4ED4358BFB6D2B4AB692F2F6F2
4586186152F249239DAA88AB92589380075AFA2C666187A35A54F0F422D276
BBBBDBE67EFDC35C1D9BE639651C666F9B568CAA4149C61ECE09732BDBE07B
2DCFDD4F097EDB5FB33F81520F0D7826F3C5DE319EE9D20B785FED3A84EEEC
76A245F6F995B2490028FA015FA02BE28B18F4DD3AFB5B864D226D455185AD
D79666899803B64F29E44053A31576507F88D7E7DFECB3FB2BE85FB3868707
C49F8950C7A87C40BF8CFD9ADB21D34E471CA21E41948389651C01F227192F
EDFAAEAB7BAD5EC97F7F26F95FF251D9547603FCF35FA464AB13ECB9B13657
D9256B7AF9FE47F14789F532358F7432573A8A2DF3549CB9B9DFF76C92E55D
EDAF4D37F40F8A2BFB35DB78A74993E33D8786D75AD4A230D85DEBD696C4CA
91313E44575749B32ACE5BCA0FBBE6CEDE7274A5F03F8574B812EBC2BF0FF4
0BBB4701A36B58ADD094232180F242907B6D635E61E28F05782BF680F873A8
7C16F8A10F9F677EB9B2B91813DADC203E54B0B9CED96327E53D1949460558
AB7F3E1E2CBFFDA6FF00619F8A3A87C3BD2FC57A96812D93F9F6C60918E9F7
F6AEC7CAB94B7977C322BE083B949560C87E65615FD23C01E1454E37CBA797
E579CD4C2E329ABF23B38CA3D1C1B52E54B6947924D68EF6765F9256CCA384
A8AA55A2A717EBFA35F99FD1BCDE358B4397C8FF008442D34E907215A2119C
7D362D4A7E326B20011D85BA81DBE7FF001AFC79F869FF00056CF88563145A
47C69F0869FE2EB1E15EE6CFFD0AE71DD9A36124121F655887BD7DE3F0F7F6
ACFD8EBE36797068DE29FF00842B5A9FA596B0059FCEDD007766B7639E02C7
364FA74AFE51F197E893E38645CF88C2E36589A6BAC630BDBD6317F7CD411F
7792715F0F56B46B50E47EADAFCEFF0075CFA44FC64F1076B3B51F83FF00F1
74E5F8C9AF7F1D95B1FA071FFB31AC7D4FE18EBF6B08BCD2DA3D56D1D77A3C
0DF3321190769EB9EDB4B570D169B7D2EA11E97E4B25D48EB188DC1560CC70
0107915FE7E67FC77E22E5588587CC2B56A736ECAF1566FB45DB965F26CFD2
F0994E4B88839D18C5A5E7B7AEB75F33BFF8ADFB43C5F07FF67FF17FC73F13
594462D02DD8D9DB2B328BABA76586DE22D8621649DD10B00768DCD8C0AFC6
2BAFF82CDFF6DBACBE2CF817A36AF2050BBA4D432768EC0CB6929C73D335D6
7FC1607E2BDC4F3780FF0064CF03A497D2D9AAEB5A9C36C8649249995E1B38
B6C64B6EDA6695D0AF3BE2615F9C1F0E3FE09F1FB60FC4FF002A6D13E1B6A1
A6DA4983F68D636696814F46DB76D1C8C3FDC46CF6AFF47B83E8E3B0997E1E
9E32B3957515CF2D9B96F2DADA5F45E491F89E635294EBCE54A368DF45E5D0
FB7E6FF82ADFC15D4C88F5CFD95FC3D751B1F9CB5E5A49C77F95F4A39FCEB5
61FDBEFF00E09EDAE267C55FB34A69ECDF7869D67A7103E855AD7F90AE6F40
FF00823A78AB41D347883E3EFC59F0EF8174C8C6E95E2DD72117B8696E9ACE
253EE0B01EF5D7C1FB397FC1283E104813C79F12B53F88BA846BB9A0B29A49
6D64C7647D361555CFA35CFE35FADF0D478A7192B651F589BFFA77ED1FFE92
7955BD847F8965EB63E86F047FC152FF00613D23C2B63F0D749F07F897C2BE
1BB0DC6183EC56E2DE22EED237FC7BDECB21CBBB31CA9C939EB5EF9E0BFDAF
3F624F89B72961E0EF106B571792305105B687ABDCBAB1E8098ACE651F8B62
BE0F87F6B8FD807E164487E0BFECE10EAB770B6166D6A2B549140FE24B898E
A137FE824F7AA1AFFF00C15B3E3415FB07C3EF077877C33A6A2ED8A278A7BA
963FF75964862FC3CAAF731BF427CFB89ABBC666F95425396F52B3873BD6FA
BBBA9BB6F55DCD70FC62F091E4A159A5D95EDFE47EDAD97C2CD0B5BB18F51D
26FEF208A61951776AF0C807FB514AB148BF8A8A975CF82B6BE28F863E2DF8
55E21BC5B9D2FC516735B6F1161A0796328250A5882C8C11D79EAB5FCDC789
7FE0A0FF00B5F78A239A0BAF887716504C4FC9616B6966501ECB2430ACA31D
8EF27DEBF6A3F646D33E24FC3EFD9A6DBC69F15BC49AB6BDE30F1E95BC8BFB
56F67BB96D2D245FF4644F3DD8A7EEC995B183B9C2B7DD15F13E21FD11B29F
09702B8E711529D1AF45DE0A94AAB6DD9B7A4B963A74F75FBDCA96AD1EA60F
8B7199BC965D77252EE97E9AFF00C0B973E067FC1367F677F840B6FAA788AC
0F8FBC411005AEB57456B557C60F956233105CF23CDF3594F47AF70F8DDE03
D77C4FA5CB697DF13357F02786123DAD1786ECD61B931818C3DE18EE245C76
F284631C10697C39F15B57D376DB6B2A750B71C6ECE2651F5E8DF8F3EF5CBF
C4CB1FDA075BB697C57FB30FC43B06BE846F6F0E789ACA39EC64E9954BA816
3BC849F98FCEF323120298D466BF3AE15FA54AE30C5C71DF5E72C5ADA15945
B8FF008212BC2CB7FDDEDBE8CECCC383EA65FA55A77A7DE2ED7F9D9DBE68FC
D29BE09FFC12F347D46E3FE121F88BE24D72F848C67371F6B767909F98B3C3
6118273D4EEEB52BE95FF049FD0D72BE1FD6BC4057D25D4D09FCE7B71591F1
0BFE0A49F123E1E7883FE15D7EDA5FB3769B717A9862B902175071E6DB2DD4
7770CE99E0347395CF1BB20D66D8FED1DFF04AAF8BE5C789FC35AC7C30D46E
405370904CB0C6C7BC696525D4207BB5B8F718AFD4333F1978FAAAFDDE6D3F
94A70FFD26563EBF87B0FC06DAFED0C2E223E93A735FFA441FE6FD4E960F88
3FF04BFD3D8ADAFC18D6A6DBD0C99901FF00BF9A9B1FCC568A7C6AFF00826F
DB7FC7B7C0BBB7C7FCF4B5B63FFA15E353F4FF00D8D3F671F8BE04BFB397C7
7D375799D3E4D3EF24B7B9BA2DDB7F92F0CB18FADB935E43E39FF827F7ED31
E0A0F3DB6850789AD6242ED369172B3118EC2194433B1F658CD7E7F8FF0015
F8F2377571D5A5FF0071272FFDB99FBB70FF000378578FB468D6E59769C9C1
FF00E4C927F26CF5FF00F85F9FF04F25FB9F0118FD6CECFF00F8F9AFD2AFD9
43E2F7C3DF8B1E05B9B7F85FE14BDF0C785FC373259DBC77423109908F31A3
80249260460A92380372EDEF8FE7466F87FE38B4F14D9F82350D06FAC35FD4
268A082C6EADE4B7B879266091A88E50ADF331C0E2BFA29F08F83ACBE01FC2
9F0AFC28D09D5AEB4F8D2E6F6651FEBAE4B79923FAE1E5CEDCF215557A5706
5BC739F671274B32C4CEA538EB6949B57D968DBD77FE99E178D9E1DF0AF0F6
5F49E594DFB7AAFDD7CCDA515ACA5D9F44BD5BE87D23AF6BF0F87ADD6EEEAD
A69A0270CF1056087B6ECB0C67D7A57C9FE3CF853FB36FC56BE1A8FC41D0F5
4D5AE14B18DAE754D45D62DFD44682F0A20F65503DAB90FDA6BF698D57F669
F887E06F196BF6F26B1F0BBC776CF61A9C091867D3AEE02248EEA23FC4658A
52AF09E1961CAE1B3BBD6EF74FD075BD06CBC7DE00BE8B58F0CEAD12CF6F71
6EDE62047E841FEEE78E7953F2B00457DF679C1389A180C366388A6A587AE9
F2CAD7578B6A517DA49A7A3DD6AAE8FE68CA38831383ACE782AD2A735D6327
17F7A6B43E7EBCFD8B3F636BF07C9B5D4B4ECFFCF2BBB86C7FDFC12572179F
F04F2FD98B51CB68FE31D72C5CF412CD6EC83F07B646FF00C7ABE86ADBD3FC
37AEEA9B4D8D8CB22B721F6ED43FF026C2FEB5F113C83052DE92FBAC7DD61B
C5DE26A5F0E6153E72E6FCEE7C4DA8FF00C1313C1F7848F0CFC56547FE18E7
B28A627EAD1DCC78FF00BE4D79CEB5FF0004B8F8B96EAD27873C57A26A4A3A
09CDC5B337D36C528CFD4FE35FA8CFF0FE5D36C9F53F146A969A359C632F2C
D20DA9FEF331541FF7D5789F89FF00699FD933E193BFDAFC62DE23BF8C7FA9
D277DD648EBB65836C23E8D357938CE1DCAE0AF5128FFDBCD7E6CFD0B867C6
4E3BC54F93072957F2F65197DEE315F8B313F646F05FED47F03264F863F133
448F5AF0448C4DA5F5ADEC1336992139C6C77495A073D9509463B80C16C5FF
00DBFDBFE15AFECB9F1675EF026917175E23F886B6DA75C9B485E691D6748E
D256711A92A8966927278DC7AF35BDF037F6B9D4BF685F1A4DA2FC37F06CBA
6784F455136A5ACEAB38DD1A1CEC85208B72F9B260E09988550CC41C056F3C
F855FF000530F835F147F699D6FE015A3A5969CD22D9F87F5C79336DAADF47
959A2EC1048DC5A9C913608C8678D1BD6CA2347D8AF632728AD9BFD345A74F
C2E7E7BE2457CC96653966546146B548A738C1EF7774E694A4949D936B4D94
9ABBBBFE4B648A486468A6428E84865618208EA0835D57823C7BE35F869E24
B5F17FC3FD72F3C3DAD591CC5776333412807AA92A46E46C6194E55870C08E
2BFB35F8890782F59BE9346F8AFF000FB46F138C70F79690DC24919E032ADC
4727E5BB83C57CB5E2BFD8BFF606F8885DB51F877FF08D5D38E27D2E59ECD5
49FEEC56F2187F38ABE0E978D5C32F113C1D6C5AA5562ED28D452834D746E4
947E69B5E67CCCB85F1DC8AA469F345EA9AB3BFDDA9F11FECE5FF057AB5D52
DED7C0DFB5DE88B7F6E76C6BE23D3600245E837DD59C78FF00699A4B6DA718
0B01E4D7EBC7844E8BE24D22CBE287C09F115AF8A343BA05A392D65595597F
8E262A7923A3A36D753C11B871F991E2CFF823BFECFF00E230D2FC2EF8ADA8
E8724BCA45AA456F7E33FDD0ABF63900FAE48F7AF32F087FC13D3FE0A01FB2
8789DFC69FB3778CF4BD6831532DA5BDDB5B2DF226709756978AB6CE304852
652CB925195B0D5A67FC199071328E2E9CE2EAC2CE15A94973C5AD9A946F7B
744EEBB1383CCF19806E9B4F95EF192D1FC9FE87D75FB6CFEC6DA5FED19A0D
D7C64F847622CBE22E971E352D3400875248D7EE91C7FA428188DF1FBC0363
72176FF3D5716F3DA4F25ADD46D0CD0B147470559194E0AB03C820F041AFEA
6BE09FED1DE32D7AFAD744FDA57E18EABF0A3C6D1A888EA5F6779FC3D7CD8E
553508FCC8622C41C453C981F288E5773C7CABFF000517FD86478BADAFFF00
680F83BA713AF40A66D734CB74C9BD8D47CD770A2F59D4732A81FBC5F987CE
0EFF00F477E893F481C7606952E17E2BACA71568D2ADB7A4669FC29F4D5A8B
D13E56943E138932AA5393C46155AFBC7B7A3EBF9FEBF5AFECA46E3E1AFEC8
1F0A6CA65FB71BED356E9D6662D986FDA4BB0A09CE02895540C10146318AF1
8F8E1FB0C7C33F8CD0DD78B7E09CB0F84FC4E41925D39D7658DC377F9173E4
31FEF460A7AA024B57D57AEE816BE09F07F833E1F58716FE1CD2EDECE31FEC
5BC49027E91D7256F713DACC9716D23452C672ACA7041F622BF90F8E2A51CD
F31C562AAABAA95273F3F7A4DFCB73EFF83B8BB32C8AB4711975570924935D
2497492D9AF5DBA599F80FE22F0BFC4CF811E3D8ACF5DB4BBF0C789B45992E
207FBACAC8D949619172AE991C3292A791EB5F7AFC55F87FE18FF8299FC04F
F849BC3F6F6DA6FC7AF87F6DB0C60AC43518396F20B1C0F2666CB4258E2098
952551D99FF46BC61A37C37F8E1E1CFF00842FE32E931DEC7CFD9EF946C9AD
E4618DF1C8BF346DD3247CADD1976E73F993E3AFD9E7E347EC4FE3AB4F8D3F
0B2E9FC49E17B07DCD751A92CB6AE7E782FE24CFEE9D78F357E4CE1BF76DB4
57E5D4B015F2AAAEA53F7A93DFBAF3B7977FBEC7F4E63F8B728F1032F8E0B1
4950CC21FC36FE19BFE5527D25FCAF54ECD396A9FE1C7807E237C57FD9FBC7
C7C45E05D56FBC21E29D1E57B698283148AD1BE24B7B98241B5D43AE1E2950
AE4619722BF7CFF65AFF008283FC01FDA23C6FE12B8FDA1F46B1F057C5BF0F
C8F1E95AF4798AC6ECCD1B42F0F9CC4987CD491D7C99D9A224E51C48CAA3C2
FF006FFF00D9E7C29FB42FC3287F6E8FD9FAD4B4DE48FF0084BB4C8806913C
9501EE9917912DB8C0B8C0C3C5B66180AECFF901F047433E27F8D1E01F0DAA
EF3AB78834AB40BEBE7DDC71E3FF001EAFD170198D4A7FBDC3546B993574ED
78C959AF469D9AD9AD19FC959865F570F5A786C4C396707669EE9A7FA33FB6
9F88DAE5CE81A2BCDA7C0DF69BCFDC9B855FF549EEC3BF2768F524F6E7E56A
F3EFDA13F6D4D4FE047ED167C0FAB69A9AF782DF4CB337B6A8AAB7504F2B48
CF2C2C70AF98D933148769DA30C99627DDB434F01FC5EF0CAF8F7E0B6AD16A
DA7C8712DB2B625864C64C6C8D878DC75D8E06460A9208CFF11FD22BC3BCDB
3BC5BCC72FA9EDA34972FB1B5A514B79417DBBBDEDEF6CACD256FDCB22C971
393E0286231B47969574A51A8B58BBED193FB2FB5F47AB4F73A5F83B1E7C47
7729E896AC3F374FF0AFE3FF00E1AFC5CBBF037ED05E1EF8D87CC0FA5F88A0
D667488E1E4885C89A78B39FF969196423A1048AFEBC7C1F7A7C31A0F8CFC4
37A0C1FD8DA6CD349BC6D29E524921CE7A63657F1495FABFD19B06E9709507
256729547F74DC7F43F34E3AA8A598CADD12FCAFFA9FDB07C56B3893C410EA
B6C43C3A8C092075E4315F9720FF00BBB4D7CC9FB687C14FF869CFD9DA4D77
46B7F3FC75F0F849776DB4665B9802E6E201D49F36350EA31932C61460135D
57ECFBE341F15FF62EF847E3CDEF35CDA69916997324873234DA7EEB199D89
E49792DF764F5DD9AF51F03F88CF86B5E8AEA46C5ACDFBA9C76D8C7EF7FC04
F3F4C8EF5F9D70E789F8AF0D3C5A79AE1E5CB4AACA33976B4F76FC949CD4BF
B8E5D59F453CAA39BE431A76BCE09A5F2E9F356F9D8FE4CEBF6D3FE09ABFB6
1FC55D73C51A77ECEBE2DB1BAF17693E4BB58EA0A775CE956F0AF2B70EE407
B55E150B1DE84845DEA5117E5DFDB87F64DD7FE1F7ED2B6FA1FC35D224BDD2
FE25CC6EB44B6B64C81732B81736ABD0011C8C1C745489D727009AFA33E25F
8CBC29FF0004BAFD9FD7E1EF82EE6DB54F8FBF106D84B7778A04834E84E57C
E0AC3FD542772DBAB8C4B2869194AA98EBFDF9FA4078A1C338FE0DA35EAD35
5A78A8F3518FDA83D9CDB5AC791DE2EDF14972EAAF6FE7ACAB055A188693B2
8EFE7FF0E7837C6FF8423F61CFF828C7C3EF88FE1E83EC5E04F14EB70DFD9B
20DB1DB437728B6D4ED17A01E4ACECC8BD047220CF06BEECF157804E89FF00
0543F0D5C20021F114435945518DBE5E9F7113E7D4B496CED9F7AF97BE0D6A
937FC1443F614D7FE09788AEDB50F8BBF094ADEE8D753BEEB9BC89558DA932
360B1913CCB490E4E088A59096615FA5DE11B49FE2B78DBF671FDA0DADF6DC
5DF86EF86A0EC312477373611B2C4C31C1491EE1483D0E6BFCB3CE309ED634
DFF2CE2FF1B7EA7EF3E1BF10FD42B6322DD955C3D687CF91C97E314BE674F7
7F197E007C44F891ADFC36B9D7FF00B03C67A35E3E9E63BDC44975244420F2
599BCB932C701032C8483F2E39AB9AFF00803C45E1F2D24B07DA6D87FCB687
2CA07FB43AAFE231EF5F815F1FEE45E7C76F88D740EE597C47ABB03D783792
E3F4AF5AF82BFB6A7C71F82FF67D32D355FF008487C3F0ED5FECDD50B4F1A4
63036C12E7CD870A30AAAC6304E4A1AFE66E39F0D321CF6BD4AB89A6E8D66D
FEF29F577DE707A4BCDAB49F73FA7EA78238EA181A388C9ABF3DE116E9D4EF
657E49ADBC94934BB96FFE0B6BAB2B7C55F869E190DCE9FA15C5CE3D05CDC9
8C1FC7C8FD2BE4DFF825FF008F8F80FF006CEF04ACB2F9569E245BBD1A7E71
BBED5031857F1B848ABF4F7E246B5FB0FF00FC1401EC6EBE2FCD7DF0CFE215
A5A2D8DAEA2F72040B12B492AC5E73836B244AEEC733470B92C42B0CD7C6FE
27FF008268FED2FF00B36FC42F0DFC5CF85EB0FC4ED0BC35A9D96AD04DA3FC
9A86CB4992752D64CC59CB6DE040F366BFA93038CA15A09D092691FC75C45C
2D996555BD86654254E5E6B47E8F66BCD368D2FDA5FE1DEA7A47ED49E34F02
68B6ED797BA96B664B48225F99CEAA56E618947AE275515FB53F0D7E1A699F
B39FC19D2BE17698C926B57E86EB56B94FF96B712802539E3E51811271F717
9E4D7652FECF7E1FBEFDA465FDA26F614B99ADF46B6B6B1B7C61BEDC0CCB25
C306C00C20F2A38F278CB1382AA6BB0D47C3BA5DB5D4BAFF008FB52449273B
841193D070147F1300303E51F8D7CCE0B0187CB5D7C762E6A11BBD64D24A37
DDB7A2FEBB9FAD7897E29D5CEF2EC065185BB50841D4B7DAA8A295BD23ABF5
7E48F29D3F4BD43569C5B69D034F21ECA381EE4F403DCD7A3C1E10D07C3302
EA3E34BC5DC794B64272C7D38F99BDF0001DCE2B1F54F89EB6B01D37C1D66B
A7DB8E3CD6505CFB85E403EE7713ED593E0DB38F52D42EFC61E2BBB0BA668C
8D73737372F841E5296CBBB1C054505989E001CF06BF20CD3E90587C6E634F
24E17A7EDEB4DDB9E5754E2BACBA4A4A2936EDCAADB499F9EE17832A4293C4
E39F2C57D95AC9F65D95FE7E87AB6ABF12BC27E11D7FC17E09D417EC5A978D
26B886C2D405528B6D6EF70EEE07000DAA840C9DEEA064648E6353F1E78974
3D6AF6C2431CF1C32B0512273B3395E54AFF000E3AD7E1EF8EBF69EBDF883F
B5B687F195A478343D0756B38F4F89FE5F2F4BB79C6EDC3B34CA5DDF39C172
B921457ED6FC4DB316DE2633AF4BA89243E99194FE4A2BF71C8736FACAA91B
DF95A57EFA6FF369B3DDF12FC37ABC3F4B032ADA4EB41CA4BB494AEE2BFC31
9453F34DF53B2F0EEBDA4F8D3516B2D4F44B7699233279ACAB2700818C32E4
75F5AAFACF877E18DBD85BEB12C456CAF8068EEAD5E496221C6558142CB861
CA90306B03E16ED8B57BDBC94ED8E1B56DC4F60594E7F206BF013F600FF828
51F861E22B9F839F1C6ECDCFC37F12DDCCF6D75704B7F635C5D485D893D45A
C8ED971FF2CD8F98B8CBE7C8E2BE07C0E6387A9FECB46559AF75D4A6A4AFE7
B4ACF66D34FB1F9FE5F9AD5A335FBC928F5B49AD3F2FC0FE80B47D13E1ADAE
A56BA9D86BCC1EDA45902CEEAA09539C1DC886BF363F6A8FF825FC7FB4C7C7
0F13FC6CD1FE2CD9E932788FEC78D3DF4D17021FB259C368079E976BBB7793
BBFD58C671CE327EE6F17F84DFC3D3C7776520BAD2AF007B79D48652AC3201
61C138E411C30E477C7195FC6597F8E18BE10C457CAEA64F4E94D4BDE8C252
8A6EDA357E7D1AD9AD1A3F4EADC2B4F32843111C4CA4ADA3693FF23F23359F
F82277C7B89B3E19F1DF863508F3F7AE9AF6D4E3E91DBDC0FD6B9897FE08B7
FB55C7F73C45E0F97FDDBFBFFF00D9AC057EDDF84D5DFC4FA522679BA849C7
A0704FE95F8C1FF051FF00889E2EB1FDAEFC59A5E87AEDF5841A6DB699088E
DAE6589016B28663C23019CC9CD7F7DFD0F2757C5AC56270B4E2B0BEC62DDD
BF689D9C57685BE25DCFCCB8D72C593B85E5CFCDE56FD59FA8DFB30FECFDFB
4968FF000C6F3F67EFDAF1741F1DF81D6DC47A75E5BDF5C4FA85A84E121632
DBC45913AC3287124446D1B976ECC6FDB6FF00625F883F1F7C3BF0B3C2BF0A
B51D36D6CBE1FD9DE5948DABCF2C4EF1CB1D9C7095F22DE50C76DB9DFC28C9
181E9FCF98F8B1F14D4617C65AC81EDA8DCFFF00175D1F83B52F8EBF14FC4F
61E0AF07EADAE6BFACEA6FE5C16D15E4EECC7B924BE155472CCC42A8C96200
CD7FA2DC25F451CC786F31867D85CD69C2A5252F7A54AE92717177BCD2B24D
EEF4DCF86C47154EBE1BEA525274EF7E5BE97EE9777649F7D0FBE2D3FE0907
FB4549328BDF14785A188F564B9BE9187D14D9A83FF7D0AFDF0D12ED3C07E0
3D0FFE1646B36505FD8D8DA5ADF5FCB2AC16F2DD471059195E62BC3B86600F
38AF8D7F640FD8DF46F8062D3C47F11F536F15FC4BBC84C86492479EDF4C88
8C32DB07FE239DAD31019B9540ABBB75DFDBFBC3F6FF00187F63BF8B7A469C
10DC786605D4E29186EC0D25E3BB9997D0B451CC80FA1CD7F2A78EDE34FF00
6DE63472AAF8F8625539494251A6A9DE7CB79F2AE693694527776E9A6CDFB1
95E512A74E5563071D137ADF4BD97E27FFD5FD24F875E0DF813FB3DE9C74AF
823E12B782ECA6C97539D4C975374CEF9E4CCCC09E7602880FDD5C559D6BC4
BADF8824DFAADDBCAA0E4463E58D7E8A303F1EBEF5F2B7897FE0A45FB01784
2DFCED22FB59F1A4A0FDCB1D3EE236FAFF00A69B34FD6BC1FC4DFF00059AF8
4BA3CA13E1B7C1BB9D4539FDEEA7796F60EBE9F2C315DEEFFBEC57F2971C78
73E22719622789E26CDA369EAE317392F9A69735BA734A56EE7E8B9767F93E
5F14B0741B6BABB5FF005B7C923F42E0B5B9B96DB6D13CADE88A58FE95E83A
6EA0DF0B3C0BE30F8A3E20B4789341D3679E38E5531B4BE5219362EEC72ECA
AABEE715F875E25FF82D67ED05793B2783BC17E19D16CC8C2ADCC7777B329F
50EB71027FE43AFBBBF6A2F8ABF132EBF633F86FE16F1FB25D7C40F8AA2D6E
AFADAD6D8C788415BCF223893243C72496D16324B10DD49353C19F471C2F0D
E2E19CD6C5BAB3A49B8AE4515CCD34BED49E8DDD799F49C3F9CD4E20CC6865
11A7CB1AB24A4EF76A29F349ECBECA67E4501AE78B75FC22CDAA6B1AC5C93B
514C935C5C4EFD80C967776E83924D7EE4FECB5FB2CE83FB376850FC46F88F
0C7A87C41BF88FD9EDF21D34E471CC719E41948389651C01F227192F4FF64F
FD96348FD9E74283E297C4EB74BBF1EEA119FB1D99C30D391C728BD479C41C
4B20FBA0EC5EA4BFD5F2787B57D70DC78A3C61771E93611A99259AE088D638
979E03101100EEC47AF3CD7EEDC35C37EC92C4E257BDD176F37E7F97AEDFA1
78E1E363C7CA59264B2FDCAD2525F6FF00BB1B7D8FFD2BFC3BF15A96A5A86B
BA835E5E319679480001C01D9547A7A0FEB5D35B782A4B5D3E5D77C5B7B0E8
3A55B2F992CD72EB1EC41D4B1721507BB118F4AF92FE2B7EDEFF00073E142C
FA27C19B05F19EBC80A1BF9095B08DBA67CCC079BE9105423A495F947F173E
3FFC58F8DFA8FDBBE216BB2DE408DBA1B28FF756507A79702E172071B9B2E4
75635DD9A71761E85E34FDF9796DF7FF0091F2BC09F476CE735E5AF8D5F57A
4FAC97BEFD21A35EB2B795CFD5CF8A1FB7CFC16F856B368FF0774E3E34D710
1437D2131D8A374CF9A46F971E91AAA30E8F5E5D773787BFE0A55F03EFFC2F
ADA59E8DF197C1425BBD3A48C18E19E3723E5018B30825C2C728DCC6390249
C83B0FE5BF86BC0FE34F19CAF0F83F40D435D923E196C2D25BA6527D444AC4
57D75F043F66CFDB1FC23E31D17E23F80BC1777A65EE9D32C8A750961B20D1
B7124734571247218DD49571B7383C738AE7E0CF11F3ACB736A19B605B52A6
EEB9569E7EA9AD1A7A34DA7A33F66E32F03384B0D9255C07B7853AFBAA952A
24DC96C9DDA4A2FC969A3D5A3F2C75BD1756F0DEB37DE1ED7AD24B0D4B4C9E
4B6B9B7994AC90CD0B1474753D19581045662AB3305519278007526BFA58FD
A63FE09F3E19FDA47C6FA27C58BDD5D7C07A8CD6A83C49145125D09CC48BB1
924DD1A892300C6D2B0219021DA3690DD97C2EF815FB307ECE42297E1BF85D
75DF10C18FF89BEA245C5C871C6E495D76C67FEB84680FAD7FA87C65FB4078
2B20C928E61994DAC44E3774B54D496EAED36D5F6708CDD9ABA4F43FCF6C07
03E3B135E54A846E93DFA7DFB7E27E60FEC7BF04FF00E0A0F6D35AEA5F0B6F
EFBC07E1A918396D75CC7A7C8A792CBA7CCB2349B874758403FDF1D6BFA00F
088BE6D3AC34DF1A6A7A76BDE28D3E2DD7373656A6DA20FD0B2C4F2CED19E7
073273C9000E07CFFAE78F3C4DAF6E8EE6E8C3037FCB287E44C7A1C72C3D98
9AEDFE1BA9D3FC31E21D707CAC13CB427FBC884FF3615FE57716FD363FE225
F14D0CBB079653A749B949CF9529B518B69B7ACA4EE959B924AF7E44CFD35F
004B2CC14F115AAB7256492DB576FEB4F99EB96FA6F82F4AF13DC5D5ADAE9F
67E22D6D3CD9A4448A3BDBB481523DEEC0092511A845C9CED1B470315C3FC4
DD3F42D7F4F6D33C4F7DAF68D68C47EFB4ABCB8B03D78FDFD9BABF3E85B9F4
AF01F8D5F09E1FDA67E0DDDF8320BAFECEF1BF873FD3FC3FA92BB452C17710
C27EF53E654907EEA42338055F059571F903F0A7FE0A41FB4AFC10D567F05F
C518FF00E136B3D2A692D2EECF58CC7A940F0B14923FB5805F7AB021BCE597
D38AFEA2E0DF05F39E25CAEA63B84B1B086368BF7A9CE3DFE1945F324D3DB5
942CD3D5E97F899E674685451C541B83ECEDFA3FC99FA27E26FD867F637F18
EA336B1AE6ABE229AFEE3992E26D46E6E2663FED3CF1CAC7F126B82BAFF826
57EC83A88274AF1B788EC5FB07B8B629F94964A7FF001EAF5FF855FB5BFEC9
FF00B42186C2CB563E02F13DC614586A7B2DD1E43C6239326DE4C9FBAAAE92
37F7457BAEBFF0F3C45A1069FC9FB65A8E7CD832D81EACBF7871D4F23DEBF9
ABC4AFA42FD21380ABBA19AC2F4E3D62AA3565D6CE6ECBCD271ED267DC651C
39C37982FDD4DC64FA371FF2FD6FE47E7C6A7FF049CF845779FF00847FE304
D684FDDFB55B5B5C1FC9668735C0EA9FF047CF17952DE14F89FA5EA63F84DC
594B6C0FD7CA96E31FAD7E85D0012702BE0B25FDAC9E21E1DFFB44635176F7
17E2E9C9FE27B35FC1AC0CBE0A8D7CAFFAA3F3BBE15FFC127BE2AE8FF15FC3
B75F14B50D1351F0659DD2DC6A02C2E269249A2872EB07972C111C4AC02390
7852483902BF5E3E22689E2CD6357DD6DA64874FB35F2EDC47B5863BB05527
193EDD00E2BE2FFDBEBF68BBEFD953F66A4F0D786F5196D3E217C42F32D2C6
48E4649AC6D828FB55CC6CA41468919638D95832CB2075CEC35F85BE17FF00
828A7EDA7E10B64B4D2FE2A6A3711A0007F68456BA9391EF25E43339FA96CD
7EC9E36F14673E2C64F848F13D4961DA8A97253B5937ADA578EAF6BDB9758A
EC7C764B529E4D8A9CB0A94ED75777FBD6BFE67F49375A5EA563FF001FB693
5BE3FE7A46C9FCC0A82DAEAE6CA74B9B495A19633957425581F622BF167C29
FF00059AFDA9346FB3C1E24D1FC37E228108F35E5B39EDAE245EF8782E1625
27D7CA23DABE96F0B7FC1677E196B33F93F14BE0E4D6516066E34BBD82F646
6EF88A78AD768FFB6A6BF8B331FA2056A72F6997663AAD57341AB3FF001464
FF00F493F40A3E24464B96B51D3C9FE8D7EA7E99F8A87C39F8CDE1593E1F7C
79F0D5A789F459F3879A3CC913952BE6232ED92290024096165700F1D6BF18
FF006A3FF824A78B3C2B6B77F10BF65DBE7F1BF86F0F2BE8D2B29D56DD40C9
103280B74073F261261F2A8595B26BEFBF087FC1417F603F8831C0B73E22D4
3C117B74DB441A9D9DC21527FBF2C22EAD907B9940F7AFB03E1C6B5E02F16C
926A3F03FE25E8FE25098F362B3BC82EC0E3389441239538F550457EA7C1D3
E3CC8ED86CDE8C71B417DB84D7B48AFF00B7F939FD1FBDFDE7B1E0664B28C5
FEF30D274A7D9AF75FDD7B7E5E47F16379677FA4DFCFA7EA1049677B672345
2C52AB472C52C676B23AB619595810411906BE92F867FB677ED49F08BCA8BC
0DF12757B7B4871B2D2EA6FB7DA281D96DEEC4B1283FECA8AFE9CFF69AFD84
FE11FED61A5CD7DE33D297C2FE3A8A32B078874C0AD233050A82E10EDFB4C4
303E59007551B6391324D7F3FF00E21FF8265FED2BE18F8EFE1FF8377FA4FD
AF4CF11DE7936DE23B4469B4C16CA0C92CD2B60185E389598C326D662A447B
C1563FD0984C546B5355629A4FA34E2FE69D9A3E32A5371938BFC353F6D7FE
09EFFB4A7C71FDA5FE1BEBBF10FE3AE8DA445A0E837090699A85B5B3C33DE5
D440B4EFB1E478FF00779450F1AA82EC540CA9AF7DD63539F59D4AE352B8E1
E762719CED5E8ABF80C0AB917867C29F097C07E1FF00823F0FA0FB2E83E17B
68EDC0CFCCECBC96908C0677626490FF0013B13D4560D74D897276B1E39FB6
E7823FE167FEC57E216861371A8F822E21D5A000E0AADB36D9D8FA85B59A53
8FF67D6BF25FF62AFDB4FC41FB3578887867C4C64D5BE1CEB12FFA7597DF6B
477E0DD5B29FE203FD647D2403B30523FA03F0BE8DA778CF40F14FC3CD6977
E9FE23D367B49D7D629D1A1900FAAC95FC8E6AFA55FE85AB5EE87AAC26DEF7
4E9E4B79E36EA92C2C51D4FB860457FA01F452A181E21E1ACC786334829D38
CD4927BA5356BC5F471942E9AD9BF33E533D72A55A15A1A3FF0023FAA4F8D3
F1EF4DF849F0AB49F8C5F09BC1D6DE39F0EEAAA241A9DBDCEC8AD525C79724
9FBB92428CC769E576B0DAC54900FE58F8EFFE0A1FFB4878C3CC8349D4AD3C
2B6AF91B34CB65F336FBCB3995C1F742BF85789FEC53FB644FF00F559BE1E7
C4746D6BE16F8919A2BFB4913CF164D30D8F7114673B9181C4D101F3AF2A0B
0C37B1FED6FF00B2E5BFC28B8B4F8A1F0BE51AC7C33F13049ECAE607F3D2D0
DC0DF1C66404EE85C1CC3264E47CAC77005FF8A7E923E0DE75C1D8FE555252
C2CEFC935A5D7676FB4BED2F9AD1E9FD7DF469CEB85F309FD4332C243EB57F
7652F794BCAD26E2A4BA592BAFEF2D7E49F1478DFC65E37BCFED1F196BB7DA
E5CE49125F5CC970C33E86466C0F615D87C17F839E30F8E7E3CB2F02783A0D
D34FFBCB9B8607C9B4B65203CD291D1573803AB310A3922A8FC27F84DE36F8
D3E34B3F03780EC8DDDF5CFCD248D9582DA004079E7700EC8D32327049242A
8666553F677ED2FF00B457803F603F86971FB377ECEF789A97C55D62253AFE
BC02992C4BAFDE38242CDB58FD9E1C910A9F31B2ED993F9CF21C8AA636A73D
4F816EFBF92FEB43FA53C5BF15F09C2F83FAAE11278892F720AD68AFE6925B
2ECBED3F2BB5C1FEDDDFB4BF837F677F86EDFB107ECD973B675468FC59ABC4
C3CD67940135B1917ACF374B82388E3C403F8953F0D219A6B69A3B8B791A29
6260E8E84AB2B29C8208E4107A1A999AFF0056BE67632DE5E5DC85989DD24B
2C8E7249EACCCC4E4F726BE83F047EC83FB50FC45F2DFC23F0BF5FBA825C6C
9E5B192D6D9B3E93DC08E2FF00C7ABF5FA54A308A8415923FCE2C763AB62AB
4F11889394E4DB6DEEDBDDB3F7DFF607FDAF2C7F6BAF8727E137C4ABB48BE2
9F84EDC3C772E403AADA26145C8EFE6AF0B70BDC95957EF32C7F4ADED9DCE9
F772D95E46629A162AEA7A822BF19BE03FFC12EFF6E7F0A78D743F88FA45EE
91F0EF5AD0AE12EADE7BBD404F346CBD54A5925C23ABA928E8CDB5D0B2B654
915FBC9E3EF14FC22D2E0B0B9F8B3E35D17C3FAFC16C9F6D8A1BD890CB2051
BFCA8A52662A1B3B7E52D8C035FCC9E3FF00825FDBD18E6796A8C7131B295D
A8A9C7CDBD39A3D1F58E9D227DD702E7B5A9CDE1392538BD528A7269FA2D6C
FF003F99E555AFA55F6BB6D2887459EE237639D9033824FF00BABD6BC83C41
FB6AFEC7DE0D0A3445D4FC633F2336D6AEA808FEF7DACDBAE3DD55ABEB4F84
9F152EBC59F0B61F895AC784D7C2165A9B17D36C7CE124F3DB1FF553480471
88CCBCB0501B0986DC7381F8D707FD183309D752AF98C29C96BFBAE69B5FF6
F7B897DEFE67E8BC4B89C760307F5AC560671A6DD97B4B42EFCA2FDE7B5F6F
5B1ADE1DB8F8B93106748BCA38C1BD5098FC130FF9D7A15E78AB47D0E055D7
AFE08EE801BD22CB1C9F441B9B1EE45799FC499B57BBD36D7C45A35FCC74AB
850B2468C54213C02DB71904F041E878EF5E0F5EFF0014F8B58DE08C554C9A
8C6AD7A892B4F11539A2D3D9C63149D9F9CEEACD3D569F1980E1DA59AD38E2
64E308BE908D9FA36FAFCBCCFADFC41E12D0BC4B78B2DCDC3A5DF9436F96E3
3E583C1DA41E327A8AF3797E1C25CCD710687AC5BDE4B6ADB2588901E36C67
6BEC2D8383D0815F017FC147B54F1FF863E00FC3DFDA3FE15EA973A378ABE1
D6ACB6F25EDB3ED31D8EA0BE44CB2A1CA4B1C9710DB064705581E462BC77E0
C7ED7BF02FF6E6B2D33C03F1DF67C36F8C568AB0E91E22B090DB25C4DFC020
98B028CCC4E6DA562AC49F29C3B00BFD9394E71F5DC051C7E195D548C6695E
DA4927BFCCF82C2E070F1C63C3636A3845369C9479AD676BB8DD5D77B3BDB5
49ECFF004F2F7C0FE28B1C97B1695477888933F82E4FE953685E28D57C34CD
6177119EC9F224B6981030DD76E4719EE3A1EE3BD7E597C49F1E7EDBFF00B2
0EBC9A3EBBE2FBCD63429A526CF50BB55D4AD2F147213CDB9592589F03E68B
7AB0C12A4AE18F4BE19FF82A378FE28DA1F1FF0081F49D7A3E36FD92596C4F
BEEF37ED4A4FD02D70AE2DC3464E9D78B8496F75FE573F619FD1E73AAD4238
CCA6AD3C4D296B170959BFFC0AC93EEAFA6CF53F44FC0DF077C37E0CF195E7
8DFE0B18ED741F11E23D7FC34F8168C5B205CDB21F96195324347FEAA44254
6D201AFC92F13FEC1F37C09FF828B7C26D5FC1764EFF000E7C55E201A969D8
52C9A7DD69E8F7D2D8B3760A222F016C168C15F99A276AFB93C1BFF0510FD9
B353BD825D6F44D5BC2578572F3AC2B35B21EEB9B790BB0FAC38AFB43E1C7C
72F827F1B2E231F0FF00C4565AF5EE9E1AED2028D1DD4000F25A610CE892A0
C4BB0B85030F8CE1B9F4B2FC760E5EEE1E6B5E97FC91F13C63C29C4946D5F3
8C2CD72A49CDC5BBA5A2E69ABA6D6C9B77B595DA4ADF827FB73EA69AB7ED53
E3B9E27DE90CD676E39C8060B2823603FE04A7F1AF11F85FF167C7DF073C4F
178B3E1EEAD2E997A9859154EE86E23EF1CF11F96443E84707E65218023F49
BE36FF00C13A7E3178CFE2278A3C7DE1AF10E917D1EBFA95E5FAC172F3DBCD
1ADCCAD22C6088A443B0305C96038AF9575EFD82FF006A5D08B37FC21FFDA3
12FF001D9DE5ACB9FA279A24FF00C76BF31CC32CC6C7113AD1A72576DDD7AF
91FDD3C21C73C2F5B26C365957194A4A34E10719B4AF68A4D353B5F63F477E
1BFED4BE00FDADFE19F8ABE0DEB7770F80BE2078C345BCD1F7B0DF04F25DDB
C96EB35AB1652EC864DC20770FD959C02C3F9BAFDA3FF656F8C1FB2DF8B0F8
6FE26E9452D2E19BEC1AA5BE64B0BE45EF0CB818603EF46E15D7A95C104FD9
FAA7ECE9F1FF00417DD7FF000F35F8B61CF989A75C48808FF6E3465FD6BED4
F85FFB48EB3AA78524F81FFB667826FBC5DE08BF0B0FDBAFAC6792EED40E03
4D95124A13EF2CA844E8724173B42FD4E47C48E0BD8E2E1CBE76B2BBD5DFCD
BD5BFBFB9FCFDE25F81386973661C315A3523BBA4A4A4D7F81DDDD7F75EBD9
BD117BFE0921E315F16FECA7E3FF0086D717267BBF09EB0D791447FE58DA5E
C292C4ABECD341707EA4D7DA91C724B22C5129777215540C924F400579E7EC
75FB1ED87ECDDF14BC5BE28F84FE2287C49F08BE22E931BC224903DE5A5E5A
4FFB988B28DB344639A7C49F2BA95D8EA4FCC7D23E31FC58F027EC7DF0F26F
891E3E8DB58F115D7990E8BA35B1DD71797007DD4C06D88B90669882B1A900
0676447FC3FC73F07F19C4B9E65F5307A41C251A93E918C5A6BD5BE77CABAD
BA24DAFC5B85F886197E1ABD3AEBDE4F48F5BECD795ADAF629FED49FB4CF82
FF00646F83DA5F8AFC716F69ABF8F8453C3E1AD3E401A779DD76336E1F3470
C48CA27752B918404B32E7F928F88BF10FC63F163C6FAC7C45F1FEA526ADAF
EBB39B8BAB893AB31002AA81C2A2280888A02A200AA000057B37C5ED73F692
FDA93E24EA3F137C61E1ED675CD5B5221228AD34FB97B7B4B6524C56D6D1AA
B6C8A3C9C0C92492EE59D998AF87BF62EFDACFC50CA349F849E2550FD1AEB4
D9ECD0FB87B958D71EF9AFE9ECAB00B0984A3838C9CA34E2A29C9DDD92B6AF
BBDDF9B67C0E26B3AB52555AB3936F4F30FD8FBF683BFF00D99BE3F786BE27
C4F21D2524FB16B10C79267D2EE485B85DA31B9930B2C6B9C19234CF15FD9C
786B4EF0BC5A2D95D786BC9974C99E5D46D65858344DF6E679DA48D87055FC
E6231C60F1C62BF955F087FC1267F6D0F13B27F69F8774EF0C46FD1F53D4ED
C800F72B666E5C7D0AE7DABFA2DFD937E147C4EF83DFB3F68FF077E2AF882C
75CD63C3F14B676F77A7B4AE23B16FF8F78D8CCA8C4C2098D0EC51E5AA0C64
1AED64437DCFE6DBC49ACCBE22F116A9E2098624D4EEA7BA607AEE9A42E7F9
D3743F0F6BFE27D423D27C35A65CEAD7D2FDC82D2179E56FA246198FE55FBA
DE17FD8E3F645F0032C97F617BE31BD84FDEBF9DDD4377FDDC4208587B306A
FA1B4AF13E81E0FB0FEC8F877E19D3FC3D643F82DE04894E3A1D912A2E7EB9
AFCCF0DC0F5A6F9ABCD2F4D5FE87F72E77F4A7CAF0F0F6595E16552DA2726A
11FF00DB9BFB91F8F5F0D3FE09E1FB40F8E8C577E22B4B7F06E9CF86326A32
6EB82BFECDBC5B9C37B4863FAD7EAF7ECD1FB3A7863E01249A4E8FE35D5BC4
B74D1B19ADDE729A644CC46E74B442D1A393DD9D9BF5ABD7BAEF8835F956DE
EAEA5B83290AB12FCAAC49E06C5C0CE7DABA097C67A6780FC73E0CF831A591
71E28F153CB7B7AC8370B5D3ED23795E493D1647410479C64B330C1183F558
1C830982B545ACB6BB7DFF0003F01E29F17388B89D4F0726A34ACE4E318D95
A29C9B6DDE5A24FAEBD16B63D4FC6DA96A0BA2DF7FC23778A97BA76C7B844D
AD22C6C33C8392B91F303E80E2BE53B8B9B8BB99AE2EA569A57E59DD8B31FA
93C9AFCF1F09FEDA89E12FF82A778FF41D72F40F0478C2F2DFC1F32B1CC56F
79A628B6B59CF078FB579D1B64850B3B3B7082BF4CBC67E1F6F0DEBF3D8A83
E43FEF213EB1B741F8723F0AFE43FA5C70BE2FFD9F3785493A3F04A376E319
6AE324B65CCAE9BEE9756793E1CE3E9FBF8669296E9F56BAABF91CFD959DC6
A1770D8DA219269D82228EE4D733FB7759F8CFC19FB2CCFA5F81C62C25BBB7
8B5D9A32565FB1CA4EE23A1D8F3F968FCE761DA4152D8FA13E1F59699E1BB6
B6F157886410C9A9DC4563608465DE49DB60DABD493C9E3A22B31F94123A4F
116A3A3789BC45AC7C34F13C22EB45D66C8D84D131C2B9990EF5C8E46F57DB
91C82062BABC12E0BC3F0FE514B39CDFDCAB8E92A549BFB31926E3FF0081B5
AF972ED767B8F8A9D3CEA8D4A5055218692A928F7E56AF6F38F4F3EF63F957
AFE972D75D3E36F843F0F3C75BB7B6A9A4DAC933753E6CB046CC0FB860E0FB
D7F3F5F1BFE146B1F053E27EBBF0EB58DD27F66CC4DB4E4605C5A49F34130E
DF3211B80C856DCB9CA9AFD9EFD91F5D1E2BFD8DF41491F7CFE1ABCB9B373F
EEDC3320FC229D47E15FD11C172952C554A13D1DBF14FF00E09FBB7D2768D1
C764382CD70EF9A2A6ACD7F2D48DEFFF0092A3D964D647863E157C49F1531D
BFD8FA15E5D6EF4F26DA690FFE835FC58D7F62BF1BADF5D97F640F8C107863
4FB9D5754D4F46BFB086DACE179EE253730792424718666204A49C0E9935FC
81EB7E1CF10786AECD8788F4BBAD2AE467315DC2F049C7FB32006BF4D3F864
FD94FF008271FF00C1402C7C2D6D67FB33FED117E24F085D6DB7D0F58BA7FF
009063B1C25A5C48DD2D49FF0055213FB83F2B1F24830FEC8F8BBC237BE15B
EF2DF32DA4C49866C70C3D0FA30EFF0098AFE306BF737FE09D7FF0505B18EC
74FF00D98FF690D4049A24A12D740D6EE5F9B43F763B3B991BA4438104A4FE
EF8463E5ED31FE2FE31F83F85E28C1F346D0C4C17B93EFFDD9778BFBE2F55D
53FA7E19E25A980A967AD37BAFD579FE67EBBFC3B884DE33D310F6776FFBE5
19BFA57F3C9FB766AA359FDAE3E265D86DDE5EA4B6F9FF00AF5823831F86CC
57F4B9E14F055EF873C7D1A5C0F36DE3865921980E1860273E8C37723FA57E
24F82BF624F1EFED59F1FBE207C4EF14492785FE1D5D789356B86D46450B35
E45F6C94ECB357E080BF29998796BDB79056BFA33F65B53A3C2181CEF31E23
92A0A93717CDBEBECEC92FB4DF236AD7BAD56870F8AF8858DC4505867CC9C5
6DEAFF00CCF867E017ECE9F13BF68FF182784FE1DE9FE624455AF6FE6CA59D
944C7EFCD20079383B514176C1DA0E0E3FA21F82FF0004BE157EC7FE157F0E
780A25D67C637D185D4F599D079D230E4A8C67CB8C1FB90A9C0C02E59B93DA
68B1F817E107842DFE18FC12D323D1745B3043CD103E6CD2118690C87E7776
C7CD2312C7B60014FF0003F879BC4BE208ADE505ADA1FDECE7D541E9FF0002
3C7E67B57E67F4B4FDA059AF1AE60B83F821B8519C943993DDDF76D68EDBDD
7B91B5D7334A4BD5E12F0EA961293C7E67D15EDFE7FE5BBEBD8F4682F2EBC2
7E0BB9F11EA12B3EB7AF11B198FCE030F94FB6D5CB7A7415C9FC3CB1D37C47
6FE20F046B7189F4ED7EC25B79E26E5648DD4C6EA47BA48D51FC50D5AE6FFC
4B258C88D141A7811C68463390097C7FB5C63D80AC6F025FFF006778B74D9C
9C2BCA226F4C4A3673F9E6BF822B71C4705C6B97E12849FB0C1CD52BBDE4E4
DC6B5495FED4E52937DD247DFC72A7572BAD526BDFA8B9BD2DAC62BC9248FF
D6F8A3E21FFC1277F6C6F0379B3693A15878C6D62C932E8F7D1B36DF5F26E8
5BCA4FB2A31FE75F0C78EFE12FC51F85F75F63F88FE11D5BC31293B546A365
35A873FEC348AA187A15241AFD1BF057ED19F1D7E1E1857C23E39D56CE0B75
DB1DBBDC35C5AA8F416F3EF87FF1CAFBA7E07FEDB9FB4E7C4AD5A1F004DE09
D3FE272CE9B6E53ECFF6491909C6E9E65CDAC69EA5E10B9E3DABE3F05C6787
AB250945A6FE7F96BF81FD23C4DF465CE3014A788A35E9CE9C55DB6F91DBCF
9BDD5F391F885FB267C226F8EBFB46780FE1949119ACB54D4A392F8638FB05
AE6E2EB27B6618DC0CF722BFB0EB9F83BA2EB3F17E1F8B9E2455BEBBD0EC92
C343B63CC36609679AE7691813C8CFB011F751171C9F979FF037C04F82BE06
F12D8FC54B4F87DA0F82FC6D796ED69349A52A222B5CED3244AC91C092B12A
3E731063CF6273F9D1FB69FF00C14DFE2C7ECD3F13752F84BA2FC30B4B7BCB
78D2E2CF55D52EE5B8B6BEB5973E5CF15BC0B01DB90CAC3CE3875653D327E9
DBA555F2DEEE3676EDDAEBF1573F9FF0D8CC461253F652E5724E2DAECF4693
5D1ECECF54DAD99FA55E39D7BC4FA15C4D2780BC1577E36F131C20966923B0
B0B607A133DCB2828B9CE2DD657EA1883CD7C2DF173F675F8FDF16A3975CFD
A6FE30685E08F0D46C1E2B1B4673A7C38E7E713BDAA165ECEF24847638E2BF
12BE247FC149FF006C8F8946586EBC7F3F87ACE4CE2DF438D34E099F49A21F
68FCE535F215C5EF8F7E27F892086EAE352F1678835171142AEF35FDE4F237
45404BC8EC7D064D7362F2C86234AD26E3DAF65F86AFEF3E978778E711945A
79752846AFFCFC71E79AF4E6BC63F28A76DDB3F766FECBFE0965F079CFFC26
5F136F3E205F46B86B6D3A492E6DDD87529269D12A0CFF00B5738ACBD0BF6E
CFD92F4FD6ACBC23FB327ECCF7BE37D7DDF6D92DE5BC26EDE41FC51BE350B8
2075C9C1C75C5786FC09FF0082527896E7464F897FB5A788A1F861E10802C9
25999A21A8C88DD16491F30DB16C8C03E6499F94C6A715F577FC3547C0AFD9
DF4A7F86FF00B11FC3EB64B8B9DB049ADDDC1234D76E480A42BFFA55C124FC
BE73A056E044578AF3F10B2EC02BCA314FD2EFFCCFB0CA2AF19F15D474E8D7
AB523F69B938D35EBB4569D12BBE899F71782BC71FB504FA1A78E7F685B9F0
AFC0FF000847B4AE9F6FFE9FAB9DDF7637BA9A5FB1C4CDFC28904CEC7E5DAA
DC57D7D6DE2DD34F8722F115D2DC5B5ACAA0C5F6A88C17130232A7C960AE85
C73B5D5187F12AE0D7C1DF043E05F8AEDAEED3F682FDACB549FC47E3561E66
93A5DD3068B4CDD821840B88926E01D88A1223CE0C9CAFB6EBFE20BFF115E9
BBBD6C2AE44718FBA8BE83DFD4F7FCABD4C157A9563ED271E54F65D7E7DBD0
F83E28CAF0381ABF54C357F6D38FC535F05FB43AC92FE7764FA46DABEF74FF
0088F7175AF93A9AAA699703CA31119080F4627BFF00B5DB1DABCF3C77E173
E19D60A4033657599203D703BA67D573F960D57B0D3350D52616FA7DBBDC49
E8A338FA9E807B9AF6E9FC3971AAF84A2F0C6BD3C235455692D06F05F11600
CFA81B82B1190011DF15F92F8E3E18C789727946847FDA295E54DF7D3DE87A
492FBD27B264F0A67AF03894E4FDC968FF0047F2FCAE7CC75EDDB3FB23E14D
B42461F539831FA162E0FF00DF283F3AF19FB25C0BBFB0B46567DFE5943C10
F9C60FBE6BDABE24BC7649A4787E13F259400FB11C22FE5B4FE75FCD7F444E
1F94F35C663E6BF85050D7BCDDFEF4A0D7CCFB7F11F18961E9514FE277F925
FF0004F3FD2354B9D1B518352B53F3C2D9C7665EEA7D88AFCBFF00F82A57EC
ED6D6D7FA77ED3FE07B6CE99E2031DA6B891A9C4578176C172C064289557CA
90F0048A9D5A435FA5D5D3DBF87FC39F13FC15E20F837E368BED1A37896D65
808E0B2330FBD19604074204919C7CAEA0F5AFF527C21F116B70BE7B473385
DC3E1A897DA83F897AAD24BFBC91F89E3F08ABD2707BF4F53F91CAFAFF00E0
37EDC7FB40FC006B7D3F40D70EB7E1E8703FB23552D736AA83F86162449063
B08DC2E792AD5D069BFF0004F2FDA935BF1FEB5E08D2BC292ADAE8D7B2DA9D
5EF08B3D3E68D1B0B3C2F290D2C6EB861E52B900E08C8207DD1F0F7FE093FE
06F0CA45A8FC7EF8826E25003369FA3288578EDE7CCAF2C8A7BED850FA1AFF
0049FC54F1A7C3CC265B25C478BA3529349F2BB4F7574FB41DB54E4E36EE7C
8E5D95636A54B61E0EFF00D7DE7BC7C20FDBA7F666FDA13C8D27C627FE15BF
8BA7C2EDBC91459CD21FF9E777858DB27B4AB1B13C2E6BED7F0CFC2EB9D37C
451DEEA324775636C3CD8993FE5A3FF0E57B63EF7523A7279AF09F027C33FD
98FE0A7967E15FC3CB3FB7C18DBA85DA79F759FEF2DC5C79B30C9EA0141E80
715F446A1F193C2DE15D6FC01E0FF1ADEC563E21F88B2DCC5A65B8F95646B5
80DC38F98F184D8BEEEEAA392057F879C6F97F849C59C55F5AE0EC3493A2FD
A4B5F75B4D593B2E5926F5D65393B3BCADA3FD9686233BC060B93172B465A2
BEFF002EABF0F43F14FF00694FD82BF6D4FDB17E3A6B3F13FC4D1E8BE10D18
1165A3D9EA7A88924B5D32066F294AD8C774BE639669641BC8F31D806DA063
888BFE08F9A0F84E24B9F8C7F1F343F0CA8C6E45B640A7D84B75756F8FFBE0
FD2BF6FF0044FDA43E1EEADF10759F841AADEAF867C6DA4DC9B75B2D47012E
95807865B690305944B1B2BAA656400F29C1AB5E36D1FC2F74E57E207C3FD2
B5B8643833CD6F0DC2367FEBAC4C41F6241AFD15623DA45BA0D36B4F9F99C7
2CA1E0EB42399D39C6324A4AC95DC5EA9C5BD1A6B66AE8FC555FD853FE09BB
E0A8D65F1C7C73D4F5C917191A5CF6F246DF54B5B4BA7C7D1EB762F861FF00
0487F0AC418E9DAE78C197B34DA9C6CD8FA359AFF2AFD13D6FF676FD8FBC5A
4FF69780574B95BFE5A593CD6AAA7D96DE555FCD08F6AF1CD7BFE09DDFB3A6
BE1E5F07F8D353D0A56E8B72D14F0AFD164485CFFDFC35E262E79B2FE1C60F
EFBFE3647EA5C3D86F0FAA5BEBD571317D6EA1CBFF00922948F982CBC7DFF0
4BDD0576E8FF00016FAE8AF4FB6431CE0FE33DFCC7F315A5FF000D41FB1668
0EB27853F663D0A692220A497365A6C520239043FD9A7607F1AD8F147FC12F
3E26DA235C781BC5DA4EBF08E545C2CB65238FF64289D33F5703DEBE5BF197
EC77FB49F8183CBAB7816FAEE04C9F374F09A82951FC58B6691947FBCA31DE
BE63179A6734FE38DBD229FF0099FBA70F70178678D6961EBA9B7D2556516F
E4DC59F725BFFC15522B4823B3D3FE142410C4022469AC80AA0740AAB62001
EC2BEB7F8BDFB62DA7C04F821E1EF89FF157C3274EF12F89A48D6D3C370DE0
7B9D8CC1A46695A24C793090D27EEF0B232C4482C1ABF397F63AF805A3E923
55FDA4FE3C45FD8BE0BF01EF9E24BD8D93CFBBB7E7798D86E6585B01540CC9
31545C90CA7F3CBF6A3FDA23C47FB4BFC58D43C7FABEFB6D323FF46D26C491
8B3B1424A21C64191C92F2B64E5C903E50A07F567D14FC1CC771863DE2F366
FEA74BE2D39799F482692777BBB6D1ECDC59FCF9F487ABC3594622395F0FD0
4AAC759CF9E72D7F957349AD376EDBD974923F713C0FFB787EC6BF16275875
3D5AF3C0BAADD4846DD5A230C6CE792C6788CF6EAB9EF23A13E95F52D8F83E
C7C4BA545E20F00EBB63E23D2EE06E8AE2D664923907FB1246CF1B7D770AFE
42ABEEBFD97FF65DFDB23C5DA9C1E2AF83A9A97816CAE02E75A9EEA6D2A092
3CE4636FEF6E233E891BA1E86BFA97C4BFA26F0EE070F2C6E1F32FAAC574AC
D4A37EC9FBB2FF00D2DF91FCE783CFAB49F2B8737A1FD0A784EC755F0F78B6
C9752B692DC4A5A22587CADBD48186E879C74AFE6B7F6D4F0449E12FDADBE2
4F86AC11EE1EEF577BF8D1177313AA225F6D551D71E7E0015FD2AFC3397C63
F0BFC1E9A3FC6DF8851F8F7C42A4319A1B08ACDD0633E56C8786C7691C293D
4F35ECFA768FE197BE93C57A769D6A97FA9A46D25E2428B3CCA102A6F900DC
D85000C938000E82BF96FC17F1D301C1F9F63A9612A4319250E571A73E557E
64E327CD1E64B492B3827A9F419A64B56B5084E71714DE8DA3F92AF047EC77
FB4F7C4411C9E18F86FABB432E364D790FF67C2C0F7596ECC2847B826BF6D3
F62EFD9D7F684F85DF0FB5DF853FB452E8DA87C33D52DE531E9B35E35C5D59
4B29CC8A856331085F25980981493F789862E4FDE7F14F456D5FC377025F10
EBDA05AA2379B2787A3125E60F74096F713923B794B9F6AFC67F89BFB1CFEC
C7F1A67617FF00B567881AF2DDC8587C67A9C7792C12742BE4DF7D8A5423A6
D383DABEAFC53FA50661C4B829E558BC35185196B669CA49AD9A939593F351
5A369E8DA3A721E12C5C65F5AC142A49C5FC514DD9F4D52D1F6D4FB56C7C69
FB0EFECA7F0FF5CF00691F1574CF0CDEDCEF1A85ED9DFDB5FEBE2420ED2638
A3B870D1AB111AF9185C9217712C7F342FFE30FF00C120FE1AEA526A7A5F82
75EF8AFAC5D3BCD36A1789737226998EE679D753B8B652CEC492C20624F5AC
3D7FFE08BFF132EAD4EA1F0A7E27F877C57684651EE126B2DE3B6D307DB132
7B7CD8F7AF953C75FF0004CBFDB43C0BE64D2F8024D76D63CE26D22EADEF77
63FBB0A389FF0038857F3750A50841429AB25B58F4B34C7E2715889E231937
2A92779396EDF9DCFB234CFF0082BA7C3DF87F7D0D9FC1BFD9EF47F0B6931C
E824786786DE692D430F302C56B6912A485720132380704E7A57DF3FB4DFC7
8F8BFAD7C1EF0CFED1BFB3178C437C3CD5AD945F4715A5B49736D248DB448E
F2C72326D7FDCCA80A98E403960DF27F2EDE2EF87FE3BF87F7DFD99E3BF0E6
A5E1CBBC91E4EA56735A4991D7E59954D7E84FFC138BF6C0B2F821E30BAF83
5F15A44BAF857E3F636D7B1DD61A0B1BA9D7CA170CADF2F932AE23B8078DBB
5FF8086C31F8575A94A9C64E2DECD687ABC239F53CB731A58CAD42356117EF
42494935D774D27D53E8FCB424F15FC61F8B1E398E583C63E31D5F58B79892
D05D5F4D2C1CFA44CDB00F60A0579C57D4BFB59FECED7DFB3D7C48934DB30D
71E15D6F7DD68D7272730E46F81DBA19212C0139F994A3F1BB023FD97BF663
F147ED19E2F16B08934FF0B69AEA753D4B6F08BD7C987230D338E8390A3E66
E301BF15A981C44B11F57926E77B7F5E5D4FF4FF0007C539350C9966F46718
61B979AE924BD2CBED5F4B6F7D373D2BF627FD96DFE35F8A8F8DFC69018FC0
7E1C903DC193E54BEB84F985B027F800C34C7B2E1782D91FAFDE2EF110D76F
963B451169F683CBB78C0DA368E3763B671C0EC30292F1BC35E11F0D587C33
F8796A9A7F87B478C42891747DA7279EAD96CB331C97625893D4F275FAEE47
93C30747916B27BBFEBA23FCE7F14FC48C4712662F133BC69474A71ECBBBFE
F4B77F25B247A4780F5AB7DD3785B57024B1D441550DD15D8631EDBBF438AF
37F13E8171E1AD667D2E7CB2AFCD13FF007E36FBA7FA1F7069412A4329C11C
822BD6B52B66F881E0C5BE8D376ADA5641C0E64007CC07AEE0323FDA18EF5F
8A7D21FC3159F650F17858DF13413946DBCA3F6A1E7DE3E6ACBE2678BC199E
FD5311ECEA3F727A3F27D1FE8FFE01F3B7C60F050F8B7FB247C5CF86A2DCDE
5D3E937179670AFDE7BBB64FB55AAAFF00DBC5BA7E75FC7ED7F6C3F096ED62
F124B632E0A5EC0E9B4F42570DFC81AFE39BE31F8213E1A7C5BF1B7C3A8D99
E3F0C6B7A8E988CFF7992CEE1E1563FEF2A839EF9AEDFA36E79F5DE13C3C64
EEE93941FC9DD7FE4B2465C6F85F6598CDADA567FD7CD33F76BFE0967F1A3E
23FED1FE11F1B7C0CF8E51DBF8D3C07E17D3AD8A5CEA40CB79119E42B0DB34
8726440B148F1B93E64450056C6DD9CB7ED4FF00B0FEB9F0A23B9F88BF0B5A
4F10F80DC199C2FEF2EB4E4EA7CCC7FAC80769472A38900C6F6F50FF00824D
7818F823F64BF1A7C4DBAB6F22F3C6FAB3C104BDE6B2B1416F111FEE4F25C8
FC335F7D784FC69A8F85E6318FF48B194FEF2063C1CF52BE87F43DEBCEF15F
C54CB328CE30D95E630F7670E67516AE1793516D758E8EEB7EAAE7E8BE1171
366F944678BC04F9A17B4A9CBE19E9ADBF965B5A4BD1DD687F3615FAC5FF00
04B8D105BEA5F11FC7B32E174DB1B5B446F5F35A49A403E9E4A67EA2B67F6A
1FD87748F1569D75F16FF670B55F33E696FF00C3F0A85C9EAED6683EEB8EA6
01C30FF55CED46F53FD83BC3537847F659D6F5EB988C375E23D5AE71BC156F
2A1F2ED769079F95D25FC735F5BC2D8252C652AB0929D369CA328BBC64ADA3
4FE67F41F8ADE2760334E0CAF57072B4E72842507A4A0EFCCD35E6A2ECF67D
3ADBEE7BFB2F0DFC58F01DC699E2312C71B2E267B59A4B6B9B695471341344
56489803956520E320E4641FC51FDA4B40FDB8FF0063FBE97C59E0BF8A5E20
F15FC3EBA7060D4AEAE0EA4D681F848AEE3B91322760B22811B9C7DD63B2BF
587C1DE226F0F6AE93484FD967C24C3FD9ECDF55EBF4C8AEAFC4374BE10BC9
B49D46D23D5BC25ADA386B5955648C248312C615B2A50839D846D20E3D4D7E
EF9378FAF812AD3C5665858E232E9C946AC6715250BE8A7AA764F6724B47CB
78C93F77F8468E40F1F7A74A56AAB55D2FDD7AF5FBF6EBFCF5685FF0537FDB
0347937DF78A6D35A4EC979A659A8FCEDE285BF335E976DFF0572FDA66050B
2E89E16B83EAF65780FF00E3978A2BD0BF6BFF00F827447656377F18BF6628
1B53D0DB74D7BA0459927B5EECF660FCCE83F8A13974FE0DCBF2A7E3A90549
561823820D7FA9BC0390F871C67974336CA30542709257518C62E3757B350B
2F46AE9EE9B47E7D8D9E370B51D2AB269AEFFF0004FE83FF00629FDBEBE34F
ED2BF19A3F873E2DD0742B3D362D3EEAFAE27D3E0BA8E6510EC4403CDB9954
02F2283907DB15FA83E3897C6F3F862693E17DE6950EBCDCDAFF006B4534D6
731009F2DBC89629109C7DF1BF6807E46EDF873FF047FF000F20F1B7C4AF88
132E1346D22DACB79EC2F2669D803FF6EA33F857EA86996369F11FC1BACFC2
8D6EFEE74E3AA44CF637D69298AEECEE94F991CF6F20E5658640B3467A6E53
9C8383FE697D2E388F21E1CF1070DC3182A2A8C2AC2DEEBB2552D192BFF8D4
ECBCD256D4FD138470588AD839E3FE274DA766AE9AD6FA75B5B5F23F3CFE27
7EDE5FB5EFC31F11DC783BC75E15D0FC3DAA40370536572CB22124092276BA
749109070CA48C823A822BE7DD5FF6FF00FDAA354959A1F16C7A746C31E5DB
69F66147D1A485DFFF001EAF5BD23F6B5F097887C4BAC7EC71FF00051DD2AD
ED7C45E1CBA6B1B5F16C09E4465C8061B99182836C6642922CCAA227465F3A
345DD9F21FDA27F633F1DFC1685FC63E1B97FE12EF015C012C1AADA00ED0C3
20DC86E51321571D2552636E0E54B04AFE7BCFB0798D0BCE156528793D57AD
BF3FC8FED0F09389782F36E5C2E2B2FA34B13DA514E327FDC72BD9FF0075EB
D9C8F19F10FED0FF001DFC54F2B6BBF1035CB849C61E25BF9A2808FF00AE31
B2C63F05AFD74FF825EE8B25BFC1CF13F8927C99755D75E3DCDC964B7B788E
ECF7F9A46AFC27AFE8BFF61AD37FE111FD987C08B2A6D975EB9BBB893FEDB4
D318CFE28895C5C1EE7571BCF36DD937AFDDFA9F4FF4908E1B01C30B0F86A7
182A95211B4525A24E5D3FC27A4FC43D13FB275D6B9897105F6655F40DFC63
F3E7F1AE0EBACD0BC5D1FC419BE247C3CBC9FCEF11FC3AD69C3A9237B595FC
62FACDB680309E4CAD02F726124D49E13D06DF5079F57D6645B6D1F4D5696E
669182461506E20B1C000019639E07A6457EC99A65B570759D1ACACEC9FAA9
2528BF47169AF267F9FB49F3FC267EAFE2CF0C7C10F879A9FC63F1DB6D82CA
322CADF2049713382238E307ABC8785EC17739F94647C21FB1C78FB55F1578
EFE357ED75F12A6690F87B4691DC748638486B968E22738104568A8067215B
2724E4FCB3FB657ED2F71F1FBC7DF60D02568BC17E1D67874D8B9513B7DD7B
A75F57C61011F2A606012D9F44F1E6A7FF000A2BFE0951ABDD076B7D5FE2DE
A9F658C38DAC23B89363A81D4A3D9D9C8C3FEBA67BE2BF39A3997D7B328C29
FF000E9DDFABDAFF008E87F53665C12B85782AB62714AD8BC5B8C3CE116F99
C7D5A8BE6F36974D7F05F5FD7351F12EBDA978975693CDBFD56E66BBB87FEF
4D3B991DBF16626BFAD4FD89BE32D97ED83FB3A786B5DF10DE6FF17784655D
2B5D24FEF659615189CF4FF8FA8B6485800A24F3157EE9AFE4C7C31E19D7BC
69E23D33C23E16B29352D6359B88AD2D2DA2199269E660888A3D493DF81D4F
15FBE5F16B52D13FE09D5FB2E69BFB367C3BBD47F8ABE3D80DE788754B7389
208A506395D1F865CE0DBDB6002AAB24BF24982DFA6E47E17BE32C543873D9
2A8AB3574F6493527276E91B5FBE965AB47F2DC733960DFD6612B347D5BF0E
BE3347FB4C7EDC834AF08CC1FE1DFC16D36F64B5789B305E6AB38162D71C7C
ACAB1CB2A40791B559D4E24C57B66B1A9BDFEBB77AB42EC0CB3BCA8DD0A8DD
95FC862BE37FF825A7838F847F67EF881F156E10C571E24BE5B0B76C7262B2
8F6ABA9F4335C383EE9CF4AFAC4024E0724D7F32FED30CD70781E23C1709E5
5A52C1C145776D7DA76EAEA3AB7F3DADB1FA3784B8594E855C655DE4FF00E0
FE563C6FF6EFF84E9F17FE0FD8FC6CF0FDB87F10F8310C5A92C6B97974F273
2138049F21CF9ABC80B1B4A4F38AE7FF00E09ADAC8D4FE0DFC49F0713BCE9D
791DF05F7BAB72A3F336B5F5B789BE2E7C29FD9E07827C15F14EF045A9FC54
D4BFB2E0B760AC8A1D0A969C3101605678E276E70D2AE46D0C57E6FF00D953
E1A5CFC00FDACBE24FC1B9037F636B3A3AEABA5BB9CF9D651DC858812792D1
F9CF1B138CB231C608AFABE0CA1987D5B2FC76671E5AD3825517F7B9746FB3
6ACE4BA4AE8FD2B0BC53471DC2B99F0FF35FD8355297F814D73C57F86EEDDD
3EC8F6CF8EBF163C41F027F66BB8F1DF841A18F599F50B78ADCCF1F9B192F3
00E0A64673146C3AE4751CD7C09A6FFC14E3E23DDC4D65E3FF0004681E20B1
6033146B35B96F5DDE6BDC21FF00BE057BE7FC1482FCE8BF00BC09E12CEC92
FB56174CBEA20B79770FA6E9C1FCABF14EBBB89F3AC451C638519B4925FE67
EA1E04F86193667C371C4665858D494E73B3774ECAD1B5D34ED74FAF73F499
FF006AFF00D90FC652BB7C47FD9A343566EB3DADBD85CCE73D7E66B5B761FF
007DD50B7BBFF825C78FB55B6D1FFE144EB6B7D7F22C714762B2C65E473855
44B3D455C927A0543F4AF973E077ECEDF137E3FEBBFD97E07D3C8B18180BBD
4AE329676A0F3F3C983B9F1D110163D718C91FB83F023F672F857FB3A341A7
F85A11E23F1CDDAF9771AADC28DD1023E711A82443181925149761C3B1E31D
79163B35C5352724A1DDA5F85AD73E7BC56E16E01C8632A51A529621AD29C2
A4B4F39393972AFBDBE8ADA9F4F7C38F0E693E12F02E87E1BD06DAF6CB4DD3
ED922B6B7D46E24BABB8611F72292596495D8A0C280CEC400173C578CFC48F
106B8FA9CDE1D99059585B1023863E16441F7589E323D0741D3A8CD79CFF00
C142BE2DDDFC26FD90BC73E23F0F6A4F69AC5EA43A4595C5BC863956E2EE75
86528E841578E2F35B2BC865EC45701FB2BFED05A7FED99FB3EDA78BA468D7
E20F8482596BB6A9B433CA172B3AA00311DCAA99138C071246B9D84D7CAF8F
7C3799E67C39569659564A51F7A518FF00CBC8A4EF1D35DB54B676B34EEADF
CD5C278EA1431CA55E0ACF457FB2FA3FD2FF0033B4AFA8BC19A32F83FC2336
A17298BA9626B994770154954FC07EA4D78E7C3FD06DF52D4E4D5754658B4C
D257CF9E490858C6D190189E00182CD9E3039ADBF0DFC4B93E23FC25BCF881
0EE874DF11DFDC26948C36BFD82094C11BB02011E7885E6C1195126DCF15F8
5FD14BC3E5172E21C5475778D2F45A4E7FFB62FF00B78FB5E3EC5D59D0953A
5F045C799F9CAEE31F5B272F91BFADD943F113C38BACD8A01ACE9CBB658D47
322F52A3BF3C94F7C8F7AF0A8A4786549633B5D08607D08E45775E1CD7AE3C
3BA9C77D0E593EECA9FDF43D47D7B8F7ADEF891E158E1D9E2DD210FD8AFB6B
CAB8C6C79390D8EC1B3CE7A37D463B7E937E12B9A7C4D96C7DE8FF00152ECB
6A8BCD6D2F2B4BA3679DC09C456FF61AEF47F0FF0097F97DDD8FFFD7D2FD9E
BFE09F3E2EF1C43078CFE33CD2783FC318120B66C26A3729EEAE08B753EAE0
BFA26086AFD8CF877E19F871F0A7C1A6CFC0DA341E1FF0EDB0DC1954896E58
71E63B3664918F40CE4B374E0019CCD2A2D47C673BEBDE289BCAD22CB2FB3E
EC44AF5007A0FE263CF6FA79F78E3C632F89EF0416B98B4DB538863E99C71B
D87AE3A0EC38F5CFE17E25F1DE5DC19977B48253C4CEEA117BB7D64FB4575B
6EECBCD7ED59D719675C638BB632A72D08BBF24748AEDFE2979BBDB5B59685
0F1678AEFBC51A9FDB252628222441183F717D7FDE3DCFF402BC73F6AFFD9D
74AFDB57E06CDE1F8FCA83E23F84564BAD12EDF68F31C81BEDE4638C457214
2B9CE1240921C85DA7D6FC3FE15D6BC4B3797A6C198C1C3CAFC46BF53EBEC3
26BC57E3E7EDA5FB3B7EC6CB73A5CF787C71F11A3429FD91A7CAA0C0CCB902
EE61B92D94F190C1E6C10C232A735FCFBF4798716E333CA99E493742B7F165
37653EDC9DDC7ECD972A578DD2671719BCBA9E116156938FC296EBD7C9F5BE
BD4FC6DFD9CBFE0973F1D3E2DB37897E2AA37C2CF06D9966B9BAD5A331DF3C
71677F956B21428A00E6498A201F32EF0315F7D59FC65FD93FF62BD2A7F087
EC9BE1783C59E2CD861BBF135F9F383B0C86CDC00AF32E40FDDDBF9501C865
62739EBFF6D1F11EB5FB417C01F05FED19F0A7C417779F0EEFA045D4B48593
6C76B70D261659D138778A6CC126F2C11C218C6199ABF272CECEEF51BB834F
D3E07B9BAB9758A28A252F249239DAAAAA324B127000E49AFEB8E25E24C450
A8F0F4A3CBE7DFD0FD77C10F04F28CD3030CE730ABED55DAF66B4516BA4DEE
DECECACACD6AD33D3BE227C59F8ADF1DBC4B05E78DB57BBD7EFE69047696A8
0F951B4A4288EDEDA30114B703E55DCC71924F35FAE7FB297EC99A2FC02D22
DBE2BFC5AB74BCF1C5CA6EB1B03875D3830EDD419F07E77E4463E55C9E5B5B
F644FD906CBE07E996BF127E21580D53E20DF479B3B21875D355C7201E57CE
C1C492F440762F72FF00417C54F1CFC31F847607C71FB40F8AEDB4A5981F22
CC3169A60A47EEE085374B26DDC33B170B9CB36326BD4E0DE0CC562B11093A
72A95A6FDD8A4E52BFA2BB6FCBA7E5E478CDE34D09529643C3F6A7868E9294
6D152FEEC6D64A1DDAF8BFC3F13A66F10F8DB5469D226B994F0028C471AF61
93C28FA9E7DCD61FC43F177C18F803A426BDF1C3C576DA6348A5E0B1462F73
71838FDD41183348012012AA1573F3301CD7E5B7C64FF829F7C4CF1DDD1F00
FECBBE1C93C35633931C5746DD6EF57B8E9FEAA0412450E4641C095FA32BA1
AF8EB4DFD927F6CAF8C7AB5DF88AEFC09E20D4B52BB60F3DE6B84D9CD3B600
0C66D49E23271819C9F4AFEE5E0DFA2DB84638CE31C6C30749EBC8E70536BC
DC9F2C3FF267D1A4CFE3DC46777F770F1727F81F62FC6AFF0082AFF8B35186
6F0E7ECEDE1E8BC23A6F2ABA95FA47717EC38F992DC6EB784F507799F23041
535F007C3FFDA4FE297837E37E8BF1DB54D72F7C41AF69B70AD70F7B70F2BD
CDAB6566B66672711BC6CCAA070990540C0AFB0BC2BFF0497FDA575A482E3C
45A8E83E1D89F0658E7BB96E2E231DF0B6F0BC4C47A79A07BD7D03A07FC122
FC19A6CEB2F8FBE2E19A2C7CF058D8C56CE0FB4B34F367FEFD57F44E078C7C
28E1BC1D4C0616A536A7171972C6552534D59A734A574FB7328F6B1E4CB0F8
FAD252927A7CBF03F51B404F0FFC4ABBF09FC57F06CA2EB40F114115F89063
83B3CC4DC33C31C0575FE16520F3595E284BFF001278B6F974E824B8313F94
028C8023F94F3D002413935D17ECF5F037C3BFB3D7C3983E1CF84B5AD5359D
1E29E5B9B73AAC914924027C33C717950C21632FB9C2904EE6639C1C0F9E7F
6C1F14FED99E0DD1246FD99BC2FA6DCE8C2326E2F2D3FD37598DF825A3B295
162EB91855B866EB85AFF32F847C28CAD710E370990568429E26B39A9D592A
71B3492BDF66F76926F9A4ECAD63EEF1F9C56AB429BAEAFC91B69AFF005DBD
11EBDABE83E1CF03E8CFE26F8A3E23B1F0BE931101E6BBB88E1404F45F3242
A9B8F603713D00AF883E24FF00C14DBF673F866D258FC1FD06EBC79AAC580B
79266C6C81E41225991A6257D1600AC3A3F7AFC2CF88DE37F88FE3BF135CEA
9F14B58D4758D722678E43A9CB23CD090C4B44124FF54AA73FBB50A17A002B
83AFF46F817E86993E1946B6775DE225FCB1F721F7A7CF2F54E3E87C462B88
AA3D292B7E67F5BFA2FC5C93E30FC13F0A7C5FF05DDBDA69FAE5BAB5DC1137
CD05C6764B197186FDD4CAF19E707838E6BCF99D9D8BB92CCC7249E4926BE0
2FF82507C5E86F8F8BBF66DF11CFFE8DAAC4FAB695B8E76CA8163BA8D33DCA
F972A81C0D8E7A9AFD04BCB49AC2EE7B1B91B65B7768DC7FB4A706BFC1AFDA
2BE0F62B84F8DA715294B0D535A776DA8AE895DE9EEB49DAD79466CFE88F0A
F38A789C1385929C77F3FE9FE1634FC35A49D735DB2D2C0CACD20DF8EC8BCB
9FFBE41AFC3DFF0082A37ED17AD6A3FB646996BE08D41ADC7C1D5B48AC648D
83469AA875BC9E54C742ADE542EA7BC2462BF752DFC5DA2FC22F86DE34F8DF
E2619D3FC2BA75C4E13215A568937F9485881BE46D91A73CB362BF8DFF0014
F89759F19F89F57F18F88A7FB56ABAEDE5C5FDE4C401E65C5D48D2CAF81C0D
CEC4D7BDF457E11FA8E412CC2A2B4F112BFF00DB91BA8FE3CCFD1A3C3F1033
1F6B8C5462F482FC5EAFF43FA09FDB3E1D1FE397C1DF861FB63F82E1090788
6C61B2D512325BC898EE6456206330CCB3C0EE4F2446BE95C27C01FDBEBE25
FC2D583C33F1003F8DBC2A008CC772F9BDB78FA6229DF3BD40FF009672E460
00AC82B1FF00E0985E25B7F8E3FB3E7C5AFD8F35F9D5AE56DDB58D13CD2488
CCC54310010424176904A40EA656AF89AEAD6E6CAE65B3BC89A09E0768E48D
C157475386560790411820D7E9FC4EAAE0B18B1341DB9BF35BFE87F56F8173
CBF89B86E792E6D49547877657DD46577169EE9A7CCB4E8923FA4CF03F893E
16FC77D05BC53F06F598EE1D00373A7CA7CBB8B766FE192263BA339C807946
FE16C0CD51BCB3BAB0B87B4BD89A1990E0AB0C1FFF0057A1EF5FCF07843C65
E2AF00EBF6DE28F066A971A3EAB68731DC5BB9471EAA7B329E8CAC0A91C104
57EC1FC05FDBD7C15F1420B5F03FED07143A1EB4711DBEB31FEEED2663C0F3
7FE7DDCF7273113C9D8302BDAC9B8BE956B53C47BB2EFD1FF91F97F897F473
C7658A58CCA1BAD456AE3F6E2BD17C4BCD24FCBA9F4CDBDCDC5AC826B595E1
907F123153F98AF4FF0003EAFE30D5B514B58EF5DED21C34CD2812617D3730
CE4F6E7DFB5635FF00C3FD5E1BCB78F4D2B7D69764795709CAED619CB63381
8E73C83DB9E2BA1F885F09B56F17FC3E93E19F87BC4127862C757062D5B50B
540DA8496CC312C56C5BE489E61F299583EC4C8542CC1D3EFF002FC3D3AB5E
14EB54508B7AC9A6ECBABB2D5FA2DCFE669B693D353F0F7FE0A1DFB5BDF7C7
AF1A47F023E124D26A1E14D1AE824CD641A53AC6A48768D813264821391185
F9647CC9F301111CBFC0EFF82607C70F88F1C3AF7C4B923F875A0300EC6F57
CDD45D3AF16A197CBF43E73A30EBB08AFDC3F859FB387C32F80361F60F833E
0CB3B3BF29B24D56F5FCDBB9B2392D31DF3104F541B10765C56EF88BC2FAF5
E29BBF1B789AD2C6DC1C80CFB215C7A06F2D723D4F3EF5FB5717FD31B1DC3B
964386FC36C9AA4F9535ED26A31729759B72F7136F5D15456D172A492CF2FE
14A5889FB7CC31118AEDBFE0BF5B1F327C2DFD993F651FD9E3C9BAF0BF87BF
E130F125BE08D4F542B74EAE3F8A3DCA21888ECD147BBB1635EC3AE7C44F13
6B65A3371F6380FF00CB38329C7BB7DE3EFCE3DABACB6F867E1E7B087587F1
343369F70018E78C27972673F724F3195BA1E952FF00C217F0E22E26D7A463
FEC3A7F4435FE66F89D53C64E33C44EAE7555C13BAE5F6B15A766D4A52B7F7
6FCBDA28FD4F29ADC3B804BD8FBCFBB8BFD525FAF99E2B5D778BAFBC63A8FC
05D76F3C037AF67E2CF058FED3D39914C864FB366530B47D241345E6C3B082
3E607A815DC1F0C7C2C43F36B3727F23FCA1AEEFC0DA3F842D2E6EA7F0D5DC
D744A049564076618E47545E783FAD781E0D7829C51906731C5E2141529465
09DA77766AE9AD3752517F23D2CD78D70352309D35CD28494926B4767AA77E
8D5D35B34CF9DFF671FDAA3C3BFB49685F67D3EE13C3BE3DD3E30D75A6B36E
86755C66584364BC47BFFCB48FA1C8C33747F127C07F087E2FAC9A27C6BF09
43FDA312F96B7F1298EE62E38293478942F70B9743DC115F847F18BC3BAD7E
CFBFB42F89345F0A5D4BA3DCF86F5479B4D9A090F9B0DBCB89ED7E7EA4F912
206CF0790722BF5E3F66AFDA7BC31FB506871F837C66D1691F11B4E84952A0
2457E8832D2C23D7BC91755E593E5C85FEA8CA33C8E21BC16352E75A6BB3B7
EA7DD788DE15D7CA230E25E189C961E494FDD6F9A9A92BA69A7770D77DD75B
AD4F953E287FC13BBC7FE0E91BC69FB3B7889FC436B092F1DBF9C2DB52880E
D1CC8563948EFF00EADBB0526BE58B0FDA6FF6AFF84BA9DCE8175E31D6EC2F
ED9B6CD6BAC0FB5C9111FC3E5DFA4A538EC00AFDBAF335EF08EA72431C8F67
7119F980FBAC3B1C1E187A64555F1D7867E11FC75D25742F8C5E1F86E26452
B06A1082971067BA4ABFBC419E4AE5909FBCB8A78EE14B5E7829B83ED776FF
0034470BFD209CD470BC518586269EDCCE31734BCD35CB2FFC95F5BB3F3474
1FF8296FC4996D0E8FF13FC21A278C34B74DB2C6636B59253EAE5BCF84FD04
22AA6A1E23FF0082647C71F97E247C2B9BE1E6A9329692F34989A082390F5D
BFD9CCBE61F77B5C1EA79AAFF1E7FE09EBF103C0104FE2AF8513B78E3C3401
93CB8941D4618FDE34F96703FBD17CC7FE7980335F0C783FC15E25F1DF8B74
EF03F862C5EEF59D52716F0C0060EF3D4B67EEAA004B93C28049E057CD4B39
CD3095152ABABE89ABDFD1F5FBCFDBA97869C05C4583963F02942295E52849
C5C74BFBD17751B6FAC7F03F7E7C2DF07FE03FC75FD9D6CBE0AE89E3B9FC75
A1F874C1F61D49AE209B57D3D109FB3A4A44698658B742BE644ACD17072C0B
57D25A3FC32F0C7807C056BE04F04F97E1BF0FE9D19DE1172CCB8CBBC92330
24B725D9B25BB9C673E2FF000EFC01A27ECD5F0BF4CF861E139565D5DB175A
9DEA8C34D72E06F7E7A0380A8A7A46A33C9C9FA3BC2DE2AB7F10696D72C36D
CDB8FDF46A093903AA819243761D73C57E9582A17B56AB04AA3493B7E47F12
710E6AA2E796E02BCE58484DB8293DFA7334ACAEEDA69A27D1B67C6DE27FDA
13F639F0249243E27F8A5672CD0B1478EC99AF5D581C1052D22998107AD792
7883FE0A13FB1178662F334B9B58F153838DB6763321FAFF00A63DAAD7D83F
14BE177C0CF8C9A2A6B1E3FF0006E9DE30D26E63F9353B7456BA890120E278
8A4CAAB8E4A49C1072A315F9B7F123FE0953F0D3C611CDA9FECFBE387D32E8
82EBA6EAFF00E910E7FBA2540B3C4A3D59253EF5FBD78779AF85388C6ACB38
83115F0F8A5BC2728F2BE9A5A9A9B57D1B4B957567C4E330998C69FB6A3052
8775FAEB65F313C47FF056BF85DA4B85F87BF09EE7501CFEF751BA82C9D7D0
ED8A3BA27E9BC7D6B80F077FC15CBE226A5F1374387C61E1BD1F49F034D769
15F0B64B896F61B693E432099A5D8C6224390211B8295EF9AF813E327EC7DF
B42FC0AF3AEFC75E13B86D261CFF00C4CEC7FD32C768FE26962CF940F61284
3ED5F3357F7E70D7D1FF00C3DC5E09D4CBA846B4669AE755253DD6E9F338A9
2F249A67C856CD717195A6EDE56B1FD7FDE69F6DE1EF1FE91ADE96E92697AB
4892C12464347B66F95B691C15C3EE047182315FCCAFFC1523C1D2F847F6D5
F1C4C2110DAEBF1E9FAA5BE3F8966B48E3958FB99E396BF643FE09DBF1A5BE
36FC029FE146B371E678AFE1BF942CD9CFCF35873F652338CF978680F65511
93C9AE1FF6C2FD9DA5F8C7FF000513FD9FF5092132E8DA8E986E350568F7C7
F66F0EDD497D2097FD99FED11C049E85D6BFC728F84388E06E27CE7209C6D4
9D45521D17BE9A95BCBDD8C92E91945743F53C6E72B1F85C3D76FDE49C5FCB
6FCDAF54CFAD7E1FFC3F1F043F669F861F068C2B6D79A5E990497F1A1CA8BD
917CEBB20F70D732CAC2A1AEF3E246ABFDABE2CBAD8DBA3B4C5BAFFC03EF7F
E3C4D45E19F055DEB71B6A97F20D3F488159E5B994855D8832C54B606001CB
1F94739E98AFF37BC4D58EE2CE33C4D0CAE9BAB2E6E48A5DA1EEB77D945BBB
BBD353F63C8BD965D9653957972AB5DFABD7EFE849F0F97C4A75C43E1C38C6
3CF2F9F2767FB7FD31CFA57BE78BFC3326AFA11B0D24240F1CC6E046A022C8
EC58BF4C005998B127AB75EB9AFCB3F887FB6A69BE39F8ABE16FD967F65A98
FD935CD56DEC757F11C24EE36E641F6AFB0B0E49110726E3D07EEB8DB20FA3
BFE0A29E35F16FC3CFD99F56F8ABF0EB549749F10F80758D26FADE78F91BE5
B88ED1E3910E5648DE3BA2AE8C082090457FA31C0DF47DCD3C3DC970987CEE
ABF6D8ABCD536DFB8BA5A2F58F36BBD9BE5BB4B447E439FF0012D3CCF1129D
08DA31D2FD5FAFF5A5CEB27826B699EDEE10C72464AB2B0C1047622BD53403
178D3C2B73E13BC61F6CB45F32D9DBD17EEFE44ED3FEC9AF91FF00652FDAEF
E1D7EDB5E14FB1B887C35F147488035F6985BE4B845C03716C589692027A8E
5E1242B6E5DACFEF96771A8F8575C8E696368AE2D1FE743C64771F423A1FC4
57B99BE55431D85AB83C5479A9D44E325DD356FEBB1E461B113A5523569BB3
4EE8C9D07C45ACF83F5376B7254AB149E07FBADB4E0861D88EC7A8FA641F94
7F6ADFD853C19FB46D8DF7C54F81890685E3D5065BED358AC56DA93F524F45
8A76ED28C2487FD6618971F70FC4FD1A0792D7C5DA67CD6BA92AEF23B498C8
3FF02039F7073C9AF33D3753BED22F23BFD3A668278FA32FF223A107B83C57
F14F851E3DF147835C53530787AB295084B58BDA507AA696D692D5C76E6BD9
C64B997EB99AF0EE133FC1471095A6D6FE6BA3FD1EFF002D0F9BBFE09D5F0E
75FF00857FB38FC43BDF17E973E91ADEA3AE4D632DB5C46639923B68A28406
56C1E24925F6C723AD7D156B753D95CC5796AE639A160E8C3A8653906BE85F
11F88BC31ACD97873C13E26D6ED746F1178BE096E34DB479151EF1ACD12499
6147399362C8ACC8A7701CF2149AF0AD6F42D4BC3F7AD61A9C46371CA91CAB
8F553DC7F93CD7ABF4E1E27CDB89789297183A2E142AC22E2D5ED193BBB3EB
17CBCB6BDB6D354CE6F0DE950C3E1A782724E69BBAEEB6F9F53E01FF0082AF
FECEF07C53F85FA57ED55E0AB3CEB5E17892C75F8A204B49A7B3E126207536
D2BF27193148598858857E65FEC91FF0504F8C1FB2E5C43E1C773E2DF0048C
44FA1DEC876C4AC7E66B394863031C92570D1B64EE4DC770FE967C1175A4DF
8D43C0DE28B68EFB42F12C1259DCDBCE03C522CC86364753C159158A30EF91
5FCA1FED6BFB3EEABFB32FC77F127C2CBD1249A75B4BF6AD26E64EB73A65C1
2D6F26EC28665198E42063CD4703815FBDF835E20C788F23A58B9BFDF47DCA
8BFBCBAFA495A5F36BA1F0FC4D93BC0E2E54D7C2F58FA7FC0D8FDA19FE09FE
CE1FB6A786AEBE26FEC7FAD5BE85E26853CDD43C2F778B7F2DC9E41841636E
4E70AF1EFB76202A94F99ABF4EBC37A14DF0E7C09F0BBC0B3A88E6D12CEC61
B85041FDEC11C51C872320E58BF238F4AFE443F6574F175CFED1BF0DF4CF04
6A975A36ABA96BDA7DA2DD59CAD0CB1C53DC224C7721076F965B783C15C820
8E2BFAFBF8917FBBC551AA1E6CA38C11FED64BFF00222BF46C3655428D5956
A51B396FD8F4B3BE3FCD732C051CBB1D55CE149B716F596D6B37BB4BA5F55D
ED63F3DBC65F12CFECFDFF00054733EA37063D03E2B69BA5D9DF2B13E5A492
C6B676B2E3214149ED954B1FBA8F21EE6AE7FC146BE39EB1E148AD3F679F08
DB49A569FA85AA5F6A5723E5FB54323B048233D7CBDC8C653FC4404E8181F9
77FE0AF7A4CF6DF1EBC21E2153886F7C3714084707CCB6BCB96639FA4AB5EB
FF001DAF53F6A4FD8BFC07FB48D9E2E3C4BE10034ED7B6EDDF9DCB05C3384E
9998473A2FF0C7313C57F46FD20B83AAD6E08C9B89F09D69468D4B7FD3B4D4
5FFE031945BED14BA9DBE0063B034F8B68D0CC2378B93E5BECA6FE17E7EF5A
DE6EFD0FCCCD1B48D43C41AC58E83A4426E2FB529E2B6B78C7579666088A3D
CB102BEA6FF82C0F8A6C3C2D27C22FD9A3C3D313A7F82F4517932E73B8C816
CEDB7FFB6A96F237AE24C9EA2B5BF607F878BE3FFDA4F409EE62596CBC2F1C
BACCE1BFBD6D84B723FDA5B892261EC0D68FC3EF80B27EDFDFB73FC45F8E3E
3442FF00093C21AC1B43231C45A8AE98AB05B5A467A796E9189AE08E8AF8E1
A40C3F91F817096A53AEFABB7DDFF0FF0081FBA7D2B788BDA63B0B95C1E94E
2E6FD64ECBEE51BFFDBC33F617F839E12FD933E0ADFF00EDDBF1E2D07F6ADE
5B987C23A64A424CE2E54AA4A8181225BB1908403E5DB8794E55BE5FCDFF00
89FF00123C55F17BC7DAD7C48F1ADCFDAB58D76E0CF315C844180A91460925
638D02A22E4E1540C9EB5FA7FF00F05765F1D5AFC46F03DB5CCE07811F4A73
A45BC2A1218EEE27DB779009DCE11A0C1C050842A8C872DF9F9FB30FC343F1
7FE3FF00817E1F3C5E75AEA5A9C2F76B8CE6CEDB37173FF90637FC6BFD78FA
32F05E5BC3FC2F3E28AD352A956129CA4BEC5385DB82F34E2DCFFBC92D7953
3F85F39C4CEAD75416CBF33FA25F861E0A3F087F65BF869F0D1E3305EFD863
BCBC4E845C5C03733AB7AE269881FEED76BA03F86FC25A16ADF15BC7D769A6
F86BC2F04B773CF283B408177B360025B681C2804B310A013C575DE2FB4BAF
19FC411A2597FABB44489DC72A8A3E6763EE0B6DF7200AFC3BFF0082AF7ED6
D69AEEA917EC9DF0BEEC0F0EF862546F104D0C995BAD422394B3257865B66F
9A5049CCF804068727FC1E79155E38F11732E2BCC95E852AAD46FB4EA45DDF
AC633BC9F46DA5AAB9FBBD5CC165B9452C1527EFCD5DF927FAB5A7DE7E737E
D63FB48F88FF006A1F8DBAC7C53D57CCB4B12C2D747B363CD969D0313047C1
2379C992420E0C8EC4617007F497FB097C5FD2BF6ADF85BE07F8A9ABDC83F1
07E1DADCE85AD31E64B849A103CC61919171B219F7118122C88BDEBF91DAFD
B6FF00823FFC37FDA47C3FF1467F889A56832D9FC2ED7ACA4B5D4EEAFD8DB4
5746305EDA4B3420B4F24726577A8F2C2348A5C3102BFA8E70525667C1E1F1
352949CA9BB369AF934D35F34DA3EA3FF82A26A57BADFC41F879F0FF004982
4BBBA82C6E6E63B7850C9248F7D32C2815172589FB390001F4ACCFD9FF00FE
09E373716D6FE3AFDA3276D174A5C491E8D1BEDBA987502E245C9881FF009E
69990F42508C57EA7F8BADBC15E19F191F1CAE8515D78BEE6CD2D63BF95773
C56C85C88D1DB3B177331654C6ECFCC7A5797EADAD6A5AE5CFDA7529CCAC33
B4745507B2AF41FD7BD7CD3E19A757153C4E21F35DE8BA76D7BFF5B9FB753F
1CB1B82C870F91E4F1F65C916A53FB4DB6E4F97A455DBD75976E5374EBFA4F
87B4483C1FF0EB4D87C3FA159AF971456C822F97BE02FDDC9E49E589E49C93
5C97C48F897A5FECE7F06B55F8A7AA2A49ACDF27D9749B67FF0096B71283E5
0C7076F0647E7EE2F1C9AEA7C1BE1F1AF6A99B9F96CAD47993B1381B4745CF
BE3F2CD7E6BF8EFE262FED77FB687827C0FA248B3F82BC3DA904B58CF315D4
3667ED37B391FF004DD21289FEC053804915DB9CE3FEAF49429FC72F763FE7
F23E6BC34E1279CE3EA62B1B7787A09D5AADF54AEF96FDE56F5B5DF43CABFE
0AC7E28D4FC1DF027E0AFC09D5AE7CFD72EFCCD7B5A6CF2F7B145E5BCADD33
E75C5CDC374EAA4D7E727EC2BFB40F8CBF67BFDA23C37AD785ED6E757B2F10
DC43A3EA5A55B0DF25FDB5DC8A81624380678DCABC3CAE586C2C11DB3EA5FF
000551F89BFF000B1BF6C4F12D8DBCBE6D8F836DED7428083C06814CD7031E
AB7134AA7E95F457FC12EFE05F87FC23A4F88BF6DFF8BD1793E1BF05C53C3A
1AC80667BC0364D3C61B01994B0821E70D33B630D18AF5572D386AF44BF23F
3E9BAD8DC53718DE7525B2EAE4F64BD5E87E937FC1417E30DBFC3AF01C5F05
3C0D88F5EF1EBBC97AB09FDE4760EDB58601C8372FFBB5E0828B22F1C57D2B
7BE1F87C01F0F7C15F0D2D88DBA0E9B6F0C807F13C31AC5BFEACC1C9F735F8
CDF08353F10FED3FFB66E81E26F14AF9B2EA5ABAEA53443E68E0B4D3D4CE90
0381F22A44B102796EA7E6249FDA0F1E5EB6A3E2ABA58CEF580AC08075CA8E
47FDF44D7CAF0BFB3A92A9568C5460BDD8A4AC925AEDE77B9FB678C1922C8B
0197E44E57AB6955AAFBCE568AF94545C5796BD487C17A07F6FEB291CC336B
6F89263D881D17FE0478FA66BE19D07FE0A53E1AD5FF006AFD6FE1DF8824B7
3F09B5129A2E9F7D850B1DD42CCA6F1E404E6DEE5D8A67202C6227F971267B
CFDBCFE3B27ECE9F017FE15EF87AE7CAF1BFC428E483746D892D6C48DB7336
40254ED6F26339077333A1CC6457F37F5FE84FD1CFE8F382CFB26C5E619ED3
BD3AF174E9A7D17DAA8BCEEB963D349269A67F30E6D9BCE8D58C693D56AFFC
8FFFD0FD65F1B789CEB5345E13F0C213A7DB90816104F9CEBD318EAA0F4F53
F37A571BE32D47E187C09F0937C44F8FFE22B6F0F69319C47048E4CB3C98C8
8A38D3324B211CF9712B1C0249001C7C7DFB4AFF00C146BE11FECE6D73F0E3
E005AC3F113E233B7D9A4B95265D3ACE63C6C792220DC481881E440C00390F
22BAED3F97ADFB25FF00C1437F6D0F170F881F11344D4449787CB1A87895D7
4BB7B68BEF0586D1C2CA90E4E40B7B72A4927A926BF9C320F03A58FCC259F7
17C956C44B554D7F0E0BA47FBD6EDF0DEF7E66EE7DB6338AD51A2B0996AE58
2FB5F69F9F95FEFF004D8EFF00F6AAFF0082ADFC4AF8A315C7817E004337C3
AF0601E5FDA632A9AC5DA73D658C95B543C7C90B17E0E652AC52BF249DDE47
692462CCC49249C924F524D7EDC69BFF0004B0F82BF096D62D53F6B5F8EB61
A2398B749A6690D143316EB9866BB0F2CA31D96CC1AFD0FF00D9A7F65BFD89
AEED23F117C2DF842DACE8855593C45E29B692686F020C896D20D48B39CE41
F312DA288F3B5C95DB5FD4B47867191C1FD6E341C682D14ADCB0F249BB26FB
25AF91F0D2AE9CACDDDFE27E65FF00C125BE2978B4788FC45FB3EF88FC37A9
7897E1978E23963B9920B49EE6D34DBE78B6969E4894AC515CC43CB91988C3
08DB2A031AFD75FD99FF0061AF097C0AF15EA9E38D72E57C41ABA5CCE9A3B3
AE56CACCB111B904006E5D3876030BC84EA49FAD6D7C57A245A959785FC370
C6C99D9FBA50904488092102800E00E31C7BF6AFC83FDA87F6D2F8DFF0FBF6
86F14F863E1D78892D741D19EDED96D64B4B69D0CA902198969236707CD2C3
861D2BE2B3CAF85A1ECF13888DDA7656F3FF00863F60F0B32ACFB3658BC972
7AEA9C6A479A7CCDA4D45A56BA4DA6F9B5B5AEB46EC7EC5F8BE7B7FECC9ACF
FB79FC3D2DC2EDFB55B2C2F7483A83109E39A3CFFBD138C1E003C8F8FDFF00
67FF00D9462F114FE30D7BC29378EFC4374009AFFC417171AAB4BB7A6E4BD9
5E200740162000E0000015F04F87FF00E0A7BF1CB4F2B1F88344D1358887DE
3E4CF6F29FF8124A53FF001CAFD02F00FED35E1DD7FE026B9FB45FC69F07DA
F827C31A4A33C33B4EB752DFAA1DA4C28D0C446F971144BB98BBE4700027DF
E1AF116BD3E6A196E2274DC96BCB78B6BB49C6D75E4DDAFD2E7071BF82F9CE
4743EB798D387B3BA57528BD5ED64ED26FD16DABD0F50D23C5BA3784B4E5D1
FC05E19D3BC3D6118C2416B0A43128F68E158D47E555AEFC7DE2ABBC837A62
53DA3555FD719FD6BE35F0AFFC147BF609F1B044BFD6754F064F2F45D46C6E
3827B16B6FB5C4BF52C07BD7D39E10F1A7ECF7F13D917E18FC53D13599A4FB
B6D1DEDBC97393D331075957F14AD2B569D4939D46DB7BB7AB67E6095B445A
BAD4B51BDE6F2EA59FFDF766FE66BD0BC23E1CB4B2B43E2DF127EEED21F9A1
8D872E7B363B8CFDD1DCF3D3ADED33E1B49A7DE1BDF115C426C2D8191B6337
CD8ECD90303D7F2F7AC5D5F5B9BC6BAFDA6956C0C76025548D071F2E705C8F
5C741D87E3598CF9BBF6FBFDAEF58FD98FE1A7803C4BA104FED8F117886CE4
96CCB0124DA3D99FB45EA2920E0BAF930B3638F3491CE2BE8ED67C5CC6DF45
F893E01D47ED3A078AAD20BD81D7E682649A359239369E079919539E0F5E6B
F9F8FF0082C4FC551E31FDA5EC7E1B58CC5B4FF87BA5436EF1630A97DA8017
53329EE0C06D94FA1423AE6BEF8FF825BFC596F8C5FB2A6B1F0875498CFAEF
C32B902DB716676D3EECBCD6BF3367255C4F080384458C71C57E69E2D70FE2
730C8EB7D467286229FEF29CA2DA929475B26BF995E3F33DDE1CC6428E2E3E
D5270968D3DACFFC9EA7D65F147E157ECF3FB4ADA1B4F8C1E1A8ECB5B28122
D66CBF717719C60627504903B24C248C75AFC92FDA07FE0991F17BE19C33F8
A3E14CDFF0B13C3201900B44C6A5147D7E6B752C2603A6E84B13D7CB515FAD
55D1683E2AD6FC372EFD32E0AC64E5A26F9A36FAAFAFB8C1F7AFCDBE8EDFB4
A38BB84254F059ACBEB3865A59EAD2F4D12FFB71C7BB52D8FB1E24F0A70B8A
BD4C2FBB2EDD3EFF00F3BFC8FE663E0CFC46D63E08FC60F0CFC45B58E48EEB
C33A8472CF0E0A3BC20ECB98083820C91178CE7A66BFA8EF8890D8EA577A6F
8B743905CE9FE22B68AE2091391206552ACBECC8C847AE4D78DFC64FD9DBF6
76FDAA6DE497C67A60F0AF8C9D711EB363B6395DC0C2F9A71B275E07CB28DC
07CA8E3AD7D05F027E12788FE1F7C22F0A7C35F1FEA506B777E0C90C36B7B6
E1956E2D2066169BD1C651922288C80B00538622BFB03E961C7FC27E37F07E
171D90D551C6529C538BD5A4DDEF7B2D22B9D59A8CBDFBF2B5A9F07C2D4317
C3F8F6B1517CAD3F9FF4EDDD687E5A7FC15DFE2D27C3DF81FE0EFD9CB48B80
BA8F8B661A9EAC88CA48B2B260C89229E712DD10C8C3FE7DD87B57F3A75FD1
2FC7CFF8277FED07FB607ED19E27F8B3F12B5FD3FC05E105945869314AE751
BD4D2ECF290BAC11948904E774E55E70C8D290578C57B5FC37FF00826CFEC4
FF0009C4575E25B6BDF891AB43862FA84E4DB6FF0055B7B7F2612BFECCAD2F
E35F099565B470585A583C3AB429C5452F24ACBF038F115E556A4AA4F76EEF
E67E27FF00C13A7C6FE26F007ED75E04D67C3F6177A8DB5EDD7F666A315A43
24E4596A03C8792458C12121665989E83657EB7FC73FD807E2E78F3E3F78AF
5BF015B58D8F85F5ABA17F15E5EDD854135D2892E57CB8C4928C4E5F1F26DC
1183D87E89E89E21F0EF81F4B5D03E19F85B4DF0BE991F0B059DBC704631C0
2238563407F035B7A75BF8E7C664493DE490D99E1A427CB8C8EF844DA1BFCE
4D679A6534B17050AB7D1DF43ECF813C42CC3876BD4C465F6E69C795F32BAD
D3BDAEB556D2F75ABD0FCFAF0B7FC131BC23A5B46FF147E2234921C6EB5D32
1485BE8B2CC6466FFBF22BEB7F07FEC3BFB2CF83EDE1BE97C2FF00DA921645
59B589E594B3390AA0C2E522CB31000F2C124E2BE7CF8EDFB7E7C08FD9E45D
786FE19C69F10BC6B0868DA48641FD9F6B2700F9B72B90C46798E00C720A3B
A357A87ECF3A0FC5ABAD2E3FDA37F6A5BF92EBC5FAAA33683E1FDA60B3D0ED
A656C14B5E89752A395791F74C911F2D9F7348B5FA2FFC40F9E5B94ACE734A
4A8539694D4D5EA557FDD83D5456EE72B24ADCBCCDA4F5CE7C6EE23CCAA3A7
3C74FCD41F224BCF92D7F4D7CCFB06FB55F0CFC38D2AC341D1B4F86D2D6051
1C16568890C70C20FF000A280AA076000C9FC6BE43FDADB4DFDABB5DF0AB78
E3F653F1C3882D62CDEE80969686EE40A3E67B59E489A4F300E4C25816E4A3
13B633DEEA3A8DDEAB7B2DFDEBEF9A53927B0F403D876AB1A3EB7A8E85762F
34E97637F129E55C7A30EE3FC8AF37857882594E369E3614615397EC548467
06BB34D7E2ACD7468FCFB1517593E793BBEB7D7EF3F9A1F17FED0FFB46EBF7
97363E31F883E2392685DA39AD66D42E6258DD490CAD007555604608DA08E8
6BC56F2FAF7519DAEB50B892E667FBD24AE5D8FD4B126BFA47FDA8BF634F87
BFB5969B73E34F04F91E17F89D6F165A5236DBEA3B06152E828C93D1567505
D4615C3A8503F9DAF1CF817C5DF0D3C55A8F823C77A54DA36B9A54862B8B69
C6194F504119574604323A92ACA432920835FEB5F829E28E41C4783BE594A3
46B457BF49249C7CD592E68DF66976BA4F43E0732C155A32F7DDD773FA00FF
00827478C1BC75FB1C5CF85EE306E7C0DAA5D5B46376E6304856F55CFA0CCF
2A0F64FC2BE90AFCCEFF00824078A621E36F893F0D67C9FEDCD26DB505FEE8
1632B40FED93F6B5FAE3DABF4CDD1A3768DC61949047B8AFF397E91FC3EB2E
E32C7D38AB46725517FDC44A4FFF00267247D7E51579F0F17DB4FB858E3926
9162894BBB90AAA0649278000AF2CFDAF7F6819FF66CF03F87FC15E10B803C
61ADDC437D7051BE686CE0915A427DA665F2578C14121EA2BDF2D755F0EFC3
8F08EAFF00177C7128B7D1F4285E55CFDE771F28080E0176621231DDCF6C57
F3C9F187E29F887E33FC45D63E227895B173A9CB98E10494B7B74F962853FD
944006703272C7926BF98B8AF39FAB51F654DFBF2FC177FD0FE95FA3F7866B
3ACC5E3B190BE1E8EF7DA53E91F34BE27F24F73EDDFF008296F87AC26F1F78
2BE2B68E54D878CF455DA5461A47B460FE631EF986E2251ECB5F9CDA46AFAA
681AA5A6B7A25DCB63A858CAB3413C2E5248A443956561C820F435FB4163F0
6752FDB07F630F85367A3EA76DA6EB1E1B6683CFBB577510D9896CDA2F9012
0B08E26FA0AF9DF50FF825DFC738016D3BC43E1EBB03B34F75131FA0FB330F
D6BE4736C9F135AB7D66841B8C92969E695FF13FA33C3EF11F25CB32C59266
B8A8C2AD094E9352BEAA33928F4B5B96C8FB2BF660FDA5F42FDA7BC329E0AF
1A4B169DF11B498490C0044D42341CCD128FE2FF009EB18E9F7D46DC85F55B
FB0BAD32EE5B1BD8CC734470C0FF0031EA0F635F9656FF00B067ED77E02D6A
CFC4BE10B1B69753D32559EDAE2C35282391244390CA6768BF23C11C1E38AF
D76F01378FFE27FC3D827F8A3E1897C2BE39D28086E51F61B7B92064490C91
B3A1493AEDDD98DB23EE905BED387F30C44E3EC71706A4BAB4F5F9F7FCCFE6
1F18783F26C3D6FED2E1FC5539D19BD6119C5B837DA37BF23E9A7BAF4DAC65
681E21D6B43B951A5485848C018482C8E4F1F77D4FA8C1AEDA4D3FE0AF853E
24699E25D62DF44F0E7C4AF17DB4B6D6A659238EEEF36156915149432B8257
710379185DC40AF1DF8C7F193E1E7EC8FE023E3DF884EB7DE22BD574D23488
9C09EEA703A2F5D88990659882A8080033B2ABFF00349F18FE33F8F7E3AFC4
2BFF00895E3FBF373AA5E102248F2B05A408498EDEDD3276471E4E06492497
62CECCC7FAC7C14FA3A6338BA33C66264E8E1A37E59F2DDCA7B2E54ED7517F
13BFF756B771FE7FC5F10CF07785193BC959A4DABAECEDBA7D8FEA33C4FA3E
B9A66A124BAD0323CEC5BCE1CA487D8F6FA718F4C551D0F59BBD07518F51B4
3CA70CBD9D4F553F5FE7CD7E4A7ECABFF052EF10783E2B6F871FB47F9DE2AF
0AB958A3D59819B51B253C03367E6B98D7AE7FD728C9064F9507EBF9D2B42F
12F876D3C79F0DF5287C41E1BD463F3A19ED9C4A366707057A8520861F7948
218641AF84F137C22CE785313EC731A77A727EED48EB097A3E8FBC5D9FAAB3
2B058FA75E3783D7B1F3CFED0DAE7C44FD9AF503FB51FC1283FB6BC0FAACAA
FE32F0D3B110895C85FED2B7033E44CC70970C830CDB64747CBBAFAB7C3CF1
AFC31FDA4FC1EBF127E08DF833C7B7EDBA63E22B9B49C8CEC92304F96FC1DA
4131BE328DC1CF6DE16D574E0B77E19F11C11DE687ACC6F6F7504EA1E26495
4A30756C828CA4AB83C1079E95F83FF1DBC0DF143FE09E5FB48AEBFF000AB5
19ACB44D537DDE8D3B6E782E6C8B0F36C6E958E25F25885704E4A98E505598
6DF4F01E1070FF008AF93CF86F364A9E634A37A3576738A5F0C9EFCF0E9257
6E1A494A30B1BE1B3CC4E555962683F71EEBA7FC33FCF6B1FBA7A57C45F156
88ED677CDF6D8909478AE412E307E61BBEF67B7CD9C7A57847C4DFD953F647
F8F9E6DD6B5E1EFF008423C437193F6FD276DA6E73C92EAAA6DE4C9FBCD244
18F6615B3F007F687F86DFB657855AF347F2FC3FF10F4B8436A1A53BFDF030
BE6C47AC9093801B1BA3242B8C6D2DD25ED95D69D752D95F44D0CF09DAE8DD
41FF003D0F71C8AFF36788B8ABC54F0473E7819E2AA2845DA2E4DDA4BA26D3
BAD354B99C1AD57323F5CC1E0326E20A1ED230519F5B74F3B6CFD6D7F43E23
F865FB157C79FD8F3E39E85F16FE1A5E45F10BC19E61B5D523B2FDCEA0DA5D
C90252D6ACC44A63F965410C8ECCE83E502BF64B58F0DE9B2EB96DE3986C85
C6BFA4E9F7B6166F9C110DFBDBCB2C7CE061E4B584927A6DAF983C3FAF7883
49BA8E1D0EE644799C28887CC8ECC4019439049E99C66BE98F19693AEEBDE0
ABFD0348F103F8635BD46D9A0B7D4EDA28E56B6B965E2448A60CAC323EE9C1
233B595B0C3FA7B87BE93B89F1592AD9951F6188A3154E7552D1A937CADF2A
D650F79E94D696567A1F0D9C7092C9E49464A5196A975D3FCFD4F96FE27FC4
0F82DFB36E8FFF00094FC70D7E29352995A5B6D2ADF135D5D367FE59C390CE
33C177DB103C3374AFC3BFDAA3F6F4F8A1FB4734DE17D333E13F0229DA9A55
B49F3DCAA9F95AF2518F33D446008D78E19806AF06FDA3BE1CFC5DF861F167
58F0E7C6C9AE6FFC46CFE71D42E2592E175085C911DCC5349F3491BE0819E5
4828C159594785D7FAA9F464FA1FF05F04E06963B2C8C7115A6949557AA77D
54A37BDDF6936DAFB2A1B1F9D7127166371F51AAF2B25D3B7F5FF0F73F52FF
00E0939F0E07893E3E6ADF11AF23FF0042F03E9723AC8470977A86608FE998
44E7F0AFD35FDAB2C63F883FB16FC70B6BB4DEA2CAE754556E769B231DE27F
DF26018FA57957FC13F7C01FF0AB3F6409FC5F791795AAFC45BC92E1770C37
D95736F029F628924AA7D24AF7AF19D84DAE7ECCFF001B741B71996EFC2BAB
47183FDF96C2E557F5C57F9A9F4B9F17966DE3561B28A13BD3A30A90F9A84B
4F94A336BCA48FD0786725F6790D6C4C96ADC6DF7AFF0035F71FC85F83FC63
E28F87FE27D37C69E0AD4E7D1B5CD22659ED6EED9F64B148BDC1EE08C86539
0C09041048AFEB8BF63BF8C3ADFED87FB3A69DF123C71A447A2F88ADAEA7D3
5AE21E21BD7B554CDC469D551D98A94C9DAEADB4E302BF8F8AFE8BFE34BEAD
FB32FEC5DF01BE0B683733E8FE229847ADDDC96EE63922B98D7ED53A96186C
8BABB054FF00D32F6C579B9963A386A12AD25A23D0E0AE15AB9DE69472CA32
B4AA37AEF64936DFC923F593C3B672DD586A5F0F35F5314BB4BC04F38E7395
F501B0C3D79AF0F4D2AEBFB6174495765C19C40475C396DBFCEB84FD92FF00
6B9D0FE3EDB58F83BC7B2C5A5FC45D29774130C247A9220F99A31C01215CF9
B10EA32E9C6427D99A8F83FCEF1EE9FE22893F72559E7F69635C21FC723FEF
9F7AFE70F1BFC33A7C4EB03996055E519C69CEDBFB394926DFF81BBFA4A4F6
47D850C3E3786F1788CAF338F2C926D766D2D1C5F5524B47DD5B47747F3D3F
F0594F89B7A7F683F02781B40BC36DFF0008268C97D14B6F2324F6D7D7D396
386520A32C56D6EEA4104673E95EDBFB17FF00C14DF40F8836165F057F6B6B
B8EDB51CAC3A6F8A642B145313F2AA5F370B14A3A0B8E2371FEB42905E4FC9
3FDB4BE240F8B3FB557C4DF1BC4E92DB5C6B33DA5B491B6E492D74E02CADE4
07FDB8A146FC6BE60AFE90C6E5B87C4E1E585C45352A7256716AE9AED63F2B
A55E709AA907692EA7F687E29F076A7E14B859B267B37398AE13A7A8071F75
BF9F6AF8ABFE0A67F01D3F681FD9C2DFE35787AD849E30F862924B76100DF7
1A5100DDA9E99F240172B9385512AA82CF5F9D1FB13FFC14B7C57F0261B3F8
55F19D26F177C342AB6F116FDEDF6931F4510973FBEB751C790C7283062601
7CB7FE8A7E195E782BC61A4DAF8E7E17EAB6DE29F02F8AA02A5A2612A61B23
0CADCFCA729246E03A1255D720E3F9F786BC30C4708E7CF19945E781AFEED4
86F2A6FECC97F3462DD9BDE316DBBDAE7D963B3E866584F6789D2AC354FA4B
BAF26FEE6D7C8FE697FE093DE013E35FDB2BC3DA9C9179B6DE11B0D4357941
1900AC5F65889FF765B8461EE2BFA26F135E1D43C41A85D6770699C291DD54
ED5FD00AF973F630FD906E3F650F8C1F1F3C446D88D0A66B587C313B9CEFD3
A5125DBC7B89666313B450331C16688B630457D0F5FD1E7C41F9D3FF000583
B6469BE0F6AC07CF7567AB464FB466CD87FE8C35E7DFF04B9F883A5EADAC78
E7F660F1949BF43F883A74F35AC4CC00FB545118EE1235C7DF96D8EF273C79
0315EBFF00F0571D38DCF803E0D6BBFF003EC75180FD6E21B47FFDA55F94BF
B38DDFC40D3FE3AF81F50F85B612EA9E27B5D56DE5B4B4898A79FB1B3246EE
3EEC4F1EE5958F0B19627806BFD35F0E78670F9FF8451CB710D2BC2AD9B765
1946ACE516DBD92695DF6BF43E42B632A61B3255E9BB34D356DF647EEFFEC5
FF00B3A78D7E1F7C3CF8B1119C68FE2AD62F2EF40B0BD953290A5807845E44
07CCCBE74ACC17203F94A32A0EEAFA2B49F0AF82FE0B7C3DD1FE07FC2FB616
7A1681088A46041926973BA4791801BA491C9795BBB1C70062BDC3C75E2C4D
0AD3FB374E602FAE0124AFFCB253D58FFB47B7E7F5F9E4924E4F24D7F97D97
E0A186A31A30D91FAA717F1462339CC6AE6589F8E76DB6564925F723CB7F6C
2F8567E3EFEC9DAD59D8C3F68F127810FF006B588504BBADAA379B180A0B37
996E645541F7A454F4AF85FF00E0919F0D45F78EFC67F1935084BDB786AC17
4FB538CE6E6F4F99214C7F124516D23D25AFD70F00EB034BD7E38A63FB8BD1
E4B83D32DF74FE7C7D09AD9F80FF0001FC37FB3B782B5BF0A782225962D4B5
7D475748CFEE947DA64FF478377CE42C50AC516EE73B4B639C57F40F0E78C1
5B05C1198F0C29353AB28FB37BDA32FE22F4F7569D79E47C455C02962615DE
CB7FD0F8DFF6E9FDA9A1FD90FE104FA7F87EEA33F163E20097EC614076B189
8912DE32F4022DC5610DC3CC738744703F9DFF0080FF00B28FED01FB516B6E
3E1BF87EE2FAD6494FDAF59BD2D0E9F0BB1CBB4B74E0EF7C9C944DF21EBB4D
7EE2FC53F833FB30F82FE276ABF1C3F6D8F187FC2D0F8897AE1E0F0D58826C
2C214E60B48ACD5F718E353856BA9238E53B9D90BB313E19F16BF6FAF88FE2
AD30782FE11D8C3F0D7C256E9E441069A152EFC95E02899151605C60858150
AF237B0AFE58C2D7CBB24C2430343682D96ADBDDB93EEDDDB6F56DB67EE1C2
5E1267FC4957EB14E9725397DB9E91B7F756F2D345CA9AE8DA3A0F08FEC9FF
00B18FEC43141AF7ED01AB27C56F891005922D1A18D64B4B793823FD118EDC
0CE77DDB6187CC910618AFA13F673FDA9BE29FED2FFB4AE8FA3054F0DF82B4
1B5BBBF3A45893B5D2388C117DA66C2B4BB64990850123CAA9D9919AFC699A
69AE267B8B876965958B3BB12CCCCC7249279249EA6BF58BFE0977E1D16B71
F117E245C27CBA7D9DBD8C4D8FBDE6179E603E9E547F9D78F83E20C463B1B4
E9AF7617BD9796BABFE91FD03C47E0FE4DC2BC338CC6C97B6C47272A9C96CE
6D43DC8EA96F7BEB25D1A3F56BC756BA778821BAD26D2647D6348862BC6841
FDE082E1A445247A39864DBEA50D7804104D753C76D6E85E59582AA8EA49E0
0AF1EFDA93E3B2FECEFF00B487C12F885A9CE62F0E78B6C351D175BC93B05A
096D648EE08F5B7926F33382766F55FBE6BEA2F887AFF83BE03786BC43F17F
C4922BD8D8C7BACADD080F2CD30C2451FF00B4EC76A91C2AE58F0091FB9711
F0CD5CBF0383CCE7FC1C442528BF3849C271F54D5FD248FE23CB28D4C5E216
128479AA36A292DDB7B7DF73E44FDB97E3743F05FE18C3F05FC2774078A3C5
B0B36A12C6DF3DBD8BFCB21CF63360C69FEC073C1C13F30FFC139348D33C3F
AE7C43F8EBE243E5E8FE04D0E5323B2F0A650D3CB22B1E331C36EE08F4719E
BCFC1BF11FE207893E29F8DF57F1F78B27F3F53D62732C98CEC8D7A24680F4
48D00451D8015F6B7C4CD4DBF67BFF008259DDC796B6D7BE31EA2B0229C6F1
05DB7CD803931BD8DA93EC65F7C57E1B96E2A598668AB3F86376BD3A7CEEEE
7F6D71B6454B83B80E59741AF6D5DA8CDF793D65FF006EA8C5C57DFBB3F26F
E10FC30F1D7ED9FF00B4A8F0F5892BA8F8CF54BAD5355BBC174B3B79A533DD
DC37FBBBC85071B9CAA672C2BF5AFF006DCF89DE16F0DE9FA07EC95F08156C
FC1BF0F628A1BB58981135E44BB562761F7CC392D2927E69D98B0DC80D7B77
EC73FB3078E7F64FFD917C59F14348D185D7C62F166966F44122FEFAC6D02E
E86DD54AB132C685A778B1FBC942C447C80D7E425D5D5CDEDCCB79792BCF71
3BB49249231777773966663C9249C927926BD1E35CCE54E9AC343ED6EFCBB7
F9FF00C13E3BE8C3C0B47198CA99D621A7EC5DA31EBCCD7C4D764BE1EEEED6
B13F52FF00E097FE0C8FFE126F1BFC55BF8FF71A1D8258C2C4705EE58CD295
FF0069521507D9FDEBF48745B9D2345B2D67E2878DAE56CF45D0219AFAE6E2
4076AF94A6477C0C93B07380324E00C9E2BC47F630F87F75E10FD95B44B68A
2316A7E39BB92FDF8E447310B1B13FDD36F0AB7FC0ABE33FF82997C79B9B99
B49FD8FBE16096FA62F6F36B696A8D24B7170E4496962AA992CC58ACEEA14E
58C401C865AFD83C0AF0D2BE7F8DC36554FDD8BF7EA4BF921BCA4FE564AFF6
9A47E3BE3CF152C5F11633109DE3097247FEDCF774F569BF99F979FB497C72
D77F689F8C1AE7C4DD677C305DC9E4E9F6AC73F64B08491042392010096936
F0D233B003757D75FB1CFF00C13EFC43F1A16D7E26FC5DF37C35F0EE2C4D18
73E4DDEA88391E56EE6380F794F2C388C1CEF5FA8BF650FF008276787FE1DD
9D9FC5CFDA8A18AEB515DB2D8F870ED96289872AD76012B2C9FF004C46635F
F9685B955FBEFC55E33D47C4D22C38FB2D843C456E9F7401D0B631938FC076
039CFEE1F4B4FA7FE47C0797AE18E0E6A75E31504E2F48A4ACB95F6FEFBBDF
EC27F1C7F32E0FF0FF00119954F6F88D217D5BFEBF0FBFB1FFD1CA4FDBF3F6
74F8116AFA4FEC89F046C3499963F246ADA9A2457122AF4F34C464B99D7B83
25D06F51935E211FED2DFB74FED7BE2D5F0278275BD40CB760B358E82069B6
D0439C334F71195758B9C1334C41242F24806CFECC9FF04FAF1AFC5ED363F8
95F15EF0FC3FF8711462E5EF6EB6C577776E3E62F02CB858A22BC89E5F9704
322C8338FAAFC71FB5CFC32F80FE1697E0EFEC5DA1C1A559C648BAD7E48B7C
93CA383247E682F33F612CD9007CA89B4291FDCFE2371F7873E1DC2585C9B0
70C4E3569797EF145F7726DFBCBAC61CBD549C5EFD7C05E1CE7DC5388F6383
8BE4EB2DA2979BFD356FA267B47C04FF00827CFC2BF824F078EFE3E5DC5F10
3C6EE7CE4B46065D3ADE423A88E501AE181CFEF27017A1118650C7EC6F10F8
CB55D7C9858FD9ACC7DD8633818EDB8FF17F2F6AE4FE1A7C4AB0FDA27E09E8
FF0014AC422EB562BF64D5A04FF96771081E68C7653912A0CF08FCF229B5FC
81C57E20E67C495D6619957751B5EEF48C53E918AD22BC97CEEC9C76433CB3
1153035A1CB3836A4BCD69F3F27D8F47F8636E8DAECD7D36163B381DCB9E02
9381C9FF0077757F35FF0011BC50FE37F883E25F1948493AE6A5777BCF6171
334807E00E2BFA11F1AF887FE105FD9E3E2578D03F97347A65C410374DB3BC
46288FFDFC996BF9FCF85BF0CFC53F17FC75A57C3FF07C1E76A3AA49B77364
45044BCC934AC33848D72CDDCF45058807F13E38A929CE95086AF576F5D17E
A7F617D163074B0D85CC336C435182E58F33D928A7295FEF8FDC7BAFEC8BFB
375C7C7DF1CBDD6BF9B3F0478736DC6B174CDE5ABA8F996D91F230D2004B36
46C40CD90DB037CFDFF0511FDB26DBF680F17DAFC2DF85CEB65F0A7C0EC2DF
4E86DC7950DF4F0AF95F6AD8B802245F92DD71F2A65B82E557EACFDBFF00F6
80F0B7ECE3F0BADBF619F80575B6E9E00DE2DD4A2204AFE7A867B766524F9B
7230D37384876423E52557E2EFD8F3FE09E9F15FF6A6B9B7F14EA01FC23F0E
A376F3B5AB98CEFB958CE192C626C79C7395329222421B2CCEBE59FA5C8326
8E0A8DA5F13DDFE9E88FC3BC5FF132AF12664E70BAA10BAA71F2EB26BF9A5F
82B2E977F1DFC32F857F10FE32F8BAD7C09F0C341B9F116B979CA5BDB283B5
0100C92BB109146A48DD248CA8B91922BFA3CFD8FF00FE0949F0DFE111B4F1
BFC7A36BE39F19458963B0C6FD22C09FBBFBB700DD4839F9E551183F763DCA
243F5DFC16F857F0ABE00E8517C2AFD9CF438ED9E60BF6ED5A5025B9B968F2
0CF713900CA412481C46B9DB1A0040AF56F186BD1E8B647C2DA4CCD2CCDCDD
DC31CBBB37505BFBCDDFD061471C0F3F23E31C366989A94F2EF7E9D3769545
F0737F2C5FDA6B7935A2D15DB7A7E6F8BCB278784655B494B65D6DDDF6F2EA
CCCF1EF8BC6AD31D234C7C58C07E665E92B0FF00D9476F5EBE9547C0D2E9BA
3B6A9E30D7274B5D3340B496E679E438489154B3BB13D02C6AC4D7075F3EFF
00C1407E259F835FB0F78861B594C1ABFC449E3D0EDC81B8F9579B9AE430FE
EB59C52AE7B338F5AFAF3CD3F997F8BFF11351F8B9F14FC5BF13F540C971E2
8D52EF5031B39730A5C4ACE91063D56242117D02815F657FC12F3E337FC2A2
FDADBC37637D388748F1D23F87AEB76E23CCBB2AD66401C6E3749126E3D15D
BD4D7C0DA1681AEF8A357B6D03C33A75CEADA9DEB88E0B5B485E79E573D152
38C3331F602BF597F67FFF008254FC639D6CBE28FC74F135B7C1ED0F4978AF
8492CB1BEA71794C1D24396582DB04021A490BA9EB1F6A4DA4AECBA74E5292
8C55DB3F6F7C67A3FF0062F89AF6C635C465F7C607F724F9801F4CE3F0AD1D
0FE1D789B5ADB20B7FB240DFF2D27CA71ECBF78FE58F7AF04F8C7FF0511F82
BE0DBE74F871A61F1D6BD0AF942EF06DACA22ACC3026752F260F3FBB4D8C0F
1257E607C5CFDAFF00E3CFC6513D9788BC42FA6E91382A74DD2F3696A51861
91F6B192553E92BB8F4C57F1157FA3E6490CCF118AC5E21CE9CA7271A74F44
93774A5377DB6B455F4DCFEB9E11F0EF89733A14F9A92C3C6CAF3A97E67E71
A6B5F3F7B951FAF9E3EF8CFF00B31FC0FF00361F1A78997C45ADDBEE074DD3
71733074C6519636D91373D269533E959FFB37FEDB9A5FC7BF8AD77F0DB4CF
0D0F0E6950E9D35C584924C249E6781D06D28AAA91FEED99B682F8DBF7ABF9
F7AFA17F650F189F027ED15E02D7CBF97136A7159CC73C08AFB36AE4FB0129
3F857EC9C25470394D4851CB30D0A306D27CAAF26BFBD37793F9B3F44CFBC0
1C04327C54EAD49D6C42849C652764A495D72C2364AF6B6BCDB9FBA1ADDF6A
F737D341ABDCBCF2C123210CC4A865383B4741D3B0AA563617BA9DCADA5842
D3CCFD1547EA7D07B9AF54D7BC1135EF89350D4AE654B0D25409E5B89080A0
6D0643CE00C104927000E7DABF30FF00696FF82957843E1CDB5E7C3BFD9763
8757D586F8AE7C452A896D2171F2E6D55862E5C1C91230F24601512AB71FD6
7C05E1C66FC4B8BFA9E5345C9FDA93D2315DE52D97A6ADF44D9FE7B62B194E
8C79AA33ED7F8ADF143E0AFECC5A047E24F8CBAC24BA94EA5ECF48B6026BBB
9233C470E4646460C9214881E0B648CFE1D7ED37FF000501F8C1FB41FDA7C3
3A4C87C1BE099018C6976321F36E6323691797002B4A082731A858B1805588
DD5F17F8AFC5BE27F1D7882F3C57E32D52E75AD63507DF3DD5D48D2CB21C60
65989380000A070A00000000AFB37F61EFD925BF686F16DC78BFC721AC3E19
F849BCED5AEDDFC94B978D7CCFB224B91B46DC34EE0831C67AAB3A1AFF0043
3847C12E18E00CBA79FE79255AAD3577392F762FA2A707F69BB24DFBCDEAB9
6ED1F295B31AF8BA8A8D156BF4FF0033DC7F612FD9ABC35E1ED067FDB0FF00
68255B2F06F86834FA35A4E818DEDCC676ADC946FBCA927CB020E64970DC2A
0DFF0072E9BFF051BFD9EBC652C5178EFC37AC69122E42CA152E62453EAD14
8927E02335F057ED7FFB4C47F19B5FB6F04780D069BF0E7C298834CB5853C9
8E7312F9627318002A85F9614C7C89D816603E38B4B3BBBFB84B4B181EE679
4E1238D4BBB1F40A324D7F975E3578FB99714E7B3C7DED4D7BB08EEA31BE89
7E6DF5777B592FF413C2FF00A3065F4F2753CF549569FBDA3E5E45D9F4BF57
74EDA2E8DBFE8A7C35F15FF65FF885B57C1FF11ECADEE253F2437D27D95F27
F8563BA10BB1FA135E9D73F0D75A110B9D2E6835081C028637C1653DC67E5C
7D1ABF9D4B1F813F1BB5345934EF87DE21BA46E8D1E9576EBCFB88C8AFA0BE
1CFC08FDB9BC2522DCFC3BD17C43E1FC9DC512E858A37FBF1CB2A2B7D194D7
C160B8B7132D2A61DBFF000DFF002D7F33C6E26FA3CE49453960F37843CAAB
87FE949C6DFF0080B3F6025B0D7BC3D729732C1359CB137CB26D2067D9BA1F
CEBCF7E3F7ECF7F0E7F6C3F080D27C44B1E8BE3BD32161A66AF1A0DE3196F2
E41C19212725A3272A496420939F32F87DE32FF8296786C476FE2DF87F63E2
FB3180C6EAF34DB4B92A3B0920B944CFBB44C6BEC9F059D73C651A4BE38F86
B79E05D4946FF352FEC2E6157EBF2C96B39766CF76847D6BF45E12E34C5E03
194F1F97CA74AB41DD3E56BEFD2CD3D9A7A35A34D1FCF1C53C053C0C5A9E22
8D6877A75A12FF00C96EA7FF00929F881FB0CF82BE207ECE9FB7A69FF0ABE2
069ADA76A7A9D8EA562F8F9A19A016EF771CF0BF02489CDB0DAC3BE5480C18
0FDA883C2D36B7E32BFD39014B686E24695C7F0C7B8E00F73D07E7D01AF4ED
73E19F847C4DE24F0BF8CF5DB35BAF10783A69A6D36FF01278BED10BC13216
5C6E492373B90FCA480C006504793FED21E1FF008C5ABFC3EBDF08FC07B386
2D5BC4AF225F6A335CADB9B5B76003F964E58C9203B14A8F91771C86DA6BF4
AF19FC4F5C4D8AA19B4A8F2D58D28C2A25AA94E3296B1EB67171D1EDAAD52B
BF93E17C8954C44306EAC61194BE293B28AEADBF2D7D765ABB1F93FF00B7AF
ED296FF12BC4F1FC24F025C0FF00843FC2929595E26CC77B7D18285811F7A3
87944ECCDB9B241523F3BEBF41E2FF0082687ED1D20CBCDA1C5ECD7B27FECB
09A7BFFC133BF68C4195B8D09FD85ECBFD6015FC938FCBB30C4D5956A949DD
F97E07FA55C23C67C1F92E5F4B2DC263A9F2C16FCCAEDF593F36F5FC1688FA
E3FE09FF00A9BEB3FB2B78934776CBE91ADCE107A46D1DBCFF00AB17AFA022
B89EDCEE82468CFAA923F95705FB207C01F88DF00BE1AF8F341F88696AAFA9
C82E6DBECB3F9CA4240CAE4F031C81DABB7AFD3B22A738E0E9C6A2B348FE15
F1631785AFC478CAF839A9D394AE9A774EE93767EB73662F116BF09063D4AE
463B79AF8FCB38AF47B6F1F5BF82BC351F8BBE256B42CB4EBDBAB5B0B412AA
EE92E2F2658610A15773177600760BB9DBE5048E3BC39A2D8496F75E25F12D
C4761A06931BCF75713B88A258E252EE59DB01515412EC4E00FCC7E09FED93
FB66EA3F1EFE2D6992F84A592DBC05E0ABC49348B7C18FED32C4E375EC8870
77381889586638F8C2B3499FDEBC18F08319C5B983A34EF1A14D5EA4FB768A
E9CD27B76577ADACFF002BCC7308D085DEEF63FA4FF1C7C39F873F1234F7D2
FE2178774DF10DAC6A7E4BFB68AE3CB07BA975250F7054823D6BF3ABE2FF00
FC12CFF673F13B3DCF81B52BCF87BA84E7F76AAE6F2C0BB76F2AE1B7E49E8A
93AE0745C62BEECF16F89A5F0C78D2C3525264B1BCB4449907F128773B87B8
DD91F977AF873E37FC7BF14FEC4BE39D32FBC6565278CBF678F1DCA63B7923
1E65EF86EF5C190DB465BE59ACDD4349044CC1A350F1C4552148DFF17F0FBC
79CEB098AC660721C64A8D7C34ECE0DB7069EB19387C2D4969769D9DF47A5F
DDCC32084614AB578DE1357BADFCD7CBF13F2F7E317FC1363F696F856B3EA3
A3E951F8E3478B2DF68D14B4B385EDBED182CD9F511AC807F7ABCBBF66EFDA
B3E2DFEC9DE2D95745F32EB45927FF0089AE817A5E386665C2B9008260B800
6048AB9E0075751B6BFA42F0DF892CFC43E12B0F89BF033C471F893C23A947
E6C3E4BF9F18507E650ADF3295395742164420AB0041C79D7C45F037C00FDA
0ACFEC5F1ABC1D6D2DF94D89AA5BA98EEA3C0E0ACF16260076425D3D4115FB
BE43FB45F2EA937C31E2865AA1CEACE5A724D7F3465A45F7E6BD2717D148E4
ABE1E56943EB595D4E74BEF5E4D6FF009DCD6F86BF113E187ED35E0BFF0085
8BF076F01B88F68D434C976C7756B330CEC96304856383B58128F82558E0D6
0FC78F82FA7FED4DF03756F85FA90483C55A28377A2DCCB95315DC2084573D
42382619720E1583E0B28C7C457BFB07FC73FD9BBC5F17C68FD8C7C5EBE258
AD73BF4BBC744B8B8B7C82F6D290520BA8DB1F302617040318F315587E83FC
13F8D1A2FC76B49356B3D327F087C48F0D6C4D73C39A82B43750B11839570A
CF149FF2CE5DA3B06008C033EC8F0995E229714F0463557C2C64A69A7FBCA4
EFA2A91D1B83D94EDCB2F85EEB9BCB84E524F0F8A85A5B7AFA79F91FCB4E83
E20F1E7C1EF1E47AC6877375E1BF15786AEDD372E639EDEE21629246EA7DC1
4746041195604122BFA2DFD98BF69FF06FED93E10FEC8D5BC8D0BE28689003
736A0ED8EEA35E0CF00392D1313F32F2D131EEA416F853FE0AA7FB3BC5E19F
16E9DFB447852D7CAD2BC5ACB69ABA2AEDF275344263958678F3E242180181
246CCC4B495F9C1F01F4EF89BAB7C60F09E9DF06E79AD7C653DF4634E9A125
4C5275691CE08F29537197702BE586DC08C8AFEC7F133C38E17F17F81D62F3
08C60DC1BE77FF002EE51F8A327BF2C5A6D3DD6938EFAF8795E6789CAF189D
16EE9FDFFD7FC03FA88D020D37C076BAFF00C43F1FBFF65E8FE0EB69EEAEA5
94122310466491F033BB6460B0C6724AE33C5796FECCDF1C75CFDA2BF668B8
F8B9AD06827D475FD4DADE1C8CDB5AC77ACB6B0E54004C509452C07CC416EA
4D7C09FF000577FDAA27D2FC31A5FEC9FA0EA2977ACDD476B7DE2BB9B70238
C220125BDA797972866902DC3296055162196591B1EF9FF04CA62DFB04C40F
F0EB77E07FDFF8CFF5AFF227C3AF0EF07C3397FF0066E125CCB9A52727BC9B
7A37E914974DAF6573F45CEF39A98EADEDAA2B6895BB7F4F53E99F8D7F05BC
0FFB5DFC387F00F8D36D8F8A34D579747D5950196DE72064F6DF1BE009A2CE
1C00C30EAAC9FCE5CDFB3AFC4AD2FE3CD8FECF3E20D3DAC3C4D79A941A7818
2D1159DC05B946E37C3B0F981BFBA0E704103FA4A86696DE549E0731C9190C
ACA70411D08AF57D23C1BE05F889E29F0F7C5AD73448A4F18783D2E2D6CEFC
0DAEA973194917238652AC480D9D8598AE37367FB27C19FA4363B8570D5F01
513A946519382FE4A967CAD5FEC4A56E65FF006F2D6EA5F2398E531AF2525A
3EBE68E1BC6F67A4F85B4EF0FF00C37F0EA793A5F862C60B586307EEAC71AC
71A9F758D579F7349E13B55D47C21E37D2DC656EF4A9A323D43452AFF5AE4B
5DB9BDBCD66F6E751431DCC92B9746EA873F779FEEF415DF7C3700D978914F
4362D9FC9ABFC58E0BE30AF9DF8A10CD6B377A952A6FBD9427149F9D92BF9D
CFE83CD72E8E1B217423D12FBEE9BFC4FE4D3F63AF8487E37FED31F0FF00E1
DCD07DA2C2EF538AE6FD48CA9B1B2CDCDC86EC37451B2027BB01DF15FA71FF
000504F888BE3CFDA3B56D3AD25596C7C27043A44451B2A648B32DC123A065
9A478DBFDC19F418FF00F0492F0769FE01F0D7C59FDAE3C5106EB0F0AE9D26
97619C0F36508B7774A85B00390B6F1A9EFE611F5F93B5AD6351F10EB37FAF
EB131B9BFD4EE25BAB895BAC934CE5DD8E3B9624D7F6F71CE379694282EAEE
FD17F5F81FA3FD153865D5C7627369AD29C7923FE296AFEE4ADFF6F1069F7D
7FA65FDB6A3A54F25ADEDAC892C32C2C5248E443956465C10C080411C835FD
42FC00B9F8B7E20F82BA34DF1A631A6F8AAF2D9848D080972B130C452CC8CA
563B82A773AE08071950728BF955F05BE117C3EFD947E1D1FDAD7F6A91F649
ACC2C9E1FD0E4506E5EE586E85BC96C6EBA7C6628CF108065930CB98B47FE0
9C5FB5AFC42FDA7BF6AAF8A5AE78E2E3C8B7BDD0A09B4DD323726DEC2D2CEE
C22471838DCDFE919924232EC73C0DAABB70864F56845D6AADAE6E9FABF3EC
79DF48EF1232FCD2BC32CC0C233F64DDEA79ECE317FCBFCCF66D2B6D77C3FC
42FF0082557EC79E0FD64E83A97C6DBEF095F3209521D6A7B0DCD1B74752C9
6A1D7208CAF19047506BCB24FF00825BFECD775215D33F6AAD0C0FEEB47612
B7FE3BA92FF2AFDBAF8F9F077E1CFC7FF0FC7E08F19A082E668CCFA3EA9105
32DBCCC307CB6FE207E5DE84ED75231860AC3F9E2F8D7F043C75F01BC65378
3FC6F6BB49CBDA5DC609B7BC841C092263D7FDA53F329E08E99ECCF339C560
DF32A6A507D75FC4F9CF0AFC33C8B8929BA12C5CE96263BC1A8BBAEF1DAEBB
ADD79AD4F625FF00825AFECE16AE06A3FB556858F41158467FF1ED49ABEB5F
D98FE0D7ECF7FB1EF88A4F10F863F6A15D474DB9E6FF00484B8B1934FBDC0C
02F0A34ECB22E06D9232B20C6DDC54B29FC89AEAFC09E13BEF1E78D741F056
9B9FB4EBB7D6F6519033B4CF22A6E3ECB9C9F615F3CB8E6BC9A8C69ABBF53F
63A9F455CAA8C1D5AF8D9F2C536F48AD16AFB9FD4DDF6AFA278F7C2963FF00
08F6A90B47E23B64BCB02F946B9B71B24DE88FB5F6E19093B780C33D45782E
A5A5DFE9174D67A8C2D0CABD8F423D41E847B8AFC9CFF82A0FC53B9D07E36F
817E1E7C3FD424D28FC30D2637B79ACE5686E2D2EEF7690AAE843295B786DD
94820E1ABD43F66EFF00829EE93AF5ADAFC3FF00DAAED95BF821F125AC5C03
8E0DDC110CA9EBFBD857072034606E7AFED4FF00896ACFAAF0D61788702BDA
BA91E69534BDF8ABBE5715F6D38D9D97BDAD9296E7F05D7CE70EB133A51BA8
A7A37DBCFCFF0003D03FE0A93A35FEBBF037E145A6936D25EDFDC6B49696F0
42864965927B570A88AA09666650001C935EB3FB1D7ECAFA47EC97E05FF84D
7C6904579F13FC4706D90643AE9F0361BECD1B0EE0E0CCEA7E660154955DC7
F408F853C21796FA0EAFA8410DFAF87375D69D73361840CF13466653F74379
4EC377604E319AF863E29FEDDDFB1EF80B52BC9751F10DCF8E35A81C235AE9
30B5C22F3D125730DA955EE04AC7AF04D73E4DC5DC459AF0CD1E0DC870D394
62E4EAB826DCB9A4DC62DAD2305BBBB577A6CB58A987A34EB3C45592F23D80
AEA7AE5F492AA497975336E6DAA59893EC3A0FD0575B07802FA0B39754F11D
D41A3585BA992596775011072598E42A803A96618AFC82F895FF00056FF1ED
EC32E93F05BC19A7F852D0EF45BABE6FB6DCE0FDC9122411431B0EA430987D
6BF373E27FC77F8C5F19EF3ED9F13FC5DA8788007F31209E52B6B13E31BA2B
68F6C119C7F7116BEEF837E871C438D6AA66D52386876F8E7F745F2FDF3BAE
C72E238868C74A6AFF0081FD10DD7ED7FF00B2EF873C7BA0FC34F02DEC9F11
7C59AEEA36DA741FD9C04D6714B72EA8B24974C441E5A96C9687CD65C723AD
7DA3E3BF1345A4784BC477D67A5DD788E7D1ED9A59F4CD3DB17B3C7B37B25B
82C9BA568F3E5AEE5DED85DC09C8FE70BFE0983F0F7FE136FDAA74BD6A78BC
CB4F07D8DDEAAF91F2F99B45B423EA1E70E3FDCCF635FBA3178D67D3FC7577
E2089BCDB79E664751FC7003B57F10A011EF5FCCFF004CCC7E41E1966B95E5
186729AA96F6D393BB49F35DA4AC928FB8ED67EEC9EADD8FADE0CCB7119A42
B555A38ABC6DDFFE0EBF33F2FB4FF0DFFC136BF68A267F85DF13E5F871AF5D
0E2C35990C51ACAC73CADF95F35CFA457647A56778CBFE09B3F1BF4981B52F
016A1A578D34F7DAD6E6DAE05ADC4A8DFC5B67C4207D276C8AF9A7FE0AA3FB
2541F09FE20C5F1F7E1E5B0FF841FE204E64B958BFD5D8EAD203248A063E58
EE8069539387122E154203F9C7F0FBE367C60F84F309BE1A78D357F0CF3B8A
585ECD044E7FDB8958238F66522BF36AFC3580C4C554846C9EA9C5E96EEBA1
FAD70FF8F9C5196DA9BC47B48AE951737FE4DA4FFF00263F403C65F013E357
C3E370DE30F04EADA7416BCC970D6923DA81EBF688C34247D1EBF60FF626F0
E7FC21BFB22AEAF20F2EE3C5FA95CDD027EF140E2D80FA14B7661FEF67BD7E
33FC3DFF0082B67ED8FE12686D757D4B4CF1A4608454D534F41211D000F646
D9CB7A16DC73D735FD22F8DF53D5E6F0E787ACB5E8A2B7D526B74B8BE861CF
971DC1401C26493B439703249C0EB59E53C2F4F095FDB4677D2D66BF5FF807
A5E2178F38BE21CA565B5F0EA0F9949CA32766927A72B5A6AD3BF33DAC7E60
7FC15B74737BF0CBE0FF008A393F6296F6D0FA66EA0B77FF00DB73557E08EB
D27EDADFB15EA1F07EFA6F3BE227C2910CBA70270F776D0C6CB699002862D1
6FB63D4865491CE5EBD03FE0A9112CFF00B27F812F48CB45E25B7881F66B2B
DCFF00E802BF21FF00654F8F1A87ECE7F1B741F88D0977D3158D9EAD027267
D3AE0813281C65930B2A0C805D173C66BFD22E12F0DA1C63E12C72EE5BD6A5
2AAE977E652949C7FEDE526BB5ECFA1FCE195F1257C9F3AA598619DA50717F
777F2EFDD5D1BBE0FF0009EA9E34F1968DE07D35766A1AD5F416116F07092D
C4822058750149C9F400D7EE2FC55F843E10F197C6AF095FF8E3CAD3BE0DFE
CD1A20D42513F16D36AAD123C31483F8A3B1B48229DFD4C889860CE2ACF83B
F65AD26DBF6C2B6F8FFE16315CF82355D326D72D258191A03A95E2888AAE33
98E4499AE518719E070057E767FC15BFF6C48358D4A6FD95BE1ADDA7D82CA6
4B8F14DCC0789EED0878AC770E088485926EBFBC0899531BA9FF0037386724
A983F6AAB2B4AF6F923FA6FC7CF12A867F2C0C7072FDDC69F3B5DA73DE2FCE
2A297CD9E29A37FC14F3C5E7F6DC6F8EBA9497117C3ABCC686DA41E7C9D044
99497CB5241BA473F686209258B441BCB231F48FED59FB302D87C65F0CEB7F
0AD63B9F07FC5BBBB76D326B61BEDA0BABD652D1AB2E5444E1C4D163036165
5188C9AFC02AFEA67FE094AFF173C41FB3BDB681F197C2F2AF873C3B7915D7
84751BF5512CB038762228DFF78120627C99B1B592428A76A57A99C6510C65
3509EE9DD3FCFEF47E7BE1B78898AE1BC74B154358CA2E328F47A7BAFD62EC
FD2EBA9FA1FE27B5D63C07F0F20D23E1768EBA9EB5A7D9C7A5E8B6D29D96D1
B0458E37B971809044A81E43F78AAEC8C191955BE50F83BFB3D7C3BFD99AE6
FBC6DAF5C8F1D7C5DD79E5B9D475AB951949EE89797C95FF009628C58E48FD
E499E4852157EABF891F157E19F81CA68DE32F881A37836F6E63F355350BEB
6B6B878492BBE249A44382548DC14F20E3915F2CEA7F1DBF634D319E4D53E2
F585C3924B35BDC2DC124F53FBA8E4CFEB5D3C5188F121E4F5326E06CBA7CB
5EDCF592DE2B45156BB696AECD28DDDDA9DA3CBF2596FF0066CABFD6733AB7
69EDD5BEADBFE9FA75E9F58D6B52D7AF5AFF005398CB2370074551FDD51D00
FF00F5F5ACAAF2FD47F6D3FD83B410CABE2FBCD7245EAB058DF7E8C60850FE
06BCDF55FF00829A7EC8FA1964F0E78335ED665EC64820488FE335CB30FF00
BF75FCA1977ECEAF15F37ACF118AC23529BBB73F69CCDBEADCA093FF00C08F
D0A7E28E51423C94AF65B5AD6FCFF43FFFD2F10FDA17F6AEF899FB42EA2D16
B73FF65786E17DD6DA3DB39F2131F75E66E0CD20FEF30C0E762AE48AF98ABF
40746FDA6BFE09A1FB462ADA7C43F0BDDFC1CF10CE027DAAD63F2AD03B1CFC
B25A2BC0727ABCF6A9F5AE975FFF00827ACDE2AD15FC61FB377C41D23E2168
AFB9A3413C6B2118CAC69710B49048FEA5CC207B57E4F9B70CE3F9DD597BFE
6B7FBBFC8FF427C3EF1C784561E181A0BEAA968A32568FFE04AEBD5C9A6FA9
C57EC03F1C47C2FF008BA9E0BD7670BE1BF1C6CB29839FDDC579922DA539E0
066631376C38278515FAD9E29D11B40D6A7B0C1F2B3BE227BC6DD3F2E87DC5
7F3D1E3DF851F13FE136A2B67E3FF0E5F68130936C72CD1110C8EBCFEE675C
C7263D51CD7EF4FC10F88E7F688F801A0F8D0B79FE24D18FF67EA8A3EF35C4
4155DC8FFA68A526F41B8815EDF0663E4B9B075746B557FC57EBF79F967D26
38468D474789700D4A152D19B8B4D3697BB2BAEE972B7E51EE790FEDDDAFC9
E18FD95B4AF0AC1CDD78BB54B689A35FBCF1465AEB38EF868E21F522BC08DE
5BFF00C13C7F6754F111D3D754F8F7F1502D8E8BA6A4667B881A4DBB231180
59842595E5551FBC9CC717202B0FD3CF167C1BB1F1AFC4FF000678AFC431AD
C68DF0F6D659B4EB520112EA770C8AB2B8271FE8C90AB479FE370C08D841F3
C1F0FBC21E0AF88F7FF1BBC79E5F8ABE285FC660B391FE6B7D12C3911D9D8A
B0FDD20563E6CD812CEECEC76238893A33ECC303963AB9C66951429C1249BF
D16EDB77492D59F91AE2BACF87A870D6589DEA4A552AB5D5B768C6FD946319
49F7B2E8EFF991FB2C7FC13322B5BA1F1FBF6DB9DB51D5B50B86BF8FC3B349
E734B3C8DE679BA9B824CB23B92C6DD4EDE9E73302F10FD42D73C5B7DAF25B
F87741B61A7E9510482DECEDD4282AB8544DAB8180300281B4703B66B99D6B
5CD4F5FBD6BED52632C87803A2A0F451D87F93CD3FC67F10FC21FB347C2AD4
3E367C40C3CCA9E56956208596EAE6553E54699CE1A4C124E0EC8C331CF4AF
E56A5C5DC43E28E7D4B85B87212A7879B4A56F8E516ED795BBECA09D9B7EF3
6936A6194E1323C33C6E2ED2A8B6ED7F2FD5FDC6FF008A3E37FC04FD99A4D3
3C2BF15BC5B0E83E20F11C2D32E219A77540DB0337931C82240C4856930AC5
58F45205AF0CDD7C2BF89AD24BF0CBE21693E2597EFBC76D770DCCABBB9FDE
089CBA93FED2035FCB27C56F8A3E2FF8CDE3ED5FE23F8E6EFED7AB6B12991F
1911C48388E1894E76C71A80AA3D07249C9AF5CFD9B7F64DF8B9FB4BEBC2DF
C13666C744B5902DE6B574192D2DB18242B0E65971C88D3279058AA9DD5FED
FE0FE845C39C37C314215B31786F6305CF26A32A69F5B2F764DB7D799CA72D
6D7763F07C4F15E23158995494799C9FCFFAFC8FE9626F873E2682E2388C2B
2C6EC14C91B0200271920E1B03E95E15FB5AFEC4B79FB5D78DBC11A7F8A7C4
C7C3FF000EBC176B331B6B105F50BDBCBA65571990186248E2863D92112365
E41B147CC7E98F823F07EC3E02F8093C372F8A357F133C0824BABFD6AFA6B9
398D79F2A391DA3B7880CE123038FBCCC466BF30349FF82A4F8C6C3C4BA90D
67C2567ABF87DEEE73662291ECEF23B56909896463E746ECA980708B923AF7
AFE1AE24CC30380C4BA50ACE74EED465CAD7325D7975697AEBDEC7EAFC15E1
D66FC410AD2CB69293A69732E64BE2BD926EC9BD1F53EF9F04FECD3E1BFD9E
7C35FF0008F7ECC1E14D03C3B793C7B2E759D58CF7378F820E64DA3CD9C1E4
853711A237DD4C715E03E37FD8C353F8A7AA2EA7F1DFE39DE6BF2C67725ADB
DBC3676F012307C984CB246871C1658C13DF26B73C29FB6C7ECB9F15658A0F
105DDFF83F54988502F918C45CF65962334407BB84AFA7F52F857A8C4A65D2
6E92E979211C796F8EC01E413F5C5795ECB098E57E6E75DAEEDF349FE67AAB
1BC43C2B5153F63F57A8EFEF3A71727DF967252D3BF234BB9F1F695FB08FEC
8DA290351D4B59D6DD7A89AE76A9FA7D9E08B8FC7F1AEFF4EFD9C3F637D088
5B3F87E6F197F8E79AE6704FB89AE08FFC7715E81A8E8BAAE90FB352B5920E
700B0F949F661C1FC0D6656D4F25C243E1A51FB91E6E37C4EE22C47F171F57
E53925F7269162D3C19FB3A68C07F63FC29D0CB2F4696C2D4BFF00DF4D1BB7
EB5EEDE0CF0CF85A4B55D42D7C1DA6E8B1F061F2ADE15723FBC02C6B81E9EB
FCF8EF0D7866C74FB13E2AF1591159C40345137590F62477CF65EFF4EBE35F
B61FED2B77F00FF661F12FC518A5FB16BBAD8FECBF0E43C6E5BBBA5658A5E4
302D12092E0823691185EFCF1CB34C153C6C32E825ED65172B24B48AD399F6
4DD92EADECAC9B5E157CC330AF49D7AD5A4E37B5DC9BBBEDABF9B3EA3F1678
8FC017173A77803C512E9F7971E2D82E1EC2C2FC2B5BEA22D7CB6741BD5D1C
8F311B6E0B15CB2AB056C7E3AFC79F8D3FB247C18F1749E08FDA63F6577F0E
5F4C19EDEEF41B7B19ACAFA207065B6B98DB4F2E39190555D4901D54F1581F
13B5893C5DFF0004DEFD9EFC7F14AE6FF4796DB4C49D49F32316B0DCDB1218
72086B34E73D40EF5A7F0CBF691F867FB44F8193F673FDB3ED62D4F4FB9C47
A7788A52127B79B1B6279A6C66295738172382389C152ECDEB6038FF001796
632586A1889D2BD9A7194A3D3AD9AD7CCFBFC2F83B8ACC78769E7B972F68D3
929C2D792E56F58F756B5D6F7D55D3B2F258FC4BFF000472F8816A267B9F10
7C3A9E6FF966C9A8C8E84FFBABA8443F3C7E15FA95E05F147EC27E21F851A5
FECFFE0FF1F7876F3C32218E14D321D763B5BABAC1F318CA229A19DDE47F9E
5181B989DC3A8AFE717F6CAFD887E227EC93E2759AECB6BDE06D525234BD6E
24C23672C20B9032229C28CE33B6400B2138654F892BED78838EF3ACDB0D1C
1E698CA95A9C5DD29C9C95ED6BEADDF4D35EEFB9F9160A3F56AAABE1FDC9AD
535A34D6CD35B33FB33F187C19F0DFC3BD2A0D47E087C05F0A78DA78943462
E6F2DEC6E438E8566B8B3B807FDE3283FCEBE11F8B3FB68FFC1433E16432C7
63FB33DAF87ECA1CFEF6386E75CB6894776974D923880F7240AFE7D3C19F14
3E267C389649BE1E78B757F0BC931CBB6977F71645CFFB46074CFE35FD2FFE
CBFF00123E3FFC0CFD9D6E7E39FED9FE38BDD493558635D03C397505B2DF7C
E3744659BCA5B86B8980C84772228F2F20DC488FE29C695083959452F91EE4
6B6639A6221439E756A49D926DC9B6FD59F949E23FF82B77EDA57B34B6F06A
7A56812A12AC96DA544591870462E8CC411E86BC9354FF0082937EDB9AC67E
D5F146EE3DDFF3EF67616DF97936E95FA957FF00B727C14F8B78B1FDA3BE07
E95E2089810D790A41757083F84469731ABA9C71B96E14FA5701A9FECB1FF0
4C7F8EC865F875E33BFF0084DACCCBBC5B5ECCCB6B1B376717FBE3639FE18A
EC7B718AE0C2F1060EB690A8AFE7A7E763EBB3FF000838932D4E589C149C57
58FBEBE6E37B7CEC7E5C5E7EDBFF00B5E5F9267F8BBE235CFF00CF2BF921FF
00D1656BD43E0378F3F6FAFDA5FE20DAFC3CF863F143C5F777B2E1EE6E5F5C
BF8ED2C6DF3869EE64590EC8D7D81663854566214FD3FAA7FC117BE34FFC25
5A55BF853C71A16B7E12D426512EAD89619EDED8F2D37D93E7590EDFB8A939
DCC406645CB8FD91F879F0B7E1D7EC93F0FE0F84FF0007B4C7B59640B25FEA
93AE6EAF67C60CB2C9B46F739E0001230708076F2F8D38D30390E5F3CCB1F2
B423B25AB937B24BBBFB96EDA47C46599556C5D754292D7F2F5377E1EE8D75
FB3CFC3EB7F025E78D759F88BE2C7024BFD5F5CBD9EF1CCE47CC638E692458
631FC112938182ECED966E23F68AF879E33FDA77E0CDCE8FF0D7C67AAF823E
22680AF7361269BA8DC585BDEB600682E9219115E29B000720B42F861F2174
925776918BB92CCC7249E4927B9ABFA4EA979A2EA10EA560FB2684E47A11DC
1F504706BF8572DFA50E6DFEB02CC314BFD95FBAE92D946FBA7D66B7BBDF6D
15ADFAC57E02C3FD4FD8D3FE26FCDDDF6F4FCB7D4FE537C4BF16FF0068CF0F
6BDA8786FC57E38F14596ADA55C4B6B776D73AADE89619E1629246EAD2E432
B0208AC58FE3AFC6F84EE8BE2178890FAAEAD763F94B5FB97FF0546FD936C3
E297829FF6B7F8596406B9A2C0ABE27B48932D71670A85177F28C992D54012
123E6830D9022C37F3BF5FE84E5B98D0C661E9E2B0D352A7349C5AD9A7AA67
E355E84E9CDD3A8ACD68CFE927FE0927E3AF887E3AF833F16752F1EF89B54F
11ADB5D4105A9D4AF67BCF27FD16469047E73BECDDB9776DC67033D057E89F
85FC3126B92BDD5DB8B6D36D4169E7621542A8C9009E3A724F40393DB3F0FF
00FC11DFC1463FD92FC417D759887897C4978EAE0726DE0B7B68303FE06920
CD7CF9FF000502FDAFFC5DE2082F3E077C2BD2B50F0FF81AD898351D465B69
AD9F542A70D1465D54ADAE7EF1EB377F9387FD57C2EF0CB1DC5399C72FC235
18AD6737B463DFCDBFB315AB7D926D79D8DC6468439E4713FB7DFEDBB6FF00
152497E077C1ABAF27C03A6384BDBB84903569A26C80A7A9B646195FF9EAC3
7F20293F961455FD2B4F9F57D4ECF4AB6199AF668E141FED48C147EA6BFD82
E07E09CBB86F2C865B97C7969C356DEF27D6527D5BFC1592B2491F9FE27133
AD3739EE7F5BDF11599F4EF0CC927DF6B0427EBB56B93BEF07F84BE3A7C32F
10FC02F88D199B48F10DB3C70C831E641283BD24889C812452012C79046E5C
1041C576BF177643ABE9DA7C4311DBDA2EDFA1661FC96BCAEDEE26B49E3BAB
7731CB1307461D4329C835FF0022BC77E2156C8FC48C666D85F854D2947F9A
3CB1528FE175D9A4FA1FD759564F1C5E4B4F0F5376AE9F677767FD743F9E6F
877F19FF00682FF826C7ED03E21F01F982F2DB4ABEF2757D1A676161AA5BE0
345711704C4F2C2564866037A8203AB2EE8CFF00439F0B7E26FC2AFDAC3C02
3E297C14BB06EA3DABA9E932ED4BBB4B861931CB18276B1C1DAC3292004A9C
835F107FC1567F67D83E2FFC1ED2FF0069EF085A6EF10F82E3169ADC71025A
5D31DFEF900124DACAFBFB62292466384007E16FC05F8FBF12BF66FF008876
5F123E18EA26D2FEDFE4B8B7932D6B7D6C482F6F7318237C6D8F50CA70C8CA
EAAC3FB8B88386F27E2DCA230C42E7A55129424B78DD6928BE8FBAF934D5D1
F94E0F1D89CBB12DC1DA51766BA3F27FD7A1FD5EE9BAB6AFA05D99B4EB892D
265386038C91D994F071E8457A259F89BC1DE25D674DD6FC63A6C76BAF6979
5B4D5ADD4A4D12BFDE8CBAFCE237E37C64B46E7EF2F02BC7BE0A7C6BF86FFB
65FC345F89FF000CF163E23B10916B5A2C8E1AE2D2E0A93B5B006F47C130CC
001228208575744B4C8EAE63652181C104720FA57F0B62F32E2DF0CB35FABE
16BB7465771BDDD3A917BE97F765ADA4934FCDC5ABFEB34A965F9E50E79C7D
E5BFF327EBD576BE9F33E93F8C7F0CBC37F1DFE12F887E1B6B1223D8788AD1
A38EE17F78219C61E09D70464C52AAB819C1C60F04D7E3EFC3FF0008787FFE
0991F0275BF8F5F1820B6BCF8B9E2512E9BA0693BD65F2CE784050FDD38135
CC808DB1848D4891F6BFE9ADC78BF43FD9FF00C05A87C4BF899A9BE9DA6AAE
D86C54832DCCCC3291C7192374CF8F9471B54167214311F94BFF00050FF84E
3F6BAF83FA1FED8FF05EFAEB545F0C58B5A6B5A1BC8646B3823632CD24710F
B92C05B338031243B251F2AE5BFD29F0CBC6ACF2BF0B4F2AAB07878E26D39D
36EF2B2D2EB66A33F75C9357B4527A5EFF0095E73C1B5295F30A7173A31972
7B4B7BBCD6BDAFB5D79687E1278C3C5DE23F1F78A756F1AF8BEFA4D4F5BD72
E65BCBCB9931BA59A662CED8180064F0A000060000002BFA6EFF00826ADB9B
6FD80F4D91B8FB56AFA838F7C5D84FFD92BF96EAFEAEFF00610D3DB44FF827
CFC3585D7126A136A13B7B89751BB753FF007C05A93C23DE238DE59162894B
3B90AA07524F0057CD5FB7CFED45E20FD98FC35E08F879F0C6FD2D7C5F7F73
1EAF7AD80E16C6D9FF00D5C8BC1D9753029C758E2914E322BEC4F0E4BA2F86
B4BD5BE2478B6E16CB42F0D5BCB773CEE09555850BBB60727628CE0724E31C
D7F2F3FB427C65D6BE3EFC5FF117C51D643443559C8B4B7639FB2D944365BC
23B65630371180CE59B19635FD45F459F0B219FE752C763A9A961B0EAED357
529BD231F3B6B27E893DCF133BC73A54F962FDE67F487F0DBE287847F6AAF8
5167F17BC0C8B06B16EA20D634E0DBA5B7B98D41743FDEC0F9A36C7CF191FC
4368EF3C0921B7D07C5D76013E4E9D2371EC8E7FA57F373FB267ED31E22FD9
87E295B78BAC7CCBBD02FF0065B6B360A78B9B5CFDE5078F3A224B4678E72A
48566AFEA73E1CC9E11F1069DFF0B03C0F791DFE83E2AB7B7BAB678BEE1560
C4903B67772A7956CA903181FCC7F497FA1CFF00AA3E2260B8A3288FFB1D69
4DCBC9F24B7FEF5DA4FF0099352D5F3B3ED721E35788CAAAE06BBF79256FBD
69FE5F7763F1E7E3578764FD99FF0062DF85BFB2A697093E26F14F97A86B71
44A1E479B7ADC4B1903E624DD3C71C440E560C7B55AF871F07BE17FEC6FE01
8BF69AFDAD5D13578F0FA0F873E592E0DC81BA3CC44E24B9E8554FC900F9E4
3BF1E5FD19FB58FC72FD9FBF651F1D6A1F1A7E203AF8D3E2B5EDAC76DE1CD0
D5949D3ACE35215BA1F2124919DDE7705C966485701F3FCD5FC7DFDA13E27F
ED27E3DB8F881F1435337976F94B6B68F296963067220B68B24220EE72598F
CCECCC49AF985922AB8B78BC46B6D22BB25D5FE7E5EA7E9353C509E0387E9F
0FE4F78A95E556A6CE5296F18F6495A2DEF2B6965BF5FF00B547ED55F123F6
AFF887278CFC6D37D974DB4DF1E95A4C4E4DB69F6EC73B5738DF23E0196520
172070AA1557EC2FF82376AA74FF00DAE2EED03606A7E19D46DC8F5DB35B4F
8FFC859AFCA1AFD24FF824DDD3DBFEDAFE1589738B9B0D5A36C7A0B391F9FC
5457D09F8E1FD06FC26F16A7C45F859AE68B23EED63E1B6B7A868D30CFCDE4
D94CCB01F5C7D9CA0CF76435B7E2BF0DF813E3C78364F86BF166D84E8FCD9D
F02167B79B185912420ED907A9CAB8F95C1C9CFC31FB2FFC4B4F087EDC5F15
7E1DEA3205D33C6BADEB502A31C2FDB2D2F27921CE78F9A332A63B96515F6F
EB5A6BE91AB5D69AF9FDC39504F52BD54FE2306BC3CA3111C5619C26AF66E2
FE5FF02C7EA7E2364F5F22CEE388C2C9C39E30AB06B46B995DDBD25CCBD0FC
3AFDA27F669F1E7ECEBE27FECCF10C66FB44BC76FECFD5624220B951CED6EB
E5CA07DE8C9F752CB86AF76FF8271FC3E8FC51F1DA4F1A6A0A069DE0AB19AF
59DFEE0B89C18220D9E0615A4707B14CD7EB3C975E18F1AF866EBE1E7C51D3
E3D6740BF4F2D84C0B14FEE9C8F98153CABA90C87907A63E3CF8D3E06F0A7E
C37FB23FC506F07EAAD7F79F112E934DD3679BE598437B1796B0F991F0CF04
1F699564017271C0A5C25E1955CC33FC260B09AAAB38C57936FF0014B7BF65
A9FACE69F490FAE70A62B078C8F2E2DC796E97BB38BD24FF00BAF96F75B5DD
D765F871F1F7E264DF18BE3478CBE2648EEF16BDA94F35B79830EB68A7CBB5
461EA902A2FE15F6EFFC138FF6518BE2BF8C5BE34FC42B603C0DE0D9849124
CBFBBBFD42201D5083F7A2838793B336D4C105C0F90FF66AFD9F7C55FB49FC
52D3FE1EF8703416A489F52BEDBB92CAC908F3253D8B1CED8D7F89C81C0C91
FD285FD8F857E1D78474AF835F0E6D96C7C3DE1D8960DA8725D90E4EE23EF3
17CBC8C7969092791CFF00A27F4DEFA4DE03C34E13FEC9CBA4BEB338284229
EB18DAC969B3696FF6629CB7E5BFF1CF0570BD5CD318AFF0A776FF00AFEAFF
0033E97D035E8BC41A447A9C1880DC3CA9107E7EE3305C8C8C9DABB8807D7E
B5F0DFC72FD977F675FDA4AEAF078D34CFF8437C70ACC8756B1DB13C922F19
9B23CB9C1C0E6450F8E15C75AB3F1FFC7BAF7C34FD9235CF891E187DBAA784
B56D26F201CE1B6EA7681E36C73B248E4647F55622BD1F56D7740F89BE0BF0
DFC67F073F9BA4F89ED219B3C6E4665E15F1D1D4831B8ECC98EB5FE5CBE3DE
33E1FE07CAFC4BE1FACD34F92B25A29350A729376DBE2BA5F0B5CFCC9A8A3F
46A394606BE675B2AC42B2D795F6D5DBFADF6B6E7E127C7BFF0082757ED03F
054DC6AFA469FF00F09C786A2CB0BFD2519E648C779ED399538E494F3100EA
F5F0532B2314705594E083C10457F58DA0F8DBC43E1DDA96373BE01FF2C65F
9E3FC0672BFF000122B85F89FF00047F65FF00DA204B37C4DF09A691AF4F9C
EAFA77FA3DD6E3C6E69635FDE1F41347228AFEBEF01BF6B1E4799469E0F8BA
97B1A9B73AB25EBD20FD6F4FCA0CF9DE20F09719876E785F7E3E5BFDDBFE7E
A7CA5FF04ABF059F097C14F887F18EE93CBB8D72ED34DB37239F2EC933B97F
D969AE369F78FDABEBBAF5AF097C07B4F855F05342F839F0F666B9B0D0D9D8
C972CAB35C79B24933339550A58BBE7B0E062BCF353D035AD198AEA7652DB8
1C6E65F90FD18654FE06BFCD6FDA15C599871371B56CDE9D19BC225684F95F
2DB65AEC9F246174F5BA67E97E16D1A187C17B3735ED1BD55F5FEAF73427F0
BF843E34FC39F107C05F89317DA343F125BBC31918DF0C99DE8F116042C91C
816588904075E41E95FC96FC7EF81FE32FD9D7E2B6B9F0A3C711117BA4CBFB
9B80A562BCB47E60B987AE5245E719255B723619580FEABA39248645962628
E8432B038208E4106BC47F6E8FD986DFF6C5F828BE2AF08DA467E297816277
B40A36BEA16DF7A5B32475F3305E0DDC2CA0A82AB23B563F460F15FEB7875C
398E9FEF29AFDD37F6A0B78FAC7A7F77FC271F1E70F7B39FD7692F75FC5E4F
BFCFF3F53F9FFF00D89FE1AFFC2DAFDAAFE1A782E48BCEB57D5E1BDBA5232A
D6BA7037932B7A06484AFE3EB5FD60FC42BFFB778A2E554864B50B0AE3FD91
961F83135F893FF045FF00865E7FC53F881F17F5980A41E0FD2D74E8FCC5C6
CB9BF72F2119E774715BB2B0EC24E7AD7EC3DD5C49797335DCDCC93BB3B7D5
8E4D7F609F9B1F307FC14774C1AA7EC57A6DE1193A4EBF69719F4DDF6983F9
4B8AFE78ADADAE6F6E62B3B389E7B89DD638E38D4B3BBB1C2AAA8E4924E001
D4D7F497FB75C22E3F611F143919FB35EE9EE3DB3A842BFF00B357C23FB0F7
C16F07FC23F02EA9FB737ED089F63F0CF85A279B41B6914192E6E01D8B7088
C4067321115A8246E90EFCA85563FE87F801E2560F873C3BC46658D77F675A
718C7ACE4E306A2BD5BBB7D15DF43E4B35C1CAB62D423D523E99F1CFC7BF14
7FC13EFF0061AF0AF823C69A9FF68FC58D6ACAE2DB43B31B5DB4D594970F33
3EF0F1D82C8AA0608793644A3CB05D7F9D3F037803E267C72F1D27867C0FA5
DF78B3C4FACCAF2B2C7BA69A4776CC934F2B9C2AEE39796460A33966EF5FAB
7A2FEC9FFB43FF00C1427E276A7FB4C7ED01727E1AFC3FBB1E65BCB7C71345
A4C3968A0B28A5D816154259AE25088CCCD28572CC2BE8CD67F690F815FB28
F84AE3E117EC53A0C0D78C0C77FE26B94133CD2A0DBE60771BAE5C124AB301
027FCB38DD1B8FF3DB8BB8B235F175F32C634A756529B5156D64DB765DAEFF
00CD9FACF04F006659DD6584CB69395AD793D2315DE52E9E9BBE899C8FC28F
D8A7F679FD8A745B1F8ABFB5DEA36DE31F1D3A89B4EF0D5B01716F1483A1F2
5F1F6865239965DB021E0066D8C7F487F663F8F7E37F8E3E06F1C7C53F105B
C3A36910DDFF006768F6100DC2DC431066769480D23BB4C8A5B017E4F9557E
6CFF003E1E25F137887C63ADDDF897C55A8CFAB6A97CFBE7B9B990C92B9C60
659B3C000003A000000002BF7EFF00679F0C9F87FF00B23F81F4691425D6BD
1FF694D9E0B2DE3B5CA123DA3312FE15F079367B5B1D8C76F76114DDBBF4D4
FDD7C4BF0AB2EE15E1B8B9BF6B8AAD38C799ED14AF27C8BA6C936F577E89B4
74FF0013BE1AFC33FDA87C13FF000AEBE2E5A85BD8B7369BAA44152E6D6761
8DF1B90704E06E4394900008C8523F9D3FDA57F65BF897FB3178BDB40F195B
FDAF48BB663A6EAF021FB25EC639E339F2E551FEB2263B94F20B21576FE8AA
BA5D44783BE24784EEFE1AFC5ED2E2D7BC3BA8AF96EB3824A7F75830C3AB2F
549108743C83E9FD71E09F8FF98709D6587AB7AB8393F7A17D637DE506F67D
D7C32EB67EF2FE49CCB2A857575A4BBFF99FC8F57B07ECFBE0EFF8581F1CFC
03E0C64F321D5B5BB08661D7F71E7A998FE118635F597ED7BFB0078D3E001B
8F1E7801A5F15FC3B9097FB5200F75A721E40BB54003478E04E802767084A8
67FF00C12E7C11FF000967ED5BA6EB3247BE1F09E9B7DA9B647CBB9905A27E
21AE370FA67B57FA3F9CF89D96E2B84F199FE57594E11A5369ADD4B95DA325
BC657B68FD76B33E3E9E0A71AF1A535ADCFFD3FC80FDA8FE02EB5FB35FC71F
137C25D58BCD6FA6CFE6E9D74E08FB5E9D3FCF6D3676A82C50ED9368DAB2AB
A8276D797F823E21F8F3E1A6B49E23F879E21BFF000DEA71E3171A7DCC96D2
1039DAC6361B94F753907B8AFDAEFDB4B42B3FDB1FF630F07FED79E1CB7493
C67E004FECEF12C70A8DED6FB956E32154B6219992E635C854866918D7E18E
91A3EAFE20D56D343D02C67D4B52BF9520B6B5B689A69E69643B5238E34059
D989C0550493D2BD4CF326C465D8CAD80C5C796A53938C979A767F2ECFAA22
9D4538A947667EAF7C25FF0082BD7C6DF0FD88F0BFC73D074CF8A1E1F997CA
B8FB4449677AF11E08668D1ADE418EA1E0CB777E735FB4FF00B12F8D7E00FC
56F0EEB7F147E01F85355F06D9EAF2471EA365776B25B58C97116E01EDB064
B5629F32B7D99C6323CC404AD7E6F7EC9DFF0004A6D17C316765F153F6C091
778225B5F0B43265720657EDD2C672ED9E7C888ED181E63905E31FB39E13F1
8E9765A76A33585941A1F84BC29A7931DB411A4690C30A92BB550054548E32
15140007AE057E7B98F16E5B4734C3653292962AABB420B592D1B6DFF2AB27
BEFD133E87050C72C1D674A4E345FC5AB5196AAC9AD9BBDADD9D9E87A3F888
F882E34F68FC2CD00998B2B49239CA6382140520B678E4F1E95F36EA5E04F1
AC0F25CDE584B70CCC4B3A3099989EF85258E7DC57F2E173F14FC783C61AC7
8DB45D76FB46D4B5ABDB8BE9A4B2BA96DDFCDB891A463BA3653D58F35F6CFE
CAFF00B447EDC3F12BE27E89F0BFE1F7C42D42F9EF9F75CCBAA471EA915AD9
C78335C4CD74AEE1517A61D4B315407730CFF4B78DFF00B32DE7341E658ACE
B9552837697B94E165793B72D4BF9BD1BF4B25E370EF8953C1FEEE9D14EEFE
6FE7747EE0F867C356D682F7C4DE35234BD0B4289EE6EE4BA1E5204894BB17
2F8011546E727B71DF8FE7ABF6D2FDA9355FDA83E29BDEE9CD2C3E0FD0D9ED
744B32082632407B975FF9EB390091FC2A15392093FA17FF000501F8EDE36F
8B3E2EB1FD8C3E03C773E21D499E31AFBDA052F73709865B5665DA891C4409
2E18E115B0A4A84715EBDFB327EC41F0DFF65EB3B3F881F15BC8F15FC47651
2DBC0A37DA69CDDBC8561F3480F59DC7047EED4104B747D1CF82383FC08E15
9F15710D54F1559395352B29B83BA526B5E5525A474BF2B7CAA529B891C459
A637883191A1463A2D2CB6F3FF0083FE48F8FF00F651FF00826C6A1E25B3B5
F8A3FB4A997C3BE1850B341A31261BEBC5EA0DC11868236EC83F7CDFEC704F
EC94DE36F877F073E175FF008CAF62B6F05FC34F065A168D228D620E887015
235C72EE42246B9796460392769CDD35758F899AE1BAD665F2B4BB2F9E400E
D8E34EBB573FC4DDD8F38E7B015F801FB79FED5DAAFED81F18741FD9DBE0AC
81BC0BA76A96FA6E9C222766AFA9CD20B75B938E3C942FB201CE54B484FCE1
53F9DF37FA43F1278A798BCDB16DD1CB69C9AA54D69ED1AD2F6E905D7794DE
927CA9C0F6311C3F87CA69AA1F1567BBE915FE6FF0E9AEA7E97EBDFB4678C3
C4FF00B12F8CFF00680F150FECBBAF8B1793697E1CD3589C5968EECD6B145C
7DE99A18EE6E5A5FE26718C22A2AFE2F57E96FFC142754D2BC1169F0CFF66B
F0A395D1FC09A342CEA08DACDB05B5BEF51FF2D12285989EE25CF39AE27F64
2FD9DFC3BAF59DFF00ED0DF1C5E2D2FE18783D64B966BCE21BE96DB96C83F7
E0888C3800F98F88806F9C0F85E208D4C7663F57A5F674FD5B3FB7BC1EAD83
E16E0C79C660EDED5B9DBABFB308AEEDA575EADBB24EDDCFECF1F0AFC01FB3
A7C3497F6CAFDA547D9AC34E459BC3BA648A0CD713B8CC12A44D8DF34847FA
3A9E146676C00AEBF925F193F6D5F8F5F167E345E7C67B4F13EA1E16BD1FB9
D3ADF4BBC96DD2C2C91894B753195DE39CC8CC3F78C49230428E87F6E0FDB1
3C4BFB5AFC4D7D46332E9FE08D099E1D0F4D638D911386B99941C19E6C02DD
422E101382CDE81FB23FFC1377E30FED2A2D3C63E220DE07F87AF890EAB791
9F3EF22C6EFF0041B76DA645231FBE72B1004953215295FA065B9752C25154
E1F37DFCCFE3AE3AE37C6F106613C7E31EFA463D231E915FABEAEECF7AFD9A
7FE0A9FF00B5A5CF8874DF877AEF85E2F8CB25FB08A3B686DCDBEAD2281CED
92D90C6C157259A4818E0659C0C9AFE8434BD2F43B9F0EE9DE35F16F87DBC2
B7A6149EEB4D9668A636F291CC2E606785CA9E0796C431F5E95E75FB3C7ECF
9F013F666F06CF67F0A7474B2B7D8AB7BAD5CE25BED41A3E0B4B7040675DDC
8440B10627CB419358FE34F195DF8AEFB8CC561093E4C5FF00B3B7AB1FD070
3B93F9478ABE33E038772E55E8C954AD517EEE29E8FF00BEEDF61775F16D1E
AD7270FF000C56C6D67192E58C7E27FA7AFE5D4D9B8D5351F897E2AB5D3CEE
8AC43E56307EE44BCB31EDB88FD70057F3F3FF000568FDA162F8A3F1EE2F84
DE1BB80FE1AF8611BD8911906393549769BC6E0F3E48548304655E3931C357
EDC7C50F8AB65FB347ECE3E34F8EB7A10EA50DB1B6D22290644D7B31F2AD97
6E41653310D20072234661D2BF8FBD4750BFD5F50B9D5754B892EEF6F6579E
79A562F24B2C8C59DDD8F2CCCC4924F24D79DE00E438A8E593CF7339396271
8F9E4DEFC8BE05E4AD7924B449A5D0DF8C3174DD7584A0AD0A7A25E7D7FCBE
47EF3FC20B84F12FFC1220C72FCE7C29AEC889FEC1935356FE5767F3AF802B
EE3FD8DD5BC41FF04B4F8C5A431E74FF0012493281D9224D2EE7F9AB57C3A0
12703926BE978E216C5C5F78AFCD9FDA1F456C47370FD6A6DFC35A5F73843F
5B9FA07FB36FED4BE1D6F0BCBFB39FED2B6A9E24F869AD442CE392EC190E9E
8D8DA8C7EF790A705194878080C870A02FC0BFB727EC3DE20FD963C470F89B
C312BF883E18F885F7693AAA912184C837ADB5CB27CBBF6F31C83E59546E5C
10CABF497C32FD8F7F683F8ABE4DCE85E159F4FD3A6C117DA9FF00A15BED3D
197CCFDE48BEF1A357ED2FC0AFD99B55F0AFC19D4BE09FC73D62C7E20F87AF
82AAE9925B334169193B9A259646DEE9BC078FE4431B0CA9E98F7B84B178B7
1F655A0F93A37D3CB5DD76FF002DBF25FA4470EF0EC2BBC7E5B8982C437EFD
38BBF37F7BDDBA8CBF993B296FF17C5F8C7FF04FAFD90FC2DE1FF0CBFEDA1F
B4CC2B67E0CD017ED5A169F729937D3A3623BA78DBEFA6FC2DBC7FF2D64C37
DC0BBF99FDA33F683F167ED11E3C97C51AF335AE9769BE2D2F4E0D98ACEDC9
FC9A57C032BE32C40030AA8ABFD1678F7C01F067C589E1FF0008FC41B0D3AE
61B52C74AD2EE651142C61454262B4DEA927948C147C8DE5AB60603106A5B7
803C31E06E7C13F0E745B354FBAF6505BC2DF52AB12313F89AF5B3EC93158B
5187372D37AECF5FCB44FF001FC3E1BC2AF11728E1A52C64F0B2AD8A7A2775
18C1768BF79DDF5765A68B4BB7FCC2E8DE0AF19788C03E1ED06FF540DD3ECB
6B2CF9FF00BE14D7A6E99FB327ED0FAB80D65F0E35E01BA1974F9A007F1955
457F4397DF123C576B21827B28AD1BB2BC6E187FDF4DFD2B0A5F887E2D9189
5BC118F458A3C7EAA4D7874F80E9AF8AAB7F2B7F99FA6633E9678D97FBBE06
31F59397E4A27E3DFC35F801FB79FC3BBA5BDF86FA3EB3A012FE634697D6F0
412363199609661149C767535FA29F0CFC71FB74DAC31691F197E125978A6C
08457B98351D32D2EF19F99DE3FB43C121C74555887BD7B249E37F1549F7B5
1907D02AFF00202AB7FC24FE2699C22EA572598E00591B249EC00AF5B0DC2F
4E945C154972BDD3B34FD534D1F98F14F8D55B37BBC665D8772FE6E59A9AFF
00B7E35232FC4F447F86BA5F88B4D8B5386C2EBC337932EE6B4B86865319F4
710CB2C79FF72522BCBB5EF00F893400D2CF6FF68B75FF0096B0E5D40F71D4
7E231EF5EBBA61BDF0C587FC241E34D56E071FBAB532B3163D8119E5BDBA0F
E23E9C34FF00177C407543756F1C6B67D05BB0CF19EA5C61B77E9ED5FCADE3
8F0870060AA4618A6E86227FF3E52765FCD3A7A4547FC3CB27D2F676F1B85F
33CDEB734A9A5282FE66FEE52777F7DEDD4C0F02F88A1D1B517B0D49565D2F
521E4DC47200C986E371078239C303D4135FCD07FC1417F6587FD973E3B5E6
99A15BB2F82BC521F52D05FE6658E266FDF5A6E2396B673B472C7CA68998EE
635FD4A093C01E3DF9645FEC4D564EFC05763EFC2B73EBB58D794FED41FB25
58FED45F07F4CF873E2B9E2B7D5740D52D2EEC752192440922A5CA70377EF2
D59D36F4F3046E73B457DAFD1E238BC0D09E5B1AF1C4E0FE2A5560EFCAFED4
2717EF41BF8926AD7E6D5B68F278CFD9D59AAEE0E1536945F5ECD3D9F6D3C8
FCF0F1BFC78F1C7EC0BFB027ECFF00A27C3A7B4B6F17F8AB76A13457D6FE7A
B5A5CC725F5C865CA90E92DDDBAE7390062BE64D27FE0B4BFB4F5ACB1AEB1E
18F09EA36E0FEF00B4BD86475EE030BC2A0FFC00FD2BD1FF00E0A73E01F8E3
FB427ED21A5FC38F83DE02D6B5CF0F7C3CD26DEC51ED2C24FB047797805C4C
52E768840F24DBC6417183191D8D7CDFE0DFF8247FED95E2958DF56D1F4AF0
AA49CE754D4A36201EE56C85D30FA119F6AFE9B3E10FA093FE0AB3F04FC6F3
C76FF193F66CD1B54864FF005D750CB6D7530F748AE2CD4E7FEDB823D6BB4F
077C76FF008247F8C7C4DA678AAF3C35ABFC35D5748BDB7BB88CF05DFD9E59
2091645531D8CD7B17965861B288719E4706B86B3FF8231F88348B7173F137
E33681E1A4032ED15B3DC22FFC0AE26B4FD715AB67FF0004CBFD9034F5C788
7F69DD3EEDD786FB2C9A743C8EBC1B99C8AFA3CBF8FF0036CBE2E186C754A6
9AB5954924D766AF66BE475E1F87ABE297352C3B9FA45BFC91FB1B65E2DF84
7FB40DFB6A9F0A7E22E89E22B88A140D6B67770DC491A7241912373247939F
BC959FAAFC3FF15E919796C9A7887F1C1FBC1F5C0F987E22BF2660FD807FE0
9EFA74A9349FB41DFF009F13065782F2C4156539054ADBB6083D0835F6D7C2
1BFF00859F0964860F0EFED75AA6BDA746DB8D87896EAC75381801809E64D0
A5CC683B2C53A0AFE52E38F0078673AAF5319ED5D2AD36DB946774DBEAE32B
FDD1E53F48CAAB7116169C69FD4E7282EF4E5B7AA5F9DCFA6BC0D2E97A836A
3E04F13DB477BA2F892DE5B3B9B69D774722CA851A3753D5644251877C8AFE
4A3F69EF821A97ECE9F1D7C5BF092FCBC9068D764D8CF275B8D3E7025B5949
01416313287DA30240CBDABFB46D363F06FC40D22CFC43A7CF6BAB472AA491
6A167C2BB0E77C6EA4E573C81B980F535F327ED19FB077C11FDA83E25F86FE
24FC4E17A65D02CDECA6B6B49BECE97F0F99E6C293C801902C4CD2FF00AB28
C77FDE01403F6BE11F05E3F87F2F96578AAEAAD28CAF4E4AE9F2CB5716B54A
CF5566FE27D8F8FE27CC29E2711ED553709ED24FBAFEACF45B1FCCEFEC39AB
7ED27E1FF8EFA4EB9FB3368D75AEEB70958EFAD1011633D8C8C3CC8AFA4244
71C2D8E1DD86D70ACA7785AFE9FF00E397C70F83FF00002CD3C65E388A39BC
5F776E9241A1DB4CB2CEF3B03F3F401230C0833BA807692AACFF0029E67C7F
F0D7E377C34F082FC38FD8E7C27E18F076808A3FD263976DEB31032C229211
1090E306591E6661CFCADCD7E4FF008CBF62FF00DAFA7D52EF5DF127856EF5
CBDBB7324D762FEDAF6699FBB31F3DA463F519AF778B392B2842584F68E0F9
A2E51BA8C96D25A6EBA3FCCFD5FC27F0FF002CC64D62736CCA9D283FF976AA
454E4BB4B55CA9F65797F8773C8FE3AFC7DF1FFED03E2D3E26F1ADCEDB7B7D
C963610922D6CE26232B1A9EACD81BDCFCCC40C9DA1557D03F649FDA3AFBF6
7DF88225D4CB5CF83F5E296DAC5AE0B811F216E1179CC91649C60EF42C9D48
2BE69AAFECF3F1E74462BA9FC3CD7E20BD5C69972E9FF7DAA15FD6B909BE1C
FC42B76D971E17D52261D9ACA753FAA57C12AF8AA75D621DF9EF7BBB9FDCB5
32AC871795BCA20E9BC3B8F2F2C5C6C977567BA7AA7BDF5DC7FF00C1477F64
4B1F807E3DB4F89FF0CA349FE177C403F6AD364B721E0B3B9957CD6B5565F9
7CA753E65B9EF1E5467CB24FEFAFECF9E11BAD1FF651F825E08B78F6DD5C68
3A75CBA918D8F35B2CF2EEFF0075A639AF8D7F660D22FBF680F823E28FD8F7
E39E87A941A3DCDABCFA16A73D9C83EC6EADBC2A48EAA03C12112C209F997C
C8C9D9B54FEA3F8FEDBC6BE0CF865FD9DF05B418B59F135959C7A6E931DCCD
1C16D6C3688D67B867652628828664405DC80A0004B2FEE1C3F53FB43D9283
5173697BCD4527B6ADE892EEFA1FE65F1D70AD4C8F32AD80A92E651D6325AF
345ECF4EB6DD747747E44FFC1507F68DB3D274DB3FD953C05739483C9BBF11
CA98E48C4B6F684FA93B67978E3F7401FBEB5F8A50C335CCD1DBDBC6D2CB2B
044440599998E000072493D057ED8785BFE094BE23D6B5AB9F197ED25F1320
8EEB52B996EAF63D2C19EE2E6498977737774A81646724B7EE2407B1AFBCFE
16FC1BFD9BFF006778D5FE12F84629F5A45DADABDEE67BC62576B113CB9640
D8F992258D0FA57FA319278EFC1FC0D91D3C9F266F17563AC9C572C6551FC5
27392DBA2E552B4525D0FC9EAE5788C4D5752A7BABF43F233F674FF82657C5
8F89DF67F14FC5F67F879E14189192E540D56E23079096EFC4008C8DF3E0A9
C1113A9AFDD4F86DA5FC1EFD9F3E10DDE8DE10F334BF06F82ADE7BAB99E669
6E08450D3DC4EC4EE7627E6660AA076450302B90D6BC4BAC6BF26ED4272630
72B1AFCB1AFD17FA9C9AE47E2DCA2DBF64EF8C7331C06F0FEA71FE2F68EA3F
F42AFE60E31F1733AE37CCB0F83CCAA72D09548A54E1A455DF2DF5BB94ACDE
B2BDAEEC92763DAC3E029E1A0E505ADB73D0BE22F817E04F8BC5B78EBC4BF0
CBC33E3BB3D5238E58F56B8B0B2BE6911D46C6F364864255971B583104607A
57939F857FB21B1DC7E0578573EDA2E9F8FF00D135F903FB14FEDD7ABFC00B
94F871F12049ADFC36BF72AD111E6CDA63487E692053F7A26273243F564F9B
707FDBAD5342D1755D0ACFC7DF0F6FA2D6BC2FAA442782E2DDFCD511B74218
755ED93CA9E1B91CFF0029FD323C2AF117C3AC64B1D96623DAE025769FB383
E55FF80DF45F126DB8EF794755F79C0F8BCA7308AA189872D4F57AFE3BFE7E
A72361E0AFD99343B94BDD07E08F856CEEA3FBB2C7A4584522FD196DB77EB5
EE7E08F1D25EEB767E1ED3348B5D2ECA5DFF002C0BB76EC466180A15474F4A
F04AEFBE188CF8D6C0FA098FFE426AFE12E0BF1DF8AF31CF70184C4E32F4E7
569C649420AE9CD26AEA29EABCCFD1B33E12CBE8E12B54853D5464D3BB7AD9
F99F875F1B7C45A8F817F6B3F1878B7446D97DA2F8AEEAFA13D07990DD9940
38EC48C1F515FBC1E2AD434DF1668DE1EF889A11DFA7788AC61B88DBFD9950
48858FA956C63FD9AFE7DFF695B8173FB42FC4A9076F116A89FF007EEE5D3F
A57EB47EC33E36FF00858DFB30DE783EEE4F3352F025D3C6809CB7D964CCF0
B7E4D2C6A3D1057F7070AE37971B5A83DA4DB5EA9FF97E47EC5E3FF0BBADC3
59766915EF528C232FF0CE2B7F4924BFEDE3DCF4FB29751BE82C20FBF70EA8
3DB27AFE15F9A5FF000534F13F883E2B7C6DF027ECAFF0D2DE4D4EEB468A37
7B381892FA8DFA8F29245E147936CAB26F270A933138009AFD5EF074B61A05
96AFE3CD6438D3F41B59667288D239D885DF62282CCC1010140249200E6BE7
CF805F0666F85379E23FDA57E315B24FF16BE22CF3DD2DA3BF9A348B5B86DC
9651B1E731A6D595C740AB12F0097FE98F0DB8F32AE0D862F8CB3792B61A0D
528BFB5566AC9F76A31BDEDADE504BDE946FFC4B5B2FAD8C9C309455DC9FE1
FD7EA6F7C0FF0082FE1BFD903E1241E02D0A48EF3C65ADAADC6B3A8A0C1798
8C6109F98471025215E3F89C80CC7363AF26B5B6EB1E24D4E491124BEBCB86
2CDB54B139EFC7403F203DABD274CF86096700D47C657A96100E7CA4605CFB
16E467D94366BFC8FF0011788F8B7C59E24AD9BAA529C5C9D9BD2114FBCBE1
4DE974B5B2518A6A291FBD659430190E11529CD2975EEDF92DEDFF000EF73C
1BE3DE9E9AC7EC5BF16AC1C6E10D94B738F7B7F2A607F031E6BE33FF008257
7C6CB7D7F44F117ECBFE2BB9E2449753D0CB9CE3241BA8533DD5B6CEAA3AFE
F49AFD38F8FB6FA0A7ECA3F14DB41B558ECE4F0B6B8541520B15B3986F39F9
89046413CF02BF949F869F107C41F0ABC7DA0FC46F0ACBE56A9E1FBB8EEA1C
9215F61F9A37C7549149471DD4915FEDF7D11BC178E6FE12E3F82F32E59C93
D1FD9E770D37B3B35EEB76578B67E03C559E5B3658EA3757D7CFFAEA7F4DD7
D6571A75E4D6176BB26B7728E3DD4E3F2F4ADEF05E93FDB5E26B1B265DD189
04927A6C8FE620FD718FC6ADDF788BC3FF0015BC07E1AF8DBE0C6F334AF12D
A45238E0B46E4636BE3F8E360D13FA32E2B3AFFC75A67C12F83BE3DF8E7AD0
430F86B4D9E481246D8269D57314218F4334C638D7DDB15FE17E0FC14C5603
C415C318C83B52A8DBBADE9C5F36BE6EDC8FB4AE8FE82AFC4D0A9943C6C1EA
D5BFEDE7A7FC1F43F033FE0A19FB5078EEEFF6D6F13EB1F0B7C537FA07FC21
30C3E1BB7BAD2EEA6B491BEC45A4BA490C6CBB80BB926420E54851906B7BE1
47FC1607F69EF04086C3E2141A5FC43D395BF786F201657A63C60224F6A122
1FEF49048C7B9AFCB1D5755D475DD52F35BD62E1EEEFF509A4B8B89A43B9E5
9A562EEEC7BB331249F5AEBFE1D7C2CF88DF173C411F85BE197872FBC4BAA4
98CC365034A5149C6F9180DB1A7ABB90A3B9AFF4B9ABE8CFC28FE843C07FF0
560FD923C7A20B6F8A1E12D57C097F2A932CF0C6B7D651B7A79B6A527727FE
BD7EB5F747C13F8C3FB37FC4ED72D27F823F13F4FD5F50B94771A63CAA97B2
C2A37499B49843700281924C7F2E326BF1CFE177FC128B4AF04E8B0FC43FDB
47C7969E0BD193E6FEC9B0B88DEEA4206EF29EE98326FE0FEEEDD26661F75C
1AFA8BC37FB4C7C27F86D7DA67C0CFD85FE1F59E8F2EBB776FA78D6AF20632
4F24CE22594A3933CD8DC183DCC836E0831E2BF38CE782F86A3898632B6161
1AD169C6505CB3BF477859BF9E9DCFD2384786F8873684A1818C9D249F34A5
FC34BADDCB4D174577D91FAA163F08FC2FE0AB2F19CDF0E74A874DBEF1CEA6
DAB6A5B308B35DCB1C514D263A0F3162DCC0757777EAC4D79FDC781BC556D9
DFA7BB0F54657FFD049AFCB3FF0082A2FED0BE36F0DFC5BF0A7C36F87BE2AD
47469FC2FA59B9BEB8D36F65B49A4BAD41970937D9D93948A24917D04A7000
35F237C1EFDADBF6DDD7BC53A2FC38F879F10753D5355D6AE63B5B58EF960D
458BB9FBCF25E453304519676270AA093C0AFEECE1AFA2AE6D99E43473C862
A9D35522E7CB539A3CB1D6CDC92968E294B6D133F1DAF9E53A755D2B376D34
3FA16F12FC19D27E327C1DBCF85BE3949ED74CD42FED26B98C029249159DD4
3746304E0812F95B0B0E40248E40AF1CFDA83E247ECCDF09D7C3D17C41D357
C4FA87849164D0BC2F02ABD9DACE89B21B8921C7911BA210B13CC19A3424C0
992E5BEBAD02F65F0B78463B6F1C7885755D47C3FA7C72EAFA9CB1C76EAEE9
19696764895238D4ED66DA000AB8FA9C4F13F8BBC45E1EBA04DBDB5D69F71C
C32856F981E76B1DC4671F811C8F41FCC38DCCEBD5C37D470F884E9C2736AD
AC79B48CA493B3BBE44B5D55ACD27747D864CF0B43111AF9861E5521D62A5C
8DF54B9B965A6BAD95ECF468FE78FE3EFED5FF0015BF682BD783C457BFD99E
1D47DD068F66CCB6CA01CA994FDE9E4181F33F00E4A2A02457CCD5FD40CBE3
AD3AE79BDF0E594E4FF7914FF353554F89FC2A4E5BC1FA713FF5CA3FFE375F
9CE2782EAD59BA952BDDBEEBFE09FD55927D2732FCBF0F1C2E0F2AF6708ECA
3515BFF48D5F76F57D4FE6AFC1DE1BBCF1978B744F08E9FF00F1F5ADDEDB59
45819F9EE6458D7F56AFE977C7F0DAE9D2E95E17D2E3D969A45A471448BCEC
5002AAFE088B5D3F82F55D1F58D605BD97876CEC7C943299638D032ED200C6
1073935F8E9F147FE0AD9F14346F1BF88742F877E19F0FDC68FA76A1756D65
77762EAE0DCDBC32B24731114F08FDE280D81C0CF7AFD8FC1CF03738CEEAD7
A594C54DC545C9B6A29277B6EFAEBB763F1BF1A7C6A87113C3735174A34F9B
4E6E6BB95B5D96C923F4B62D37519BFD4DACB27FBA8C7F90AD187C2DE239FF
00D5E9B71CFF007A3651FAE2BF19EFBFE0ADBFB4EDDA14B7D2BC33644FF143
637448FF00BFB76E3F4AE6342FDBCBF6F4F8B9E2BB4F097C3DD79AE355D45B
64363A669362E4FAB6E96091955472CECE15472481CD7F4352FA1FF15284AA
E26AD0A518ABB72A8EC92DDB6A0EDF33F077C4142F68A6FE47F405E15D2FC7
3A466D65B11369D2E4490CD226DC375C0C9233DC6307B8AE1BC21FB2C7C36F
83FAEF8F7C7BF072D23F0C6B5E31D34DBAC471FD9D653A091D648A25198D1A
4652E8ADB00401154579A7C11F873F167E1AD8DBF8FF00F69EF89BAA78ABC5
B32168345B4BB6834CB52C390F0C1E54772E3BB48BE529FBAACC15CF33FB7E
FC43BAB2FD9585B5C4622B8F19EA36968110FF00AB86376BBCE4F27881558F
72DD00E2BF9778838DB0992E3B19C3D96E62AB4BD9DEAAA7CCA0D464AC9DD2
BFBD6E56D26F5714E3ABFD0784783F119C6330B41C791559A8A93576AFBB4A
EAF6576F5F2BA67FFFD4F2BFF8265FC59D234BF889AE7ECF9E3C54BCF08FC5
4B396C9EDA7E616BC1132846078DB710B49130EACDE58ED5FA73F017F651F8
09FB145B4D2783ED1FC4FE3CBA5225D6751556B88A27E91C4140582320FCCB
1FCF27F1B10142FF00365693F89FE1FF008AED6F912E345D7F40BA8AE2312A
3453DBDCDBB891094700AB2B0070457F53BA778DF4BF8DFF0007FC1BF1C742
5554D6ACE31771A1C886704ACB1FFDB299648F27AF15FD05FB4C787334C972
D7C61C3D64EA251A8ED7B35F6974BB86BADD5A1276BD88F0DBEAF88C547098
BDBA7F93F9FE68CED5F5AD4B5DBC6BED526334A7A67EEA8F451D00AE27F68A
F147FC2BAFD8BBE267890379573ACDAB69709070CC2FD92CCE3DD44B237B00
4D7455F277FC152FC503C33FB3BFC3AF86F0B98E6F106A2D7F2AF731D9C24B
A91E9E6DD21FAA8AFF002EFF00679F0956E23F1470B5F14DCDC1F3C9B776DD
D3776FBC14F53F5DF13F151C3653ECA9AB26ED6F25FF0006C7E0BC71C9348B
144A5DDC8555519249E00007526BFA38FD997F665F1DFECDFF000245878374
E887C66F8911AFDAEFEE46EB7D06D48C8F35B041FB32B6EF2D41335CB05F9A
24DE9F1C7FC130BF64E97C73E2A8FF00686F1E5891E1BF0DCC468B1CC8025E
EA511E6E006EB15A9E8C060CD8C366275AFD98F1D7C4C791A5D1FC37214419
596E47049EE23F41FED753DB8E4FFB01F4E8FA58E59C3718E51CEA7183BCE3
BFB4A8B58D2B758C5DA552FA5ED16D34D3FC4B82F84EBE3A7782F9F65DFF00
C8F1BF85DF0B3E19FECB1A0DDE87E0353AE78C75425F58D7AF3125DDD4EC77
3B48E7381B892B103807972CF92D7AD6DF56F14EB2B02B35CDE5E3F2EE73F5
24F6007E43A562F5AE5FF697FDA0345FD8BBE04DDF8EAEC4371E3DF12ABD9E
836129C93395C991D07CC61B7044937404EC8B7297535FE1C56E24E24F17B8
A5D7CE6B4BD8C5F34F5D211D925D1CE5F0A76D15EC9463CABF7CA987C270FE
0BF72AF37A2EEDFF0092DFFE0BB9F1B7FC150BF6B9B3F855E107FD92BE13DE
FF00C4F357803789EF627C3DBDA4EA08B4F94E44B72A419327E58085C379B9
5F873FE092FF0008C7C45FDAB2CBC5BA843BF4BF87F653EAF2161F21B971F6
7B5527B30790CABFF5CABF36BC41AFEB5E2BD7751F13F892F65D4756D5AE25
BABBB999B74B34F3317924763D5998926BFA10FF008271FC23F147857F626F
1778B7C2B6C078C7E325F3E97A5C8CC62D96916EB359CB80580B72D7770481
92A9F282719FEF8C1E0A86070B1C3E1A1CB0A6AD18AE892D123F27C2D29E33
1718549D9CE4AF27B2BBD5BF25BBEC8E3FC29F0D356FDB83F6A6F16F8BE495
EDFC1915F99EFAFD54A15D3A1FDCDA429BB8134B0C4A32785019C83B769F0C
FDB4FF00687F127ED4FE3BD23F63CFD927489B50F02F87654B482D74A52575
5B9B6F97CD2D90A2CEDFF85DD82120CEED8D857F4C3C6FF06BC6D7BE0087F6
29FD9827FEC1D1F681E3AF1A4D190B1FDA154CD6B02AB069EF6E130648D5F6
C306C8DDD448A47AEFC21F851F053F649F09C9E08F81FA524BA9DC2A8D475A
B9DB35E5DC89D0CB3003705392B1A058909242E4B67E2337E22CB3863032C7
E6D554652D7BCA4F7E58ADDFE5D5B4B6FD4F8F78B311C4B8CA781CBA2D6168
250A71D928A56E7979B4BE4B45ADEFF1CFECB9FF0004C8F85BF016D6C7E22F
ED2F25B78C7C638F36DB4541E6E9966FDB72301F6A917BB48042A49011CAAC
95FA77A6DC6AFF00112E5EEB546FECFF000E591CB44A76ABEDE76B3719C0E5
8F403A0079AF3CF0EE87AAF8EB5C6FB4CCEEB90F713B1C955F419EE7A28FE8
2BE45F1D7FC1553F667F01FC57D47E07DE68B7DAAF83B49096736BDA6BA4D0
7DB15F132AC194792088FDE9D1D99DC36C8D976BBFE3BC359B673C7952A636
A43D965D0BF2536DAF6F25B2A9249BF669FC492E5FB36934DAF9CC761F0B94
25493E6ACF797F22F25DFB5F5EBA1F6478E7C65FDBF32E9BA60F2749B4C2C4
806D0E5780C47618FBA3B0F7E071FA4E9B3EB1A9DB6996DFEB2E5C203E80F5
27D80E4D68781751F845F1D3426F157C03F19D8F896CD42B49024BFBF837F2
AB344C166858F659A3535EA1E05F0AEB9E1F8F57D7A7D31EE351B28644B4B5
2CB199E50A5B6AC8C760DC708189DA3273D2BF08C7F847C539AF15D2A79FD2
76AB2F7A71D69A84756A2D6914A2AD18BB3DB43EB68F11E5F87CBE52C1CB58
AD13DEEFABEFAEECFC26FF0082C5FC768358F1DF86BF669F0C4FFF00129F03
431DFEA68A786D4AEA2C408C08EB05B36E0C0F3F68604656BF267E1BFC27F8
97F17F5E5F0CFC30F0D5FF0089B526C168ACA069446A780D2B8F9234FF0069
CAA8F5AFDCCBCFD86BE02FC37F14EA9F1A7F6F9F88B0F893C5FE23BB9B549F
40D25E58A0926B9919D942A7FA64B1063B548104680052702A7F157EDF5078
4340FF008407F656F03E9FF0EBC3B0E44739B684DC9E07EF16DE3060473821
8B99CB75C835FE82E2B37C1E060A936972AB28AE896CADD3E763E6B83FC2AC
F73F97B4C1D17C8F79CBDD8FDEF597FDBA9B3E93FD873F634F1CFC23FD973C
73F09BE3D4B0695FF09C5DC9752C56172934D676F25BC50B0793634225063C
FC8645031C9E95F42780BE177ECEDF05044DF0E7C230DEEA90E31A95E0F3AE
777F7965983321F511AA2D7887EC13E39F18FC41F853F12F5EF1C6B577AE6A
2F7D8F3AF26699954DBEED89B89088093855C28EC057B9D6F82951C54218BE
4D5ED7DD6A7271451CCB20C4E2387D625F245AE6516D464DC56EBAF6D7EE3B
7BCF1A78AF5FB84B386730F9CC1562B7F93249C01BBEF73F5C569597C4AD0B
C31F17BC39FB3DE95B6EF5DBDD2EEF5DD4DC64FD9EDA26586327A7CF34CFF2
F5C246723E6535CC9F13786BE13F80BC43F1ABC712793A47872DA494720348
E3E5548F7100C923958A319E5DB15F99BFF04D8F1BF893E34FED73F143E34F
8BDFCCD4B52D1A52E064A42B71776FE54299E7645140234CF3B5464E735FB7
F02F876F1F93E679F6255A861A9B4BFBD5256515FF006EDF99F9F2AD99F99E
2717CB5214A3BC9FE07E91FC4CF02783BF696F06788FE0AFC42001B89A6974
CBD00196D6E2366F2A58F38F9A3CF4C80F19643C673FCF76A1F15BF6B3FD90
BC7FA9FC3183C6DAAE8D77E1D90DB8B4798DDE9ED11C3472C36D742487CB91
30C8DE58383D8E457EF325DDC47762FA27293ABF981C7043E7391F8D7CF3FF
000500F8036FFB41FC1B4F8D7E12B407C6BE0581BEDB144BF3DDE9C9979931
D498B2668FAFCA645196231F90FECE8FA5861F198DA9C11C57CB568D59374F
DA25249B765A4AEB4D232EEB965F664DFD97897C1AE84638EC2E9D1DBBFF00
C1FCFD51F2DFC39FF82B8FC41B358F4CF8C9E0BD37C5365F2235C5896B2B90
3F8DDE37F3A191B1C855110CF71DBEF1F873FB60FEC79F1A4C56DA77899BC1
1ACCF9C59EB40590CE70079ACCF6AC589F95566DC7FBBDABF993AE9FC17E0B
F14FC43F1469BE0BF05E9B2EADAD6AD2886DADA1197773F5C0555196666215
5416620026BFD64E37FA2CF07E3A9CF114E0F0B249B7284AD156EAE32BC525
D6DCBEA7E4386CF3111693F78FEB4B50F877AE5B22DC69C5351B79002AF091
92A7A1C1EC7D89AE862B6D17E1BD8AEA5AC6DBBD6665CC50A9FB9F4F41EADF
80F7F9DFF665F82A3F63DF8571785751D72E7C47E2DD676CF3DB0B899F4FB5
91B3F25B5B93B5101277481449337270A005F579BC25A9DDDBDE78C7E20EA7
0E87A7408D3DCDD5EC8B188E25192CC5CAA468A3BB101476C57F893E35F1CD
4C0E675F873825BC6E222EDED14796105FCD2BB6937F6549F9BE917FB0F0F6
4D4E74E38CCC5FB3A7DBACBC975B776BE5DD717AE6BDA97886F9AFF53977B9
E1547088BFDD51D87F93935AFA2F813C4FAE6D7B6B43142DFF002D66FDDA63
D467923E80D7C55F18BFE0A79FB2BFC0F79F47F849A7CBF147C476E4A1B889
FC8D3A3756C1CDE488DBFD54DBC4E8C38F3075AFC8AF8DDFF0528FDAC3E36B
4D65378A5BC1FA2CBC7F67F87B7D8291C8F9EE0335D3EE070CA66D87FB82BF
03E1BFA2AD6C5D678EE27C639D493BCA30776DFF007A725F7DA3E923EA71DE
20429C7D96029592D9BFD12FF3F91FD10FC47F881FB36FC04476F8DDF1234F
D2EF625573A74527997A558E0116B0896E5949FE21181EF5D9FECCDFB54FC2
CFDA1F43F126AFF0CECB53B2F0AF84EEA1B01A9EAAAB041753C8BB996DF74A
F26D453193E6043FBC5016BF8BE861BCD4AF23B7B747B9BABA902A2A82F249
239C0000C92CC4FD49AFE873E375827EC91FB20FC37FD967459841E28D6953
59F1049130DE255904EF9239C1BADA9138EA96F8AFE8CC8B81B23E18C3CEB6
5B865076B37AB93F27277766FA6DE479FC3597E61C4D9AD0CB1D47EFBD7B45
2D5BB2B2D15FD5E97D4FD4FF00DA1344F8EDAEF869BFE19FBC596FA16BD62A
6496CE7B6824FB5A11C2A4B3A3889B821495DA4F059304D7F3F1F12FE2B7ED
1E35FD4BC35F13BC57E20B7D42090A5D585CDDCF0C68DE9E42B2C6148E46D5
DA41C8C839AFDF6B7F18DC78C3E1EF813E2C699279371ACE9B6F34AC9C6D92
589646423A10AFBC11D2B85F8B7F06FE1B7ED51E1E1A378B615D1FC5D69191
61AAC083CD53D4291C7991E796898FA942A7247B59EE4D3C5C3DAE1EA3BDB6
BBB3FF00267E87E14789785E1EC53CBF38C241C149A73508FB4834F5BBB5E5
14FA6EBA5F489FCE592589663927A9AF50F86FF053E2B7C5DBAFB2FC39F0C5
E6B4031479E34D96B1B019DB25C48561438E819C13DABEFDF881E09FD89BF6
09874F9FE3BC97FF0011BC6F7B6FF6BB3D305A9FB3C8819937AC0585B84DC3
6B0B89A43C6E54ED5F0DFC65FF0082B87C79F185AB7867E0C69B63F0B7C391
2F950AD9225CDF0887017CE9104518C7411428CBD98F06BE7F2FE07A92F7B1
32B792D5FDFB7E67EC3C61F4A7C1D06E964943DA3FE79DE31F947E26BD794F
B12C3F608F0A7C35D1E3F177ED53F1434AF04E95C9FB3DBCF1ACB20DB9D8B7
173B57CC078D91C52E7B1E6B8AD5FF006DFF00D80BF67226DFF67EF8773FC4
7F10DAE0A6ADA8A98A1F35463CC49EF15E646F510DB46A7B1E6BF0D3C53E2F
F1678E7599BC47E34D66F35ED56E4E64BBBFB892E677FAC92B331FCEBEE3FD
86FF0060EF18FED5BE234F11EBE26D03E19E952FFC4C3542363DD14E5AD6C8
B0C3487A3C982910E5B2DB51BECF0790E130CAF082BAEAF57F8EC7F32F1478
B9C439C5E38AC54941FD98FBB1F4695AFF00F6F5CFD6AFD8CFE38FED5BFB66
78CE7F8BFF0010F518BC0DF07BC273168EC3498DAD86AD7D17CC913DCBB3DC
3C3070D3E2458E46DB16C60D204FD005F8942F7C4574BAB4627D02F94DBC96
F22874109CAEE28720E413BC739071CE0571F7F71E16F0BF8634CF85FF000C
F4F8B47F09E83125BDBDBDB82A8563E9D7248CFCC598967625D892735C857F
1178D1F487C43CD68E1F87AB5A18797339ADA735A5BCE095D76936DEC933D4
E17E0C82C3CA78C8EB356B765FE7F97DE7E4FF00EDA9F083E297EC8BE3887C
45F07BC57AD68FF0E7C52ED269BFD9FA8DCC11D94E46F7B3262900DA07CD09
3F79323928C6BE67F0D7EDB3FB57F84D76697F13F599C039FF004F986A27F3
BC59ABFA1DD5BC17E18F8F9F0BB5DF815E3BE6DF53818D8DC603496D3A7CD1
C91E71F3C4F8751DD7729F978AFE5CFE237803C49F0B3C75AE7C3CF1741F66
D5F40BA7B59D47DD250FCAE84E328EA43A1EEA41EF5FEFFF00D0CFC6DC8FC5
1E16854CC70F4EA62A924AA29C6326EDA5DDD6AD3D24FADE327F1D8FC078C3
21AF95E2E54936A3D3FAFEBAAE87DA1A07FC14F7F6BDD1B3FDA1E23B1D7067
A5E6996AB8F6FF0046480D7A3E9DFF000562FDAA2F6E60D3ACB42F0E5F5DDC
BAC51469A7DDBC9248E70AAAA9760B33138000C935F1EFC0DFD953E37FED0B
7F1C3F0F3C3D2B6985F6CBAADD836FA743838399D861C8EE91877FF66BF7BB
F679FD89BE19FEC93A17FC27B7F0FF00C265E398D406D46640915A193E522D
6324F96BCED321DD2364F2AA4A8FA0F1D388BC2EE10C157C563F014675A9C5
C9D3A7057492BB73E45EEA5BBD399ADA2CE2C9F0B8FC5D48D3A727ABB6AFBF
A9EDBF057C67F1D2DFE1C0F19FED2F1E97A56B7A9ED7B3D1B4B8248A4B78F1
90B70F24D36656C82CAB8118E092C485E37F692FDB43E1E7ECCDE31F07787F
E2C585E43E17F1D5ADC3DBEB1625A46B59AD1E3F356685312797B268C8788B
36491B08E68D6F5DD4BC437CDA86A72F992370AA38545ECAA3B0FF00F59C9A
F82FFE0AF7A05AEB7FB2CFC32F1D18BCCBCD1B5D5D3964032521BBB49FCCC9
EC0BDA479F7C57F8C1C05E3FFF00AE7C4D8F8D1C3C68D05152A708AB592959
BB6B6BF3474BBB5B56DB6DFEBD9E709FF6760E94E52E69B766FE5A7E4CFD26
D0A2F08FC54D023F1CFC21F145A78BB47BAFBB2C170B290D804A3303C38CFC
C8E1597A119AC0BCB1BDD3E636F7D03DBC83F85D4A9C7A8CF51EF5FC857C33
F8B7F137E0E78813C51F0B7C4B7DE1AD4C603496733209541C84963E5254CF
F048ACBED5FDBAD8EBBA05CDEDAFC37F11DF5BEA5E2CB7D260D4AE2D245459
6688B181AE1130176999483B784257380CB9FDEE9509CEFC916ECAEEDD1777
E47C6B68F9D6BCFBF6A6D5FF00E11DFD887E28EA473FE911456831E977716D
6DFF00B50D7D3B3687F0FB5591E2B5BD7D26E5495314A701581E411277F60F
5E55FB4F7C08F187C5CFD9A35BF841F0F2FAC5F52D5AE2D65335E48F0C0D1C
1729704068D253BBF76A0718F715F5BE1D57C3D2E20CBEAE2E4A34A35A9B93
7B28A9A6DBF9230C5A6E94D477B33F93CAFB5BF644FDB4FC71FB306B474B9D
5F5EF02EA326EBED25DB98CB70D3DA96E125C7DE53F248386C1DAEBD06B3FF
0004CEFDB174BBA3059F83EDF568C7FCB6B5D52C550FE13CF13FFE3B58EBFF
0004E3FDB39BA7C3B6E3D755D2C7F3BBAFF5AB88B8CF81B3BC04F0198E6187
A9466B54EAD35F3F8AE9AE8F468F83A387C5529A9C20D35E4CFDEAD02EFC03
F1A7C1F07C50F823A947ABE9376332DB47C4B04A002F13467E68E45CF31B0C
F75CA95ADCF859137FC2650EE0418A394907A8F971FD6BF243F66AFD903FE0
A15F047C629E2CF0459D8785D9CAADDDAEA5A9DBCD657B129CEC9E2B479F70
E4E1861D724AB035FB9BA71B5D22C2CFC63F1123D37C3BAEB41B2F4C1785EC
C39C6EDB34D1C05C71C33229EC720035FE1578E9F43EE1FC8B8B70B9EF08E6
34AAE1D558CE508CA2ED677FB3749FA7BAFB41E8FF006FC8F8E7135F053C16
2A9B7271693B6BAAFC7F3F53F998F8FD2ACFF1DBE23CEBC893C49AC30FA1BC
94D7D61FF04DAF8883C2BF1D66F065E49B6CBC676325B05270A6EAD419E127
FE002541EA5857AF7897E15FEC05E15F146A7E2DF895F1327F186A5A8DDDC5
DCD65A6CDE6DBBCB712190A81631BBAE09239B81EF5FA33F02FE197C1EF0E7
86AC7C55E04F8771F834CD19303DF5B46BAA7D9C8C869656796650E39DAF26
E031B829C81E665191D5FAE7B6552374EF64EEEDF2D15FD4FEBAF117C54C02
E1A7974F0955C6A41414A51F671E64959AE6F7A5CAD27A46DE68F65D2740B4
D17485D3208D6E023F9A37E3E69036E5278382A40C1C71807AD7CB9F183E2B
7C09F84D772EB5F1DBC736B16A5B729A55B3996E76E3E545B78B74FB79E1C8
45CF2C7A9AF857FE0AA5F14FE3A7C3DD6BC1F1781BC637BA2F82BC55A74CA6
DEC185B48F776B203333DC4616628F14D10085F6FCADC726BF0AA69A6B999E
E2E246965958B3BB92CCCC792493C927D6BFBCFC3CFA14657C6B9761338E21
C4F3E19B728D285DA6D3717CFCDEEDD34D59C66BB1FC0F538BAB60A73A7865
696D7EBF2EBF758FEC3ED3E2069575F0DFC2FE34F00DA0B2D37C57656FA85B
0962549560B985268CBAAB30F336B8DD92DCF73D6BCDAEEFB51D62E8497933
DCCEE70371C9C9E800EDF41599E014683F668F82D6EE36B2F85748C8F422C2
DF35DB780B4DFED2F135A86198EDB33B7FC03EEFFE3C457F33E6B95E1F038A
AD83C2C5469D394A314B6493696DA1E92AB29A539BBB649FB42DEE996FFB3A
FC5BF075BCBBEF348F036A534ABE91DC58DDA46DF56681EBF90DAFE8F3FE16
20F89DE17FDB43C416F2F9B6369A25DE9D6841CAF9163A65F42197D9D95A4F
F8157E2B7C03FD937E367ED1BA82C7F0FF004464D215F64FABDE660D3E1C1C
37EF4826461DD220EE3B8039AFEF0FA17712E0B09C3D9963F1D5A34E946A2B
CA4D25A2696AFABB68B77D0E4F11F876AE03308E09A7CEA106D76728464D7C
9CAC7E86FF00C12B7E395B5E8D7BF65FF17DC7FA2EAC92EA3A2173F76655CD
D4099EE5544E83A02921EA6BEB9FDBC7E06FC75F8C9F077C29FB3B7C14D3E2
78358BE179E20D4EE6E12DACA0B7B3C3C714BBB74AFE6DC3AC8A224761E4F2
00233BDFB2F7EC33F043F677D7AC751BCB83E32F8870AB3FDBA65C43627690
C6DE004AC679C0672F27395DA0915F7078EEDF47BDF0DDCD86BE2EFF00B36E
B114ED657135ACC8AC7AF9B6F2452A8CF076B64E718209AFE43F1CB39E13E2
0E31C471170D2E7972FB29CF64E574E497549DA2DF3252E6726D6A766550C4
D0C3430B8A6E306D4B6BE9B5EDA5FAF5B3D353F073C3BFF04F5FD8FF00F66C
48F57FDACFE230F166BB1057FEC0D30BC11E48C8568E02D76EA48F96466813
B30AEC3C4BFB7C587827C3E7C03FB29F8134FF00879A046088EE1EDA1FB492
40FDE0B78C18564CE72D219CB753CD7BE78D3FE09C1F0A3C5D24B7DF0ABC71
73A45D4C59C5AEA2AB78858F60730CCA3DDBCC3F5AF913C6FF00F04F0FDA53
C2464974BD2ED3C516C993E669B749BB6FFD72B810C84FB286FC7AD7F3F677
8BCDF550A7CB1FEEEAFEFDFF00047F5E785FC3BE1DAE5A989C5AAB57B56FDD
C53FF0BF75FA394D1F2278C7C71E30F883AD49E22F1BEB375AE6A32E419AEE
569582E49D89B8E1101270AA028EC057DB5FF04E4F87B0F897E36DCF8FB550
ABA57816C65BC791FF00D5ADCDC2B4516E278184F36407B14CD7C67E2AF867
F11BC0AEC9E33F0BEA7A1ED38CDE59CD029FA33A8047B83835F7E9BB1FB35F
FC137B5DF11498B7F12FC619CD8DBEE525BECD78AD100718C0FB1C73CA8DD9
A45F502A7C2EE0FC467BC4385CB209F3549C56BD2ED2BBF4DDF9267EC3E3AF
1861729E12ACF0728DAA2F671E5B5ACD7BD6B696E54D69D5A3F29FE3DFC4DB
8F8C9F19BC63F13676768F5FD4669ADC480074B453E5DAC6C0778E0544FC2B
F64FFE09C1FB3A5BFC23F87D3FED2FE3FB3C6BFE2280C5A15BCA30D0D8C9FF
002D803D1EE719040C88464712115F9F9FB067ECAD37ED19F13D755F135B95
F01F851E3B9D5646F952E5FEF4566ADFF4D319931F7630790CC99FDE5F1C78
963D7B514B5D39445A5D80F2ADA345DABB578DC1474070001D801C0E6BFB8F
F6897D2830DC0FC351E10C8E69622A4542CBECC52568FA25694BCB962F49BB
7F9B9E1DF0A4B31C5FB7ACBDC5ABFEBCFF00CDF43A9F87B37FC24F7DE22D27
596F3D75BB4904FBBA306CA30C7A624200F4AFCEDFD8E7F6AC4D2241FB377C
789F65A4129B2D2EFEE1B06D258DB60B499CF440C31139FB87E43F26DDBF7A
7C2F9A58BC63682352CB2248AF819C2EC2727DB2057E107ED51E179FC1FF00
B45FC43D16E0052DAC5CDE200300457EDF6B887E092AD7F945E03F12E265C3
54B10E4DCA9D5A9177FB5CD6A8EFDEEE4F5EE7F63F00F09E0339C566192631
69529D39C5ADE0E0E50BC7FF0002575D5687EF0F897C357BE1BBE36F38DF0B
E4C5281C3AFF00423B8FE98AE72BE33FD8EBF6CAB0D5AC2CFE067C77BCDD0B
6D8348D6276E508F96382E243D08E91CA7FDD7E39AFBC7C4BE18BEF0DDDF95
38F32DDC9F2A503861E87D08EE3FA57F54E5999D2C5D25529BF55D8FE71E3A
E04C770FE3A582C6C7CE325B49775FAADD3DCE67E20F8E3FE14FFECE9F11FE
2AACC2DAEEC34E9A2B1918640BC917C9B5E3B83712C60D7F2895FD0AFF00C1
492FFC5337C25F87BFB3BF80B4FBBD53C43E39D41AEA5B4B38CCB24B058287
68DD57270679A370DC0022249001AF3BFD9C3FE09A5E15F005B5A7C44FDA9E
78AFEF4624B7F0EC0FE640AE3902E9D4FEFD81EB1A1F287F133A9207F7FF00
81BC7FC3DC01C175F887882BAA6EBC9CA2AEB9A50A7EEAD1DACB9B9FDE6D47
5DEFBFE518FC0D7C6E2A342846F6FCD9F9F1FB307EC49F16BF698BD8B53D3E
03E1FF000723EDB8D6EEE33E510A70CB6D1FCA6771C8F948453C33A9C03FBC
1F0BFE1CFC1DFD973C34FE11F835A6A4FAACE816FB58B8DB2DCDCB8EEF2803
7007958D02C6A79009CE7ACD7FC6F3DFD9C7A16856E9A3E896C8228AD6DD44
6BE528DAAA42800281C0450140E39C035C2D7F93BF4B3FDA419DF184EA655C
3B2743097B5D5EEFCF5B36FF00BD24ADF66317EF3FDA783FC2DA586B57C6EB
2EDFE7FE4BE6DEC684B3DFEB7A8892E656B8BABA70BB98E49663803E9E83B5
7C45FF000542F15443C55E03F865685847A169B2DEC983F231BB710C608CFD
E45B6279E81F8EA6BF417E1D69DFDA3E2EB156194B72676F6F2C657FF1EC57
E307ED277DADFC76FDADFC4DA4F85E07BBBCBED5D744B18B76E53F63DB6818
1E42A3346D213D00258F7AFC1BE8F39754594E3733AADCA75EA46177AB7CAB
9A4EFBBBCA4AFDDA3FA2FC2EC0D3ABC490AD3B2A786A529B7B24E5EE2F4B47
99F91FFFD5FD2FF1D689F053E39D82E93F1C3C1767AAB05D897A8856E2107F
E79CC85678C77C23907B8AE93E00FECF9E0DF843F0FBC41F0FFC07E21B9D67
C29AADD3DE59417A525974F9A545DE82450859372A3AAB20653B892C5B3506
83E0F865D3A6F1478AEEE3D1BC3F651B4D35CDC3AC4BE520CB3167215500EA
EDC7A66BE32F1D7FC146343D23E237873C2BF092C522F02E9DA842355D4268
8F9B7B6C5C2CBE446C32881497DEC3CC76038400EFFE78F07BC4FE35C7F0F5
4CAF8AABF365B555A309AF7E77D2EA3B28D9BBCECA524F79267ECF47C3479A
6324F20A2DD4A7ACA4BE08DB5B37FCCDAD22AFE89276FA92D74B9E6D661D16
606299EE16DD877562FB0FE46BE04FDBB7C15E24FDA77F6D7F057ECF9E0F62
91E8FA4C26F670A5D2C52E2469EE6E1C7030B008768246F72A80E5857EB71F
0E27FC2D1B4D52D42C96575135E865C152C1769208EBF3156CFF00B55F19FC
55D72C3F657D17E267ED05A9AC72FC4FF8AFA94B67A3890067B6D3AD144166
307242A411ADC4A30332347138F941AFD07E84D08F877573ECEF10BF7D4DCA
951BF5959284FF00C3C939CBCDDA3D4F99E27C1E238871781CB7071BCAA5B4
ECDBD6FDAD6D5F4576793FC72FDAE8FECBDAF687F00FF672B1D3BFB13C0B66
2CEF45DC4D3C6F71C131E6378D8BA72D3386CB4AEDBB9539A3E18FF829DE9B
A97916BF157E1C417408C4D75A74E0907D52DEE14FEB71C57E4BDDDDDD5FDD
4D7D7D33DC5CDC3B492C9231677773966663C9249C927A9AED7C11F0B3E247
C49B8FB3780BC33A86BC4388DDED2DA49228D8F4F32503647F57602BC2CD38
971B98622A54AEFDA7B46DB524A57BEF74D3BB7D5F567F72E1FC0EE16C1659
4A8E32924E9C6CEA733836FAB6D35D764EE92B2E87EE4FC3FF00DABFF63BF1
96A5657716B327862FF76F16BABC725BC619791BE5CC96E3D40F387F4AF8B7
F6DAFD84BE3AFED77E3D9FE35FC31F88DA078CB445812DF4AD316436F1DA5A
A0CF9504D1B5C4333BB92EF23BC7B98FF0A8555E53C13FF04DBF8EBAE42BA8
F8E2EB4CF05D8264CDF6AB8173711C6067784B7DD111ECD32E3BE3A57D1DF0
27F668FD98BC3DE3D8743F0CFC5CD53C67E34B453F698BC2D74D0430A1CFFC
7D4BA7F9AD6ABC6079B751EE6C0196201F738432C96054A385C0C29466EF2E
54A177B5DA5FE48FE68F12386383A95DE13379CA6B68DBDB2F4525CA97CE4D
9F817E3CFD8E7F69CF867ADDA685E35F875AAD8C97D7315A417090FDA6C9E6
99C471A8BBB732419662001BF35FD8A7C32F05F87FE08FC24F0BF80209522D
3FC27A65AD879A46048D04611E4C752D2382C7B926BBAB0934DD3DA1F0F5B5
C34B3411642CB2BCF3796B81BA49242CE49C8E59893EF5F998DFF0525FD997
C55E33D67C05F11ED6FF00428348D46EED2D3568F377633C70CAD125C660FD
EA798A0300627500F2C719AFD5F2EE12E20CEF058BA9C2F86588AD456AAEEC
9BD94B953977D12BBB74DD7F3A7B5C3D2AB058A938C1F5B6B6F9BB7E3F79F5
378ABC7D26A513E91E1F8BFB3F4BCB12A802BCA5C9662D8E9B89248EE49249
CD711A569779AD6A10E9B609BE698E07A01DC9F400726BA9D0B40F077C45D1
FF00E124F843E2BB0F1469A71CC13C729524676B346480FF00ECB8423BD789
7ED57FB45E8BFB127C1797C42CB0DE7C47F14AC96BA259390CA8EA06F9E403
AC36FB959F1F7DCA47901B7AFF009D589F05B8CF3DE29F63C594E74D4759C9
FC2A29FC10B689BD94775ACA49B4EFFB0AE26CB70780BE01A6FA2EB7EEFAFC
FE48F97FFE0A4FFB645B7C07F08CBFB317C1BD402F8C75AB7075FD4616FDEE
9F693A03E52107E4B8B843D7AC509047CCE8EBFCE659595EEA779069DA75BC
9757774EB1430C485E492473854455C9666270001926BE80F847F04FE39FED
81F146F6C7C1F693F8835CD52E1EF355D52ED88B781AE1CB49717770410BB9
B71C005DCE422B1E2BF7B3E027ECFBF033F634F11E9BE01F015A45F153F683
D5D42C975280B6FA423AE6495C8DE2CE08D0E5B1BAE25040E15D40FEF0C161
30B976169E1A845429C128C52FC12EEFF167E6582CBF17996224A945CA5ACA
4FA24B7949BD2315D5BB247CF9FB087FC12EFE2268FADE93F1ABE376B1A8F8
265B5226B2D1B4ABA92CF547561FF2F7730B2BDBA30E1A146F308243346415
3FBCFE2AB4B7D4740BCD167D46E3491AA46F689776B2795710BCCA555E2930
76B8EAADEB8ACFB0D55B49B792D75BD452EA4D2EDCDCEA57AEA21850E0B10A
99223400120124AA01B999896AF987E0DFC6397E3FFC02BEF89AE0A4379AE6
A296C8576B47670DE3476AAE0123788366FC756C9EF5F534324C456C0D5C7A
8FEEE128C64FCE6A4D2FBA323C9F6CA9564A12D56A9FA75D7F53F13BF696F8
1FF10BE087C46BBD33C757136AE9A9BC97167ABC859C6A1193CBB3B963E68C
8122B124139C952AC7E78AFE95FC55E0FF00087ED01E02BAF851F11D373CA3
7585E800CD6F70A0849118FF001AE71E8EB956EBCFF3EFF183E12F8B7E09F8
F350F00F8C60D9756677453283E55D5BB13E5CF113D51C0FA820A9C30207E1
5C49904B093F690D60FF000F27FA1FE907827E2E52E20C2FD531368E269AD5
2D1496DCD15FFA525B3DB47A7EAAFF00C137136FC08F88937F7B522BF95AA7
F8D7D55A46993EB1A941A6DB7DF9DB19FEE8EA49FA0E6BE62FF8274C5E4FEC
D3E38BD3FF002D75C9A2FF00BE6D6D7FF8BAFA33E217C4DD27F674F81FE26F
8D7ADAA497904260D2EDE438FB45DCA76411E32090D272F8E446ACDD057EAD
C0B94D7C6D3C2E0B0B1E6A951A8C57772765F99FC5BE38568FFAD18F9B7A29
7E5147E637FC153BF6838B50D7B4CFD99FC19705748F0BF9577AC146E26BE7
4CC103600C88636DEDC90649064068EBAEFF008244E966CB42F8C5E3265E61
834EB788FBA25D4B20FF00D02BF18F5ED7757F13EB9A8F8975FBA7BDD4F56B
896EEEA7931BE59E773248ED8C0CB3124D7EF4FF00C131B4BFEC6FD933C71E
2275C49AB6BD342A7D628EDEDA31FF008F48F5FE8F7D24325C3F0578378DCB
F0EECE305CD2FE69A7ED272F9B8BB768D9743F09E1E6F179AD3BF56BFC8FA7
6BB8F00F88D740D7156E88FB0DEE219C37DD00FDD639E3E5279F626B93B2D3
AFF5297C8D3EDE4B993FBB1A963F8E3A57A2E95F09BC497D87BF68EC10F673
BDFF00EF95E3F322BFE5E3C36C93886598D1CC322C34E73A724D349F2E9BA7
2768A4D5D3BB574D9FD679DE2B06A8CA8E2E69292F9FC96E7F3FBFB62FECA7
AFFC2DFDA65BE1FF00C3DD225BED3BC6F28BCF0F5B5BA6E245CB90F6ABD879
1265793C47B1988CD7ED57EC71FB1CF877F658F03CDAFEB925B5D78F754B7D
DA96A7260C36516371B7818E3112633236419186490A142FD29E37D7BE15FC
2BD2B44F1D7C5AD4B4FB07D189D3ECF57BF45578A4BC50AE91C87732195631
BF0790BC9C56CE85F133C19F102C4CFF000BFC4FA2F8924C6E06DAFA3B941F
EF790CE463DFA57FBEBE2078F5C499EF08617075B0F5214A304AB4A29B7525
1FB3CD1D34567249EB3D76B1FCC384CA68D2C549C649BBE97DADDF5FEAC7C8
9F13BF688F186837973A1FECBFF09F5BF8ADE2EB956275DBAB692CBC3F1B10
4061A8DC0862B900ED212D9846CBD260462BF35FE24FEC51FF000537FDAE6E
FF00B63E38F88749D0AD565325BE8D79A9ECB1B5C16DA62B6D363BA8772AB1
02476694AF0CE6BF6E3C4175F1761DECB1A88477B2557CFD03664FD2BC7B51
D63C433CAF0EA97972CEA70C92BBF1EDB49E3F2AFF0036388BE90197F0E2FA
A51CA6B4357F1C552526F7777CCE4DEEE4D5DEEEE7EA182E0EAD8DFDE4B111
7E8F9ADF95BD0FCAAD27FE0899AA476E8FE33F8CDA769571C6F8EDB4A6B841
EA03CB756E7F129F857AC695FF00047BFD996C6255F137C55D6AFE503E66B2
3656EA4FB2B457047E66BEE3A2BF2FC77D30B3093FF66C0423FE294A5F9289
EF52F0D68AF8EB37E892FF0033C33E0D7FC12FFF00649F873E3FD1FE28E81E
23F10EBB75E0FB98F5148753B9B46B112C39689E609650B111B0120C483951
9C8C83F99BFB4AFC5B9BE36FC67F11F8ED256934D96736DA6AB6E012C2DFE4
830ADCA9703CC65ECEED5FACFF00B65FC46FF852DFB37AF832C64F27C47F10
CBDAB01C3A59ED06EDB90463CB65848E0E652474AFC21AFE87ADC418FC5E5D
86598C631AD28A9CE31BA49CB58C756DDD45ABEBB9FD1FF46CE04A386589CE
95DA9374E9B7FCB17EFCBD1C9597F85F73F7E7F64AD55BC45FB19F8684CDBE
5D0EEAEADC9F65BA90A0FC12551F857A2AB32307425594E411C10457857EC1
D2BCBFB22EB28DD21D7AE157E845AB7F326BDCEBF5AC8E6E583A4DFF002A3F
94BC54C3468F1266108EDED66FEF77FD4CDF8CFF0005FE1EFED7FF000CE7F8
57F1323106B16EAF2E8FAB2203716773B78910F1B81C012C7902451D982B2F
F26DF1AFE0D78E7E017C49D63E177C43B3FB26ADA4498DCB930DC42DCC5710
310374522F2A7191CAB00C081FD7DE89E1FD7B569925D2607F918112FDC552
0F5DC71C8F6E6B88FDA4ED3F633D235AF0A7C4DFDACEFB408FC4BE0C86496C
63BC9BCC9E64765195B08F335E223E1D53CA915189600726BD53E00FC5FF00
D87FFE0999AC7C5AB6B0F8C7FB432CDE1BF87602DCDB5839682F7578BAAB13
C3C16AFD9F89245FF55B432CB5FBBD71317D0ECFC0DF0CF41FECAF0B6991AD
BDB5AD95BF97108938550A802A20ECBF89E7A7E7C7C58FF82D07C10D1E57B1
F85FE07D4BC6B2DBC842DC5FBC7A659B0C7124595B89CFD1E28CF5E95F0678
F7FE0B15FB5778A127B6F08C1A1F8320663E54967646EAE513B067BD79A263
EE215FA0AFCDBC40E0BC7E7D47EA31C63A1877F12846F39F939369463DD24E
FD5DB43DCC9B34A38497B574B9E6B6BBD17CADABFC8FDEEB5F86BE32BAC1FB
0F92A7BC9222FE99CFE95BD17C21D7150CB7F7B6B6D18E49DCCD8FAF007EB5
FCFBFECA5FF0524F8F707ED25E16BDF8E7E38BAD7BC27AD4BFD95A84132C30
5B5BA5E32AC774B14291C6A6197633305CF97BD47DEAF5AFDBABE1F6B5F0F3
F680D5ED6F6F6E6F74BD6946A9A69B899E631C172CDBE152D9DAB14CAEAAA3
A204CF5AFC6315F468E19CB692AB56356B6B6779A8AFFC9629FE27ED5E19FD
6B89F1F3C07D66341A8B92F739AF67AA5792D55EFE97EC7EC1DDF887E06FC3
DBF5B9F147C51D22CAF6C5848605BBB759D4A9CFFAAF31E43F4D9CD7C93F19
7F690FD80F50F1C7FC2CF97C163E25F8C0DB240B3B59C896B8B7CF94264BED
91EE19C0916091B000CE1540FC6BAEB3C0DE08F13FC47F15E9DE0AF0758BEA
1AB6A9288A1893F32CC7A2A28CB331E14024D7E81C09982E198D4A3C330786
F69A4B96737297936E5ADFAAD9E9A688FDFA7F472C9E5FED39DE2A755415DD
F9611496AEF6574BAFC4AC7EC4FECF3FB44FC68FDAA7E2A41A468B690781BE
1BF85447777D069C0996545FF8F7B47BA21701DD72444910312BA9CF7FBFF4
BF13DBF8A35ED5340BA3BEC2F2268E01D321010C47BB02587A6057877C3BF8
69E1FF00D9BBE1459FC2CF0EC8B73ABDD8F3F56BD51869A79000EDEA170024
6BD9064FCC726C6957F2697A95B6A117DEB7915F1EA01E47E238AFD6301819
CB0EE18C7CF29DF9AFAAD7A76B7FC13F8E3C41CF32FC4E64D64D4552C3D3F7
616566EDF6DB7AB727D5EB6B2E873DA9D84DA5EA173A75C7FACB691A33EFB4
E323D8F515F3D7FC14234E8757FF008279F8AEE6550CDA26A1A6CF19FEEB3E
A30C591FF019C8FC6BECDF8B5A74716B56DACDBE0C5A9421B23BBC7804FF00
DF256BE46FDB8D7CDFF8276FC525271B6E74B23F0D56C0D7F10F827C3F3C8F
C43C5E55D231A915E716E328BF9C6CCFA0E29C62C5E4D4F11DDA7F3D53FC6E
7F3A3FB2A781A4F893FB49FC33F05ADB7DAE1D47C41A79B988F20DA4332CD7
24FB0811C9FA57EA77EDCBFB4478B7E1E7EDEABE37F01DE08F50F87F67A7E9
EAAD930CF1B466EA7B795411BA37FB4B2380411D410C011E2BFF00047AF86F
1F897F697D47E25EA7195D33E1EE8D7575F682C1638AEEF87D9630FEC606B9
6F41B33E95F2CFC63F1DCBF13FE2C78BFE21C84E3C43AADE5EC61BAAC534AC
D127D1136A8F615FEDDFD0E384696619B63B1389A6A74A14B91A6AE9BAAF67
EB18C97CCFC0B88710E14E318BD6F7FB8FEA0BC21E3FF077ED11F0C74CF8D9
F0E9F743789B2FED320CD6973181E6C32818C3C44F2718742AEBF2904D686E
2E2DDB7DBCAD137AAB153FA57E087EC49FB57EA5FB31FC4A56D59DEE7C0DE2
2648359B500BF96A0E12EE25193E643939001DE85971BB632FF433E23D274D
7B5B3F16785AE23D43C3FACC69716B7103092268E650E851D720A3A90508E0
8FD7F2BF1DFC1FADC259B3A74D3785A9774A5E5D60DFF347F1567D5A5DB95E
60ABD3BBF896E65C5E26F1142309A95C607632B1FE66B80FDAAFE2778AFE1F
FECAB7FE26D1358B8B0D7753BDB6B5B6BC8A4293464DC06708C39198E2707D
89AE8EBE54FF008297EBFF00D91F0BBE1B7C3F076C97B7336A12A0EC6D2111
827EAD72D8FA1AFE76CFF10E960EACD3B3B5BEFD0FD6BC22C9A38FE25C0E1E
71E68F3A934F54D45393BF9687E65EA9F1FF00E3A6B4A63D53E217882E236E
A8DA9DCECFFBE44817F4AF359EEB59F106A09F699AE352BEB86089BD9E695D
98E028CE58924E00EE6B4FC1FE0DF1478FFC4567E13F06E9B36ADAB5FBEC86
DE05DCC7D493D155472CCC42A8E4902BF713F673FD937C15FB3558DBF8DFC7
E61F107C419937428BF34161918C4191CBF66988CF50800C96FCB72BCAB138
F9DAEF956EDFF5B9FDF1C79C7D92F09E1B9DC23ED64BDDA71493979BB2D23D
DBF95DE879C7EC9DFB18699F0C2D6CBE30FC75B5136BF95974BD19C07FB2BF
549265E8D71D0AA748BA9F9F1B3F44FC75E20BAD3FC3D1D84C425F6A40EF45
39F2E33F7973DFFBB9EFC918E9581E17FB5F897579BC5BE21907D934E05973
C46AC064051E88393DF38CE6B80F11EB52EBFABCFA8C990AC76C6A7F8631F7
47F53EE4D7EB79765B4B0B4D52A4BFCDFA9FE76719F1A63F3EC6CB1D8F9DDB
D92F862BB45745F8BDDDD9F35FEDF1E036F8A1FB1B5E6B36B1B4DA97802F60
D45420059A042609C127908B04DE6B63FE798F4C57F3775FD79F85B4AD2BC6
1A2F88FE1D78813CDD2FC4BA7CF693A671BA39A368A451EE51CFE55FC9978A
FC27ABF83BC63AC781B568C1D5343BFB8D3A744F987DA2DA5685C2FAFCCA71
5FE997D0AF8B3DBE538BC9EA3D68CD4E3FE19AD52F4945B7FE23F23E23A16A
91A8BAFE87F57F77A78D17E1C7C3ED0946D1A768D6D063D3CB8214FF00D96B
0BC6BE365F83BF017C6BF1499FCABD8AD5A0B0271CDCC9FB9808EE479CE0B0
F4526BD1BE245BB0D4B49D26D9773476EA88A3B92DB401F957E75FFC14C3E2
145A2E87E0DF815A54A3E45FED6D402F19DBBA1B7071FDE6333907B853E95F
E6871466CE14EB629BD64DB5EAD9FB7F857C2BFDB19EE1702D5E1CC9CBFC31
D65F7A56F5689FFE09A365A4EA3F0EBE2EDBF89AD1752D2AF05AC5796F2A89
12E20682E44D1B2B70C1D18820F073CD7DB7A9F8FAE8D845A1785ED62D0748
B64114305AA88F6C6BC051B0284503A2A00074E6BE34FF00826CC5B3E0DFC5
1B9FF9E97089FF007CDB37FF00155F45D7F117D20BC40CE32FC160B29C1626
54E8D48CA525176BBE66B7DF6D1D9ABF5B9FB5F1BE5786AFC5798E22AC1394
6504AFD3F771E87A7F83F59D2BC09E15D7BE22EBCEB1DB59AA4085982EF924
75548C31EF248F1A2FB9AE1F5EF8E16DE0FF00DAF5FE0AF8AE50341F1C6896
4F685CE162D4B7CF185F6FB42284F5DEB181D4D7CB1FF0515F8A07E187C34F
841F06ECA5316A1E37F1369D7B7AB807365A65CC370EAC7F84FDA5EDCA9EE2
3615E25FF05339AE2C3F68DD12FACE568278FC3F652C72212AE8E97775B594
8E410464115FD05C07924F87B8570542D69A4A525FDE9DE524FD2FCBF23E33
C3CC9B0FC47C4389C0D7F86A539A8BECE36E592F46AFE7AAEA7E9B6BFA34FA
0EAB3E9B3E4843946FEFA1FBADFE3EF914EB0F126BDA66D1657D2C6AA3014B
6E41FF00016C8FD2B8DF80DF16EDBF69AF82B69E256653E31F0D05B5D56150
033C8172250A3F86651BD78C060E83A135AF5FB0617130AD4E3569BD19F8F6
7B92E232DC655C0E2E36A94DB4D7EABC9EE9F55A9EADA078FBC4BA8DFDB693
3241742E1C23174C1DA7EF1F9481C0C9E95F917FF050ABCF137ED1FF00B517
833F657F8616EB3C9E1A84248AA192286EAFD12695E5C657C9B6B5489B7019
5DD228C9E2BF54343D5F4CF037863C47F1435E477B0F0ED94D3ED8C6E92431
A17648D7F8A46002228E599801C9AF07FD9BBE0F5F7C10D0B5EF8DFF001420
8EE3E307C519E6BEBC4C64584773279C2CE3C9242A120CA01C160B18C8456A
FD6BC3FE3DCB782F098DE35CC9ABE1E0E3453EB566AD7B75508DEE96ADCE11
4EF24783532FAB8DA90C1D15F13D7D3FAFC99E8BE1BF02F84FF677F857A4FC
0CF87FCA5A47BF51BBC0596EAE2400CB2498FE294F519F9502A0CA8E2EF85F
C1DAB78A6E36DA2F956C87124EC3E45F61FDE6F61F8E0735DA687E0079964F
12F8EA636D6CC7CC647244B21639CB9EAB93D87CC7DA9DE21F1C3DD41FD8FE
1E8FEC1A6A0DA020DACE3F0FBA0FA0E4F73DABFCED7E1DE77E2167D578AF8B
E52852A8EF1A6DFBF28DDBD7F953BDE4FE26DBB28AB33F54A99F61B29C32C0
E5F694D6F2E97FD7CBA2F33D27C251786B48BD93C3DE1F4F3E58A32F7373C1
CB020052DDCF3D07039EF9AFC30FF8291F86A2D0BF695B8D523CEEF1169563
7CFF00EF207B3E3F0B715FAA3E2EF137FC2BBF801F11BC7AB27953DBE9D3C3
6EDD36DC3C66384E7DE5952BF3E3FE0A18C3C5FE07F827F16A28F7B6BFA338
9E61EB2456F711293EB992538F635FD019E65784C265CB0383A6A10A693514
AC92BDBF5D5F5DD9FA47D1DEA62619FD2C7D56DC6B7B4A4DBEEA0AA5BF047E
5ED7EE0FFC13D7E287C5BF88FE15BCF0478F747975AF07E8D184B2D6EE0E1A
39131B6D096E66DA39565CB460056386403E5EFD96FF00613D57C7F0DB7C48
F8D224D03C1A816686D1C98AEF504EAA4F468A16FEF7DF71F700043D7EC878
1751D1E09A2F0D7846C21D1FC35A1DB1586189046800200C28E157A9C75279
3CF4C784724C4466B1326E2BB77F5F2FC4FBEFA4478A393E230D2C930F4E35
AAA7ACFA536BF95ADE5D1D9D96CEFAA26F88FE32F859F09ACE6F899F11350B
2F0DA18E3B07D5EE5305232ECF1C265DA700BB12AA4E0B7626BE1CF11FEDCD
FB02DBEA2F2EBFF16A5D4EEDB92D1595FDCA63D03DBD9B201E80357D91E29F
16F867C41A0E9926B16306BFE0BF1A69A0C96D71124B1CB6F3A07F9E37055D
5E3900646C8F4F7FC0CFDB4FFE0975A9F82EDAEBE2FF00ECB914DE24F0749B
A6BAD110B4F7FA72F52D6F9CBDC40BD0A9CCD1F19F306E64D735591E7F8EAD
946650552B619DA54E77D344D4B96F66ACD59D9DAF6767A1FC8F47EB983A51
C451768CF692FCAFD3D0FB875FFF008295FEC09E1B88CBA649AE78A1D7A259
D84E8C7FF02E4B55FCCD795EBBFF000585FD9AF4BB677F057C28D6354B951F
226A26CED109F77492EC8FAED35FCEB515E8607C3EC870DAE1F014A2FCA9C2
FF007DAE73D5CE7173F8EB49FF00DBCCFEB5BF667FDB9AF3E39FC0FF0089BF
1C6E3C056FE0CD1BC0D1C91DA46B7DF6B3797515B99DE22FF67B70B8DD0A8C
0392FDB1CFCC3FB26787B40F80DF0A3C55FB6C7C5A8CCC6DA19A1D0A094FEF
6E65958C6CE84863BEE253E4A363E55F31DBE539AF4AF805FB3F6A87F618F8
4DF012D13EC973F132EA2D7B5F980DB243A5BC82FDE503FBE1059DB807F898
678CD7C41FF051FF00DA074AF1A78DB4FF00801F0E4A5BF817E1962D045064
4336A30A792F8E7052D9330A1233BBCD392AC0D7EE1E097840F8B789E860DC
6D86A2B9A6D6892BEA979BD12F377FB2CFAF9F1AFF006370BD7C35097EFF00
192F79F6A50D12FF00B7A4E57FEEA69FC48FFFD6F28FDA6BF6B8F1D7ED0FAA
369C0B687E0DB47CDA69513F0FB4F12DD30C79927A0FB8838519DCCDF2557E
917843FE09D9E23D37483E2FFDA0BC63A5FC3CD0A001A7124F1492A03FC324
CEE96F1E7B11249F4AFD04FD9FBF65DFD952CB47B7F16781FC3CDE2A84E0DB
EAFAD44F32DCE3A496F1CE91C4C9FC4934708470414761C8FCCA8F0666D8D8
3C6D68350BD9C9A76BF6F5ECB4D0FF0041F19E3770870DE1A397655FBCE5DA
34D69EAE6F477EB25CCDF53B2FD8B3C7AFF127F678F096B3A8AB36A5A2C0FA
3CD238396FB2154560C7EF6F8962663DDB3E95F367ED3DFB3F691F103E204F
F13FF697F8A9A5F80FC19A7836BA558ACD1A486D13924CD726345B895CEE65
48A5FE1405B00D7D39A87ED13F0C75FF008F57DFB1EE917F2DB788DFC3D757
73DCD94BE4FD89C88D63B689930CB722190CE0AE3CB55539C9F97F8EDF8B11
78F6C7E24788F42F89BAA5D6B1E26D1350BAD3AFEE2EEE24BA95AE2D2568A4
CCB292EC37A9C135F6FF00D914E746346B7BD6B5FA5DA56BBB7A1FC67478F7
1383CD31199E531546551CADB49C149DDA8B6ACBB5ED7B6D6BB3F6B756FDA9
BFE0999F00835B7C3AF06DEFC5CD6E05D9F6BBC88BDA3BAF766BE091A9CFF1
C36A41EDC62BE7AF89BFF0587FDA2FC4B03693F0B348D23E1D698A36C3F678
45FDDC6BD02F9970BE4600E9B6DD6BF2EFC19E0BF167C44F13E9FE0CF03693
73AE6B9AAC9E55B59DA46659646C64E00E81402CCC7015416620026BF70FE1
47EC8BF007F612F0CE9DF1BBF6C6BDB7F12F8FDD7CFD23C2D6C56E628271CA
9119216E258F8DD2BE2DE26FBBBDC46E7E8387F872B62B110C0E5B41CAA4DD
9462B57F77E2FA6ECF99CF38971B8E93AF98E22551AEB29376F4BBD3D11E67
F00BF642FDAB7F6DDFB37C49FDA8FC77AEE91F0DE4D97319D46E9CDCDF444E
E06CAD25FDCDBC4CBC89DA30A72A634901257F65FC2763F0DBE06F83A2F867
F00F42B7F0FE8B6E4979A352659E5200695E47CC92C84000C9212D8000C003
1DC7C4CD6DF5AB2D0B58D32ECCBA2EAF68973028E15F700E1CE3AE51D71E9D
ABC8ABF84FE905E3A66D83CC2BF0EE5F1743D9E939FDB7749FBBFCAACF7F89
F75B1FA0F0770961EA518632BBE6BECBA2F5EFF97A9A7E3DF1FCBF07FF0067
5F893F18A5B831EA36D632C5652B82E7EDB3010DB13DC83712A679E80D7F2A
15FBD9FF00054CF1AB7837E01F807E115ABBC573E25BD6BFBA0A461A0B040C
D1B8EB833DC46CBEF1FB57E5DFEC83FB35EAFF00B4DFC5CB3F092092DFC3BA
76DBBD6AF138F26D15BFD5AB7412CC7E48FD397C108D5FEE7FD00F8470BC17
E164336CC9F273A752727BDA37BAEEDFB47512EF7491F8871DE3DE37359AA7
AEB65F92FC123EC4FD80BE1768DF087C23AF7EDC5F19EFE7D13C23E18B69D7
4C891DA36BF909F29DF6EE51282E4430464E2498F6D833E67E0FFD9F7E35FF
00C14BFE2DEA9FB4AFC69B97F027C2D88B2C1733301E5E976ACCCB6B61E680
A5501632DCB811F985DF0CD941FAB1F1EBE12FC37D6A2D1F51F8F5710786BE
03FC2F312691E1A4DCBFDB3A8428638E5B945F99A189018EDAD901693F7924
8DE5B05AFCCDFDA57F6BEF14FC70C783BC3101F0B7C3DB0D91DA69306D8CCD
1C381135CF978538C02B0AFEEE3C003732873FC79E3778C73CF337AB9AE277
7A5387F2C17C29FE6DF56DDB4D17EC3E12F8378FCFA6A143DCA317EFD46B4B
F5515F6A5E5D3AB5A5FDB7C79FB4EF82FE15786A1FD9BBF61BD1468FA59716
B26B16D1B35DDEDCCA4231B624192495CE17ED0F973D220A023D7DC5FB3A7C
13B5FD98FE1EC9AA6BE56FBE2478B144DA85C39F35A10C777921CE72A84E5C
E4F9927392A171F34FEC0DFB38D9F867475FDA4BE245AE24652340B59179DA
D95377B4FF0013F2B0E7A2E64E85587DD7686F3C69E2A87EDA771B9901603A
244BC951E8028E3DFDEBF2BC8F0D5ABCBEBD8BF89FC2BA25FF0007F23EDBC5
6CF32ECAE93E16E1F56A517FBE9EF2A935D1BEAA2F75B736C95B5F98FF006F
3F8A6FF077F64EBFD1A0B82BE22F89929D3939064FB2CCBBEF1C86E4A98079
4C4721A6535C57FC135B516D4BF632D7ED1BA699E24BA817E863B39FFF006A
1AF817FE0A7FF18BFE1637ED173782B4D9C49A37C3EB71A6C4A8C1A337B2E2
5BC718E8C1B642C3B186BEE8FF00825EFCDFB21F8D93D3C55747FF0024F4FF
00F0AFF40B89380964DE11D29D58DAAD6A90AB2FFB7B48AF942DA746D9FCBD
4715ED31EEDB24D1F5BA3BC6EB246C5594820838208E845617C7EF82FA57ED
51F0BE4D3408ADFC77E1D479B4CB96C2F9848F9A273FF3CE6C00DFDC7DADD3
2A76EB5744BDD434ED52DEEF4B567B846F951416DE0F55C0E48238AFE1FC56
1615A9BA5515D33EEB21CF31396E329E3B072E5A90774FF47DD35A35D56878
BFEC05E10D5AD3F671D7FC33A95BC9637E7C4F7715CC52AED9227856D63955
94F465F2C823D457E76FFC151BE3B7FC277F14F4DF811E1194CBA1F80C05B8
8E13B966D5A6500AE1490C6DE32231C6E576954D7EFF006A3AB784BC11E1BD
4FC5DAE5CD9F8534F71F6DBFBBBC78EDA18A47554324F2395407855249E481
5F849E2CFDB9FF0062EFD98B51D464FD9ABC1AFF0013BC7B732CD2DD78A756
2C15EEA56632CBF6A997CF918BF2EB0450C52039593BD7EBBE04717657C278
A79A63A94AB55A51B528AB25CCEE9CA5277B5A3A2B293BCAF6D08F10337A99
DE615F1A9727B597335BDBC9773E73F82DFF0004EAFDA4FE302C1A95DE8CBE
0CD125C37DB35BDD6EEC9D731DA80676E3952C8A87FBD5FA67A17C7FFD8EFF
00609F83307C11F1378FE3F1FEAFA7CF71717369A2C2B717335CB4BB9D1D63
90C16E50E06C9EE15885EFC8AFC28F8EBFB72FED39FB46C93E9BE35F164F6B
A25D928345D201B2D3CABE0796F1C64C93AE46409DE5209E08AFD19FD897FE
097F6C2C6C7E35FED676A6CF4E1B27D3FC31282B2CD9F991F505FBC01EA2D8
7CC7FE5AE0068CFABE2EF8EB9C71950780CC6308E16F7F66A374F46BDE72BB
968DA6B48BBFC27CDE5D97430D25529B7CDDFF00C8FB8BE087ED13FB4B7ED6
CC755F84BE10B3F835F09E36914F88B538C5F6A77888719D3AD888ED918004
3BCA93C287383215287ECFD4FC70346B04D0BC3D773DFC910DB25FDD379924
8FFC4C380B9279F9555074450B8C729AEF8A5F50B68B46D2204D3746B4458A
0B5854468238C61176AE000001851F28E31D3358BA2D9FF686AF67644644D3
229FF749E7F4AFC469528538A841592D92D123D2949B7767C0FF00F056FF00
174DA67C34F85FF0D1CF9B26A57773AB5C33365C3D9C2B0A939E4EF377273F
ECD7E175B5CDC59CF1DD5A4AF04D110C8E8C55948E8411C835FAA1FF000527
83C6BF19FF006B47F037C3DD0B52F115CF84748B1B092DEC2DA5B9DB35C6FB
D67DB1AB632970819B8FBBC9E2BCE3E1EFFC1307F6A9F1B08AE759D2EC7C1F
69260EFD56ED7CCDBFF5C6D84F203ECE17DF15FEB2782F9E64BC31C1780A79
AE2A9D294E2EA352924DFB46E4AD1BDDFBAD2D16C7C1E634AA56C4C9D38B76
D3EE3C6BE1D7EDB5FB517C3068A3F0F7C40D42EED22C0FB2EA6C3518768FE1
02E848507FB854FA1AFBFF00E1CFFC15B20D4D61D2BE3F7C3F82FA1E035F68
C70EBDB22D6E58F3DC959D7D856F7C3DFF00824F7C2F9EE6FA0F1D7C596D66
EB48547D42CF448EDE192D03862BE6BCAF70CA18236D2D12E70703835F4378
7BF62EFD85BC1AB1B9F0B5E78A6E13FE5ADEDD5CBFE71878223FF7C1AFE78F
1CFC75F02D51952CFA9426E69EB182A72979FBCE9B9D9F949791F4191E479C
CE5CD854F4F9DBEED8F57F86FF0011BF673FDA0610FF0006FC676FFDA8CBB8
E95745A2BA5C0E479136D9481DDD3CC5F435E9FE1EF871AD43E29B7B6D6ADB
1690132B48BF346E10F0A0FF00B471C1C1C678AE13C3FA17ECFBE06B882E7C
0DF0A344D3EE2D983C772B656D15C2B29CAB09444EF9079077E457A4CFF197
587E2D34F823CF4DE59FF915AFF17FC49C4F8295338863F219D58421252E4E
56D4ACEFCAD282859EDEEF2F9DCFDB72C87122A0E9568A7756BB6AEBCF7BFD
F73F13BF6C8F1C78AFE38FC72D6356D1B4CBDBBD0343FF00895E98D1DBC8F1
BC36EC77CCA54156134A5DD5BA94280F4AF936E3C2BE28B452D75A3DE42A3B
BDBC8A3F55AFEA4B43D6FE266B61666B1B3B1B73CF993A48B91ECBBF71FC80
F7AF43B3D4203A5AEA5717D05C405779B88B0B095F507730C7FC08D7EC3905
2A79EF362E92AB18CB5E69D3E44FD1397335D9DADE67ED797FD22DE4B84A39
752C043969C5452556EF4EADAA76BBDDF5B9F9E3FB04E817F73FB26DC59DAC
599F50D6AEA4507E5E11E1424E7D3CB35F65D87C3EB4D12C9F50BCB56D6EFA
300ADB465110B7A0F31914E3B963D3A0CF07C5FF006B9FDA99FF00669F851A
3FC4ED1B444F118D5B58874D5B79666B61B2486E25320608E47FA8C0CAFF00
1735F10D97FC156FE0A7C40D3BFB0BE2A782BC43E1EB79F877D1B5377C67D6
5824B19B6FD33F435FD53C21E07F1366193C31F95E11D6A4AF1BA71BB71DFD
DE6E6FB933F96B8B38BB0F996715F1B88FDDFB593934BDEB27D2FEEA76F97C
8FA37E34FC39FDB93E2B5B4FA5D8FC49F0CFC12F0B48A53668AD737DA918C8
03F797F34569E5918C8FB3888AF4DEC39AFCD7D5BFE0965F08FF00B42E351F
1EFED5BA3B6A976ED2DC497305A895E573966779B542CCC4F249E4D7D19A77
ECF7FB1FFED5DA85DDD7C01F8A57B69E26950DC4961A97997522C6980C7CAB
B115CB004805C4D228C8EB5F297C66FD8C7E3AFC15867D5757D2175BD0A005
DF52D28B5CC11A80493321559620A07CCCE8101E039AFC8F8A7FB6728AD2C3
E3B032A725BA95D35E6D349A5E763F66E03F0DB8573AE584339B547F65D350
77EC9B9CA327E49B7E46B45FF0493F857AF0DBE0BFDA6743D4E63F7635B3B6
9327FDE8B5263FF8E9AE17C61FF0463FDA3B49B76BDF04F897C3BE29840CAA
09E6B39DFD36892268BF39857CEB5D2F86BC67E30F065CB5EF83F5DBFD0AE1
F8692C2EA5B5738F5689949AF93A5C78FEDD2FB9FF00C03F52C7FD12A166F0
B8F77ED287EAA4BF267CD5F16BF651FDA2BE060927F8A1E02D4F47B288E1AF
4442E6C47A7FA5DB992004F605F3ED5FB31F1EB5A7F8F5FB08FC10FDA06E0B
DD6B1A6A8D2B5097A967DAF6D732C9DF9B9B3523D3CCF7AE9FF657FDA5FF00
6CAF1FEB89E18D2B4E87E21E8C8522BC9755884115B4447CDBEFA3518661DA
4599D8676A1AFD695F851F0C350F0637C3FBBF0A6930E88D3ADDDCE956B0A2
D98BB6905C3318D1230D997E625906FEAC3922BE8BEB14F34C1CE14D357EEB
AFEBA9F8C2CA317C09C4786C462E70A9C8EED53926F95AB34D3B38B69BB5D5
9F46CFE6E3E0C7ECEBF15BE3BEAAB63E04D1DDEC95C2CFA8DC03158DBFAEF9
4820B0FEE20673D96BF6E3E0BFC0FF00875FB29F87E5B2D01975DF1AEA1184
BED4E440081D7CB45C9F2A2079D80966382E4E171F4078EFC57F0DBE1A6916
1A3F883C57A67C3DD3655315AFDA2482C2060BFF002CE2790C683039DA8410
39E86BC4BFE138FD9C9A33747E33F858C39E5FFB5AC31FF7D7DA715EAF0EF8
7389A50588A542751BDA4A0DAF959341E26F8F19871027848DA8E1FF00913D
65DB9DE97F4492F569327B9B99EF2792EAE5CC92CA4B331EA49A6C104D732A
C16F1B4B239C05504927D80AE3BC49FB44FEC6BE03805DF887E2A69DA98270
23D2E6FED12C7D0AD8ACEC3EA481EF5F19FC53FF0082B0F84F40B59F47FD9D
3C125EE1B29FDA9AD811C630D8DC96D0BB492061CA9926420E3287915FB1F0
AF825C539C5450C1E026A2FED4D3847FF029593B76577E47E0F5F32A14D7BD
25F99FAABE32D22F9BE1B58C9A8C622BAD3193703824212630323D8A93F4AF
86FF006EF6583FE09D7F12431C1B8BAD282FB91AB58FF453585FF04EFF008F
9F113F682F05FC5CD3FE27EB736BFACD9CF6D7B0B4DB55512EA07458E18902
A471ABDB03B5140DCC588DCC49EC7F6D5F03F88FE267ECE3F0FBE04F85C117
FF0013FC5FA76992C806EFB3DA20B9BF9EE4AE46E5822B5F3180392071CE2B
F997C41F09715C37E2CCE8626CE51C37BCE37B395E1B3697D99C7A74D8FB3C
266F1AD91722FE7D3D2CDFE699E39FF04E0FD9C753B4FD863C57736DA847E1
DF13FC6A5BD8EDAF6684EF86C92392D2D54A96566CFEFE646523E59430071C
FE737C5EFD81BF69CF83F2CD35F78565F126951648BFD0C35F445475668914
4F1803A978D47BD7F41BE31B4D13C2BA6683F0CBC2908B5D13C27650595BC2
A7223486358E24C9EBB235519EBC9CD54D23C7FE29D182A417867897FE59CF
FBC5FA64FCC07B022BD5E01FDA24FC3DCF319934308AAE1B99294959B724AD
2EB16B95DD6F25A3B46FBEB53C30A98FC253C429DA4D5ECFB74FBD797CCFE4
D67827B599EDAE636866889574705595875041E4115FA9FF00F04FDFDB5ECF
E17CA9F027E325DEEF01EAD215B1BC9DBE4D2AE266C95763F76DA463927A44
E779C29761FAFBE22D4FE1B7C41458FE277C3FD23C46718325D5AC37040FF6
44D1B91ED87E2BC9A5FD947F627F1A5E8B73F09C8B8979DB672DCDB01EF8B6
BA4007E18AFEC5C5FED18F0BB8D72C7946714AA45D4B59455E519F470E754F
DE5E574F54EE9B4FE42A786F9B60E7ED231D175E96F3B367D05A8F826E2C75
EB2B48B371A7DF4A8239979F918E4824770BCE7B8E47A0F88BF6A7F815F137
F6A7FDA5E2F0DF85A1FECFF0CF8434FB6B3BCD56E548B58A69F373288C7066
9764918D89D081BCA039AFD2FF0002F82BC29F09FC0F67E13F0F79B63E1FD0
E13E425EDDCB73F658106ED9E75C3BB88E3190A0B95451B570A001C7FC47D7
F5FB5BB3A427FA2D94AB90C84E6507AE5BB63A151F8E4115FCC59E65943137
A509374B9B46D72B696D757767B369376DAFD4FB4E08E33C46458A963B0B14
EAF2B8C5BD545BB5E56EAED74AFA6B777D8F25F867F0D3E167ECD1E1F93C39
F0D2D05F6B970A16FB569C079E661C90CC380A0FDD89308BD4E5B24E85BC3A
9788F5648B734F7776FCB31CFD49F4007E42B26BDFFC01E1D8F45B78EFEFC6
DBFBF07629EA91819E9DB3C67D381D68A74E9D18284528C569F7FF009B3C1C
D334C563F113C562EA39D496ADBD5BFF0086FB9239ED77C51F0D348D6F48F8
0779E23B7D37C55AF594B7B6364EDB66BA8ADDC091803C312D93B01DC42B15
042363CD356D22FF0044BC7B1D423F2E45E87AAB0ECCA7B83FFEBE6BF9BCFF
00828BFC71D43E23FED9BE28F10F8735096DE2F034F0E87A5DC40CD0CD0369
4C7CD74914839178D3BA3A91C1523D6BF54BFE09F3FB7B6A9FB4CDD5AFECF7
F1B34A9B51F175BDACB359EBD691652786D932ED7814621940C01201E5C848
560AE46FE83CE3EF7F0F6A5FD91ADD9EA19C2C520DFF00EE370DFA135F92FF
00B687C178F42FF82837826EE183FE255F12F54D0AE86136C5F686BA8ED2E6
307F8989412BFBCB5FB01E26F05EA9E1D769B06E6CFB4CA3A67B38FE1FE47D
7B571DF14BE0D41F1B753F827E3D4457BFF875E2486F2772C4116A8BBDC003
AB19E0B66E7A0CD7EC7E07F1EAC83389D7A92B53A94AA425F38B947FF278C5
7CD9E7E6585F6B4D25BA699EFF007D6B6F73E3C9755BF758ECF44B45964772
0229F9981627A0192D9ED8AFE6A7F682F8A33FC64F8C3E26F882ECC6DB50BA
64B356E3659C23CAB75C763E5A82DFED127BD7ED87EDF7F15A3F857F04B52D
134B9BCBD73C7F29D3E3C1C32DA88D45D38FF67CBC47EC65CD7E21FC2DF81B
F15BE33DFF00D87E1CF876E755446D92DC8511DA427824497126D8D4E0E76E
EDC47406BF95B8CF172AB56183A4AED6AD2EFD3F0FCCFEE3FA3370F50C0607
13C458F928465EE4652692514EF2777A59CACBFEDD67EA6FFC13AE0FB3FECE
1F103513FF002DF57921CFFBB6B07FF1CAFA83C15A3FF6E7896CAC9D7744AF
E64BE9B23F9883F5E9F8D617C0BF811AE7ECE9FB39EAFE0CF116A36DA86A97
FA81D4276B40DE4C6D37D9E1F2D59C2B3E162077155EB8C7192DF1DFC4AB5F
D9EBF677F1FF00C77BD0BF69D2AC5E3D396452CB25E484436C840E4ABDCBC6
AD8E8A09E82BF9D78EF84279BF1B64F95D58FB90A4AA4FFC2AA4DB4FD5A51F
99F99719713D0AB88CCF32C2CF9A33A8D45AEBEEC526BF3F91F83BFB7F7C67
FF0085C3FB791B6D3E7F3749F03EA161E1DB4C640DF67719BB620F1BBED4F2
AEE1F79153DABEDAFF0082A0FF00C9C0E89FF62D5A7FE965E57E13F816EAEF
52F89BE1EBDBF99EE6E6EB57B492596462EF248F70A59998E496627249E49A
FDD6FF0082A07FC9C168BFF62DDA7FE95DE57F52F19FFB93F5465F467FF92A
23FE09FE87CDDFB2F7C7BD4FF67CF8A565E2B42F3689798B5D5AD979F36D1C
8CB28E9E6447E74E9920AE40635FBCBE26D3B4DBD86C7C5DE15992F744D7A3
49EDA584EE46F3977A95FF0065C1CAFE231C57F3296F6F7177711DA5A44D34
F330448D14B3BB31C055039249E0015FD06FEC15E07F8DDE0BF8573787BE2F
58259E8A254B8D16D6E589BEB75625E45922C111C65F0E8AC43AB16CA80463
C1E09CC2A293C3B4DC77BF67FF0007F33F5AFA51707E0A5429E731A9185756
8B8B693A91E8D2EAE3FF00A4EEF448FB1B4FF0969C9E1FB0D1F52B75B95B59
22BA68D80646B989C4A8C41E098E50AE87B32A91C8AF8CFF00699FDB07E0FF
00ECCF3DC4DACCABE2EF88B227FA36916D20C5A29194F3DF045BA60E724195
F3954DA491F287FC142BF6E2F8CFF0C7C657DF03BC01A5CBE0F46B78E56D72
421AEAF20997EFD911958A3C8643264C9B9481E5B29AFC29BBBBBABFBA9AFA
FA67B9B9B87692596462EEEEC72CCCC724927924F26BFD12F07BE887473EA5
85CEB89E4A58756A94E9277E66F6949AD23A6D6BCD778347F03E378927439E
961F46F46FF4FEB4F53FA70FD923E3EF8CFF00699FD9DFC53E3AF1D881754B
2F105C5AA25B47E5C31C091DB4F1A22E4B6144A572C4B1C64935E895F0B7FC
12575E6D4BE14FC5BF0560E34EB9B4BF5F42D7B6F2C7FF00B6A2BEF6D36C9B
51D42DAC13837122A6476DC719FC3AD7E1FE3A70F50CAB8B31F81C35350A71
92718AD9294632497C99DD965573A11937767CE9FF000503F157FC223FB35F
86FC0D0C9B6E7C59A84724ABD375B5B0370FC7FB323435E99FB2FDBF80FE23
FECA3F0E35DF1FE9716B4DE0B9E6FB3C72AF98B1DD5ACD35BC24A1F95B113A
9018100E0F5506BE14FF00829A78DD35CF8D7A57822D64CDBF84F4C8D5D01F
B9737A7CE7E3B66210D7D19FF04EAD6C6B7FB3CF8E7C232BEE7D1B53376A3F
BB1CF0C6EA3E9BE073F89AFE6CC3E3635738A94E5AAB72FDD67F9DCFEBDCE3
85EA607C36C262A9371A8AA2AADAD1DAA73416BE71713EB6F11F8A752F124F
BAE5BCBB74398E153F2AFB9F53EE7F0C74AE43E2778B17E1AFECC9F14FC7FF
0068FB1DC43A4DCDBDACDDD6EA688C16C467B99E6403DEAD57CBBFF052CF16
BF83BF646D0FC1B6F22ADC78CB57B75990FDE7B5B70F76CC3FDD912007EB5F
BCF857C3FF00DA9C4980C035753A91BFF853BCBFF254CFE47C755E4A339791
EA9FB3078A4FC45FD897E1E6B2CE1EEBC3D19D2E7CF2516C647B58D7F18C44
DF435EA7E1AF15EADE17BAF3EC24DD139FDE42DCA3FD4763E8473F8715F0B7
FC128FC583C49F077E267C2699B7CDA5DDC5AA5B231E48BC8B610BECB25B29
3E85BDEBEC4AFE12FDA1BC358BE15F14F118EC049D3737CF16B4B36F9B4F2E
49C15BE4CFD7BC31C453C6652E8555749D9A7DBFE1D33E6DFDA9FF00E09E7F
08FF006AD8EF7E20FC2196DFC0DF12A4DF35CC4CBB74FD4A56E49B98E304A4
8CDC9B88949392648DD882BF83FA3FECA9F15B4FFDA43C2BFB3A7C47F0FDD7
87B5BD7B54B4B475954153692CA165B986552D1CB12461DB7C6CCBF2919C82
2BFA78B79EE2DA74B8B491A2990E559090C0FB115F5078774493C410691AF7
8EF48B4B9D5B4591E6D36E26851AE6D9A589A17910B0262778DD918A104A92
0F715EC7815E38E23891BC063A83F6D057738AF71AFEF7F249F45B3D6D6D8F
138B3852182FDF529FBAFA3DFE5DD7E47C87FB797ED21A77ECC7F06A2F0FF8
2992D3C61E2381B4DD1922186B1B58D42CD72318DA2252AB173FEB0A1C32A3
01FCC15B5ADE6A372B6D670C9737129C2A46A5DD89F403249AFEB13C7DE16F
D9D7C6BE3297C5FE38F015BF8A75E8235B4136A70ADD46B1424ED8D2399DE3
440CCC701002C4B119249DAD0BC5FA2786E38F4BF87DE0FD3341594AC6B1DB
429121C9C01B6148857F737873FB407C3CE04CA9E03090962315377A8D5D73
4B6514E309E91D95DABB6DE97B2F8FC478759AE327CF28F2C56D7B6DF368FF
D7F6FF00D9F3F638F16F8A2E6CBF681FDB9F57BDF126AA0F9FA6787B5399AE
0401CEF53751392A093C8B440110604A3EF469F557ED97FB59D97ECA9F0527
F185C2C47C5FE200F69E1DD2DB9026DBCCD2AF04C70290F27404948F82DBAB
D65BC41A75AD86ADF15FE24DFA587877C3504B7734B29C431A42BBD881C921
40CE072CD81C9E2BF931FDB03F69AF10FED55F1A354F889A97996DA3419B4D
16C5CF169611B1D808191E648499253CE5988076AA81F6BC73C7D9871062BE
B18D69463A42115CB0A71FE5845689777BBEAD9CD86C2C2946D1FBFAB28FEC
F1F1D75CF879FB527847E3A789B5296EEED35C5BAD5EEE662D2CD05F398EF9
DDBBB3452C87EB5FA71FB68FEC03F15FE35FEDCF7DFF000AAB4CF2F41F19E9
F65ACDF6AF3218F4DD39F06D270F28077CB2341E688D3323993380A1997E4D
FD8CBFE09F7E2AFDA2613F13FE255DB7827E12E9BBA5B9D5672B0CB7D1C393
2ADA197E458D7043DC38F2D0E428765755FEA2BC7FF0F6DB5FF84F77F0CB48
F11EA1E0FB79ECA2D3EDF52B19BFD32DD102A26269B7B1DC142B92C1D81387
562187CAE0F0F19D482AB2E4837672B3692D2EECB5764EF65A9BC9D9687E36
EB5F12FF00675FF826CF856F3E167ECF16D078DBE2F5D45E46B1E20BA55916
DE4EACB2142428560365A44D85C0333B383BFF0023BC77E3EF197C4DF145EF
8CFC7DABCFADEB5A836E9AE6E1B731F455030A88BD15140551C00057D11FB4
CFEC6BF183F667D4DEEBC4F6BFDB3E179E52B6DAE59AB35B3E4FCAB38396B7
95811F23F04E423B804D7C915FEBEF817E1E70D65195C31590CE35DD45EF56
D1CA5DD7F7127F6346BED5DEA7C06698BAD527CB555ADD3FAFCCFE9C7F665F
159F893FB14FC3CD7647125DF87A2FECA9F3CB22D8BBDA203F58D626FC6BD2
7C31A6FF006BF886C34E2372CB2AEF1FEC2FCCDFF8E835F10FFC129BC51FF0
917C14F89DF0BE53E649A45E45A9C084F3FE9B094017D8496A0FB16F7AFD0F
F8602CEC6F753F13EA722C365A35A492CB2B70B18C12CC4FA0456CD7FCF87D
34FC1F74FC6C8E0210F73115149AB6EAFCED2F4A6E28FE87E06CF79720A936
F585EDF3D17E373F0EBFE0A4FE2BD5FE2CFED7F27807C376F25FCDE1FB7B0D
06CADE125CCF773FFA438441D1CC971E51EE4A0CF415FA8BF0FACBE177FC13
83F671B1B4F16C897BE2FD6F373750DB906E352D4768CC51B11F2DBDB8213C
C3F2A8F9B06490237C6DFB23F86F42D18FC45FF82907C75B6FB369CB77A95E
E8B6A70CD2DD5DCCFE64916EC02C6493ECB6F9206F2E4E36AB5727E11FF82A
64FE2892F7C31FB4B7C3DD3BC5DE13D42791D459C4BF68B58DD99957CAB826
29CC60AA236E85C01B8BB357FAF1E2670AF1167790C384F8529A951C04611A
CEE97B4AEA3794637694BD9BF7A4AFF1C968DA47E4BC358CCBF0F8F862B358
B95393BB8C5D9F2FAD9DAFF97557BAF9D7E39FC7DF883FB4078ACF897C6D77
8B78372D8D84248B5B3898F2B1A9EACD81BDCE59B03270142FAB7EC6BFB374
FF001FBE22ADC6B9132F83BC3A52E3549795131CE63B556F59307791F75031
C82573F4349FB2B7ECDDFB4CE9971E2AFD90BC756F67A8A2F9B3E83A8BC998
7270414901BA8573C072B2A31FBAD8E6BF43FC2FF0F745FD9F3E14E91F097C
2AA4B34665BFBCDBB4DD5C3E3CE909F57230064ED8C2AF22BFCD4ABC039961
7339D0CE694A1283F794934DBED6766BE6B63FBBF8ABC7DC96870DC6870C3E
59C9724636B7B35D5F6BEBA34DDE4EF77666AF8BB5F8353B88B4DD29160D27
4E5115BC51A844DA836821470060614761D864D517F17697F09FE1AF8CBE31
EBAA1AD7C37A7CF322160BE6C91A6E58949E3748FB235F76C573B5F1E7FC15
27E2237813E02F847E0BD8CA63BDF17DD9BCBE55C106D2C36C851C1E46EB89
22653DFCA22BF77F0BF83DE7D9FE0F294BDDA935CDFE05EF4FFF00254EDE67
F0DE3B13ECE94AA3DFF53F0735ED7355F13EB9A8F8935DB86BBD4B56B99AEE
EA66C6E9679DCC9239C71966624D7EF7FF00C12C83CFFB2A78EADA352EFF00
F092DC10A064926CACBA0FC2BF383F669FD817E33FED0DF66F104F07FC223E
0D930C756BF8D819A3EE6D20CAB4DECC4AC7D7E7C8C57EEAFC1CF04FC2BFD9
4BC0727C3AF855F68D5E49E76BBBCBBBA97CCF3AE99163323150100DA8A024
6A170393BB24FF005CFD36BC7FE0FC9B8727936271B15579A3EEC75B723D63
A75E9CB1BB5D525A9E470970FE331588E6A34DB3D2349F87B74F07F68F88A7
5D32CD465B7901F1EF9E17F1E7DAA6BBF1EF86FC3313597832C9669BA35CCA
0E0FE7F337FE3A3D335E5DAE789359F114FE7EAB70D28072B18E234FF75471
F8F5F535875FE02F885F4ABC7E2F9B0D90C3D8D3FE7959CDFA2D631FFC99F5
4D1FD0593787F469DA78B7CCFB2DBFCDFE07CEDFF0546F13DECDFB0A09F539
BCCB8D6F5EB1809C05CEC96694000607021AFE62F45D1757F11EAF67A0787E
CA6D4B53D465482DADADE369669A590ED444450599989C00064D7F4ABFF053
FF000BF893C65FB277C30F04F83F4F9F56D6B5BF1A59436B696CA5E59A47B2
D470A147B9C9278039380335EA5FB0D7EC0BA1FECA9A043E39F1659C3E23F8
B1A9C3869461ADB498E41F3416EE780D838966FBCFCA2613716FED7E01A956
79160275E4E5374A9B936EEDB704DB6DEADB7BB3F2ECE23158BACA2ACB9A56
F4BB3C97F625FF00827AF84FF66CD374FF008CBF1F6DE1D67E234804DA7E98
4ACB6FA4B63208EAB25CAFF14BCA44788F2C039FBD355D575BF176A21DD1E7
7E4470C60B041EC07EA7BD6DF88B58F873E1DF16691A37C51F16DAAF893C45
3C36D61A5A4BFE9133CCFB102429994C618F2FB551792CC064D70DE36FDB07
F67FF843E3CD5FE13789A7BCD0350D296112DCC365E7419B8812642AD179AE
5956419DF1F5F51D7EBF1F196169C2B62538467F0B6AC9FA37A3F91AE4990E
3732AB2A397D29559C55DA8ABB4AE95ECB5DDAFBCED93C0975676136B3E28B
DB7D0F4EB64324D35C48AAB1A2F259C9211401D4B30C57C8FF00107FE0A1DF
B13FC0CBB29A7788AE7E206B76CC0797A0C62EE35DC3EF0B96686D197D764A
EC3D2BC0BE32FC02FD99FF006BCBB3ACC9FB55EB46EA49774169E21B9B7FB1
41291B07D9F4F963D38479E9F2005BD79AF913C7BFF046CFDA0747B66D53E1
8F89B42F1D58919895256B0B994762AB287839F7B8AE7A389A7515E9C93F47
72332C9719839726328CA9BED28B8FE691D07C53FF0082CFFC61D71AEACFE0
DF83B4AF055B5C6FDD75765B53BE2E785954E21815B6819578A51D06481CFE
737C4EFDABFF00691F8C66E53E237C45D6755B4BC5D92D92DCB5B583AFA1B3
B7F2EDFEBFBBE6B2FE29FECD7F1EBE09BBFF00C2D2F026ABE1F810EDFB54B6
E5ECD9BA616EA2DF031FF75CD792E85A2EA7E25D6F4FF0E68901BAD4755B88
AD2DA15FBD24D3B88E3419EECC40ADDBBEE7987F4EFF00F04E6F001F855FB0
BD96B9731BC3A9FC46D42E752712280CB0BB0B6840EE51E0B7F357FEBA13DE
BE84AF4EBEF032F85FC35E09F835E0F85E7B4F0B6956B6710CE7115B44B6F1
B3B1E876C79249EFEF5E29F1D7F684FD9FBF63BD1D6FFE29EA635DF17CF109
6CB40B2DB2DD499385764242C51673FBD98A8386F2D59C6D3FC2FE2A702E71
C69C5D52860636A18751A6EA4B4827F14ADFCD2BCAD65D95DA5A9FAC70FE6D
86CAF2E8CEABBCE77765BF65E8B43D5FC3BE00D675D8FEDB362C2C00DCD3CD
C0DA392541C647BF03DEBE33F8E5FF000524FD98FF0067669F40F85B0FFC2D
2F18C1F2996D6551A6C0FC7DFBDDAE8C707205BA49920ABBA1E6BF1A7F6A5F
F82827C79FDA867B9D1B53BE3E16F0548C447A0E9B232C2E8092BF6B9BE57B
A6E990D88B2A1962435FA75FF04D7FF827969DE13B2D2FF691FDA1B4E51ACC
CD04FE1CD1EF0054B2F31879379751B75B9762BF6788FF00AAC8720CC5043F
BEF877E03E47C3EA35630F6B5D7FCBC9A4DA7FDD8ED1F95E5FDE67C7E75C5B
8BC65E2DF2C3B2FD5F5FCBC8FA4FE09F80FF00682F8E7A741F1B3F6E1D59F4
BF0F5C859B4AF87B648D67A794600A3EA906E325C96C065B5B97902FFCB403
9897EA6F1378B2FBC452F967F716519FDDC2BD063A16F53FCBB54BE38BDD62
E75E9E0D5FE5303111A0FB810F20AFAE4724F5FA630390552EC157924E057E
D47CB9F0B7FC15A75E3A6FC28F849E0AC1FF00898DCDDDFB7A06B2B78A3E7F
F028E2BF0CAD6D6EAFAEA1B2B285EE2E2E1D638A28D4BBBBB9C2AAA8C92493
800724D7EBEFFC160BC411C9F11FE1DF8250F3A468B3DEFB62F67F247FE929
AE3BFE09C1F047C3B1DC6BBFB597C564587C25F0ED646B0F35432CDA8C681D
A65527E636EA57CB18F9A6742A7746457FA93E14714E1384BC30A19BE37449
4E56DB9A52A92E44BD55B5E8AEF64CF8EC460AAE3330FABD157936924BE5FA
9F45F87346D1FF00E09CBFB3A24D2C70DC7C6EF88B0E642DB653A7C406760C
657CBB6CF38C89673D5A341B7DA3C55FB5E7C52B5FD8E741FDA7FE1F4369AD
EA1E10B98AD7C5DA4DC20D975102B04F223C603C3282F15C215CA2C7236F46
0063F253E387C5EF107C71F895AB7C42F10314378FB2D6DF7656D6D2324430
AF6F9472C46373166C649AFB53FE09E7A969BE37B6F89BFB37F8A4B49A2F8D
F459A408482A8769B5B8D8A7F8DE3995B3FF004C87A57F92F9D789D8EE20E2
2AD98E3E7CCEAB7E8BB5974492B25D159743FBAB8A7C05C3E4FC13ED231BE2
A935526FC9E9282F28A77F369BEB634E0F077ECDDFF0503F08DF7C41FD9C24
8BC19F136C13CFD53C3B71B615998F0C5917E5C337DDB9886C627132ABB655
BFB3AFFC13E756D5C9F1AFED1024F0EE85672305D2F76CBBBA31B60F9AEA4F
951123002E6471CAED0559BF08B43F11FC49FD9C7E2EC9A97863519742F17F
82B519ED9A588E36CF6B2343346EA7878D8A957460559490460D7F55DFB397
ED19A07EDA1F046DBC75A285B1F15F87C8B7D6F49462443725725A35249314
C01785B93F7A324B29C2AFC3384A95D57947E5D1FAAFEAFD4FC972AF1CB88B
0795CB2BA55EE9E8A6F59C5755197E4DDDC7ECB5A5BD7D3C41A3F85F4483C1
FF000DB4C87C3FA259AEC892DE358CE3B9017A13D4B72C4F24E73577C3DE24
BDF0D7827C6BE24B58C5D5CE93612DF471C84ED9248619640AC473862A013D
6BCFAB66FA7FB27C1CF8A379D3C8D02F5FFEF9B5B83FD2BEBF26C3C678AA34
9AD1CA2ADE574AC7E4389AF39B9549C9B93BB6DEADBEECEBF50F18FC3BF8C1
F0AF46F126A7A55BF8A3C01E34B38E4786E22594A798BB80746C8DC8415238
64753839C0AFC92FDA37FE097CD25ADCF8FF00F658BDFED8D38EE924D02E65
FF00488BB95B59A4237E0748A621C0E8EE4815D27FC12BFE3541E23F0F788F
F65FF155CF449354D10B9E8A483730A67FB8FB67551D73293C0AFBFED6FF00
5BF096AB2ADACCD6B756EE6391472A4A9C10C0F0C3D3F315CBE2DF8D9C5DE0
271DD4C25193AB96D67CCA2F5D3D344EF1B3DE32E6E78C66A31B1EE641C398
4CFB0175EED68FE3FE5DBEEBABB3F957D6346D5FC3DAA5D687AFD8CFA6EA36
4E629EDAE6368668A45EAAE8E03291E84566D7F56BE3EF0CFC08F8E96AB6BF
1B7C0D69AADCAA845BE890A5CA2FA2CF1B24E8A3FBA1C8F6AF91BC43FF0004
C3FD967C4723DD7837C75ABF878B93FBAB89219E14F6513451498FAC87EB5F
DE1E19FED27F0EB3EC3C1E2F11EC2ABDD3B5AFD6C9DA7FF925BCD9F139A787
599E1A4D7B36D775AFE5A7E27CC3FF000488F127D83E3D78A3C2D33621D6BC
3F24817FBD2DADC42547FDF12486BF79B58D3344F0D59699E25BF5F3AE7C39
692DB5A03F74C9702352C01FE3223DA1872159C74635F00FECC1FF0004F6F0
DFC04F8BDA7FC54F0DFC4C3E23FECC86E6196C96CA341225D42F180D225C3E
DDAC430F979DB8F71EF9F1E7F6A1FD94BE1E6AD27873E2E7C49B5D2750D219
44FA65B192EAE6392450CBE6C16D14D2A928C08C818073D0D7F2AFD2BF8C70
1C459B55CF7832A46BD49D1518C9DE3153BF2BBF325751518CB44EF6B77B7A
FC37867412A18EBC629DDAEB6FF83768C1BBBA9EF6EA5BCB96DF2CEECEEC7B
B31C9AD2D2BC3BADEB6E174BB392704E3701841F563851F9D7C4BE38FF0082
AF7EC87E055B883E1A784B57F1CDFC4B98669625B2B291BD0CB74CD3A7D45B
1F6AF81BE307FC15EBF69BF1FA4DA67C3D8B4FF873A539213EC110BBBEF2CA
E0A3DCDC864F70D143130E306BFCCFE1EFA22E26AD4F6D9DE356AEED534DB7
7DFDF92567FF006EB3F59C6788D08AE5C2D2FBF4FC17F9A3F783C6D3FC2AF8
25A0FF00C25BF1E3C6761E19D3F0C5239260259CA0DC5214E6599F1FC10A33
1ED5CDFECFBFB464BFB436A975A97C13F0B49E1CF84FA24AE973E25D5A3F2E
7D5A68B7030E9F6D92446BF2B49733B12066310890968FF12FF636FD87BE25
7ED89E26FF0085E9FB43EADA92F806270F3EA3A95CCB26A1AE343C18A09A66
67102E36C93938EB1C5970CD17F449E187F0BD95841A37872D6DFC3BF0FF00
C156C0AC71A882DD63B65CA64701638C29739F4CB7278FDF32BE16E1EE139D
0C1655874F175DF2C2FEF54977936F5508AD656B2B2B24DB49FC8D7C7E3731
53AB889FEEE3ABE897656EADECBFC8F8EFFE0A8DF1E57E1CFC0F8BE1968D70
63D73E213340E14E1E2D321C35CB1F4F34958707EF2B3E3EED717FB037ED55
63F1FF00C0D17C08F89BA863C77E1D83FE2597739CBEA5670AE01DC7979E15
18941F99E3C49F3309197F1F7F6B6F8F377FB45FC70D77E200671A3A30B2D2
227C8F2B4FB72445C1E8D212D2B8ECCE47402BD73F60BFD993C75F1C7E2AD8
78C34DBCBAF0EF863C1F7715D5E6B10131CA26888912DED9FA79CDC6E3C88D
0EE6CE555BFD8BC5781B9365BE1BBC3E7D354AB453AD2A8D6B0AB24AD1EED5
B969B8AF89EAB5B35F93C733A93C65E92BADADE5FD6A7F43BE1AF07369D757
1AC78A53ECD67A61270FD1D97B8F551DB1F78E07A8AE07E357C701F097E067
C43FDA0AFB11368F61241A3C5202CA6E64222B55655EA25B978C391D003D85
749E3BF174FE2CD4A2F0F6884B5989022E3FE5BCA4E01FF741E9F99ED8FC80
FF0082C8FC648348D37C0BFB2FF87AE3E4B441AEEAE178CB61E0B34241EE4C
F2BA30EF130ED5FE36F0F7197FACBC455218177C1E0F792DAA5695D2B778C1
7335DE5697F2B3F5AC6E59F51C127557EF6A74FE58AFD5BB7CB4EE7E0FBBDE
6A378D2CAD25D5D5D484B3125E492473C92792CCC4FD49AFE887E0CF81ACBF
E09C5FB2D4BE35F104118F8DBF1422090432056934E8400CB110D9F96D8309
2618C34EC919CAA861F34FFC136FF65BF0EE93A5DD7EDADF1FE35B2F05F843
74FA1C170BFF001F9790B6D17415BEFAC52612051CC93E31F7006E1FE3EFC6
BF11FC7CF893A878F75FCC1149FB8B1B40DB92D2CE327CB881EE792CEDC6E7
662000401FA4F13E77F55A5C907EFCB6F25DFF00CBFE01FA57817E173CFF00
31FACE2A3FECD49A72ED296EA1FACBCB4D2E8F6EF801FB71FC56F8337234BD
7E793C63E189DD9A6B3BE959A78CC872ED05C36E6524924AB6E4273C024B57
EDC7C00F8C5F0B7E34786EEFC49F0C25952249105ED9CD198A4B59DD73B597
94C903AC6CCBC71CE6BF11FF0065BFD8D3C5DF1EAE63F147888C9E1FF025BB
132DF380B2DD843F325A86E0F4C34A46C5E7EF302B5FB91E053F0E7E18F842
FB43F0569F1691E13F09D9BDC48D18FBC1159E49093CBB154259D89663D7DF
878329E3E6929EB07B27AB6FCBCBFA47D97D23A7C2F0C47B3C0C3FDB2FEFB8
34A0BBF3AD9CBD2CD7DA7B27F0D7ED75F1BBF616F04FC43FF84A3E396B6FE3
BF14787E116969E17B07178968F1B96904B0C6521595DCFEF16EA5E542809F
2D7E58FC6FFF0082B37C67F18E9C7C1BF02B4AB4F851E15853C98458AA4BA8
792380AB36C58E018E40863565E82434FF00F82B7FC1FB1F0CFC6FD1BE3A78
54ACFE1AF8AFA745789347CC66F6D638D242A00002CB03412824E599A43DAB
F276BEC561234A72F76D2EBDEFE67F3562F39C5622953A15AAB9420AD18B7A
45792D979F77AB3FAB4FD813FB7B58FD847C31ABEB17771AA6AFE2DD5B519E
4B8BA95E69E794EA32C3B9E4725989F27A924D7C5FFF000592F8C9169767E0
5FD983C3D3FEEAC631AEEAFB7F89C8782CD0907AFF00AF95D187F144C3B57E
927EC45FF08FFC3FFD83FE1AF897C5570B63A5787F45BAD6EE677FB9142CD7
373248DECA923357E0858FECF1FB517FC143FE35789BE33E85E1C934DD1BC5
3A84938D5B5526DEC2DAD57115BC31C9B775C7910A245FB9473F282D8C935F
3183E1B8C738C466F53E394214E3E518B727F7CA5AFF008513571CDE1A1865
B26E4FD5D97E097E27C3BF0CC6EF891E145F5D5AC47FE474AFE9EFF6B7FD93
3E267ED17FB44695A8787843A5F872D342B4B7BAD52E4E51245B9B9768E389
4EF9240AC0E061791B9D722B07E007FC139FF66BFD9AA6B4F12F8EE4FF0085
95E38B42B2A3DD46A2CAD665E4186D32C80A9C10F333B64064553C57DE316A
BE26F8857C6C206FB169EBFEB7CBCE029FEF375627B0E01F4EA6BDDCC32FA7
8AA7ECAAED7B9EE706F1963322C5BC7606DED395C536AF6BF5B775D2FA774C
F3DFD9FBF661F82BF039FCCF0A59FF006EF886DD7175ADDE057923247CCB09
FB9103CFCB1FCD8E1DCF15EE9F11F5E3A668E2C6DDF6DC5F1DB9079118FBC7
F1E07E26BE60F0FF00C5BB0F8D1F1AA7F82DF09E507C05F0E82DDF8AB5689B
E4BEBDDC45B699148A466332234972F82B22C4D09FDDB36FEF3C57ADB6BFAD
CF7A0FEE57E4887A22F4FCFAFE35F4B9AF0ACF288D2C3D68F24E5152E4EB15
2D63CDDA525EF59EBCAE2DEAECBC4CD788B179A62258BC6557526FED377FBB
B25D12D1743CCFF689F80BE1EFDB07E14BF856FE486C3C73A02BCFA36A120E
048400D1C8402DE4CD855940CED216400950A7F98EF177847C49E02F136A5E
0DF1869F2E97AD68F3BDBDD5B4C30F1C88791919041EAACA4AB021949041AF
EA8ECAF6E74EBA8EF6CE431CD09DCAC3D7FC3D457817ED8FFB2668FF00B597
83CF8FFC030C563F13F41836F964AC69A9C09C8B7918E007EBE448C700FC8E
4290C9FD49F467F1EFFB06B2C93379FF00B24DFBB27FF2EA4FFF006C93DFF9
5FBDA2723E3F39CAFDAAF694FE25F8FF00C13E38FF00823EF88238FE257C43
F043F5D5F4582F7DB16571E49FFD2AAFD7DF8716024F10BDEDC7C91E9F13BB
31E1431F97927D893F857E177FC130750BCF047ED83FF089EBB6D2E9FA8EA5
A66A9A54B6D3A3472C53DBEDB9923746019597ECCC0823208C1AFD90FDA0BC
523E11FECF1F123C50AFE4DEEA227D36CC83862F72E6D9197DD37BBFD16BE6
BE9858786178B6AE2FA54A509DFBD938DFFF0024B1ECF0365B531F52860697
C539A82F5934BF53F043E34F8EDFE26FC59F1678F0B978F59D46E26833D45B
EE2B02FF00C0620A3F0AFBF3FE096FAF22F8F3C75E0995BE4D634986EF69E8
7EC737947F4B935F9FDF0B3E117C40F8CFE278BC27F0F74A9352BB6C1964FB
B05B467AC93CA7E58D07BF2C7850CC403FAE5F027C27FB36FEC7BF153C2FF0
CBC49E295F107C69F1C0363E5DB65A2B18E44331568C10218DCC6AAAF2E659
0E0A22A1703F83F8630588AD8B58A4B44DB6FD77FCCFF44FC74E26C9B2EE1D
A9914E7FBC942318416AD28B4E2DF64ACB7DFA267D1505A4D3DEC760062592
411E3D189DB8FCEBF2AFFE0AF1E358EFFE2B7823E1A5AED36FE17D1DEE8907
2566D465D851876C476B1B0FF7ABF67F4CD189F89B3C0E3296F349727D81F9
D3F22CB5FCC4FED99E3CFF008591FB517C47F13260C2BAACB610956DCAD0E9
A16CA3753E8EB087FC6BFD0EFA1C70E7D6B8A278E92D2853934FFBD3F717FE
4AE7F71FE6AF10D6E5A1CBDD9F42FF00C12CFC7BFF00088FED496BE1D9E4D9
6FE30D32F34E209C2F9B128BB8CFD7F70CA3FDEC77AFD9ED5F42BA87C4D77A
158C0D248B3BA448A324A9395FFC7706BF9FFF00D897E167C5BF1EFC7BF09F
887E18E96D711F85754B3BFBFBC9498ECEDE08A50CEB2CB83CC881942282ED
93818048FD7FFDB1FF006FFF0004FC01D767F871F052C20F1BFC62D7244B4F
261CDC41A7CCC4431A5C796773DC16002DAA10D9E642BF2093F1FF00DA5DE0
CE138A388B2E951C446338C57B4B59C9475BE9D2525C96BD95937AE89FD2F8
71C492CBE9556E37BEDDAFFE4B53ECDF0D69BE14F07F89B4AF0EEB77297DE2
ED5237B9B7B08B123C16D11024B975FE18D090A657C2EF2A89976507D23C43
E3ED03C37AF784FC397D2E6F7C657F3E9F62ABC9692DACAE6FA4623FBAB1DB
3027A64A8EE2BF367C31A578C3F675F06E97E16F116BAFE21FDA5FE3EDE5BA
EABAAC845C4BA74529D8591530A96DA7C6CCB0A2ED8CC81D917CB428BE7BF1
97E33E9B6DFF000539F803F04F409043A2FC39B69AD1E253F2A5EEB3A7CB12
C6477D96FF0067DB9E46F61DF9FE7CE0DE17CB725C37F66E574D4610DDF572
7D64FACBBF6564ACB45EFE7943173A34B30C63D6ADF957F763A36BB46F74BB
B8CAFB6BF67789E1F23C47AA43D96EA6C7D379C5741F0DB4BFED3F16DA1619
8ED333B7FC03EEFF00E3C4553F1FC3E478C7544F59037FDF6A1BFAD723F123
E228F811FB327C4BF8D02516F7DA7E9D2C3A73B29602F66C4169C0EAA6E658
C37B035FE78F87FC1DF5EE3FFA8C97BB4AB4E52F4A726F5F26D28FCCFD4739
CCFD964FED56F28A4BFEDE5FE5A9FFD0E03FE0ACDFB58C37FA843FB25FC35B
BDBA2680D1CBE229626E2E2F57E78ACC91C1584E2497AE65201C34673C87EC
A1FB01F84BC19E105FDA83F6DD907877C17A7AADC69FA05D6E4B8BF73F344D
7518FDE6D6FF009676CA3CC94F2FB630564FB03F632FF827637C2AB2B9FDA4
BF68ED39BC5DF12D639F57B0D0E4759C5ADC8066124CCD959AF9DFEE925922
73B86E902B27E587ED27FB507C4AFDA6FC607C43E34B8FB369968CC34ED260
63F65B28DBD01C6F918637CAC3731E06D50AABFBB7815E09D7E30C6CF9AA72
61E95BDA356E6D6F68C577767ABD16FABD1F9999E62B0F15A5DBD8FB235BFD
AABC61FB62FED0FF000E7E0DF8574F3E1DF85C9AEE9D1C7A1C3B63FB458DA4
CB248F7623F948486362B0AFEEE3C003711BEBF7E352B85F107FC241E1A003
3DBC48631EAC5770FC980AFE71FF00E0969E115F12FED65A76AEEC40F0B695
A8EA78ECC5D16C403F4FB567EA057EFB78675AFF008B8571316FDDDFC9347F
81394FFD040AFB0FA5565F97E579A60B21CAE92851A14AF65FCD393BB6FAB6
A316DBD5FC8E7C8E739C25566EEDBFC8E7F4CF14C6DA6CFE1BF1559C5ADE85
7B1B413DADCA2CC8D138DAC855C157423828C08238E2BF2DBF6AAFF82695B5
CD95E7C52FD95C1BDB3C196EBC3658B4B1E397362CE77371CF90E7775F2D9B
2918FD35F13D80D33C417D64A02AA4A4A81D023FCCA3F222A1D1B5BD4741BB
177A74BB1BF894F2AE3D1877FF0038AFC77C39F14738E17C67D6B2CAB64FE2
83D6135DA4BF26AD25D19E8633054EBC79668FC76FF825278A6E7C27FB4CEA
DE07D515ED8F88747BBB56824051D6EECA449C0653C86544941046464D7ED5
7883E1A6A9E27F843E2DF879A54BF6693C552CBA44F707831E9F3482DAEE45
E0E5D6DCCC630782FB41C039AE36F7E04FC30F88DF18BC2DFB40F87117C35F
107C377224BC92051B352B578DA09527418DEDE53B2A4C3E71C2BEE50A07AC
FED05AB7C53D1FE156B107C0FD11F59F1AEA6BF63D3955E1863B5967C87BB9
5E7658C0857738073B9F6AE30491EE78B79C65FC61C6D94F156012A55E10E5
6AA34A30A8DA4E4E6ED170518C5DF4D2F74AD62F2D9D4C2E0EB6125AC64D6D
D52BFE3767E0F7FC146BE3BE87AB788349FD987E1604B3F02FC31096B2C506
3CB9B51813CA299C9256D53317382643296DD8535F98B5FADDE0DFF8248FC6
4D6BFE269F13FC67A4F8663989797CAF3751B904F2C5F3E4C793EA256AFA67
C2DFF04D0FD937C25E5CDE37F166ADE2CB81F7A38A64B7B66C7FB36D1B483F
EFF57F6A47E929E1AF01E554B2DAB99C65C8AF26B79C9EB29B949C62DCA577
F13EDB247CD53E1FCC31B51CA9D26FE5B7DC7E06E89AE6B7E1AD5AD75EF0E6
A171A56A764E24B7BAB495E09E171D1A39232ACA7DC106BF5DFF00665FF829
87C459A5B7F007C72F0E5C7C41D35B6A0D434DB6DFAA443900CB02011DC01C
0C8F2E4032C4C8DC57E80786FE0AFEC7DE0055FF00844BE13E9D77345F724D
46117AD91FC424BC6B8707DF19AFAC7C1F2DF476501B6D22CBC31A36556385
5023397215422AF96AB9240195C9E303906BF9838EFE9DBE1E7194FF00B230
3964B1B53A4B58B82FE6F6918C9455FA73D9ED67B3FA4A5C0B98E0E1EDEB49
4179DB5F2B5EEFEE39BD17C1FA2F88D349F16F86A49D748BDD971E45E5BCD6
B388FAE0C53A24A84F42B228615CAF8BBF659F867F103E327FC2EDF88F623C
57A9E9D696F65A4D85D2AFD86CE280B49B9A224ACD2B4B248DBA4CAA82A026
E5DC7E83B8D6ACADF56B5D14B6EBABA0CC147F0AA82727EB8E2BF9BAF8F5F1
A3E37E9FF18BC77E1D6F1F6BD1D9E9DAE6A56B1411EA5731C290C372E91AAC
69204002818C0E95FCCF8BE36C464AE75B0339537514A178B5CCA2F75CD65B
ECDA4AEAEAD66D1FAAF865E16D5E29AF570F4EAC61ECD293E64DDEEEDA25FE
67EFFF00887C33E37F112986EAFAD34ED3C7020899CAE074DE76AEEFE5E82B
CE6F3C13E19D24675BF1969B618EBE6C91A7FE8722D7F355A9EAFAB6B5726F
359BD9EFE73D64B891A57FFBE9C935B7E0AF0278C7E236BF0785FC0DA45C6B
5AA5C7DD82DD0B103BB39FBA883BB310A3B915FCB79B70164199E29E2B30C3
54AF565D675677F44A3CA92EC9592E88FEA3C3FD1FABE0E85E79A469C22AEE
D4A292EEDB94DFDECFE8467D4BE035949E4DF7C5DF0EC320EAAFA85921FC8D
C5765E15F08FC3EF1D5BCD77E08F1B58F8820B66092C9A7CB05DA46C464066
86460091D8D7C49F053FE09D7E14F094769E26FDA1B505D4EF9CAB45A1D93B
793BCF459645C4931C900AC7B541EACEA6BF55340D3342F0CE8B068DA3585B
68B61631029696EA9147045CE3E44C2AF439C719CF27AD7D365BE0070BCA3C
F88CBA305FF5F2AB7F3F7F43F9F38DF3DC160E7F57CA31D3AF35BCB921187C
B4BCBF05D9B3C97E2E7C49F879FB387C2F8BE207C438A7BCB0F0EB24503DB5
A1B8B8FB44CAD1A88FF8623202C9BDDD13E6DA5FE600FE19FC7CFF0082A5FC
68F891F69D0FE1542BF0FB42937279D0B09F55950E464DC10161C8C102150E
87A4AC2BF6CF57FEC1F8E1A478B7E1578CA3F3344F14DACB6F12E06E8C6DC0
65CF475C0954FF000BAE6BF945F89FF0F35FF84FF10BC41F0DFC509B353F0F
5DC96B2900859021F9254CF3B2442AEA7BAB035FE94FD0168F02F15E5D5ABD
1A0AAD6C3CB962A6F9A2A11F753507A37A2779733B4A0F46DA3F03E37A18EC
1D651ACEDCCAEEDDDEBFF03D533EA7FD810EA1E32FDB5FC05A86BF7336A579
35CEA1793DC5C3B4D2C92C3617128791DC96625D4724E735D6FED79AC7F6E7
ED2FF112F776EF2F5492D73FF5E8AB6F8FC3CBC5741FF04A1D1E3D4FF6A77B
D75C9D2740D42E94FA16920B7CFE53115CCEB3F0DBE25FC74F8D3E349BE1DF
87AEF5D96FB5CD46679214FDCC666B97706599B6C51839EAEC2BE4FF00680E
2FDAF12E1707497C14A2ACBFC537A2F4923FA6BE870A8D0AF8FC7E226A318C
12726D24B9A4B76F4FB27CED5D67853C7BE38F025CB5E7827C41A86833C98D
EF61752DB17C740DE5B2EE1EC722BF4CFE1C7FC132EEE2861D63E3978BA1D1
A06C1363A6159263DF6B5C4A362B0F448E41E86BED6F03FC2AFD9BFE0EF96F
F0FF00C1905F6A50E08D42F57CF9F77F79659F7B21F508A82BF8A72EE11C64
DA9CBDCFCFEE5FF00FE84E32FA45F0E61632C3D14F12FB25EE7CE52D1FC949
1F1EFECFBF1FBF6EFF0015A456B3782BFE160787EE70AF36AB6A9A6ABC2460
AC7787C989B3DCB24A4FA722BEBE1FB0DFECEDE2AF16F84FE31EAFF0EACFC1
9E37D06FAD756D9A25C7976FF6BB5904C8B2A4491C130DEA0B3792ACDFDEE4
E7E87B5D73556B6875BF175EC7A4585C491C30409F249712CCDB62404E5F73
9202AA9CB1ED543E3E7C464F84DF06FC59E3E0E12E34BB193ECB9E86EE6C45
6E0FD6575CFB57E8D84C0CF0745D4AD52525AEAF6D37B75FC59FC6BC4B9FD2
E21C7D3A580C053A129C945285EEDC9D927AA8EEF7504CFCF3FF008297FED9
FF0017BF666B2D3BC25F0B3C2F26993F8A2127FE12CB88E396DE364C8305AA
7CCA6E1461899C6157EEC6F9DE9FCC26BDAFEB9E29D66F3C45E26D42E356D5
75091A6B9BBBB95E79E691BABC92392CCC7B92735FD027ECF5FB407833E307
82E6FD943F6AC51AD785F5C516FA66A974FF00BEB39BA431BCCD92A55BFD44
D9CC67E46CC646CF03F87FFF000492F1F43FB55CDE06F1F092E3E13689B753
935B5CC4BA959973E559A15E52E5CA959C023CB40CE1BE68B7994E67471347
DA52D3BAECF77FF0FD4E2E3EE03C770FE3DE0B1AAFD6325B4A3DD7E4D6E9F9
59BD6FF825EFEC216DE39BBB2FDA5FE345883E18B09C1F0F69B3AE46A3768F
B45D4AA7AC1138C469FF002D64049C22624F5DFF0082C37ED47ABF87358F07
FC05F87FAAC961A869D341E24D52E2DA429245342F9D3A2DCADC15656B8656
1D440E2BF5DED7C4BE15D0AC350D74F91A27813E1E69D2488234115BC105A4
272EA8A02AC70C28C1540F95718C74AFE333E38FC57D6FE397C5DF167C59F1
06E5BBF135FCB742366DDE4419D96F006C0CAC30AA44A71C8519E6BCFE19E2
3A79AD29E2B0FAD1E67184BF9F9749497F779AE9774B9AF66ADF2D8FC13C3C
9539FC56BB5DAFB2F5B6AFD6DD0FEAB7F678F8E5A77ED69FB3A689F16EDC47
1F89B495361AEDBC781E5DE40079A42F64705678C76472B9241AF40D1A2F3F
58B180F3E64F12FE6C057E4E7FC116FC1FF16B4FD6BC6DE3F902D97C2FD42D
56CEE0DD6556EF5281C344D6E0E01F251A45958FCBF385E4FDDFD934D08E89
F102D34F00F93F68492227BC64E57EB8C609F515F48715BA9F8A5FF0527D2F
5AF8A7FB6BE8DF0EBC2F17DA7569B4DD2347B78C9C0F3AEA59255DC79DAA3C
F058F619278AFD1EF8F9FB2C78F47ECC7E16F803F00A5B57D2FC3411B51B69
A4FB3DC6A4F18F30303FEAB74B3B3CF22BB28DDB483C60F33F0F7E1345E24F
F828D7C63F8E1AF465B4CF015AE976D64CE1B6FDBAF348B757643F74F95009
032F632A370715F47CDE21D51B589F5AB69DE0B899CB654F6CF0A7D4018183
5FBF78E3C571C5E4993F0BD193F65470F4A73B75A9520A5FF92C65A7F8A499
A705E6D5B2ACC966D4629CE12BC7995D69A6DFD59A4D1FCE4F8ABC23E28F03
EB771E1BF1869773A3EA96A7125BDD46D1483D0E1872A7B30C8239048AF62F
D94BC6DFF0AFBF689F02788DC8101D4A3B398B36D5586FC1B5919BD91652FF
00857EE7F8E7C2DF0BFE3FF87C7847E2FE951BCCA08B5D462C47716EEDFC51
CB826339C120E636FE25C715F8A9FB4AFECA9E3BFD9C75C59EECB6ADE17BC9
3163AB44A554B75114EA33E54A00C819C30195270C17F89B33E1FAD80A8B11
4FDE8A69DFB7AFF99FE8770378C396716E16A6518C5ECABD48CA2E2DDD4934
D3E47A6B6D795EBDAF66CF9ABFE0A85F0D7FE15C7ED91E309208BCAB2F15A5
B6BB6FC6377DB136DC37BE6E6398D798FEC53FB4EEABFB2BFC71D2BC73BE49
7C37A81163AEDAA64F9D612B0DCEABDE480E248FB920A64076AFD13FF82AA6
911FC56F819F043F6A6B08D1A5BEB5FEC9D4DE2F99566B88BED091E7B08A68
AE539EE71C1AFC5EF02F81FC57F12FC61A4780BC0DA6CBABEBDAE5C25ADA5A
C406E9247F52701554659DD88545059885048FD62954538A9C7667F9ED8EC1
D4C3D69E1EAAB4A0DC5AF34ECFF13FB36F155969770965E2DF0D4F1DEE87AF
C29776B3C27744EB3289159187055D48653DC1E3A564DDD84BABFC20F89DA3
5B8266BED06F61403A9692D6741FA9151FECDDF05FFE1497C06F0BFECF5E31
F141F116B9A7DAC8ED2B7DC81E4732F956E480DE4C258AC7BCEE6504E15708
BDF7812D24D33C49A8787355400CF0BC6CA7A3639E3D415248F6AD727CDE92
C42AD466A4E94D5ECD3B4959D9DB67B68F5D4E7AD46495A4AD75A7A773F928
F865F10FC49F09BC7DA17C47F08CDE46ADA05D25CC24E76BEDE1E3703AA488
591C775622BFA89D1BC65E15FDA07E19E91F1CFE1E37996DA84205F5B6434B
6D3C600923940FE388FCADEABB5C7CA727F96BF883E0FBDF87DE3CF11F80F5
16DF75E1CD46EF4E95B180CF693344580F43B723DABE8EFD90FF006B8F16FE
CB3E347BB811F56F08EAEC8BAB697BB1BC0E04F013C2CE83A67871F2B7F0B2
FF00A57F4C5FA3260BC51E18E5C3DBEB308F3529775BA5776D75BC6ED2D651
6D2936BE5F84789AA6578B5516DD57F5FD6CFA1FBBF5B1A1E87A87887508F4
ED39373BF2CC7EEA2F7663D80FFEB0E6BA3F088F87FF001DFC3565F127E0BE
B305E68BA8BED953956B69400648DE3FBD1C89B8168D80C64153B4AD7E7EFE
DC1FF0508F0BFECF3A5EA5F033F675BB8B52F1EB868355D6536CB0E94FF75D
10F2B25DAF236F2909E1B2E1947FCE3F0F7D1433D867B572ECFA9BA34A8CAD
27D656FB314F54DF5E64B97B5F43FA3730E3FC2AC2AAB857CD396CBB7AFF00
C0DCFD4593C7DF0E3E18F817C57AD2DFA5C597820B26AB32107FD344692790
48E3CDC4918DA3382EABF7B22BF9CAFF0082C37C3F7F0BFED5B1F8CE18FF00
D17C6DA2D95E7983EEB4F680D9BAE7B911C3113ECC2BED1F8E56D7FF00007F
616F85BF036FE695BC4DE3563AD6BCF31324D2CCEC2FAE84EEC4B338BA9E25
0C7922235DA7C43FD9E2EFFE0A37FB2F7C20D5740D76CF48F14F82AE5B4DD4
EF2F77CACB6EB1AC377F2C60979E4F2ADEE1118A290C4175CE6BFB9B27785C
2545956160A10A715CA96CBCBEEB79EED9E0E6DC15895C3B4388EAB6FDAD49
C5FA5972BFFC0A335DB63F9ACD3F4FBFD5AFEDB4BD2EDA5BCBDBC912182085
1A49659642151111416666240000249E057EEA7EC73FF04B2B7D2E0B1F8C5F
B5EC42CECE3DB3D978599BF792B7543A815E40FE2FB321DC78129003C47EFD
F803FB2D7ECE7FB1D5A2DC7826C7FE12DF1E18F64FAEDF0579918A95758319
4B743923645F395F96491B00D7A6EB7AFEA9E21BB379AA4C656FE15E8883D1
47403FC9AFC57C53FA466599246585CB9AAF89DAC9DE117FDE6B76BF963AF4
6E27999070557C53552BFB90FC5FA2FD5FE2749ACF88EEBC4AD67E18F0EDA2
D869507976F696502AC68150058C6D5C2AAA800051F2A81ED9AF85BFE0A4FF
001F6D7E147C33B3FD9A7C17760EBBE27885C6B92C67E68AC49FF5648E435C
B2E31D442A4118706BEC6F18FC43F0B7ECD7F09755F8DFE3A01E68E3F2B4BB
3242C97573283E54499E7321192403B630CFC8C8AFC6DF801FB2CFC5EFDBAF
E266A9F197E265CCDA6785F53BD7B8D43552BB5EE981C7D9AC11F208450230
DCC7128C7CCCA10FF4EFD017C1E7ED2B78B1C7D52D18DB939FABDE318C7EE9
72C57F225BCD1E2F8859D4172E51972F756F6EFD6FF95FD7C8F13FD927F647
F1B7ED49E321676424D2FC25A648A755D58AE5625EBE4C39E1E771D17A283B
9B8C03FD09A41E0DF869E0CB0F843F09ACD34CF0E6931F944C472663D5C97E
AE5DB2D239E5C93DBAD89A2F0B7C31F0BDB7C21F85BA5A683A0690A60648D4
AB39FE3C93F33173CBBB12CE4E49C75E3218A4B89520854BC92305551D4927
000FAD7F3EFD3B3E9D18FE36C74F8772293A783837176DE4F66B4DDBD9B5A5
AF18E8E529FD4F87BE1FC309058DC5ABC9EA976F37FA7DEF5DBBBF06CFA278
674FD6BE25F8B2E16CB42F0AD9CF79713B8F96348636924738CE764609C0E7
A62BF02BE03FC0DF167FC147FF006A0F187C77F88AB2E95F0EE3D45AF756BA
76098B788016BA643280A0BA5BA224920C79718DEC773206FD8FFDA97E1DF8
D7E30787FC3DFB1DFC39B86D361F1118B54F19EB0AB94D3F458A5CAC63A6E9
EF6E232B0A03F32432070132478F78AB40D6FC71E1AB5FD8EBF62FD2574BF8
75E1CFF43D7BC42CC52D67901CCB0FDA40CCC59B2D3940CF2B1DB811062FEA
7853C24B86387A8E1271BD697BD24B773974FF00B755A37F2BF52E8E5D3E20
CD26FDA2A7421F1549691841757E6FECC779376EED7CA3FB5AFED0B07C60D7
34AF839F07ACCDB7C3DF0AB4765A5D9D94640BE9A21E4C7224483FD5AAFC96
E8067692C797DABF447ECDDFB01D9E956D6BF127F692516F02ED96DB40DDF3
39EABF6B2BCFBF92BCFF007C8F992BEAEF839FB3CFC1EFD97ED56E74B8878A
3C70536CBA9DC28CC448C32C2BF30817AE4293211C336318ED757D6B51D72E
8DDEA32991BF857A2A0F451D87F935F6181E1C954AAF158F7CD27D3A2FF3FC
BD4FD238AFC6AA583C04721E138BA5422ACEA3D273EED7F2DF76FE2ECA36B1
B5AFF8ADF52B78F47D2A05D3B47B6558E1B689422844185042E00000E14703
8EB8CD7967C77D7EDBC1BFB1FF00C5CF10DD1D8B79A55CE9AA7FDBBF41671F
FE3F702BD0B4CF0BEBDABED6B1B391A36E43B0D898F666C03F857CC9FF0005
26D42E3E1FFEC6EFE17B8DAF3789B5BB1B190A1CA8D8D25F03CE0FFCBAA8E9
D4D7EDFE14E51F5EE25CBB096D255A9DFD149397E099FCCD98556A94E6F7B3
3E43F87BA737EDB1FF0004EEF11FC14C7DB7E207C2174BDD153969668A0577
B58D46464C9099ECD41F95488D8F38AFC08AFD23FD8BBE3EBFECEFF1E744F1
7DF4C53C3FA89FECDD614671F62B8619931DCC2E1651DC852A3AD53FF8299F
ECDD1FC07FDA0AE7C4BE1A8147833E2309759D2DE2C7931CEEC0DE5B211C61
247122051B4472C6A33835FA9FD28BC3A791F124F154636A189BD48F652FB7
1F949F3792924706498BF6B4545EF1D3FC8FE8ABE0959785344FD913E14784
7C63A6C7AADA5D78534512D94D12CB14CEB6904AE2457F94AF984643039F43
CD749AB78EB57D42216563B74DB245089141F2E10701770C1C01C606063B54
5ABE9A341F03781BC3B8DA74BD26DE0C7A7970C51FFECB55BC33E16BEF125D
6C8BF756D19FDECC470A3D07AB7B7E75FCDA7B043E1CF0DDF7892F45B5A8D9
1260CB291F2A0FEA4F61FD39AFCEAFDB97F6DE874182E7F66CFD9C2E9A6BF9
98DA6B3ABD992F2798E76359DAB272D331F965917EEFFAB4F9B3B31BF6DEFD
BEB4FD2F4FBEF80BFB37DFED806EB7D5F5FB67E5CFDD920B3917AE7A3CE3FD
D8F8F9ABC2BFE09AFF0002B4AF11F8D354FDA33E2204B7F05FC3056B949661
FBA93528D3CD56E41C8B58FF007C70430730E320915FD97E18783F86E1ECA6
A71BF1753B4692E6A5465A394BEC39A7DDDB962FFC52D158F03138C9E22B47
0785D5C9DB4FC91FB0BFB307ECE17DF007F675D37E1DD88857C4BAAFFA76B9
316386BBB851E646AC370222455841180C14BE01635D94DF0F7C591310B662
403BAC8983F8120FE95F81DF19BF684F1BFC50F8B5ADFC49D3F55BDD216EE5
F2ECA2B7B8785ADECE2F9618F31B0E76FCCD8E0B963DEA0D1BF6A2FDA2B410
ABA7FC45D6CAA7459EF64B951ED89CB8C7B57F09F10F8AD3CCB30AF8FC6272
9D493937DEEFA2E8BB2E8AC8FEC6C37D13B31FAAD29431505271578B4FDD76
D55D5EF6EF6D4FDE39BC29E2580E24D32E0FFBB197FF00D07352E9B6FE27D0
AF63BFB4B3B88658FD627C30EE1863906BF1BFC3BFB74FED7325E5BE95A678
A5F57B9B8758E1B73A659CF2C8EDC055090798C4F600935FA3DF083C43FB79
7896C47893E27DEE81E05F0EC51F9D2CFAC588FB50882EE2E6DA39A2F2C0FE
2F39E22BD706B3C0F13D2C4CB96953937E8BF3B9F0DC57E04E6192D2F6D8FC
5D08C7A7BF2BBF48F25DFC933D7B51FD9EFC0FE37F8E7E0FFDA67C3D0FF60F
8D7C372C91EA71ECDA9A95B4F6B25A1128E3F7B12C998E51CB2AF96E08D863
5FDAC7E0FE99F173C3FA2D9F8E3C510783FE1DF87679B56D6EE9E448A47645
D90AABCBFBA8D409252F23E704A808C492BDA7C29FDA5BE12FC60F166B5E06
F867AF8F184FE15B68E6D5B55B24074C864998AC5109F21247976C8CBE56F4
0B1B6E70701BE77FDB1BF674D2BF6E0F86DFF08CF86FC4F73E1DF13787A596
E74E8669E41A6DDBF451756EB90C081859954C90924E194956F7B8A38CA9E2
A584CB335C4272E570A5193D5C22F9B913EAA2E5A2BECECB4565F9670F6271
797D7798E015A5077E64AF66D357D7AF676D1EBB9F989F1FFF00E0A53E0AF8
67E19B9F821FB0A6911F87F4842D1DCF895E22279D88DACF6A92E64672001F
689F2F8E11170AF5F94FF0A7E256A9E10F8E5E11F8B3ACDF4D797BA46BF63A
B5D5CCF234B34C61B94965691D89662E01DC4924E4E6B0BE26FC2EF1F7C1CF
195FFC3FF897A2CFA16BBA73625B79C75524ED92371949236C655D09561C82
6B81AD29D38C62A315648F33178BAB5EA4AB579B94E4EEDB776DF76DEACFEE
43E2DF89EDBE14F81BC79F1840473A468735DC219805967822731A67FE9A38
8D47D6BF9FAFD997F60BF12FC53D34FC5EF8E5A8FF00C205F0CED10DEDC5F5
EC8B6F737902FCCD2219B0B14247267978C7281F923F55DFF6A5F839E16FD8
2FE1E7C67F8E36CDAEE93AB69BA45B1B15B7FB51BFD66D63DFE5056FDD8C4F
69249BA52106CE496C03FCF67ED65FB727C62FDAC75736FE22B8FEC1F075AC
85ECBC3F65237D9A3C1F964B87C29B9980E37B80ABCF969186607F67E01F18
B19C3394E2B07944797118892E6A8F5E58457BAA2B6E6BCA5ABD95ACAFAAF1
F1597C6B548CAA6CBA1F5FFED2FF00F0519F0FF85FC287F67AFD86ACBFE10D
F05592BC171AF408D05EDE16F95CDA96FDEC41872D7121FB439231E5EDCBF7
3FF04F4FD9F3C35F04BE1FDEFEDDDFB415B958AD6273E15B0986669E4972A2
ED51BAC9313B2DF3C05DD31C2EC71F26FF00C13DBF6363FB4978EE6F1C7C40
4FB17C2DF05B8B8D5EE656F2A2BB9631E60B3590E005DBF3CEC0FC91F75674
35F517ED81FB497FC2F2F18C3A07847FD0FC01E16CDBE936B1A7931CBB06C3
72D18031B946D89481B23C0C2B3383F83714F124E929622B4DCEACDB776EED
B7BB6DEAFCFB9FB2F843E19D5E23CC551B72D0A767524BA2E915FDE96CBB2B
BE963E9CFD907C45AAFC62F8F7E3CFDABFE2C5C2C761E0BD367B80EC584364
268DC22443A79705A24C0F7CB076CB3127F1CBE1AFC5AD57E24FEDE7E0FF00
8C3ABC8D0DC7887C7FA65FC809CF9504FA9458873FDD48488C7FB22BF4E7E3
BEB5FF000CC5FF0004CED3BC2903FD9FC53F1AEE43CA15BE716774AB2CAC33
8C2FD8E386175ECD31F5CD7E0E78675DBAF0BF89349F1358FF00C7CE917705
E45DBE7B791645FD56B2E1FC2CA9E162E7F14BDE7EACC7C60CF6963B3DAD1C
2A4A8D1B52825B28C34D3C9BBB5EA7F673F14A031F8CAE580FF5D1C4C3FEF9
0BFD2BF383FE0AC9E28D6A1F871F0ABF658F05412DF7887C69A8ADE4D696CD
9965F23F75042D18FBCB3DCCE5973C6E87DABF58FC49A2AEB3F11F45703740
6DD6673D8AC2ECDCFB1CA8FC6BE24D5B47F0E787BE377C45FDBDBE34C7BF4E
F09467C31E06B095764CE967BE19EE230724B5D5DBDC2DBB630216694E50AB
8FC33C2AE0E8E0F88F3DCE6B2B2755C62FC9DAA4FE4F9A3F733CECD2BD5C66
1F039761A2E5392564B76FE18AF5DCFFD1FD65F06F8C350BBF1D437DAACDBB
EDE0DB9ECA81B94551D86E007E3EB5FCD17ED7FF000BFF00E14FFED21E3AF0
5C10F9362B7EF7964A06145A5F01730AAFA8459367D548AFE83609A5B69A3B
881B6491307561D4329C83F9D7E7EFFC15C3E1F477771F0F7E3AE9B0E22D5A
D5F48BC60380F1E6E6D81C7562AF303EC807D38BF64978C55967F8EC871F55
C9D7BC9393BB727EF5EFE4E325EB50FAAF187248C214B114A36495B4F2FF00
87FC0B9FF0483F0E8B44F8AFF11AE2DF06CED6C6C6DE623AEEF3E79D01FF00
80424FD457E8DD95D3D95EC17B1FDF8245907D54E6BE5BFF00826DF8767F0B
FEC6DAB6BD3E3778A75CBBB8848183E4C620B3C13DF0F0C87F1AFA6ABF7AFA
46671F5DE34CC6A27A464A0BFEDC8A8BFC53BF9DCF83CA29F2E1A0BFAD4F4D
F8A16A8354B3D521C7977B00C11DCA77FF00BE596BCE2DEDA7BB9D2DAD6369
6590E15546493F4AF61974DBAF18781F485B1557BAB590444B1C6D45CA1C9F
A0527FC6BE57FDA13F6A3F027ECBDA6CDE17F0B793E22F889731E0C64E61B2
0C321EE0A9C8F558810EDC162AA54D7E118CC653C3D3756ABB247D870DF0CE
3737C5C70597D3739CBEE4BBB7B24BAB67D116F79E0AF86BAEF8774CF17EA0
8DE26F12DC2DB69B6111DF2B337DF7083F8235CB3C870ABD065B6E7A1F8ABA
EEBFA23D92E9776D6D6F74920608141DC8473BB1B870DD8D7E437EC2979E2D
F8D5FB58DC7C4EF1E6A12EAFA8E8BA75DDF3DC4E7203CA05AC71A28F95142C
CC511405503802BF42FC11F16ACBF686FD9F747F8C1A62E2DEF755D5238877
16D6F7F736B093E9BA38E36C75E79AFC67C58CC3178BE11C7E270739539455
E2E2DA7CB17172BB4D6EB9935B1FA5710F04E1F87B3CC3659526AA4F953A8E
DEEF34AF6514FA25CBABD5DEFA6CB3EEEF6F6FE4F3AFAE24B893FBD23973F9
926A4D3B4CBFD5EED2C74D85A79E4E8ABFCC9E807A93C5741E15F06EA9E299
CFD9C7916919C493B8F957D874DCD8EDF9915F16FED41FF050BF04FC15B4BD
F863FB379835CF147315E6B8DB66B4B471C1119FBB712AF6C7EE50F5DE7728
FE68FA37FD12F8A3C4BCC63F56A72541BBCAA3EABAB4DF4E9CCEEAFA454A4B
94DF8AB8DB099553E45673E8BB7AFF0097E5B9F4F7C64F8D9F05FF00647D0D
358F88D78BADF8B6E13CCB0D16D4869DCFF0B10788E3CF59A40070762B30C1
D4F81D79F13BC49A2A7ED17FB40A0B2D6357427C37E1B8CB2DBE8F6532FCAE
C8796BC9D0E6495F2F1C47CB5F2F7C91D7E5A7EC13FB38EB5FB447C46D43F6
95F8EB34DABF87343BA33F9BA83B4A756D4E3C300FBB25E1B7E19C1F959B64
603289147EC178ABC453F893536BA6CAC11E5614FEEAFA9F73D4FE5DABFD60
E26F0D7863C39C0AE11E1C829E22DFED15BADDAFE1C77777F6E4EF26AD0BA8
F3417E153CDF1598D5FAD62A5A745FD7E1F7F99ADE11D46E6FFC7369A85EBE
F9A679371FF7A36000F61D00AFC19FDAF74D3A67ED33F10ED42E3CCD51E7C7
FD7C2ACDFAEFAFDD5F065ADF5C788EC64B389A410CA8D2103854CFCC49EDC6
7EB55359F82BF05BC31F17F5BF8DFAE69FFDBBE2FD5DE096DE2B8DAF1591B7
823843451E36AB318F7798DB9813F263073F82F11E513C65385383B59EBE96
67ED5E0C788D86E1AC662717898392953B452EB2E68B49BE8AD7BBD7D1BD0F
CACFD9EBF602F1D7C4B86DFC5FF146593C19E13204804AA16FEE63EB948DF8
8508FE39067A108C0E6BF553C25A7FC38F831E1FFF008443E0CE890E9B6FC7
9D765774D3B81F7DDDF2F237A17381D15718A76BFE28D5BC4536EBD936C2A7
290A708BF8773EE7F9715661BCF0C7C3EF0A6A1F15FE21DC8B2D0F468CCC37
0C99181C2ED5FE2666C2A28E5988FC76CB725C360A1CD15AF593FEB4479DC6
FE28677C5188546AB6A0DA51A50BDAEDE9A6F2979BEBB25B19FF00113E2578
7BF67FF035CFC54F886ED7BAD5DE62D32C0B7FA45CDC38F9235CE4AF1CBB63
11A76248537E0B9F15F86BE17D95BF8DEE3CDF18F8A89BED5B6F0903CA0136
F18CB058E04D902E0FCC10B1CB3313F9E5F03B54F15FEDB3FB5947F137C5B0
B47E11F016DBDB7B2C930DB61C9B2832080659255F3A46230E2265E17681F7
D7C41BBD46FBC4D73717F6F2DBA03E5C0B2295CC687008CF62727F1AFC0BC7
AE3EAD83E1EAD3C326BDB3F6517AE917F1C9BE975EEC7AABE9D4FAEAFC1147
28AF432AAAD3C424AAD6FEEB7FC3A4BD3E397493E5E891C958DEDC69D7905F
DAB6D9ADDD5D4FBA9CF3EDEB5F00FF00C1567E0DDB6A76BE16FDA67C316FFB
9D45134AD6360CED9002D6B2BE3BE03C2EC781B635EF5F7A575177E0BD2BE3
5FC24F18FC0EF10305875DB293ECD230CF93370D1C807FD329963900EE41AF
8DFD9F1E3ACF8378E6842B4ED42BBE592FCFEF8DECBACA30EC7CDF89F902C5
E01D58AF7A1F97FC3FE173F2BFFE08FDA3ACBF193C71E256CFFA0787C5B7B6
2EAEA290F1EBFB8E3F1AFD8797C7274FB25D23C1FA7DBE87A7C59D91C11A2E
327270AA022E7BE075EF5F98BFF049EF0CEA9E12D7FE3B695AFDB9B4D53405
D3AC6E626FBD14D1BDF2C887E8D163F0AFBF0024E0724D7FAA5F4A8C746BF1
AE29C5DD4634927E4E9C65A7AF31F87646E51C2A8DF46FF26C9EE2E6EAFA63
35D4AF3CADC6E762CC7F13CD58F1C78CFE1DFECEFE049FE2B7C63BB16D6F0F
16762A03DCDD5C104A4314448DF2B6380485419672AA095ABF11FE23FC3EFD
98FE1FCBF153E2A4DFE90729A6E9A841B8BAB8C65638D4FF00177663F2C6BC
9E702BF0AF4FD5FE2CFF00C1463F6A0D1B48F145D490595CCACC61B72C6DB4
7D1E221E7310218072A028771FBC959031008038BC1EF06279EC6A66F9A49D
1CBE8272A93EB2515771879DB77D3CDE8198663ECAD4E1ACDEC8FD76FD97BC
4DE3CF8F37B7FF00B60FC6287FB3F4780DC59F82B4246DD059C07314F79923
325C4C730098853B44B8511BA01C27FC14CFC7D73A4FC33F077C3569717BAF
DD3EA57AA0F48ED57010FF00B2D2CD95FF00AE7ED5F71C963A3C3A9F87FE1A
785AD52D341F0FAC36B15B47FEAD22B640BB07B246BB467BE6BF157FE0A19E
393E30FDA4F55D322937DAF85ED6DB4C8F078DC17CF978F5124CCA7FDDAFC1
FC61E2C863A556B61E9AA549DA14E0B68535B47CDDAEE4FED49CA4F567F417
D1B786BEB7C494673D55152A8FD568BFF26926BD0F923C0FE0BF10FC45F176
93E07F0A5B1BBD5B599D6DE08C671B9BAB3100ED445059DBA2A824F02BFA44
D465BBF877F0F741F8563589F5ABFD3AC60B6BCBF9CFEF6511A05E7A91BFD0
9242E012C4935F18FEC0BF056DBE197C3FBBFDA1FC616A3FB635E88DBE8B0C
80868ECC9E6500E30D70C320E32225DCA712115F4E69905D78A3C4B6F15D31
925BF9C195BBE09CB1FC066BF8B7C5BE2FAD9760E9E4597BFF006AC6593B6F
1A72764BD6A3D3CA37D9B47EC1E2DF14D2CE334F611B3C3E11BBBFE6A9F6B5
ED0DBCE57DD247C89FF0531F8A67E0E7EC736BF0FF004E9FC8D77E285DADAB
0572928B08B6DC5DB803AAED10C0E3FBB31FA57E1CFEC73FB2BF89FF006B1F
8BB69E07D30C965A0586DBAD6F5155C8B4B30D82149C8334A414894E79CB11
B5188FB1FF00E0AAFE31F10FC6CFDB1747F81FE0AB79B5297C2B6B65A3D9D9
440112EA7A9EDB890C78EEC92411B64800C67A609AFB17C691683FF04FAFD9
A74DFD9D7E1F5D249F133C6907DB3C43AAC071244251B24747E1947060B600
02A8AF2FCB2105BFAA72BC0E1F24CAA8E161F052828AF3B2B7DEDEA7F2FF00
0FE418CE21CDA384C32F7EACAF7E915BB6FCA2BFC96B6383FDAE7E3EF86B4E
D334DFD987F67F0BA47C3FF0488EDE57B362A977736CD90AAE0EE78E2906E2
E4E659B3212D8573FAA3FB3C7C4787E3E7C28F067C4A2EAFAD69CE2CB5503A
8B9840494903A6FCACAA3B2BD7F3455FA7BFF04C5F893AC68DF12F59F86660
9EE748F10DA9BADD1A33C76B7568090EE40C46B246590B1C65846BD715F2B9
0F10549E60E555E93D3D3B7F97CEE7F61F8B5E1060B0BC231A5808FBD85F7E
FD649D9546DF77A4BFEDD4969647EB178AF49D33C1FA5EBB369A823BDF17EA
3F6DBC607991D208ADC37E10DBC49F8578E57BBFC47B1D1C08F5CF15EBB69A
0E8B629869AEA54890331CB65E46445E00C727E95F20F8A3F6BAFD8FFC08CF
6E9ABDDF8B6EA23CAE9D0C928C8F4918C1030FA3915FA5E619AC22F9F13512
7A6EFA2565F72565E47F16E47C2799664F972FC34EA7F862DA5EAED65F33D1
EBAFB3D4B42F1068375E01F885651EAFE1CD4A3304B14EBBC2A1E83D700E08
23E64201520815F13EA5FF00052CF8476CE5342F861717718E8D752DBC0C7E
A1526FE755EC3FE0A61F0CEE2558F53F8532408C71982E2099BF00618FF9D7
892E26CBDFBAEA2FB9FF0091FA0D0F03B8BE16AD4F0724D6A9F34134D755EF
5EE7B0FC51FD90EF351FD8FF00E24FECEFA44E759D3E3F3B57F08C8DB4CD1B
AB0BC8AD188EAFF684910C8061A39877DC07CA5FF04AFF00D9B2C7E11FC2CB
BFDAA3C79600F893C551BDB6810CCA43DBE9D9DA650AC06D7BA75277609F21
54AB625615FAF5F0B7C690F8BBC1F6DE216F0C6A9E0DB5B86510DAEB2B1413
1F308552B1A4D2322B31C2AB84624E42F2098BC6FE04BFD6ED2C2CB40782D2
CB4E8C4715A85F2A35006004DA0800280AABB4003BD78BC6F8EC7E0F23AD53
24A2EA56E5B412E97D2F676BF2AD52D6F648F8BAF296273694B35925272F7D
E9ABEB76AEAF27BBEEDB3E789B56D467D4CEB2F3B7DB0C9E6F983A8607231F
4EC2BE81D0B55B4F1B4769AC5BED835ED2882E9D3CC4E8C07FB2C09C7F749C
74393E1BAAF857C43A265B52B192245EAE06F8FF00EFB5CAFEB599A76A37BA
55E477FA7CA619E239561FC8FA83DC1AFF003C3C38F12F36E0FCDE6F30A73E
4A8FF7B09A6A4F5F8D737DA5AEFF0016A9F46BF51CEF22C3E65875EC64AF1F
85ADBD34E9F91F94DFF0558F82373E09F8D569F1774C81BFB1BC7902F9EE07
CB16A5668B148A7030BE6442375C9CBB79A7F84D7927EC9BFB10788BE3BC12
7C48F8857BFF00086FC2ED2C3CD77AADC32C2D731419328B769708A8801DF3
BFEED3071B88651FD01F8A3C3FF0B7F693F0945E00F8ABA5C779147756D782
DD98A069AD9F70689C10C372EE47008628EEB9C126BF0BBFE0AB5F157F68DB
4F12C5F06751F0C4FE04F83D60C916911D981F61D616DFFD5C924D0FEEF09B
4325A70620159D0B6D61FEF0F05FD351E2F81F0983C864A5592E4F6BA3E582
B72A51DD544BDD7CCB4B5ECF995BF9C331E139D0C6496255BADBBFFC0F42B7
ED3FFF00050FF0DF83BC287F670FD86ADC784FC1960AF05DEBF6C1A2BBBD66
1B5FEC8CDFBC40DD5EE5CF9D21FBBB02867F833F630F85317C6BFDA87E1E7C
3FBD8BCFB0BAD4D2EAF508CABD9D82B5DCE8DE81E388A7D5857CC15FB03FF0
45FF000B41A9FED21E27F16DDA831F877C373F964FF04D75710206FF00BF6B
20FC6BF9BF178BAB5EACABD79B94E4DB6DBBB6DEEDB7AB6CF4631495923D27
F6FEF88BFF0009F7ED1FAD58DBCA24B1F0A45168F0ED391BE1CC97191D0309
E4743ECA3D2BD03FE09DFF001CEDBC0DF106EFE11F8A6E36F87BC74562877B
7EEE1D4B1B23EA4002E14F94700967110E80D7C17E2FF115D78BFC59AD78B6
F86DB9D6EF6E6FA51D70F732B4ADFAB5604723C4EB2C4C51D082AC0E0823A1
07D6BF0496672FADCB136BDDBD3A34FA7A5B43FD549F87B86AFC350E1FABA4
5538C6FD54924F9979A97BDE67F475E28F0FDC786B589B4C9B2501DD139FE3
8CFDD3FD0FBE6BA1F04F862DAF44DE24D7C88745D3419246604890A0C95C0E
481DF1D7A0E4F1C67ECBDE34F11FED19F05B4DBDF895A4DE69DAD68EC900D4
E484C71EA7081C5C425800C5D4625C65448370E0EC1E77FB497FC143BE0DFE
CF56971E06F876B178CBC5D641A01696B27FA05948A76917570B9CBA9CEE8A
3DCFB815731939AF90F097E8698ACEF8B79F0341D6C226A7082F37F0D46F48
C60F7727697BAB5BC91FC0FC69C55572B854CBB10D2AF06E3269DD69D636DF
996DD56B7B3390F8CFF0EB44F8A5E231FB417ED95AAFFC21BF09BC28593C3D
E169DDA3B9BBDDCF9F7A91E5FCEB809916B103284011B69570DF9E3F1D3FE0
A43F12FC51E25D1EC3E026FF00875E09F0ACD1BE9D656CA91CB74B07CB18BB
48F31F93B7816CB98803F37984295F8DFE357C7AF8A3FB40F8A9BC5BF13B59
7D46742E2DAD97F7769671B904C76F08F95178009E59B00BB33735D37C21FD
947E3FFC7292193E1F783EEEE34E948FF898DCAFD96C00EE45C4DB51F1DD50
B37B57FD0270A78479664B82A58CE2CAD4E4A9479610934B0F453DD454BE39
CB572A93BCA4F648FE6AAF8F9D4938D04F5DDF57FF0003C8FDEAFD9D7F699F
873FB6478652D59E1F0E7C4CD36106F34E66C2CE107335BE799213DC72F113
86C8DACFF4D7C3AF036A169AECDA8EB96E61FECF3B63561C34847DE07A10A3
B8EE47A57E737C05FF008267784FE10EB7A4F8EFE3378E67B9F10D84B1CF6D
63A14B2D9A47303C7FA42EDB990678CC6B0E3B922BEA4FDAB7F6FF00F861FB
2478F3C2BE08F1B6937DAC3F882D26BEBA3A7344D3D8C0B208A0730CAC8B20
9984A38914AF96786C8C7F91DE38F839E1BE2B8E1671C2B5F9DD27CD52097B
AA5AF2DEFEF3B3578B695ED66E6B55FA9653C4799D2CBDE1ABAB465A26F7B7
5B7E5FE47D91AF785F47D5B4CD434FB98A48E0D55835EADAB18A4BA1B047B1
E44C3E0A2AA92194ED017705C8AE50787B5E874A83C3BE15B1B4F0AE8766A2
38A0876C65231D956105107B291EE6BE3A1FB56FC1AFDA5B4E8ED7E07FED15
1780358B80ABF61D42CED2290B77458AFE3866673EB0CEC3D32335F2CFC61F
D8EBF6D6D7565B8B8F18B7C47B095BF7712EAD2464C6790C60BB31C0A3BED4
76F6CD726638FA941F353A0E5E6ADFF05FE07DB706708E0B3482A38BCD69D0
57BF2C94B7EFAA8C2FFF006FB3EF9F14F8F3F676F86A243E3EF88960B3C47E
6B6B69566B818EC6083CE97FF1D15F3378BBFE0A31F043C25BE0F85FE0EBBF
115D213B6E6F0ADA439ECCACFE74C47B144FAD7E58F8B3E027C6BF0319CF8A
BC0FAC58436DFEB276B295ED87B89D15A223DC31AF24AF86C7F18636FCAA3C
9F2D7F1FF23FAAF84FE8DFC33CAAB54AEF13E924A1FF00926BFF00931F6EFC
47FF0082827ED17E3D12DAE99AAC3E12B09323CAD262F2E5DBDB3712179837
BA327D0576DFF0532D5F58D0BE087C02F871A95DC97774F6125F6A0F3BB493
49756F6D6D1091D98924B34D31249CE6BE19F007875BC5FE3BF0E784D46E3A
D6A5676400EFF699963FFD9ABEA6FF0082ABEA37FE2EFDA8742F04F87E29B5
09F4AD06CEDA3B3B7432BFDAAE679E62A91A02C59A368B803A015FD49F422C
155C7F1AD3C5E2657546339EBB2F764BD159C933F21FA59E5996E5380C165D
96D08D3527293E549376E54AEF77F6B767E5657ECEFC061A07EDF7FB245FFE
CBDE36BB8E2F1F7C3AF26F340BB989DCF6D07C901247251558DA4BC1DA8F1B
E19C0C7CC5F083FE09ADFB4DFC51305F6B5A3C7E06D225DAC6E35B6314E509
C305B340D3870390B2AC40FF007BD3F5E7F657FD827E107ECF3E2A83C6569E
21BEF15F8D2C21910DCEF36B6708995A370B6D0B10772B11B6696519019402
323FB6FE93BE2070766192D5CAEA62954C4C5F353F67EFF2CD749497BA935E
EC9735D6FCADA48FE33C9709888545351B47ADCFAF3C69E1F8B50D57FB5B58
BA8F4ED0F4CB432DCDC4AEB1A2221767259B0AAAAA32CCDC28E6BF0E3F6D8F
F82831F1A59DE7C13FD9EAE1B4DF07A86B7D47568B31CDA92F468603C325B3
7F1B9F9E6E9F2C7B849FAE5FB6137C17FF00853776DFB4026AC3C0C9730FDB
EE34A7BBC5B127114974966DE63C3BCAF0D1C881CA315042B0FC888BF655FF
008279FC53852EBE107ED1B06872DD9C436FADCD6C24DC780AB6F742C27FA0
3935FCC1E0066DC1396E2FFB43896727562FDC4E0E54E3FDE7CBCCE52EC9C5
28EFABB35ED66B4F1338F251DBAEBA9F98FF000FBC07E25F89FE36D17E1F78
3ED4DDEB1AF5CC76B6F1F3B4339E5DC8076C68B9776C6154163C0AFD8FFDAE
7C49E1AFD9EFE0F7863F62FF0086171B96CADE2B9F105CAFCAF3BB9F382C9C
9C34F29333AE7E5411A8F90E07D47FB147EC23E1FF00D9CBC45ABFC47D47C4
769E34D56F6216BA55DDB43B22B5B67E66700BC80C929C2E41F95010188761
5D8F8FFE05782FE155D5F7C45F0EFC1BD4FE38F8D3569A5B99EE2F6F34F204
CEDBC7989793451C601E10C168E54003802BA7E96FE317FAD756965191D5BE
121AB96AB9E4D6F6693F753E5574B573E8D1F7FE0CE332CC931FFDAB9B5394
E54F584236D65D1B6DD928EFD5DF974D19F899F0CFE00FC63F8C122FFC2BDF
0ADE6A96CC587DACA086CC1538606E662916E1FDDDDBBD057DA51FEC4BF093
E09E930F8B3F6BDF8A9A7786AD482EBA758CC1659B69CE124954CB29C64324
36E4FF0075F8CD79E7ED05FB497FC154FC4C93E8FE13F84DACFC3AD1002813
40D2A6D42EFCBEC1AF1125C63B3429157E3FF8D3E1D7ED07A86AF73AEFC44F
0C78A2E754B96DD3DD6AB657AF71237ABC93A1627EA6BF8EB01C1985A5AD5F
7DFDCBEEFF00367ECBC59F498CF71D7A7804B0F07DBDE9FF00E04D5BEE8A7E
67EB978AFF00E0A6BFB3CFC07B3B9F0DFEC67F0BA09AF0AB4475ED5D1A2120
CE73B4B35E4E99E409658B6F65C57E58FC6FFDAB7E3F7ED1376D2FC55F17DD
EA765BF7C7A744C2DF4F8883F2EDB58B6C64AF40EC19FD58D783DEE91AAE9A
4AEA3653DA91D44B1B27FE84057E8A7FC12FBF66D5F8EFFB445AF8A3C436C2
5F097C39F2B57BF2E3F772DD863F61B76E7A348865604156489D1BEF0AFABA
74E14E3CB14925F23F9FB1D8FAF8AAAEBE26A39CDEEE4DB6FD5BD4FDAEFD92
BE0937ECADFB27E89E0FD4A0FB378CBC644EA9AD023124535CA2FEE1BAE3C8
84470B0076EFDEC3EF1AF45B6B9B8B39E3BAB591A29A23B95D4E0823D0D749
E34F10B78935F9EF54936E9FBB847FD335E87FE04727F1AE52BFCAAF1B3C43
967BC435315879FEEA97B94DA7D22FE25FE295E49EF6B763F77E16C9961306
A9CD7BD2D65F3E9F25A11FC64F841F06BF6BEF0747E06F8D160B6DACDA06FE
CCD6ADB6C7776B2B7531C8411B5F8DF13831BE01C060857F9B5FDABBF627F8
C5FB26EBC63F175A7F6BF856EE631D86BF668DF649FBAA4A3936F395E4C4E7
9C3796D22A96AFE945637738452DF419AF42D37576D5B44B9F05F8EB431E26
F0DEA11982E2D2EADC5C2344DD5191C1574FF65BF022BF7EF073E92555A865
DC429CBA46AA4DBFFB8896FF00E25AFF0032DE47C8712F03C75AF83D3BC7FC
BFCBEEEC7E2EFC18F33E377FC1227E267805364BA9FC30D466D42D95F9315A
C12C5A9C8E3D0B46F7683F1AFCD4FD983F66EF1BFED47F15B4EF86BE0E4304
2D89F52D4194B436164A409267E993CED8D3237B90B903247F519F03FF0062
3F869F05358F8891FC3DB99C7C3CF8A5A625ADF787EF43C9F65953CD8CF912
C877985E19E456490338201DEC0809E45E1CFD9B7C7DFB227ECEB1FC23FD99
BC3D2F893E2178AC6ED77C4692416A227DBB59D1EE248F1B4314B68D4FEEC6
E958873F3FF68CF190547DBC3DE56BAB6B7ED6B6F73E0327CA658CC5C309CF
18393B394DA8C63DDC9BD125F7F4577A1F2FFED53F15FC15F08BC0561FB197
ECF38B2F0D7871041ADDD44C1A4BAB853BA481E45C6E63265EE587DE7FDDFC
AAAEA7E3BF807F0CE6F8C3F183C2DF0F14136FAA5E2FDACA9DA56CE1065B96
079C30891B6FFB581DEBE93D23FE09C9FB4E6AEFBB51B1D3749673926EF504
7E4F527ECE26AFD00FD8FBF633F10FECEDAFEBDE37F1BEADA6DF6B377622CA
C4DA34B2436EAEFBE6693CD484924A46063071B86466BF36596E371D8C8D5C
4536A37EBD12E9FD753FB967C6BC33C29C3757039362E152B28BB72B4DCAA4
B4E676BAD1EBBE915647E317FC15ABE3443F11BF6951F0EF45901D0FE19D9A
E971A27FABFB6CC165BB2A074DBFBB848EC62AFCB6AFE8E0FF00C1227E116B
1E20D4BC55F163E32EA5AFEA9AB5D4D797B2D8416B64F2DC5C399256C48D78
4166627BD7B17863FE09C3FB03F84FCB377A16A9E2F9D08DA6FAFEE8166F75
B736B19FA118F6AFD4CFE066EFA9FA11F07FC4561E2DF849E08F89770E231A
BF86F4EBE6964214245736D1DC31627A0E7273D315F895FB547C57F1CFED4D
E3E8FC39F09B42D4B55F0478619ADB4C834FB39A54B8917E47BA64894FDE03
6C40FDC8FB2B3383F7CFED55FB5E781FF62AD1BC1BF0A7C37E0B87C40B73A6
18A1D2FEDBF658AC34DB555B7B70E1A29CBABED645071C46D9635F9B1E2AFF
0082B57ED0BAA24D67E10D0F40F0D5A11B61296D35CDC4431C7CF2CBE5363B
7EE40F6AFD5F86FE8B7C53C4F81862B014E34F0F55B7CD29457359DAF64DCB
75D63AD95B4B5FED780BC53C170D63258DA987F6D5D2B42EECA17DDDACEEDA
D16AACAFBDF4FFD2FD1ED474DBFD26E9ACB5281ADE64EAAC3B7A83D08F4238
AF3FFDA9BC103E2CFEC5DE35D1228C4BA8F8487F6C5A81CB2FD88F9F2103AE
5A03320C7AFE15F337ECE3FF00052EF0AF8FEDAD3E1E7ED4F6F1585E9C476F
E23813640CE7806E6351FB8627199107967F89114127F53FC25E1282D66B98
619A2D6FC2FE23B32AB3464491CB1BAE57715254A3C6CC0329DAD91D32057E
31C3DF471E2EF057C47C0E675A9BA985E7B73AD6EAEA4AF6D1AE6514DAB593
F7A31BD8FBBCC78B3099E657528BF76A2D6DF9DBE57D3EE6CF9BFF00678F0E
C5E09FD8D3E13F87E02717DA745A99CF52751DF7CDFF008F5C715E9FE1CF0C
EA1E24BBF26D46C8508F32523E541FD4FA0FE439AF46B8F87B65A6E8BE1BF0
869EE2CBC3DE16D3E3B612B90A120B78D224193C64247C93C28E4F607F2A3F
6B6FDB823D46DAEBE0FF00C02B9367A0C61A0BFD6202564BBECF1DB375111E
8D2FDE93A2909CBFEE1C77C594AA63B15995577756739A5D5F349BFD7531F0
EFC3ACC33FC4C705828E914B9A4FE18AEEFCFB2DDFA5DAFD124F8A1E11F176
87F12FE13FC0FD64CDE2CF0B691332DDC24346350B88A648FCB9390EF1488A
242176A9650092085FE6A2F2F6F351BB9F50D42792EAEAE5DA4965958BC923
B9CB333364B3127249E49AFBA7FE09CBE33FF8463F690B3D1A57DB078A34FB
BB020FDDF31145D21FAE61DA3FDEC77AF997E3B782BFE15D7C65F19F82E3B7
FB35BE97AADD25B47E96AD217B73F8C2C87F1AFC673CC74B1987A789969672
4D74E8D7E07F727855C2987E1CCE71B92527CCA54E9548C9DB99AF7A13F973
2BA5D2FF007FDB1FB1E5ECFF000C3F660FDA13E39C0CB15DE9DA44D6F6123F
005D5ADA4D2A2E7FDA966847E55D3FFC1233C6FE1ED43F64AF1E786FC67A88
8F4EF06EB73DFDC6E6FF008F5D3A4B686E3710B9608648676C8193F363915E
49F19AF61F85DFF04968EC250D15DFC4DD7A1886DC83B85D9B80491D9ADF4F
C7D081DEBCB7FE08CFAE59EA7E3EF8AFF06B524CDA78CBC36B7121E31B6CA5
36CCB8EE4ADF31FC0D7E8390E5786A980A785C6479A94D5A6BBC65F12D7BA7
6D4FE35F1873B9E2B8A71B89A6F58CF953FF0005A2BFF4935FF6C0FF008287
EBBF1620BAF85DF0484BE19F00A86826B85061BCD4D3A10D8E6181BFE7983B
9C7FAC382507C6BFB37FC05F137ED1DF15F4AF86BE1CCC114E7CFD42F36964
B2B1888F3A661DC8C8545380D232A9201C8F20D4341D534EF105CF862481E4
D46DAE9ECCC28A59DA7473194551C92586001C935FD31FEC93FB3E47FB28FC
1782C2F20127C46F1988EE35365C3BC0707CAB542B9056DC311C13BA567604
AED03FD72E3ECFF24F0CB852183C82946152A2E5A495AEDD95EA4BBA8AB795
F962928EDFCF386A7571B8873ACEFDFF00C8F69BAD3BC31F0FBC29A47C22F8
7B6AB61E1EF0E4096E91A7F114E4EE6FE262D97918F2F212C79E6AC695E188
8E9B71E25F13DE47A3683651B4F3DD5C3AC48B146373B977215500192EC700
735CCFC47F1DFC2CFD9BFC227E20FC6CD496277DDF63D363C4B75772A8CF97
14591E63F2324911A6417600E6BF01BF6A9FDB67E287ED3BA8BE9B76E7C3DE
0AB7706D744B69098D8A9CAC975200A6793A63202263E45077337F11F853E0
7675C658978B9370A0E4DCEB4AEEEEFAF2DF59CAFBEB65D5DEC9FD1E3B33A7
878F2EEFB1FA17F193FE0A73E1CD1BC61A3FC3AFD9DADA3FEC28B52B45D535
FB98FF00D7C0265F3D2D2290670C99533483382DB107CB257E95FC518BCBF1
223FFCF5B746FC9987F4AFE3F2BFB14F14DB4FE2E9FC3977A68DE755B44915
BF842300FB89F401B35FA17D287C2ACA785F0B9551CAA9D94BDAA949EB2935
ECECE4FBEAF4564BA247264B8EA95E53737DBF5395F09787575ABA7BABF610
E99643CCB8958ED5DAA33B771E9C724F61CE7A57E3CFEDABFB5149F1C3C5AB
E0FF0007CC62F02786E42968A9F2ADECE80A1B965E3E5032B083D172DC1720
7D45FB7C7ED1B6BE10D14FECDFF0DEEB6CF3460EBF75137CCA8E322D770FE2
9061A5F44DA9D1980FCDEFD9F3E17CBF193E31F85FE1EED26D751BB56BC652
54AD9C00CB70430070C62460A7FBC40EF5FE7EF14E712AD516070FDECFCDF6
FF0033FBC3C05F0DE8E5B829715E6EAD68B9413FB304AEE7EAD7C3E5AF556F
DB6FD86FE167FC2A3FD9BA3F12DD44135BF16C4FACCEC40DC2168FFD0E3CE3
2544589307A348E2BDBACFE245C4D0FD8FC476516A36EDC3654027DCA9054F
E42B56DFC7361E23D13C7569A4A2258785EFCE84850615A48ADE069718E811
E73163B18CD78ED7DB60F0749619504938DADAECFBFDE7F2AF1866F8AC6E69
5F1D8AD2A549735BB276715F2565F23D68781BC21E31B692FBC312C9A7CA87
0E8CA59031E70549E3FE02D81E95C3FF0061F893E1F6B56BAC5DDB9782DA40
4CB17CF1B21E1867F87209037015F227FC1477E2BC9F07BF66ED33E176913B
5B6BFF0011272B3942CAE9636FB25B93B97A16630C241E1919FD0D7E727ECF
BFF051EF8EBF064DBE85E2AB83E3EF0B47846B4D4E426EA28FA620BB219C71
C059048807002F5AF7709FB3A5F1664B1E2BE1D71C2E26336E9A8FBAA5C8D5
A4937C9F1A6ACB93E1BB97438287895570B3785C4FEF20D59DF7D7A5F7DBBD
FD0FDEFF000EFC21D27C0BF107E2D7C55D08A0B4F88DA7E977122A703ED763
0DDC72B803B48B246F9EEC58D72BE33F1C7813F676F87779F18FE2B4FE4C16
C02D8D98C1B8BAB9704C50C4871BA57C120744505D8855257D83E097C50F0D
FC6DF85BA2FC43F0CE9777A5E93ABC4C62B5BF83C9915518A101416568F20E
C6525597A7A0FE6CFF006F9F88BF1CFC77F1BEF2DFE32E8B75E17B6D2BCC8B
46D2653BA082CCB7FAD8A4526399E52A0C932120901410A8AABFBC784BE176
378BB889E073CAAA0E84631AAAEB9DAA7154D4209EAECA29396AA2B57AB49F
C96618D861E97352574F6F9EB7678AFED0FF00B42F8F7F692F88373E3BF1B4
DE5C6BBA2B0B08D89B7B0B6CE5628C1C649EAEE465DB9381803F697FE09C7F
05A3F82FF01AEFE356BD6C23F13FC410A6CBCC5F9E1D3149FB3819191E71CC
ED83874F2BB8AFC64FD977E09DE7ED03F1C3C33F0D6247FECFBA9C5C6A72A6
4793A7DBFCF70DB803B599479684F1E63A0EF5FD3A78E6FACC5EDBF87B4889
2DB4DD1635B68618942C69B005DAAA3801400A076C715FD0DF4B4E31C3E4F9
4E1783F2A8AA7192529463A254E2FDD8FF00DBD24DBEBEEEB7B9E464387752
A4B11535FF0032FF00C3748FFB62F359BE6021B181E47918FDD2DD589FF777
66BF0BBE0F7C3BD47F6B3FDA6AED6EC3AE9BABEA377AD6AD20383158998C8E
A0E7219CBAC28467696071806BF61FE236BE3C13FB34FC4DF16A3F973369D3
DA46DD36C93C7E44447B879C57CF5FB2E4DF0CFF0063DF819E1EF1C7C63BE1
A36A9F173508234918730DB3C6CD6BE610D9489509964938D86550D8C035FE
6BE2721C4E6D98D0CBF0B4DCE5ACB9526DBF2B2D7A3F95CFEA9F0D789E3C3B
C3999671176AB51C68D37D9D9CA4FF00EDD4D3ED7493DCFA9FC7FAC59DC5EC
1E1ED1634B7D2745416F045100B1AF9602E1547015400AA07000E3AD5FF85B
15AC1AADEEBF7EE22B5D26D9E5791B854C8E589EC0206AC2F18F84E6F0D5E2
CB03FDA74EBAF9EDE71C820F3B491C671DFA11C8EE0699F026A3E38F823E2F
F07E9B2B5ACDE328A4D224B84215E0B4BB02DA79D09FE38A2965741DD940EF
5FC13C0D9466799F895CD9DD371AB4E52A928FF2A82F712EF14F9395F55667
999BE2A8D1C93FD9A578C9249F7BBD6FE6F5BF99F95BFB16785B48D367F89F
FF000538F8DB66D1AEAD7FA9DC786ACE53BA42D793BABBC44E7E666716901E
8AA24246DDA47C75E29F10F8F7E3C7C4DBEF105CDB4FADF89BC4F745D6DED2
3795D8E3091431AEE6D91C6A15473845193C135FA9DF1B3E19F8ABF68DF19E
8BFB347C10B58F43F85BF0A443637DA8329FB1457B0C42331260E6796DA13E
588C10C2467F3195486AF9F7E297ED7FFB38FEC27A4DF7C31FD9774FB6F1D7
C496468352F105C9135B5B49FC4AF2A63CD2A40FF4780AC6A47CEE640C0FF6
EE6981AD9957E48BE5A51EBDDF5B7A6DDB73EE78138A72CE08CADE2AB47DAE
3EBA4D417D886F1537F679BE26BE27EEA695AE6A7863F635F871F05FC2B1FC
56FDB57C5F6DE14D213E68F4686706E2765C3794F245B9E4723398AD559B18
2245C115ED1FB267EDB9E0EF8C5F1FF4FF00803FB34FC3FB6F0B7C3AD2ACAF
751D46F6E9047797515BC6218DA38626C2334F2445A499E5774C82158E47F3
85F153E2FF00C4BF8DBE2CB8F1B7C53F105D7887579F204970DF24499CF970
C4B88E28C1E891AAA8F4CD7EAD7FC11B6C2C742F137C65F8C57833FF000887
86E384E4F1E5DD4925D3E7FF0000457D1E5D93E1F0B1B528EBDFAFDE7E2FC6
9E2466F9FD5E7CC2B371E905A417A47F5777E67DE7FF000541F84D7FA9687E
1DF8CBA67992C7A3FF00C4AF508F7332470CCE5EDE60BF757123346EDD58BC
63B57E2ED7F4C9E32F14F84FE24EA3A47C28F16306F0F7C61F0C4D2E9BF772
B716E166936120FEF0C5711CB19C614C39EA457F3D5AFF00C20F1D687F162F
3E0C269D25F789ADEFCE9F1C10A9CCEE4FEEDD3763F77221122B3606C3B8E0
66BF3CE2FC05B11EDA9AF89D9FF8BFE0AB33FB23E8E7C5AE593FF66E32493A
51E78B7A2749B77777FC93528B7D34396F06F837C4FF00107C4D61E0EF06E9
D2EABAC6A7208A0B7880DCC7A9249C2AAA8CB33B10AAA0B3100135FA4FAE2F
ECF3FF0004D3F0C58F8ABE282C5E3EF8CFA9DBF9FA6E9709FDDDB0C95F3632
EA7C9883A95FB4BA798C54889062415F63FC0AF81DE15FD92BC121310EADF1
0F5C847DBEF40CAC4A79F261C80560461ECD2B0DCD801553E55FF82A3FC127
F8E5FB39699F1D3C3F6DE77897E1B33FF682C6BF3CBA64DB45C9214127C970
938C90A91994F7AE1E14CD72959BCB279D452C5C63CEE3D22AEB4BF59ABA6D
7447E4FE34F8BF8ECCE94A8654DC3077E5725A4AA79F750E897DAEBBD97E44
78ABF6D6F8DDFB407C79F0578B7E26EBCD1E8BA4F8874DBCB6D1ED0B41A6DA
AC3751B82B164EF7007FAC90BBF6DC0600FDFF00F8F3FB5B6ADFB397ED2F65
E1AF1344FA9F81B5DD1ACEEA6890033D9CAD34F0B4F074DC088C6F8C9E7195
21B3BBF91B4768DD5D09565208238208EF5FD147FC141AE20F1D7843E09FC6
DB38F7AF8B7410D24CA3E5DB24505DC2A4FBF9F2103D8D7E8DC4988AB470AE
B51767169FE36FD4FCBBC13CA30398E7D0CB73087353AB19C7D1A8F3269F46
B97467EB969FE32935AF0FDA78E7E1E6A7078A3C357E9E6C6CA7CC655EF861
86F94F0C1BE65390C3838C67D5FE1E788F8D6F4C3A7DC36732C430327B9298
24FF00BCA6BF9F5F801FB4BFC48FD9E75D37DE13B9FB5E9174E1AF74AB8626
D6E0742C0758E5C749179E006DCBF29FDEAF877AB7863F687F86DA5FC56F09
59CDA236AC25CC170063CD86468A404AE411BD0E1D7A8E4AE72078D4AA65D9
E51786C7D08CFBC651525EAAFF00F0EBF13D3F137C27CC7852B2C4D1A8E587
93B4669D9A7AB5192EF64F55A3B74D96ABFC30D3350CCFE16D723988E5524C
16047AB21C8FFBE2B56FFC2FADEB7A15CF82BE257876CBC6BE1DBD4093C170
229D5D41C80F1CE0093040232320F39C8AF37D5347D5343B9F235181A07FE1
6FE16C77561C1FC2A7B5F137882C8016DA84CAA3A02E597F23915F3796F82F
94E5D8A78CC9A7530D37BFB39DE32F29466A716BE5A74B33F35ADC5188AD4F
D9E252A8BCD6ABD1AB33F3CFE3E7FC11BFE1D78CC5CF893F676D6E5F056A0F
961A3EAC25B8D38BE061639CEEB880672493F681CE1401567FE09BBFB26FC7
4FD99FC5BF172C3E2A787BEC2753D26DE2D36F6DA68EEADAECC4F3EEF29E32
5813952124547C1FBB5FA3F0FC45F164430D74B27FBD1A7F402B1BE3D7ED31
63FB397C3DD2BC4BE2DB21ABEB9AD5C08ED74D8A416ECD18C34AE58ABE0448
467E5397655E01DC3F50AB5951A2E75E5B2D5FFC0D4E4C8F29C4E3F1B4F098
1A7CF524FDD8F7EBBBB2B776F44B567E4E7C2CFF008275FC79F1E3437BE2B8
A0F04E9926097BF3E65D953DD6DA32483FECCAD19AFB2B4CFD9E7E0BFECDEA
AFE1BF867E22F8D3E37880313BD830D3D25C12ADE7CEA9631A6E18CA99E543
CE2BEDAF847F1FFE1CFC70F0A49E25F87778750B8B78F75C69A4A477F03E38
8DE37755049E15F7796C7A3F071E63ACFED77F012C7C4771E0FF0016F8E2EB
C05AFDA1DB369FAC593D83264E03799716E62746C655E39591872A48E6B5E0
DE0E86B8BC0E5D3C7726AE3077F9BB3568F9A7177FB47EA9E2178C7C4F8DAD
3C063EB7D552D1C229C3E4DEB27F7D9F6B1F127C53F86FFF00052BFDA844DA
1EAD0E99F0A3C1F720A7F6647A92AF990B646DB99ACFED134D9538643B236C
0CC60D71DE0FFF00824AF82F4368EE7E32FC4F2F8197B3D260481B8EBB67B8
32337FDF815FA4369E24F87DE3905BC3BF1874AD6A39BA4706A36F3039EC44
5391FF008ED69FFC2A1D627412E9FA8DA5C44DD1B73007E9B55857A1C5DF4B
9F15726C33CB787F872383A7FDDF669FAB57A936FCDCD4BCCFCAF2FE13C9EB
4BDA62719CCFD1FE6ECBF03C27C07FB3F7EC83F068C571E0AF0143AEEA90E0
ADF6A80DDC9BC7F129B9DC2361EB1C4B5EC1ABFC4DF136A4A60B49174EB7C6
02C030D8EDF39E463FD9C56A7FC29DF13FFCFCDA7FDF727FF1BA51F077C4DD
EE6D07FC0E4FFE375FC17E22F19F8C7C5355CF34F6CEFD22DAF9733939DBCB
9ADE47E8D95E0F8770697B3945BEEF5FC36FC0CBF871A5BEB7E2B8EF2EC991
2CF3712331CE587DDC93DF773F81AFE54BF6D5F8DC7F682FDA5FC6DF10ED6E
3ED1A39BB361A490E5A3FECEB1FDC40E99FBA260A662BD9A46FAD7F5ABE21F
859AECBF093C5DE0AD17C411787F5CF13D94F631EABB1A4166278CC5E622EF
898BC619993E75F9B07B57E46F877FE08CDF08F4A94B78FBE345C6A51E7FD5
E9D656F62E07A6659EEF3F5DA3E95FB87825C354F863208C3359C69D7A8DCE
7CD249A6F449B6FA4527EAD9F1FC538E963F18DE1D39422ACAC9FCFF0013F9
F4AF5EF879F1FF00E37FC26283E1B78EF59F0EC2873E459DF4D1DB9FF7A0DD
E537FC094D7F439E18FF0082687EC11E0F0C35A1AE78D1C9CE2FEFE58C0F60
6C23B318FA927DEBE8EF08FC29FD93BE18FD9A4F879F07F4582EACB982EEE6
CE19AED0818DC2E6713CF9F7DF93EB5F599B78CFC2D824FDB6614DDBF95F3B
FBA1CC79F87E18CC2AFC345FCF4FCEC7E40FC06FF8280FFC14ABC54D0C3E0E
F0F3FC54B7590426497407962539C624B8D3C5B2A63BB48FC75635FAFBF0BA
5FDA5BE304508FDA5FF67FF06E9967BD7CC7BED562BA9F675DF15AA5ADFA13
FECC97119F7F5FA3F48D73E20F8A515B4D820D1F4F0389CC79C2FF00B21B21
BF0503DEBF3FBF69BFF829DFC1AFD9F62BCF0A7C34BBFF0085A1E3D40F1BC8
93EED2ACA5C63F7D3C676B952798ADF24ED28F246C057A5C33C6B0CED2A983
C34FD83FB75128465FE14EF297AB8A8FF7AFA1388C155C04AFED52A8BA45BB
AF56B45F7DFC8FBAA3FD9B3F677D27C4BA47896CBC15A4E95AC595D24D6125
AA0B46FB4C20CABB12228AE54216DA54F009C601A9756F10F86FC3BE29D635
5F0E7876CA1D72F9D63BED47C944B8B96814448257450F204550ABB9F80000
315F8A9FF04DBF8C3F173F6A7FDB5757F89BF17B5C975793C39E1CD426B380
7EEECEC4DD5C5B4022B6817E48C18D9813CBBED05D99B9AFD63D46E7EDBA85
D5E0FF0096F2BC9FF7D3135F77864A8A92A3EEA968EDA5FAEB6DF65F71C58F
CD3158B7178AAB29F2E8B99B959795DBB1ABAA78A35FD6894BCBB7646FF966
9F2A7D36AE33F8E6A9F8D7E29D8FC1AD77E197C2CB229278AFE23EB5044E87
0C61B184892EA461FEE810A7FB4CCC3EE915BBE185D1B45B2D4BC7DE2BB84B
2D0BC3904977713CBC220850C8CC7D9146E3DF38AFC57F83DF1B359FDA6BFE
0A47E10F885A9078AC9EFAE63D32D5CE7ECBA7DA5A5C3C31FA6E382EF8E0BB
311C57ED5E10F86B2CE638FCCF111FF67C252A937E735093847EF5CCFC959F
C48F9FC7E33D9F2C16F2691F6AF8B7F691D27E1C7ED8BF12FE167C508E3D47
E1A78D0D85A5FC3703CC86D64974CB685A628720C522FC93AFF770C3EE6D6F
C63FDBCBF634D5FF00654F8882F74059350F873E26779B44BFCF9822CFCE6C
E67E7F7918FB8C4FEF23C30E4385FA87F6D0BC17DFB50FC40981CEDBE8E2FF
00BF50451FFECB5EFF00FB367C6AF017C59F87B3FEC7FF00B4DAADFF008575
8416DA36A1330592CA5FF9630F9AD9D851B06DE43F70FEECE632A17F96B28E
2250C554C3567A394ACFB6AF4F4EC7F63F88BE0CCB119060B3BCB21FBC8D1A
5ED22BED2508FBCBFBC96EBAAD775AFE02E85E23F10F85AFD755F0CEA975A4
5EA70B3D9CEF6F28FA3C65587E75F40F86BF6CFF00DACBC25702E347F8B7E2
562A000977A94F7B1003D22BA69507FDF35A5FB5BFEC99E3FF00D92FE2349E
13F13A35FE857E5E5D1F57442B0DF5BA9E87A849A3C812C64E54E08CA32B1E
3FF666F803E27FDA5FE32685F0A3C321A217F279B7F761772D95844419EE1B
B7CAA7080E373B2AE72D5F787F249FBD5FB03FED01FB48EBFF00083C65FB4E
7ED41E389B50F87FA44125B69364D63616EF7971138124CB2C5045231F336D
BC23CCDAF23386E501AF25FF00879D7ED029753CB1697A0341248CD1C72DAD
C318D09CAA6E4B84CED1C648C9A83F6E1F8A1E18D1E1D03F654F848AB67E0C
F8731456F7090B02B2DEC29B163661F78C0A4EF24E5A677DC372035F13F81B
E197C42F899A87F65F807C3D7BAEDC02037D9616748F3D0C92636463DDD80F
7AFCCF887882BCB13EC7092768E9A757FF0000FEE3F06FC1ECAE8E49FDA7C4
34A2E556D25CFA2843A6ED59CB77E565BDCFBD2D3FE0A8FF001C15FF00E261
E1AF0ECF1FA470DDC67F36BA71FA574967FF00054AF1B428E8FE00D28C9211
CC5713460FD46D6CFE7543E1A7FC1333C677D145AC7C67F11DAF856C782F6B
6ACB73758EEAD292208CFA1532FD2BEEFF0087BF087F673F81BE5CBF0FBC30
9AA6B30E31A9DF7EFEE370E372C920FDD9FF00AE4880D7565D84CE2AEB3A9C
ABCECDFDDFE763C1E34E20F0D7037861B04ABD45D20E4A3F39DD2F9C548C1F
83FF001BFF006A3F8BA60BE4F845A77873469707EDFAB5D4D6CACA7BC70988
CD2647DD21361FEF0AFB46C355B033C3A44D3C173A96D26516C842295EA482
5B681D305B35E03ACF8CFC41AD868EE2E3CA81BFE5945F22E3D0F723D8935D
768ACBE0CF05DDF8966016F6FC08ED81EBCFDDFEAE7D4015EFE3B1187CAF05
571B8C9DE34E2E526D2D92BE895BE4B7BE87F3267199D3CCB151860B0B1A29
BB28C5C9FDEE4DB7F2B2F224F157C53BED2B5AB8D3346820962B63B19E40CD
971F780DACBC03C7D4573A9F16BC5B752A5BDBDB5B349210AAA91B9249E000
379AF28F9E57C9CBBB9FA924FF005AABF1A7E357C3FF00D8D3E16CDF153E23
017BE22BE578744D195C2CF7773B73B0707622E419A52088D4E00676547FE1
2E09E2EE35E31CEAA53C163274A8B93949AF869C1BD12D3576D22B776BBD13
6BEF734CBB2BCB70AA5569294AD65DE4FBFF0099DCFC6EFDAC7C11FB35AF82
F46F89D78975E25F1BEA96765058DB95436D6B3CE914F7929E76C36EAC4E79
323E1178DCE9BBE3DFDA5FE1C7813E299F83DF122F65F0ADC5FDA4179A76A6
D262D668A62D1912498FDC3AC91BAFCE0A1001DE09C0FE3CBE31FC64F1F7C7
8F88BAAFC50F88DA81BED6B559377CB9586DE25FF57040849D91463845C93D
D8B31663FBA7FB52EA63E3E7EC91F04FF69CB63E7DF35AAE9BAABA2EE26E24
42931661D163BAB695467BC83B9AFEEFC5C6A60300BD8C9C9C12D64F99C975
6DEF7EB7FD343E77C36C9B039BE770CBF30BC635B99271D39656BC5A5B6EB9
6CFBF7D4FD56D7346F17416EBA858EA936AFA6CCA244961999C146190DB431
C8239057231CD79AB333B1662493D49EB5F8A7F047F6ACF8C7F01E68EDFC29
AA9BCD103664D2AFB3359B64E4EC5C86898FAC6CB93F7B3D2BF56FE17FED95
FB3E7C7010E9DE2D6FF8407C513617174EA2D6573FDCB9C2C6727B4A2363D0
1359657C5586C45A327CB2ECFF00467D771E78039DE4CE55A847DBD15F6A0B
54BFBD0D5AF5575DDA3D42BB4F00E95FDA9E24B72EB98AD7F7CFFF0001FBBF
F8F629FABF80B5AD3905D5901A8DA300CB241F312A7A12A3279EBC6463BD65
78A6CBC7FA6FC0BF165D7C30D3A5BFF196B96EF63A5246E913452CE7ECEB70
5E42111602ED3316382130324807ECF2DC13C4E229E1D49479E495E4EC95DD
AEDBD125BB7D11F854DF2A6FB1FCE5FEDA9F183FE176FED23E2FF165A5C7DA
348B2B8FECBD30AB878FEC7639895E323F82670F30FF00AE86B53F66DFD89F
E33FED277315FE8363FD87E15DF89B5BBF564B6C038616E9C35C38E784F941
E1DD6BF4BBE12FFC13C3E16FC05D36DBC6BF1E2D2F7E2878A800F6FA068D65
35E5A249D4064503CD1918F32E0C507F0952704F75F14BC33FB747ED096A7C
29A0786ADFE17780CA7911D8B5F430C92C017685B9680BCBB3191E52C68983
82AF80D5FDC1E227D2E32FE1FCBE9E43C1949D69528A82A8E2F9528AB5D2EA
FAF34ACAFADA699DBC17E1855CDAAFD6330C4430F46FACAA492FFC0637E693
F28E9DDA3FFFD3F56F0F7FC127FE07693115F1F7C51D4755987FD0362B6B10
3DB6C9F6C3FAD7E93FECFDF023C11FB3E78407857C09AAEAF77A4DC3868E3D
5AEDA70AE72498A3291AC5BF924222863CE0F5AF2EF8ADF16FE15FECBFA1A6
B3E3BB85D5FC4F7285EC749B7606672380D83F7101EB2B8C7042066183F2C7
EC9FF18FE21FED2FFB44EA9F133E21DC8B5F0E78174CB9B9B3B2858A5958CF
75FB846209F9DCC067DD23E4F071B570A3ECB8DBC76CFF00396B2ECCF1B2AA
A4D3E5B45455BAB51492B74D0FB7E1DF09B15572CAF9DCA1ECB0F4E2DF33FB
6F6518AEB795937B2F36AC7D17FB59E8DE32FDA03C09AF7807E01F8C6CE7D4
FC2D7260F116850CAA975705E3596381E5DC0C7F29C8460125C905C6C20FF3
E3A9E99A968BA8DCE91AC5A4B637D6723453DBCE8D14B148870C8E8C032B03
C10464578BC9FB52FC51F0DFED21E26FDA27E1BEB73E8DACEB7ABDEDFF0007
7452DB5CCED20B69E23F2C916DDABB181C601186008FD9EF05FC41F80BFF00
0537F0AFD8EE16DBE1FF00C7AD2EDB263CFEE75058979284FCD3C040E4733D
BFFB7183E67E37C4BC372C4BF6F45FBCBA3D9FA76FC8FD83C0FF001B28E471
59566304A849DD4E2BDE8B7D656F8979FC4969AAB25F9F9F09FC60DF0FBE27
7853C6EAC55744D4ED2EA4C778A2954C8BF464C83EC6BEC7FF008294F83A3D
07F68087C556919FB3F8B34AB5BA697AA3CF6F9B660A7DA38E227FDECF7AF8
C7E23FC35F19FC26F165DF82BC79A6BE99AA5A60ED6E5258C9216589C70F1B
60E1871C10704103F4FBE38F8787C7EFD9E3F670F1C217B8BB9F51B1F0EDC9
519DCD7BB6D667623A7EFAD303DDF1DEBE2F034653C357C335EF26A497A3B3
FCCFE9DE2ACCA86173BCAF3AA734E9548D4A5292774D4A3ED2166B75783FBC
F973FE0AA37971E06FD9D3F673F831180A82C64BFBB4E8C2E2CAD2DA156C7F
B4D7331FC2BE32FF00826278D1BC17FB6A7804C973F67B4D70DEE95700F024
1756B28853F1B85888F702BDD3FE0B31E2A1AC7ED47A37866DE7DD6FE1CF0D
D9C4D08FBB1DC5C4F713B903B1689A2CFB015F3F7FC13FBF66DF8B5F1B3E3B
F857C61E07B316DA1F81B59D3F54D4356B95616B09B29D2E042A47FAC99C26
1635E79CB155F9ABF62A54D422A0BA1FE6B63F192C457A9889EF36DBF56EE7
ED0FC07FD8A827EDA5F13FE3578D2C36E83E1DD7A7B9D0A0953E4B8BFBF55B
DFB4286EB1DAACE361031E69043031115EC7FB59FEDA9F0E7F661379A7E9E2
2F157C4DBB88791A786FDCD8238CC6D74CA731A6D3B846B8925C83F22B071F
6D789BC67A2F863CB8B51F35DE752CAB12E495E99DC4A81F9E6BE77D36EFE1
3F85F519F55F087C3ED2ECF50B991A696F8DBC2B7734CE4B3492CA23692476
27259A42C4F535EC7177D2AB84E19CC311C6B59D578784211A106FECC56927
18C9C549DE52B2BB72DD248ACBF83B1F5A97FB1D3B2936F99DBF0BB47F37DE
2DB5FDA77F6A1F185C78F358D03C41E33D4EF405592D74FB89A086104958A1
5890C7144B9242AE06496396249EE3C3DFF04FDFDAFBC4815ECFE1D5D5AC6D
FC57B73696781EEB3CC8FF00F8EE6BFA23BBF8B7E2BB852B08B7B6CF429192
47FDF6587E949A46AFF113C6375F63B3D4250A31E64AB889101EE5900FC00E
4D7D355FDADB8794A9E57C2F92DDE9184146EBC924A74EC97F86C91D2BC20A
F18BAD8BACA296EDBFF80FF33F10F46FF82517ED4FA9806F5B41D233D45D6A
0ED8FAFD9E19ABF775B45F8ABE04FD9E74AD03C276967AEFC45D13C3F67A6C
6DE688ED9EF628238A5955E60998C3A9915582EFC0076E491DFF0081AF740B
9FED3B2D1F587D76EB49B83677D706569963BA4019E0DD92A1E3C8DE80E549
01B9E064FC4FD42F6C20D39EC6E24B77679326362A48017AE315E971EF8E1C
43C6583A10CF69C2938DDA8C16B17256B735DDDEDDD5FABDCF1F2EC161F038
95528AF68934ED2BDA5677B35A3B3F54EDD8FE6EBE27FC11F8F5E0BD42FB5C
F89DE15D56096E65926B9BF9626B885E5918B3BB5CC5BE22CC4924EFE7AD7D
B1FB0669B61F0B3E197C4FFDA935F8959344B3934ED3C3123CC9155669531D
3F7B21B78D5877DC3D6BF4CEC3E247896CFE5B8912F138E25500E3EAB8FD73
5F197FC14A3C7B69E14F85DE1AF84FA25BC3A6CDE27BA6D46FADEDD5514436
D86C305001F32770DBB1926326BF9CEBF0FD3CBF9B1AA77E54EC9F77A2D7D5
F63FB0B2AF18719C60A970CD4C3283AD28A9CA0DDBD9C5F34D28B57578C6DF
13DEC7A37EC813DF5E7EC992F88B5594CF7DE23D66FEFA795BEF492BDD0577
3EE4C64D7B9F82F49FED9F10DB5BBAEE8A23E6C9E9B539C1FA9C0FC6BC83F6
64B63A6FEC61E00840E6E25BB91BDFCCBCBA907E98AEB3E28FC451F027F670
F1DFC5D47F2B5186D1ADF4D2406FF4C9C882D8ED38CA89E40CE3FBA84F6AFD
0383B28AD8E784C0E1D5EA54E48AF394AC97E2CFE72F137131FEDFCC27B255
6A7DCA4D2FC11F84BFF0505F8C8DF18BF69AF124D673799A3F855BFB0AC31D
0AD93309DF82436FB8694AB0EA9B3D2BA5FD83FF00640B8FDA2FC68FE2CF19
C4D6FF000EBC31287BF9589417B3A80E2CD1F8C0C61A66072A98190CEA47CE
FF00B3B7C06F177ED21F14B4EF877E1806359CF9FA85EB2968ECECD08F3677
F53C8545C8DCE55723391FD2B3693E12F84FE08D2FE0A7C33B7165A1E85108
642082F2C80E5CC8C31B9DDC9795BBB1C70062BFBDBE96FF0048ECB7C23E0D
A593E5D3BE2BD9A8412D1A56B73794A4D377E8B9A7BA8A97E63C23C355737C
6DDFC37BB7FD7F5D0F7DF07F88B48BBB3BB874B862B0D1748F2ADAD9114471
A448BB570A0008806028C00140E95E45F18BC21F0D3E2C5B5EFC2DF8E1A245
A969923192CAF31B26B6320F9648E45F9A275FBBBD7838C3A95CE7CBFE254D
3C1FB26FC719AD64686683C2DACCA8E84AB2B269F3B0652390411904527C2F
F8A10FED1BFB34F80FE394455B52B9B45B7D55517684BD858C17202E4955F3
D18A027EE3A9EF5FE3EE0BC45E25A7C1D85E31CB310E38CA5295595AE94A2A
72525A3BA515AA69A9251D1EAEFF00A9CB29C1ACD2797D58FEEE568AEE9D95
9FCDFCB530BF660FD8EBC3FF00B205C78FBC6D63AB8F124DAD88ADF49B8788
09ADF4F187D9232F05A495879857E56589180524A8F40776918BB92CCC4924
F524D6DF847C777FE1B6165740DDE98F90F0B72541EA533C7D57A1F62735D8
EBBE12B1D4ECBFE124F0730B8B57C97857EF21EFB475E3BAF51DB8AFD4F85B
E9170F10AB4F31C655FF006CB479E12B5FDD4A29C6C9271D37496BF124DEBE
2671C29532C7C895E1D1AFD7B3FE91CAF8F7E1BC9F13FE16786BE1C5C464E9
7AF6B36B2EAD8FFA07D9C8F76E0E08204A608E20C3EEB48A6BF07FFE0A3BF1
D93E307C7FBCF0E689387F0D78055F48B2543FBB6B846FF4C9540E39914460
8E0A46A475AFDD9FDA6FE322FECF7FB31EAFE38864116B2B6315869838C9D4
2ED3646403D7CBF9A523BAA1AFE4A649249A4696562EEE4B3331C924F24927
A935FE91FD0B7C388CF1589E28AF1F87F774FD6D79B5E89A4BFC525D0F8BE2
9CF6ACF0B472FBFB917295BCE56BBF56A315E9147ED37FC13C7F6C4B3D5ECA
D3F65EF8D579E65ADC6D83C39A8CCDF346DD12C5DCFBFF00C7B93D0FEEBA14
51FB73A16969E15F0D2584AED22D9A4ACCF1233BB0DCCE4AA28662D83C2804
93C0CD7E13FEC09FF04FB9BC6CDA67C71F8E562F0F8754A5CE8DA3CA0A3EA0
47CC973723A8B6E8638FACDF79BF75812FED3F897C76B73E19935FF045FC37
51595FDC69F72E803849AD257B79E339E8D1CC850FBD7F357D30A1C1B94F12
E2789729A6E5569D392AEE9A4D5F994A4A3AA4DDD5E4B68BBD9DDC92F5385F
EB988A30C0CA568CA49ABF7B591F887FB65FC77FDAEBE2369F75F063F66DF8
33E37F087C3687CC826BC8BC3BA9C17DAB2B3132127C8DF0C32B12CC09F365
C932B7CCC95F8F1ACFECEFFB40F872D5AFBC43F0CBC4FA5DB26732DD68B7B0
20C75CB3C4057F5DFF00F0B43C679CFDB13FEFD47FE15E57FB62FED3DF10FF
00678F80BE16F893E0E834FBDD6757D661B19935085E480C0F6F752B616292
260D989067774CF1CF1FCD1E08F88F81E3ECEA1C3F91539AAD2575ED14631D
D2DD4A5DFB1F4BC49C3F89CBE97D6B1724D37D1B6EFBF548FE41195918A382
ACA7041E0822BF69FF00E09FD6ABE16FD843F6ABF88519D93DFE9971A6AB7A
35BE9B3F9647B86BCCD77DFF000F46D13C796A9A4FC7DF823E1FF18D9311BC
0D8E8B8EE20BD8AE4123B0DE3EB5F507C4CB9F8352FF00C1337E27FC45F819
E0B6F01683E34B692EA4B06458B75C1BA86C2491638E49234461100A136820
6EDA0939FE93E3CF06B88B86A947119BE1F929C9F2A9294649BB376D1B6B44
DEA96C7C861731A359DA9BD4F26F13F8CB56F10FEC0BFB39FC7CF0BC8C35EF
014F6B60B723930FD8D64B37693D43CB6710607EF6E19E0D7E927C317F865F
146C6C7F6B5F0B686977E2CD57464B16DA773DBC90B309A3DBC7EF15898DA4
C6F689542FCA707F22BF606D43FE1707EC01F1A7E08BB34DA8F846E1B56B48
D397F2E445BC82345E7EFDC59CA38FEFE2BB6FF8276FED0ABF0EBC7D27C28F
135CF97E1FF17CABF6567384B7D4F0150FB09C0119FF006847D064D7F3BE71
374F18E97372AAB1D2564F967AA5257D2EB4DFCAFA1FD37C319355CDB82EA5
5C1DFDBE12524D26D73D19DA7283B6AD5EEEDE4D6ECFD0AD46FEF353BD9AFE
FE4324F3316627D7D3D80E8076AEC3C09A9E9CB7575E19D7E18EEB46D7A26B
5B986650F1389014DAEAD9055812AC0F041E78AEB3C469E09F17F8D753F045
95D47A578D6C214BC36737C86F2CE5C84B98C7FCB48F7028CE9928E0AB8FBA
4F92EA5A65FE8F76F63A8C2D04F1F556F4F507A11E84715FE7F717F03F12F8
7F9FD1CD7129CD7373C6A6B6A8A5AB527BA738B77BEF76E2DEE79397E6782C
DF092C3C74D2CE3D57A7A7FC39FCC87EDA3FB356A7FB2DFC78D6BE1F1491FC
3F744DFE8572FCF9DA6CEC7CB52D9E64858343213825937602B2E7F543C23A
8FFC2EFF00F82537877524769F54F853AA7D92E020DCDB2DE568513B90AB6B
79139FF733D2BECEFDAEFF00676B5FDB37F67F9B45D3D13FE163F8283DE68B
3315569D8A8125B33B630974AA149DC02CAB1BB1DA083F9C7FF0493F12C3A8
EA9F177F649F1DACB63178BF4C9A55B7994C52C3736E1ACEF6308D82B37972
AB104657C93D315FE8664D9DE173ECA218CC1CAF0AB1BAF27D9F9C5E8FCD1F
9C70EE3EAE459DD0C4D45AD29C5BF357D6DEB1BFDE7C835F767FC14C3C55AD
7C0DF809FB3DFC0CF0BDF4BA36AB611FF6CDD4B6523412C579650246B2A3A1
0C0BCF7370E0839C8CF5AF987C33E00BD6F8CDA4FC2DF1145E5DD9D7E0D1AF
23073B64FB5ADBCAA08F43919AE93FE0B29E257D63F6AED3F430FF00BAD03C
376306CEC249A6B8B863F52B220FC0578FC0B86B4AAD46B5565FE7FA1FD39F
4AFCE54A965F84A72BC65CD37D9E91517F8C8EEFF670FF0082BE78DBC31696
DE0CFDA5F47FF84EB435DA8355B658E3D52251C032C6DB61B9C0E87313F52C
EE6BF627E177C47F803FB45E9A756F815E35B3D46709BE5D365731DDC1D33E
65BC804E801E37156527EEB115FC6AD7E917EC45FB00FC5FFDA1F54B0F8953
DFDCFC3FF02584DE60D746E8AF2E4C47E71A70CA92411B4CE488D0E71BD91A
3AFD0E52495D9FC6491FD2D7877C09AB47E23822D62D4A5B439959B8647D87
819191C9C7070719AFC1EFDB17E344BF1AFE37EB1AB59CFE6E85A2B1D374B0
0E50C16EC434A3B7EFA4DCF9EBB4A83F7457F437E109FC2FE0CF06E8BA2A6B
9757D676EF16996F7FAB5DBDD5DDEDC31D8A5EE2625A59247C8CF009E1405C
0AF9EFE25FC1DFD99FC6DADDE587C43F005B5B6A0B2966BDB1536B2C858644
92496A6277241070E1C7AF4AFCE78EF3DC0D2C0D0C457C4C69D1AAED19BBF2
49DAEBDF49C76BB57767BA3F71F03F8AB0B91E695B138BC34EA4D46CB96DCD
0BBF79F2B6AEDE8B4774AEBA9FCF2F84BC61E29F01EBD6DE27F06EA971A3EA
B687315C5B39471EA0E38653D194E411C10457E8DE83FB5DFC17FDA13C396D
F0E3F6CEF095BDE796365BEBF69132BC2CD8CB911626818ED05DA0255FA346
1722BD6FC45FF04E2F825E221E67C3AF88779A3CAEC5BCBD4121BC5C1FE155
1F659001D324B1F5CD787F883FE097FF001AACA5924F0CF88743D62D00CC65
E59EDA67FF0080189D07FDFD35E77096739960AB471D92622EE2EEA54A69EB
DD38BBAF5563FA3F8A789F80B8A28FB0CDA7C93B68E7194271FF00B79C795F
A36D75B1E59F167FE098FE209B493E3EFD96BC4D6BF123C3171978AD5A7852
FD178CAA4CA56DE72BC96FF52E38511B1AFCCFD6B45F197C3FD6E7D07C4363
7FE1CD5ED48F36DAE6396D2E132323723856191C8C8E457EAE7837F664FDBC
7E0A6B4FACFC3BD26EF4E95586E6B1D46CA486E02F4F32069C8917D04919FA
57D5CDF10FE217C44D1E1F057ED85FB376A1E2AB45051751D2B4B7BA9622C3
697444DCF1311D6482643FDD5ED5FE817863F4E6CD70B18E138A708EAC76E7
4B965F3D3965F351EEE4CFE49E34FA3F51A4E55B87F30A58887F2AA90535FF
006EF36BF2777FCA8FE7D13C6BE328D76C7AF5FA8F4175281FFA156DF8522F
1BFC47F17689E07D3F53BBBABFF105EDBD840B24F23832DCC8B12E727A65B9
F6AFD9AF1C7FC12C3E197C47D3A5F14FC04F10EADE11925DCCBA5F88AC2E92
25723E58D4DC470DD44A0F56659C9EC4D723FB207FC13FBE34FC22FDA8F46F
147C53D2AD64F0EF86A0BABC8350B4BA8E7B5B8BBF2FC985154ED9D4AB4BE6
0DF12F295FD7F0FA47F0862728C466197E222AAC29CA51A735CB37249DA2AF
A49B76F85C8FE7EAD90E2E956F635A0D6B67E5FE5F33F4CFC67A6E97E0ED13
C35F0CFC3E3CBD33C33A7C16D12E7F862411461BFDA0899CFF00B55E775EF3
7DF0D75BF127882F756D5AE12CE09E53B40FDE48635F95380768F940EFF857
3DE315D7BE1EDB797F0B7E185EFC41D6F69DB2CF7D65A75944E08C0966BA90
48320E4182DA5E982457FCCFF13F833C51C63C498CCDF16BD8D3A9376954F8
9C5689A82D6ED24F5E54DB7A9FD2D82E28C0E5B82A78783E6925AA5B5DEAF5
DB7ED7399D03C07E23F106D92DEDFC8B76FF0096D365171EDDDBF018F7AF04
F8E1FB62FECA5FB2A8B8D3B5CD5C78EFC6D6DB9468FA5949DA2957236DC3E4
C36F86C6E12334A01DCB1B5792FC5CF807FF00053AFDA596E34DF17F8EFC35
F0C3C25700ABE93A35DDD891A23B8113CD142D24D943875370B136322315F2
E597FC12BFF674F024BB3E37FED13650CE837496560B6967381DF699E79DDB
EBE48FA57EF7C0DF47CE1DC8796BD78FB6AABED54B593FEEC7E15E57E66BA3
3E6717C4999E6527470D076FE5826DFCDAD7F247C5DFB4FF00FC1463F681FD
A585DF87A5BE1E0EF05CFB93FB174A91916688E46DBCB8E24B8CA9C329D911
C03E503CD7C2361617DAA5E45A7E996D25DDD4EDB638A146924763D9554124
FB015FBDBA7FC3FF00F824D7C234496DF4AD6BE285FC2DB775C1B97E4752C8
E6C2D9C7FC0187A0AEC07EDFDE0CF871693693FB3A7C1AD0FC1F00C2C73BC7
1C7E627AC96F671C3F31F79DB9E4935FB0623893054B7A89FA6BF91EE64BE0
9F14639AF6782945779DA1F849A7F72656FF0082427C0BF89DF0ACFC4EF88B
F12BC29A8F85E1BDD3EC20D38EA56D25AC97081A79672892857DABB62E4800
EE18CD7E8EE9F6173A9DEC3A7DA2EE96760AA3F993EC0727DABCF7F642F8E1
F123E39FC2AF1EF8CFE22DE453B437AF676915BC09043027D9D1995768DED9
320397663EF8AED7E24FC51D03F668F82FAD7C68F1322CB7C63FB3E9368E70
6E6EA607C98C77C3105DC8E444ACC3D2BE8F86F095B36AB4686060E53AAD46
2BAB6DD97F5F79F0BC5590D6C9F1B5B018B92E7A7BB4EEB64F7696D7B6DB9F
047FC1507F686B5F0C787AC3F658F035DFEFA558AF3C432C67911E44905AB6
3BC8D899C765118E8C457C37FF0004E08C49FB67FC3B07A03AAB7E5A55D91F
AD7C83E2EF15EBFE3AF146ABE32F14DDB5F6AFAD5CCB77753BF5796562CC71
D00E7000E00C01C0AFB03FE09BCE13F6CFF8799E8DFDAC3F3D2AEEBFD6F7E1
E50E17F0EF1F95D0D64B0F59CE5FCD374A5CCFD3A2FEEA48FC9FEB6EBE2E33
7DD5BD2E6EFED55334FF00B47FC4676EA35BBC5FC11CA8FE55E015FA05F143
F651F8EBF17FF68AF88175E10F0C4E9A5DC6B97ACBA8DEFF00A2D9946949DC
B2498320E7FE59073ED5F4CFC3CFF8270FC35F0708753F8E5E296D6AE94063
A6E9C5ADEDF3FDD69399E45F751157F84BFD818BC4D79B8434BBD5E8B7FC7E
47FAD3FF00117787F25CA70B0C562539AA70F721EF4BE15A34B45FF6F34794
7ECF7F157C2FFB547819BF644FDA534AB8F11DB5DC78D23568A3796EED5E25
2236791559A392207E49C8DA57292E549DDF5D7EC95FB0A41FB27FC3FF0019
E97E17F10C575E37F15CD2C51EBF25A6E369648C56D55202D82C8A4CAEBBB6
B4A42925114D7D2FF0B74DF03F8658785FE16F85ED3C3DA442BBE778A25479
36F03795F99DC9FE277638CD75B27C44F0BEA7E1ED23C47A75DFDB3C3FE228
CF937D6CE4031C8B94911970DB5864865391C115FA27B58E59974B119955B5
2834A53B3B4799D95DFEAEDA26DD926CFE14E33CF3059AE732C5E4F85F64A5
AF2B6A576B56F96D657EB1D55FD6C7C9DE0DFD83BE01FC3E906B1E24D2F51F
885ACBB79B24BA8319236918E59BC94D91B0279225321AFA13FB4FC45A369F
1E8BE0FF000C0D074E806D8A2B6B5C2A0FF6511046A3D82FE35F9A7FB5A6A1
FB7BFECF1F68F1EFC33F89179E2BF87127EF05C369FA75D5D69C8DC81759B5
6DF1FA4EBF2FF7C29C6EF82B4FFF0082987ED8F64D9B8F19C17C3D26D2B4F0
3FF214119AFEAAE09FA2963F37CBE198E438CC354A52EAA534EFDA4BD968FC
9BF3DACDFC3713788B8FC756FF00854AB526D7493D17A2BD97C923F7A6FAC7
C55A84BE7EA16B793C9EB24721C7B0C8E07B0AA3FD8BACF4FB05C7FDFA7FF0
AFC4C87FE0A9FF00B58C5FEB2FB489BFDFD3907FE82C2B43FE1EB7FB54EDC7
FC48B3EBFD9ED9FF00D1D5F452FA1CF172DA545FFDBEFF00F903E6FF00D61C
3F9FDC7EDE683E13D4F53D56DED2EAD6682066CC8EE8CA020E4F24753D07BD
27C4DD79353D69748B2E2CF4B1E52AAF432746FCB0147D0E3AD737F007E267
C61D67F678D33E24FC687B68FC49E29CDC69F6D6B6FF0067582D2603ECE5D4
972599019892718655C039CD0F1E78F3E1D7ECC9F0E6EFE35FC6BBBFB3C36D
F2D8D8AE1AEAEEE98168E18636237CCF8240242A282EE55558AFF9ADF489C9
F32CC735FF0050B2D9C6528CAF88A916DC2118BB257D2F7926D2D1BE58DBDD
6D9FA8708D4A385A4F34C42F282EADF5FB9697F37D4AFF00117E23FC3BFD95
BE1A5D7C68F8BF36C78BE4D334E523ED37774CA4C714487AC8D8C92788D417
6C638FE567F68EFDA27E20FED39F136FFE257C40B8FDE4B98ACACA3626DEC2
D14931DBC20F619CB37576258F26BEB9D57C3FFB5E7FC153FE2F4DE33D3347
36BE1BB291EDAD24B8778743D16DB218C4262A4CD3B7CA6631A3CAE4825163
0AA9FAF3FB3CFEC2DFB39FEC8FF66F10EAE8BF113E235BE1C5FDE46A21B394
1041B5B725D202A40C48C64981C956553B47D964F96645C15932A52A8A9528
EB294B79CBAB7D6527D124F4D12B23C8C4E23179A6279927293D92D92FD179
9F95FF00B287FC12BFE27FC6386DBC77F1B259BE1D78188128599026AD791E
7FE594328C5BA30CE259867EE9589D5B70FDC6D4BE067C2ABCFD98BC53FB36
FC1AD2CD9699A7E9F249A7C4647632DF2C86EA3732C859DB7DC22EF66ECD80
36E056AF88FC5DAD789E6DDA84BB61539485388D7F0EE7DCE6B43E1E6B1FD8
FE2AB4776DB15C9F224FA49D3F26C1AFE7EADF4A2A58ECF70F97E16972E0E7
2E49CA5F1494BDD4D2DA314DA7D5B4BA6A8FBDCB3842B6020B1F19FEFE9B53
8DB64E2D497ABD3C8FE6B294024E0724D7DDFF001D3F64DF88DA9FED4FE26F
00FC35D0A5BDB5D5661ABDBCB811DADBDA5FB172D249F7638E394491283F33
6CC28638CFDFFF00043F642F84FF00B39A5B7897C68F1F8C7C75181246597F
D16D1FA8F2226E841E92C80B719454E457ECD82E19C4D6AD2A695945D9B7B6
9DBB9FDB1C4FE39E499665D4B1929F3D4AB0528D38BBCBDE575CDFCABBB7AE
F64ED63CCBF614F84BFB4A784EDADBC59E31F12DD7857C0581247A2DE81349
76ADD0AC5367EC88C79DCBB5DFB2E086AFD3AF1B78DFC35F0EBC3773E2EF17
DD1B1D1EC9A317171E5BC8B0895D6356758C336DDEC016C6141C9C282478F5
B6B5AA78C7C51A7C57CFFB9F3D59615E11553E63C77380793CFE1C57C69A5F
ED33A6F8D3F6FDF8B1FB2378F265B8F08F89345B5D274E4DF85FB65BD979F7
7103C6D6956E2604F5DD0A01C9AFD530397FD5A87B2A52BBF3D75FD17923F8
178AB8C7FB7336FED0C7D3508B6AEA9A517CB7D75B7BD2B7DA95F5F2D0FD07
4F126A3E31D213C41F0D35DD375AD326E6396D1D25CFFB21F73A13EB9DB8F4
AF31D6757F19C3398B58B9BA818E46D24C6AD8F40B8523DC57E016BC3E27FE
CCDF15F5EF0B687AE5EE87AC68376F6ED3DA4AF07DA2253BA291901C3472C6
55C2BE46186457D8DF0DBFE0A63F12347863D27E2CE8367E31B1E15E78C2D9
DD91DCB055681F1E8234CFF7ABE7B09C6745CBD9E262E125BF55FE67EC3C43
F467CC634962F24AD1C45292528AF864D35756BBE57A75BAF43FFFD4F843C4
BE26F1078CB5CBCF12F8AB509B55D52FDCC93DCDC39791D8FA93D80E001C01
8000000AFD02F8477E3E0E7FC13BBE3AFC5F60D6B7FE2349347B597382CB22
25940F1FBA4D792FE2A7B0AF1AD23F613FDAA358F29E3F043DAC521197B9BC
B387683DD91A60FF009293ED5F7EFC6AFD8A3E2EF8FBF62AF03FECCFE02D53
49D2F54B1BF86FF5A9B51B89D61604CF3C9144D04131722E265232146D41CD
7E65C2595D758A75AB41AB27AB4F77EBF33FBA3E90FC7795CB208E5996E221
3739C538C251768C6EF68B765751497F91FCAA56AE87AE6B3E19D62CFC43E1
DBE9B4CD4F4E9527B6BAB691A29A19633957475219581E4106BF68EC3FE08C
F736F716FA6F8C3E38E87A4EA570EB1ADB43646776918E02A096E6DD9893C0
1B726BD0AFFF00E08C9F0D7C05A1DE78A3E297C73361A35918CCD76FA643A7
410891846A1E59EEE55059D9557A6490304915FA8D1A33A9354E9A6E4DD925
AB6DEC92EAD9FC2CDDB565FF00D9F3F6A8F85BFB7B783ACBF67CFDA7DA1D13
E275AA94D0BC431AA442F662001B7EEAA4EF81E640711CF80536B840BFA17F
B2B7C1EF14F827E1DEADF047E26C1997C23E22B6D534DBB886E82E2D44D15D
C1242C7D668A50E0FCCB9208EE7F2CE0FD867FE09C7A4C892DEFED2172F344
C183DADED802194E4152B0484107A60D7EDBFECE9E34F02789FC01068DE04F
88171F12E0F0E6DB29B58BB2B25CC8D8DC8B3CD1C50C7248A98CB05DC4619C
966DCDD998F00E61877F5FC4E12A422B47270928B4F449B6ADBDADF71F5581
E3DC5D3CB65942A9CD4B994E2AFAC249EF1ED74DA6B6D6FBEFF8CFE3EFD8CB
5DFDB23F6E3F8ABF13FC5576FE19F84BE1ED462B3BFD5A42236B96D22D21B5
B882D1A4F946C785C4B337C9160E7730DB5B9F1EFF006ABF0AF87FC1B17ECE
7FB28D92785BE1FE971B5B4F796A0C72DF2F4758D8FCE23739324AC4CB313F
310A5849DCFF00C1453E327C5A8FC5AFF0764D364F0C782B02E62311E35A2C
DBDA69244E362484FEE7A87F9E4CB1409F96F5F92F13F12CDCA585A3A25A37
D5F92F2FCFD37FEB4F027C10C2C6852CF733B5494929538A69C63DA52E8E5D
96D1EBEF7C3FD1DE83AEB78E7F67DF865E37926FB4DC5C6976B15CCA3F8AE0
42A9367E92C4F5815E6DFB14EBA3C59FB1DBE8E1312784B55BBB61EE1E45BB
2DF4C5CB0FC0D7B86B979E00F839E08BBF8B5F1C7558B42F0F69E03049B3BE
6720948D631F3BBBE3E5894166F4C035FC81E2CF8639967BC5B4E396D3BBAD
4A9CE527F0C6C9C1B93E9F06DBBE899F97E698AA193D6C661AB3B2A556A462
BAB57E68D97A35E85FD03C2715CE9F73E26F135E47A3787B4F8DE7B9BCB875
8A358A205A472EE42AA2804B3B7CA07D0D7E6E7C50FDB77C63FB4BFC4FD2FF
00643FD861E4D134DD5E66B7D4BC5A88C93ADAAF3733DA8255E28628C16333
159A46C245B0ED693F3A7F6D5FF8282FC41FDAA6FE6F08E8092F857E19DAC8
3ECDA4A3012DE088E639AFD90ED76C80CB0A931C6718DECBE61FD66FF826DF
ECE517ECD9F01E5F8D7E2FB311F8F3E23411B5AC72A8F32CF4B6C3DBC5DC83
3717128C8C8F29194321AFE9EE0BF0EF24E07CAEAE366EF38C5BA955AD5A5D
22BA2BED15AB76BB6EC7E379A6758ACDB111A4B44DD947A7CFBFA9FA21E0DD
3BC03FB3F7C3497C23E198FEC3E10F869A44924EE705DCC48D3CD2C8C000D2
B6D79256FE291C93835C8A789350F187C22F86DE2DD58837BAE68B677D391D
3CDB9B58257C7FC098D7CCBFB7378EE6F86BFB17EAD6EB3326ABF106F62D3D
589CB949D8CB31F70D6F0B293FEDFBD7BB782DB7FECE9F069FD7C2FA51FCEC
6DABFA0384325C4D6E04C27136363CB53175A5CABF960A3CD14BD14945F794
5BD0F9CCD1C29E3A786A6F482B7ABD9BFBD37E8CE9BC1BA6FF006AF88ECADD
866347F35F8C8DB1FCDCFB1200FC6BF167F6E7F88E7E237ED1FE247825F36C
3C3A5746B6E7200B3C89B1DB9B86948F6C57ED443E25B5F86FF0E3C67F14EF
4294D0B4F9E48831E1E48D0B88FEAEFE5A8F735FCD1DE5E5CEA1793DFDEC86
6B8B991A591D8E59DDCEE663EE49CD7E59C758CB4214175D5FCB6FEBC8FEB4
FA28F0DF3E2B159B4D6904A11F596B2F9A497FE047F43FF042D1A1FD933E18
59C4B9696DA27007732995BFF66AF88BFE0AABE30BF9E0F865FB32F84E37BE
D46FA41AA4F6B0A334B2CAC5ACEC9531F78C9235C657AE429F4AFD20FD9D34
9177F00FE11444663B7D26CEE5BF08011FF8F30AF9CBE127C36B4F1C7ED05E
3FFDB53E21C265D3ECEEE5D1FC1D6F21DEA6D74F1F636BE881E82E191CC3D8
6F91FBAB57F467827C439770F4E7C539AB4A960A939A4DD94AA38F2C23F25C
D36FA2837D2CFF009738F6954C566F8AA3495E53AB3FFD2DFF00C37CCE8FF6
72F819A4FEC7DF06A1F0EA08A7F881E2744B9D62ED30C51F042C48DFF3CE00
4AA76672EFDF68DC2492493926BA1B8935CF19EB92DC470B5D5DDC1CEC41C2
2F403D02AF0327F13478E757F845F01F425F14FC76F13DB6951B8261B2572D
3DC11FC31C6999653D8EC5C2F52D8AFF002DF8EF1BC67E3571755C7E0684EA
A9C9A868F9527E97D5D97BB14DA8A514AD1B9FA8E5AB01C3D8254EB49296EF
BBFF0080BBBB2FBCC2F1CDACBA97ECC1F1CB4CB71996E3C25AC220FF006A4D
3EE547EB5F975FF046AF8CB6D2DF78E3F665F10CE16DB5F84EB5A506DA07DA
625586F117272CED108645503810B9AFD12F819FB5B785BF6B28FE28FC3BF0
47861F41D0348D11C5AC970C82E2EBED6B2C4ECF0C7948C0F97037B939C93D
ABF972F81FF15B5BF81DF177C27F167C3FB9AEFC337F15D18D5B679F0676DC
405B070B342CF131C640638E6BFB6725F07B1FC1D9552E14CF229D5845F3AD
2D6A979DB46FA4EDBDFBA4F45F95E659E471B8A96368689B56F9597E87F58B
7B693E9F793D8DCAED96DDD9187BA9C1AEA3C0DAD6B3A56BD6D0692DBC5E48
91C91367638271938E84750DDBE9906F78D6E745F13D8E87F127C2B3ADE689
E2AB282F2DA74FBB247346B246E3D03C6CA47E353FC3D6D3346FED7F1CEBD2
8B7D33C39672DCCD2B748D55199DFE8B1AB13F857F9B591787B98E0B8F6964
3829CA35235572CA3F1727C575DEF4FA6CF667ED18ACE28D6CA258BA8934E3
AAE97DADF7FF0099F93BFF000571F8CADAFF00C45F0F7C12D2E7CD9F85ADC6
A17EAA7837D78BFBA561EB141865F698D72DFB19FEC89E13B0F0AFFC3567ED
40A9A7F813495175A569B74BFF00212607F773CD19E5E02D810C38CDC36091
E5604BA1FB397C075FDA77E2578BFF006C7FDA231A67C34B7D42EB522B7676
A5FBC6E4AC033C9B5B650B1B919DE5442BB8EFDBCF7ED29FB4478ABF6A3F88
3A7784BC256D25B785EDEEA3B3D0B4A4C219A5918431CB2A8C2F9B2642AAF4
8D4ED1FC4CDFF40BE32F8D90E06E1BC3F03E433FF6A50B569C5FC3396B38C5
AFB5CCDDDEF1568AF7AEE3F9A783DE11D7E2ACC6589AFEE61A0EF2979744AF
A5DAF925ABE89FE8641FB546BB69F02FE27FED95E2884E9DA3E9D04BA6783F
4A90FCA4861124B260E247B9BB68D2438FDDAC2C17E5C96F96BFE0909F156F
BE227C38F8AFF077C4778D79AAC37C3C416F24F2179663A88D970403D15278
51D88EAD313D4F3E37FF00055EF1969DF0C3C03F0A7F639F094E0DA681631E
ADAA14017CE9543416ECE1780D23FDA26753D4B237A57C61FF0004D9F8BFFF
000A7BF6BCF065DDD4DE4E97E2B76F0EDEF19DC9A91558327F842DDAC0CC7B
2A9AFE28A9954711819E1315EF2A916A5E7CCACFF3B2F239388F36A35733A9
88C0C7929465FBB4BA463A47E6D2BC9EEE4DB7AB3FA22208383C115F2DFF00
C15173FF000CA5F0F71D3FE12183F3FB1DDD7DA7E3CD27FB1FC537B6EABB62
95BCE8FD36C9CF1F4391F857C6BFF05368BED5FB1E7826ED39FB3F89ED81FA
7D96FD4FEA057E0BFB3872D9E59E2F472EC47C74F9A2FF00EDD9A8DFE7A58F
A6F146BAAF9342B4366D3FBD367E0C786BC3DAAF8B7C47A57853428BCFD4B5
ABB82CAD63CE37CF73208E35CFBB3015FD2D7EDC7E0ED2BE1E7FC13ABC67F0
FF004024D8F86B45D2B4F889FBC52DAEAD103363F8980DCC7B939AFC85FF00
82697C378FE20FED59A0DEDDC692D97842DAE75B951D720B40161B723D192E
268E41FEED7ECA7EDB52B7893F632F8DAE9F3A8B76917FDCB792DD81FC9335
FEB87D35B8B1D6CCF079341FBB4A2E72FF0014DD95FD231BFF00DBC7E1DC39
42D09547D743F127FE0911F14E3F037ED4EBE09D4250BA77C40D32E74D2AC7
E4FB5403ED5031F722392351DCC98A8FE35F80AE3E137C5FF15780D55E05D0
F51952D4B365FECCCDE65B3E47768591BF1AFCE6F87BE35D63E1B78EFC3BF1
07C3EDB752F0DEA16BA8DBF38064B59565507FD92570477048AFDEBFF8284F
87F47F15CBF0FF00F694F06AF9BA17C41D22DF7CAAA31E6AC6B35BB48C3F8E
482408076109AFF3BF8D705ED30CAAADE2FF0007FF0006C7F5D7D183899613
3BA997D47EED78D97F8A176BFF0025E6F9D8F51D3B50D4FF006DFF00D9EECF
50F0CEA92693F1F3E11FFA4E9D7B04DE45C5D7CB8E1F230B74AA15CE4059D4
16C46C4327ECDBFF000506F0BFC4EF27E117ED510A7873C596CE6D61D65D05
AC12CEA7614B95200B59F70F9B2044C739119014FE78FECF7E3EF1F7C39F8B
BE1DD7BE1B40F7DAD4B731DA2D8A938BE8EE182B5B3FB49C609FBAC0375506
BED5FF008299FEC732B4771FB4CFC37D30A3B80FE28B183E6DA7007DBD140E
71D2E0AFB4A47FAD7AFE8DF01334E1FE32CB25C0DC65494A9CB4A351A5784A
5AF25DE8E337AF2BD39F5B5E49C7E33E90BC012E19CE63986572B53AB7928A
7AC6DF12B7657F75F6D3ECEBFA5575A1F883E1D6AB0EBB6645D590231327DC
746FE17033B7776ED9C1049AFCFDFDADBE0A49F097E31F84FF00E0A2DF036C
1E5B7D12F629FC69A6DA2E646B371E45DDEA463F89A0774B9C700ED9C8C79A
F5F0EFECADFF000504F895FB3FA5BF837C5AAFE32F010C466C2E1F3736719E
0FD9257CE140FF00962F943D17664B57EF4FC11F89DF08BE34E87378A3E0DE
B106ABA55E2EDD4F479F0B35B99060AC903E4C67A8C1CC6E33B5B6806BF21E
29FA25711F85598D47834F1194D596EAEDD393DA4BAD9ED28CBDED138CAA34
EFF9ACF8B30F9BD15EDBDDAF1EBD24BB3F3ECF6EF63F3FFE3EFC30B2B0FDB6
7E11FC52F0CBA4FE1EF88BAAE8DA8C53C5831BDC5ACF0194AE07DD922F2A5C
9FBCCEC7B57E577FC1552F1EEBF6E2F1EC0C722CE0D1E25F6074CB693F9B9A
FE9CEE3E02F86A2F0A784BC23A4B18ACFC0BADD96A9A20932C6CE0B69B77D9
41072D1A40F243103F753CB07714DCDF9A3E25FD8820F8F7FF000512F895F1
87E29DB05F867E167D19DA2987C9AADF45A4D9916F8EF0440079C9FBD958C0
3B9CA79784C1C30B3AD51BB45BE6F4D35FF33E9F8B78BA79B6072FA33D6742
0E9BF349FBAFFF0001B2F54CF91FFE09F7FF0004E8B4F1F69B67FB43FED216
CD69E0740B71A468F3651F561D52E2E070C2D4FF00CB341F34FF007B8871E7
7ED4F897C60FAA5BC5A268D02E97A1D9A2C56F6B0A88D04718DA80AAE142A8
002A0F954600E99A6F8CBC5B2788EED60B55FB3E9969F2DBC2A36800701881
C671D0761C0EF9E2EBFCFBF1CFC7BAF9C559E5794CDC70AB46D68EA7F943B2
EBBCBA25F59C29C210C34562310AF51F4FE5FF0083F9743E66FF00829578F7
56F877F023E14E99E1ABB7B1D4AE35C87588658CE1D5F4F89A6523FDD96746
FA815F5AF86BE20691FB417C15F0AFC72F0FAAAC97B6CB16A3021CFD9EE50E
C9A33939C4736E009E59195BA62BF3A7FE0B017463B8F841A1A9C476965AA4
807FBE6D13FF0069D7947FC1317F68DB5F87DF106EFE06F8D2E00F0BF8F9C2
5B190E2383542BE5A0F6172B888FFB623E8326BFD9EE21FA3050E2AF00F038
4C3C12C45084A71B2E91938E9D7DD508CADBB4A515F11F8860F8A2784CF658
8BE8DEBF3FF87FBCFD51AEBBC0E97973E27D3ACEDE69225798330462B954F9
D8707D0551F1468171E1AD667D326CB229DD139FE38CFDD3FD0FB835D87C23
B613F8A9A623FE3DEDE471F52553F931AFF02B81386B111E2BC2E57894E338
D68C64BAAE597BCBEE4CFE90CDB1D0797D4C441DD38B6BE6B43F0C7F6FCFDB
9BF683F067ED6BE2EF0AFC24F1D5E681A0F8616D34E8EDED591A079920496E
1DE3915D4C82691E3271D11476AF9BF4EFF82A3FEDC7A7A843F1145D20ED3E
93A639FF00BE85A863F9D7C97F1AFC570F8F3E32F8F3C716CDBE1F10EBDAA6
A287B14BBBA9255FD1ABA5FD9E7F679F88FF00B4C7C47B2F871F0E2CBCDB89
7125DDDC808B5B0B50407B8B8700ED55CE001F33B6154162057FAE47F399FA
4FFB3AFEDC3FF051CFDA53E22D97C36F875AD69F73732E24BBBC9B49B516D6
36A080F7170EB1FCAAB9C003E676C2A82C40AFDF6B8F1CDE78234DD2FC39A9
EA27C51ACDA468BA8DF3C51DB79B201F391142022127EEA8CED1804B1C9AF0
1F849F093E1B7EC83F0DA3F84FF09E313EAD3859357D5E4502E6EEE40C1772
338C6488E3076C4A7BB16628CCCEC5DC92CC7249E4926BF8FF00C74FA42BCB
AA3CA3209AF6C9FBF5346A36FB31BDD397F33D96DBDF97F49E13E0C55A3F59
C62F75ECBBF9BF2EDDFD37FA23E207C53D5FC2FE057F1FF82BC2977E3AB6B2
CC97961A6CA8BA9AC2A32E6DADE40167957A98BCC4661FEAF7B10A7F3A6F7F
6D6FD8D3E3FAC56E3E34F8BFE146A24F36E6E6E74D1BBA6259025C5B800F50
265FCABEB8F07EABE21D335643E1E47B8964C078541659173FC407403FBDDB
D6BE59FDB63FE09B3E0BFDA2965F88BF0CFECBE0BF8A5751BDCCF6ACCA2CB5
765C799E784FB930661FE9080862712AB160E9FAA7837E28C78B3012FAC507
1AB0D2564F91F9C65B7AC5BBAF35A9E666D81AF9262955C2D4DF6D9B5EA9DE
FEB6B1E79ADFEC6C7E374125FF00C35FDA32C7E24757822BDBC37A147FB73C
1737273EA4443E95E17E26FF0082747ED39A091FD9BA5E9FE2107A9B0BF897
03D7177F673F9026BF167C79F0FF00C7DF087C657BE0BF1FE9175E1BF11693
2625B79D4A48841F95D187CAE8DD5244251861958820D7A0F84BF6A4FDA47C
09B13C27F13BC47A7431FDD85754B96838FF00A62EED19FC56BF44C4F0860E
A3BD9A7E4FFCEE7E85927D23789705154F9A138AE92825FF00A4721F7B6BFF
00B2D7ED17E1A9BC9D4FE1D6B6E79F9AD6CE4BC418F57B61228FCEBC9B5DF0
878B3C2EE23F1368B7BA4313802F2DA5B739F4C48AB54BC35FF054AFDB67C3
816397C771EB10A748EFF4DB297F39121490FE2F5FAFFF00B10FED19FB7EFE
D292DA7893C59E1BF0CE8BF0EB77EF359BBD3EF22B9BC55EAB6312DDAACB93
F2994A8894EEC333298CF955780E93F82AB5EAAFFE47E8181FA59E3636FACE
0612FF000C9C7F3523D27FE09A5A3C17DFB38EBB6F71FEAEF3C4972CF8EEA9
6D660AFE3B48FC6BE4CFDADBE1DFED49FB6B7C594D2BE1DF836F6C3E1D784D
9ED74CB9D4F1A6DADCB9389AF82DC1479164202C4511BF76A0800B357EE0EB
3AEF87BC2BA79D4B5BBEB7D2ED1AE2DEDCCD33AC71FDA2EE5482042C481BA4
96444504F2CCA0724578678EF5CF1F6957EF657D78D0DB487313DBAF94AEA3
D187CC0FA82DFA735F6197F8F91F0B282CEA381789A89724256BC69B7BC9AE
68D9C97BA9DDA576ACEE8FE7CE2284B8AF37C4629354BDA4B9B95BBBB764ED
ADBD11F96DF0FF00FE0925A769290EA3F1E7E22C368A796B2D1506E6EE42DD
5D2E49F616E7EB5FA03F043E05FECBBF067C43A7C5F0B3C228FADE591758BC
DD7174A5919599259C968CB2E55844B182091D09ACE9249267696562EEC725
98E493EE4D743E0F9BC8F15695274CDCC6BFF7D305FEB5FCDDC65FB4638F38
B331A183AB57D8E1A738C6504F78B924D3E5518B4D5FE28C9F99ECE1FC2CC0
E1284EA36E5349DBA6B6F9BFC4F4CF1BF8B3C410EB377A4DBDC9B7B7848004
5F2B1040392DF7BBF638AF30666762EE4B331C9279249AED3E21C6D1F8B6F4
9180E2361F4F2D47F31553C1BA21D775D86DDD73045FBD97D362F6FC4E057F
4F1F989F3D7ED9DF187FE19DBF65FBF874DB8FB3F8BBE20EED36C76B6D9628
A54FF489C60AB0F2A024065E525923A7FECA5ACB78AFF617F8777C1B74BA4B
4F6928EEA2DAE6E2041FF7C6C3F435F907FF000509F8F9FF000BC7F683D4E0
D22E7CEF0CF8377691A6856CC72344DFE9570B8254F9B3021597EF4691FA57
E8BFFC1323C403C47FB2978D7C1D24999FC3DACCB3A8FEEC13430CCBF9BC72
D7F497D223C10782F02F10A70FF689FEFA7DD5E125087CAF1BAE926CE4E17C
DBFE16E94AFEEA697E3ABFCCFB47C2DE35D43C39BACE45179A6CD912DB49CA
90DD76E738CF71D0F71DEBE12FDA67FE09C5E0FF008A56D79F12FF00660683
49D65B32DD787A4221B599CF27ECE4F16F2139C21FDCB7F098C039FAE6AF69
DA95FE937497BA6CED6F3A74653DBD08E847A83C57F8D7F469FA62F13F8738
C83C2557530DA274DBBE9D927A35FDD7B7D9706DB3F79E2CE03C2E67172B72
D4EFDFD7FCFEFB9FCBAF8A7C29E25F046BD79E16F17E9971A3EAFA7B98E7B5
BA8DA296361EAAC01C11C83D08C104835F4FFEC47FB3B4DFB467C71D3340D4
602FE18D136EA3AD3E3E536D130DB067FBD3BE1319CEDDEC3EE9AFDF4F88DF
08FE10FED67A32F863E2AF87C8D6ADE32B69ABD8AECBAB6FF76501B0B9E4C7
2068C9E700E2B5FF00662FD9D3C01FB1AFC3BD4746BAD7ADEE2EB55BD92E6F
756BBD967E6A212B6F1E1DC8558A3EDB8FCECEC301B03FDE8CABE9DB93F157
06D4C6644A51C6D4F714526D45BF8A49DB4715B27AF3356E68FBC7F39E3783
ABE0B17ECB10B45AFAFF00C3FF00563DB7C569FD8F9F117F635C6B971A7466
2D2748B254DF24807073232431EE2000F23A4683696604815F09EBDFB2059F
C56F8850FC6CFDB8BC4117896F6D377F6378374B9241A269506EDC232C4473
5E48DB51A5919624761B5D5E308ABF4CF8DFF6C8FD96FC230C90EB3F14F498
DD3EF0D3671A8CA31D46DB549C83F867E95F1978BBFE0A5DFB24787679A5F0
D683AD78CAF5B9F39E011C0E7D59AEE50E33FF005C4D7F11E1FC12E37C4A9C
78632A6E755F34AAD58CD45B7A5FE1F79A49249CA0A3149276563EA639B60D
B4F1951DA2ACA31B7F4BEE6DB3EC6B8F18491E9B6BE12F01E9B1787F45B38D
60B6B4B1896209120C2A224402A281D1500C74C9159D63E03F176A5F345A6C
8809E5A6C45F8E1F04FE02BF2EBC57FF00057CF1C189ED7E197C39D27418B9
08D7D3CB7A40F5D900B5507DB903DEAD7C2BD7FF00E0A41FB664A97F65E2EB
9F03F82E66F9B548215D320099F985A98156E6E1BA8189360230CEB5F3F987
ECD3E23C6279D78859D469416FCD28C797FBB051F689F9462A2DFA9EE51F14
28508FB0CB30D6FBDDFCDEDF9B3F56AE3E1CDAE85025DF8CBC4363A2C123AA
234B22A8666380A1A4318DC4F000CD7A9699F0B3C29661659965BC6E18191C
A807AF0136FEB9AF9EFE06FECDDF0A7E106B2B7BA43DCF8FBC7C17177E24D6
653773C3BB86F2DDCB2C20E48091FCEDF75DCF5AFCE0FF00829AFF00C14346
9E9AAFECD3F02F53DD7643DAF89359B66FF55FC3269F6CEBFC7D56E1C1F979
881DDBF6FE7795F827E1E60EBCA39153FADC69BB3AB52378B92DD462E528E9
D5E8EFA4A316AC3C7713E6D34BEB13E4BF45A3B7CACF53F619BE28F877C73E
08B8F17FC2AD6EDB59D3A1BD9F4F9EF2D5BCC5592D656825556E876C830186
43290E84A90C7C7A491E57696562EEE4966272493D4926BF237FE08D9F1C20
B6F1278B7F667F11DC62C7C530BEABA52B1E05E41184BA8D07F7A4802C83D0
424F7AFD7ABFB29F4EBD9EC6E462581CA37D41EA3D8F515FAD1F2E777F0C6D
565F103DDC9C25A42EF93D016C2FF226BF8FAF1A7C67D6EF7F68ED77E3F784
6E64B4D4A7F13DD7882C246C96899EF1AE61041ECA0852BD31F2F4AFEABBE2
AF8C1BE187ECBBF16FE2345722CEEECB44BD8ECE63FC378F03476D8FACF2C6
31DCD7F1C1401FD13FED8B61A0FC7DF837F0FF00F6D0F87D00FB2EB7650D9E
B3127CC6DE5C954F3081F7A19C496CEC4F27CB038AFCCCAFAA7FE0951F18F4
1F1243E2FF00D8BFE274BE6787BC7B6F3DCE93BC8CC57A23FF00488A32D901
DE3459A23D1648891F3357AB7C36FF00827B7C5BF167C43D5FC3BE2D1FF08E
F86BC3F7925BCFAACA9FF1F6919C86B38DB05C489860ED84507925814AFCD3
8A320AB2C52A9878DF9FF3FF0083FE67F71780DE2EE06864553099B5650FAB
6CDF583D925BB717A596B671B1FFD5FCB5F12FEDE3FB6278B0B9D57E2CEBB0
EFEBF60B81A70E7D3EC6B0E3F0AA3F097C15FB517ED7BE374F04784F56D6BC
5376FB5AEEEB50D42E65B4B3858E0CB75348CE117AE072CC461159B8AF60FD
8D7FE09FDE3EFDA7261E36F144CDE0EF8616059EEF599C047B948B9912CC49
F2B63043CCDFBB8F073B994A1FD18F88DFB51FC35F80DE0A7F801FB15E9B16
89A45BE63BDF1020DD3DCCB8DB2490C8DF3C9236306E5FB71080A11C79D996
6B47090E7AAFD17567DAF04700665C418AFAB65F0BDBE293D2315DDBFC92BB
7D11AFE17F077ECCDFF04D4D20A69E917C4AF8E93C004B7520023D3CCABD14
7CDF658F69CED04CF28237158D815DAFDB77E2B78D2EFF00607F0449E33BD4
9FC41F13751B7BBBB55411AFD84996FE358917A24405B20CE491CB12C493F9
73656DA9F8A35E82CD647BAD4757B958C3C8C5DE49AE1F19663924B33724F2
4D7DAFFF000567D6AD34CF1A7C31F841A6A6DB3F08787DA78C8E98BB905BAA
63D552C94FFC0ABF57FA24E1AAE7BC758595456A749B9DBB72A724FCDF328A
F2BE87E8FE3F70165BC2B91E170387F7EBD593729BDDA8A4AC97D98DE57B75
B6ADD95BF29B43D1356F12EB7A7F87341B57BDD4F55B88AD2D608F979A79DC
471A2FBB31007B9AFEB0BE07FC39D1BF660F85DE0DF841A418E4BD8CA5C6AF
72807FA45DCE47DA25CE0120B7CB1E7911A2A9E95F937FF04AAF8116FAEF8C
759FDA23C5506747F05ABDAE9A5C655F52963CCB20E793040D8008E5A55653
B92BF57357D52E358D4E7D4E738799B207F740FBA07D0715FD23F4C4F137EB
99853E1BC2CBF7747DEA96EB51AD17FDB917F7C9A7AC4FE60E1FC172C1D696
EF6F43CDFE387893E17FC57F8B7AAFEC81F1C218B4ABED5ED2DB56F076AC98
0E5A64689A2DCC70B70B3C52ED5E1268F11902400BFE277C66F839E32F81BE
39BCF0378D2DF64F0FCF6F7080F91776E4909344C7AAB6391D5482A7041AFB
B3FE0AD7E15B8B9D17E15FC6BD297C89E333E997173192B2AC8EAB756A1587
236325C1073C13C54DF01BE317833F6F8F8623F67CF8DF731D8FC52D0E0797
43D6580125E88D3971D374A1547DA22CFEF1079ABF32B18FF02F103E8FFF00
DA9C2184E31C8E376A2E35A0B74E0DC5CFFC32B734BF96F7F85BE5FE86F04B
C71ABC3B983CB31EDBC2CDFF00E00DFDA5FAAEBD355AF53FF04B7F183427E2
2F82377DA67682D354B3B42C14398BCC8A73939C6E2D0293820715F875FB54
7ED57F163F6A8F1F4BE24F889706CEC34F7922D374585985A69B11382AAA70
5E66C0F36561B9C8C7CA8A88BFACDFB1EE93E2FF00803FB6759FC38F1ADA7D
82F75086F74AB8DC7E478DE23710C91363E74964863DA7B83D8F15F92DFB5C
7C35BCF027ED61F123E1EE9969248FFF000905CB58DB4485E468B5093ED16B
1A228CB131CC8000327B57F3EF08D46F09C9256716D3FCFF0053D4FA456069
C3889E32834E15E10A89AD53D396EBD796FF003B9ECBFF0004E4FD9607ED31
F1DEDE6F12DA89BC0FE0AF2B53D6B780639CEE3F66B36C8208B8743BC1C662
49390DB6BFA4AF19EBB2F8BFC4696F63F35BC6C2DED94743938DDFF023FA62
BC87F673F82167FB22FECD7A2FC2E509FF0009778801D435E9D0E49BB9D544
881B24148942C0846030567C06635EB7F0E34EFED1F17D9065DD1DB169DBDB
CB1F29FF00BEF6D7F2D7D20F8BA79B67184E0BC14B494E1ED5AEF26B963E91
4F9DFCBB1F2DC1D96AC3E1AA669556C9F2FCB77F3DBEFEE7E577FC15D7C751
BF8DBC03F0834F93FD1BC39A6497F3203C79978E218837FB491DB923D9FDEB
F4CFC02C5FF66AF82B27AF853483F9D85B57F3DDFB6BF8FF00FE164FED49F1
0FC431CBE6DB5BEA4FA75B9072BE4E9AA2D14AFB37945FDF767BD7F437F096
D4EA9FB36FC0DB58CE0CDE1CD161CF5C6EB2817F4C57FB31E38709C325F0FB
87B2F847979756BB39C799AF936D7C8FC472EC4BAB8BAD36F7395FDAC3C0DF
137C4FFB2FAF833E1868B2EB57BABDD5BCFA84703C6920B342D72485765676
DE912ED40CC79E2BF9FF00D73C3FAF7863539745F12E9B73A4EA1063CCB6BB
85E09933C8DD1C81587E22BEDDFF0082987EDA3F19BE0EFED41A4783FE0978
B6E7C3F0F85746B7FB6DBC5B25B69AEEF19A6C4D6F2ABC4FB60F276965246E
6C119AE67E1B7FC155746F8B09A77C39FDABFE1359F8D23BC952DE0BCD1A00
F742598F96A52CE7627CD62D8DD0CD19FEEAF38AFE08CFB863EB93F6B19DA5
6B6BB7F5F79FD49E12F8E9FEADE1BFB3EB6154E939393717695DD95F5BA7A2
492F77D4FDC4FD9B21597F673F87310629BFC3BA72EE53865DD6E9920F6347
8CF4EF0C787F418EE7C4FA85A783BC03E1581228FCC74B7896389422E37615
15400918E49E807CC2BD1F40D2FC39E01F08693E1BD255747D2F4DB68AD2CE
2B890B79291A6238D99DC962A060E5C938EA7AD7E5D7ED2DFB0AFC7DFDA3F5
4935DBEF8D9A7EBC21667B1D264B0934FD32D41E8235867BA39C7064656723
A92302BEFF00877C38C93893D9E53C4B982C3E1138B9AB4DFB4E5DA3EEC5AB
27ABE69456DF12BC5FE239B67F5238DAF8EC1C2F29CA4D5ED74A4DBEFBDBD7
F53C6FF680FF0082A2E9BA1DBDCF81FF00656D2D2DE21947F105F4392C7A6F
B6B693927D249C1F4F2BA1AFC74F1778CBC57E3DD7AE7C51E35D5EEB5CD5AF
0E65BABB95A695BD06E6270A3A051C01C00057DC9E33FF008260FED6BE143B
B4CD134FF14C4012D2697A845F2E3FD8BBFB34873D82A9AF8E3C71F097E28F
C349027C42F08EABE1C0CE6347BFB29ADE3918768DE450AFD382A4823915FE
B6F827C3BC059360E181E119D17656F7651751AECD2D52EBCA9462BA23F2CC
D3118BAD3753137BF9DCFD21FF0082426A4B1FC77F17E8521F92FF00C352CB
8F5305DDB2E3F290D7E1DEB5A55D685AC5FE877C36DCE9D3CB6F28F4785CA3
0FCC57EB8FFC12E75B1A57ED6FA35816DBFDB3A6EA5698F5DB09B9C7FE41CF
E15F9E9FB4FE8B2691FB4DFC56D0E18194C1E2CD6A28A30A7250DF4BE5E07F
B4A411EB9AFE25FA60E07D97183A9FCF4A12FF00D2A3FF00B69F45C3F2BE1E
DD9B3F78BFE0963F178FC63FD98759F829AB4E66D7FE1ACE0D9EE24BBE9D76
5E5B7C3313B8A48268703848FCB1DC57E85EBDF0AA6F881F04A6F87D35EB69
761E2B913FB5AE11B12AE9A583CF1C47A069E1410E4F082467C36DDA7F12BF
E0973FB35FED61F0FF00E38E93F17E6F08CFE1EF04DEDA5C58EA8FAB11652D
D59CEA1D3C8B7706762B324522B7961182E3780D9AFD35FF00828BFC44F897
E0BF8536DE1DF04E97710685AE96B7D5B56871B2DE13855B5F94EE8FCF270C
E4052BF2024B103F89AA64787CBF3FA7C5F497EFE8D3715A5F5E6528CBD63A
AD74B3D7447EA3C219662339AD4B20A73515566B56EC92B3BFAF7496ADE8B7
3E00FDB0FF00693D23C6AD67F03BE0F2C7A6FC34F0884B6892D7E58AF64B71
B55863AC11E3118E771FDE1C92BB63FF008277FC35FF0084E3F683B4F115E4
224D3BC1B6D2EA52174DD19B861E4DB29278560EE6543EB1715F0857EDDFEC
0FE0F5F017ECD5AF7C4699025FF8D6F1E381C13936B685ADA304762B29B86F
A62BE0F179F3956AD9B63E5754E32A92BFF7537F8BFBDBEE7F73F1EE070BC3
1C212CAF2C5CBED2D4A3DDCA7A4A4DF7E5E677E9656B25A7967FC143FF0061
FB5FDA634BBAFDA03E07ABDC78F3498445A8E99924EA96D6EB84F29493B6E1
107C80712AFCA3E70037F35A0DEE997A08325A5DDAC9EE9247221FC0AB291F
506BFB22F0FF0088350F0DEA29A869EDC8E1D0FDD917BAB7F9E2BE03FF0082
827EC11A77C70D22FF00F690FD9DF4FC78BE2569B5ED0E05F9B52DA32F3C08
BFF2F6072C83FE3E072BFBEE25E2F053C6DA1C4D43EAB8AB431705AC7A497F
347FF6E5D37DB6FE11E29E169E067ED29EB4DF5EDE4FF467DD5E03F8916FFB
40FECE9F0F7E3A5B147BBD52C238F5111A9554BC8C986E9403C854B98E455F
5041E86BC0BFE0A0BA7FF68FEC3915CA8CFF0065EB56931F6DD34B17FED5AF
94FF00E08DFF001723D6744F1FFECC1E209F6B48A75DD295F76573B2DEF101
27036308245403A991BD6BEEEFDACF43B8D67F61DF89DA3CD1E2E34A9209B1
DD7EC9776D33FE8AC2BF45F0772659378D995E6F1568629462DF69C6A5352F
BE293F37739331C67D6387EA506F5A72BFC9A76FC6FF0081F32FFC1257C243
43F86BF13FE2DCBB4BDE5CC1A4DB9C7CC86CE233C983E8ED73171EA95F6EFC
52D06F7C65FB2CFC65F08E976D25EDFDDF87753FB341121924967369298911
5412CCCE8000064935C07EC87E167F007EC49E03D3A78962BBF1179BA9CC57
F8D2F26927858FBF91E48FC2BEA0F8633DC07D5ECECD956E65803C4586543A
640247A02C335FD1FE3A710BCCF8B731C55EE954705E94FDC56F551BFCCF8E
CAE8F2D0847CBF33F88DD5B47D5F41BE934BD72C67D3AF2138782E62686553
FED2380C3F115FBC9FB16EB23F6A6FD82BC65FB3CDC9175E2DF86137DBB464
38695E072F716CA9B88F999BED16D9E888E9EA0576ABFF000509D3FC6B69FF
0008F7ED13F08F42F1959AB947DB1AE235E8D8B7BC4B95671ED220CFA57B97
ECABAE7EC116FF00182DFC55F0374EBFF87BE33D7A1974D7D29C5C2DADF472
1593698D5EE2D530D1AB26C78CE474E483F83433AC0E320E8F3FC5A59E9BFA
9FB8E27C2FE2AE1CC4D3CCBEAADFB26A6A50B4D7BBADDF2B6D2D35BA5A791C
5FFC13AFE07DA68FA5DFFED25E32B6CAC225B4D0D1C753CC73DC2E7B939850
F6FDE67B1AFD03D23C652AEA976DAEA2DDE9FAAE56EA175DE9B586DFBA7208
0BF2907AAF07B5769E37F0D5F43A458E93E18B08E1D22C4122DED9426D6E71
88D4018193F77B93915E22CA549561823820F6AF4328CBE384A31A50DD6EFC
FB9F21E20F1AD7CFF34AB98D7D13D231FE58AD97EAFBB6DF53F18BF6F5FD8B
67F80DAF9F89DF0DA06BBF86DAFCBB90265CE957129C8B773DE073FEA243D3
FD5BFCC15A4F833C11E3CF197C36F11DAF8BBC05ACDCE85AC599CC7736B218
DC03D55B1C3237F12B02AC38208AFEAEB4CBED0B58D0EFFC05E3BB38F55F0D
6B313DBDC5BCEBBD364830C08FEE9EBC720FCC306BF16BE367FC133BE28787
BE35E91E15F84B03EB5E0BF16DC9FB16A6F964D322C17916FDD47CA22404A3
FF00CB600040643B2BFD36F013E91782CD32F964DC51522AA538BF7E76E5A9
04B552BE9CC96F7F896BABB9F8D669944A13F694168FB7467DFBFB067EDCDF
10BF68CD566F877E3BF094975A8E976DE75C78834E558EC9540213ED913102
39252084F28B6F6CE23445661FA19F10342D7FC41A5258E8B2C6A9B8B4C8E4
AB498FBA01E9D79C1C76E6BE7CF00FC3DF047ECD1F0E2CFE107C318F6BC43C
CD46FC8027BAB97502496461FC6D8C019C46802AF418BDE2EF0C6ABF18FE13
6ADF0FB44D76E7C37E2AB14FB5689AA5ACF25BCD6D750E4C47CC8FE6F2C926
2940073139006791FC11E2FE5DC39C5399E23038183C2606B350BC5BBA4DEB
3B5FDD4F7705A28E967AA7F5F93E2ABE1392B6929C75D7FAFC7B9CF6A9E1ED
6F4462BAA59496E01C6E2B9427D9C654FE06B1ABF2A7C23FF052EFDAA7E0DE
B979E08F8B16567E2B9B45B892CEF2DF52845B5F45240C51E3F3EDB6A92082
0B3C7267AE4F5AFB17C15FF052BFD94FC782387E23F86F51F03DEBFDF9A38F
ED76AA4F53E65AE2563F5B7AFE68F133F65371A6589E2322A91C4D2DD5BDEB
AE96715CCEEBB534BCCFD132AF18B0B3F77150717E5FE4FF00CCF0DFF82C24
4C7C41F0AAF3F825D3B50507DD5E027FF4215F8D514B2C12A4F03B47246C19
59490CAC0E410472083D0D7F4E7FB55FECABA1FEDAFE09F879E25F04F8DE1D
26D749B49E7D3AE25B469E3D42DF518EDDA324F99134781083F718FCC72A31
5F94FE33FF008257FED59E185F3343B4D27C58A588C69D7EB1385F5617CB6C
3F052DF8D7FB41F46FF16B87F03C2982C9734C6428E2692946709DE167CF27
6E69251D9AEBA6CF53F0BCEB01567889D5A71BC5ED63F513F64AF8F96BFB5B
7C138ECF589D4FC47F05A2417E8480F7698C47720771385C3F4DB283D15973
F4AFC2A2D6775AD5C3A957B7B56C82304107241FCABF9ECF85BF0FBF6C3FD9
2FE2B69DF10F4DF86BE2059B4C3B6EE386C67B9B3BBB3723CEB7926B65922D
AE0641DC76B0571CA8AFE8EFE1A6BFE14F8A7E1A1F133C1BBE1B7F11D998EE
2DA74314F6F72389229A33CA4A849571DC80C321B27FCE7FA557D17F0197F1
CE078E386E709E16A49F3A8493516E32B6CDECEDCBDE1A2F835FD0F86F8B26
F2DAB97622F7B69F7ABFDFF9FA9FC657C0AF81DF107F689F895A5FC2EF86D6
3F6BD535025E595F2B6F676C8479B7370E01D914608C9C12C4AA20676553FD
58FC1FF83FF0EFF63CF8650FC27F85C05CEB570165D6758740B717773B705D
F19DA06488A2048897BB39676B3FB247EC83A77EC97F0913C2DE185B7BEF1B
EBCA92EBBAD370AD328E238B237F930EE2B12ED193BA4600B15AA5F10BE357
ECDBF052EE6B4F1AF891FC59E284249D1F48437D7864CE76BC5092236FFAEF
22035F8C71A649C5F9FCFF00B0383F0D27526BDFABAA508BE91B2726DF5925
682EAA5AC7BB26A980C3FF00B563E574B68EEDBF3E96F26F5F4DF674DD2357
D76E0C3A6DB4975293F31519009EECC7819F526B67C589F0D3E0EE883C55F1
C3C5967E1EB1E4A44D2E2598AE0958D40324ADEAB1231EE0D7E7A7C51FDB6B
F6C6F1D5A4BA27ECF1F06B5BF0968CC0AC7789A2DD5FDF153DD3107D9E2C8E
A02484750F5F125DFEC69FB74FC5ED4E4F167893C1DAC6ADA8DDF325CEB37B
0437047607EDB3A3803B2E38E8057EA1E0C7ECC7C8702E18FE3ECD6947AB83
A905F26B9B97E6E53BF5821E7BE2BE2AB5E9E029B4BBD9B7FD7A2F99F627C6
BFF82AB5B6996D71E15FD98BC369A741CA1D6B548C191BB6F86D72467BABCE
CD91D6315F9597DF1CBE306A7F10A0F8AF7FE30D4A7F175AC9E643A8B5C379
D17FB09FC2B1E091E5801304AEDC1C57DE3E18FF00824A7ED23ABF91378875
5F0FE810391E6ACB7535C4F1AF7C2430B46C47A79A07BD7D1BE18FF8249FC3
1D2242FF0012FE2A5CEA0A40FDC6976B0D93A9EFF3CCF745BFEFD8AFF4BF86
38A7C25E0AC17D472A9D3B72F2BE483A8E4BAA72517149FF002DE31EC8FCB7
134F30C5CFDA55BDFCD9E6FE19FDA5FF00672FDB7FC2765F083F6D4D2E0D0B
C556EA62D2FC576BB6D82C8E31BBCE208B666382C8E1AD9C8CB2A90807C45F
1E3FE097DFB49FC2BF1859697E00D225F895E1DD6E74874ED4F498F24197EE
8BC88B1FB300064CACC600083E6824A8FDDEF0C7EC29FB157C21D11BC63E20
F0DDBDC5A6951192E352F135DBBC0231D649A29D92D547B9857DBAD7C1DFB4
C7FC15ABC1FE04D29BE167EC73A45A98AC23FB2C7AD3DAAC1A75A22F0174FB
2DAA1F6FF0BC8AB182388E4520D7F0FF008B19970A6331DF58E17A352945FC
519A8A8DFBC1293715E4F4EC92563E8F010AF18DABB4FF00AEA79EF823F634
FD9A3F621F0CD9FC5EFDBA35BB5F12F8A654F3B4DF0859E2E626914E40684E
D376C300317D96A849573202AD5F7A7C18FDA5FC6BE2DF865AF7ED85F16ECF
FE10EF873A7C525AF837C2F6CE15EEC03E50BAB87C032C92B8F2605C2451A0
924D846D96BF09FF00658F829F117F6F3FDA4E38FC7DAB5FEAF651B2EA5E25
D5EE2469255B28D80F25646385926388A151F7065D54A46C2BEF3FDB77E3BE
93E3EF1558FC25F87222B4F87FF0FD56C6CA0B5012DE59E04F24BA2AFCBE54
4A3CA871C050CCA70F8AFC3B3ECD9612839FDA7A2F5FF807EBBE12F87B5388
B368619A6A8C7DEA8FB47B7ACB65F37D0F51F1878E3C4FF1ABFE09AFFB4178
BFC573FDA753BEF10ADD3E33B638E1974A9963407A246ABB5476502BCC7F61
3FF829469B7FA7587C00FDAB75012591096FA4F89AE9FE6888F9638AFE56E8
0745B93D3A4DF2E641DBFECE0ABE30FD863F693F87D10324F65A5DDEA4898E
AF25848D181EE5ACF15FCF4D73E574696332D8D3C4C54E334D493D53DD34D3
DC3C5DC12C0713E2E8D05C8A325CA96965CB16ADF268FED0FC59E0CBFF000C
CC2607ED3A7CDCC570BC820F20363A1FD0F6EE072F6171F64BEB7BBFF9E322
3FFDF241AFC3FF00D883FE0A53E23F8150D9FC26F8D6B378ABE19BA8B785C8
F36F7484E8BE56E3FBEB65E86127283062236F96FF00BCF0697E18F1CF856C
BE24FC21D561F12F85F558FCE826B57F370B9C301DF2841564601D18156190
71FC37E2EFD1DB15945579B70FC5CE8A7CCE1BCA16D74EB28AFF00C0975BAB
B3D4E1CE34A7898FD5F18ED2DAFD1FF93FC3F23BAF8A7095D7ADE703E596DD
79F52ACD9FD315F3AFED4FF180FECD9FB30EB3E25B09BECFE2BF17FF00C4B3
49DA7124725C2366652391E4421E556C637EC53F7857D6979A33F8C2CBC2D7
9D62F2C7DA0FB6D5247E6A47D4D7F3D9FF00050CF8BBACFED09FB48BFC3CF0
25B5C6B1A5F81BCCD22C2D6CE279DE7BDDC3EDB2C71A29624C8A221B720AC4
AC3EF57FADBF468E0BA7C539DE1ABD55FECD4E2AB4DBDB9559C62FA7BCDA4F
FBBCCFA1F8767B59E1A1287DABD8FCE0AFD7BFF8242F8BA283E24F8FBE1ADD
BE21F11E8F15E2A9E8CF61298CA8F72974C7E8BED5E37F08FF00E098FF00B4
5FC438E3D5BC6705B7C3ED148DEF36AAD9BAF2FB95B48C96047713345F5AFA
2BC2FE39FF008279FF00C13FF5A1E22D2FC5F7FF00157E245AC4F0EED1E459
E28BCE063900313A59A0E30E924D34A9D42E715FDADF48AF18784B13C3F8DC
85E2556AB563651A7EFA524D35CD2F852BA57D5BF23E6B27C062235A3592B2
5DCFD1ED3BC25E20D56EE4B3B1B3791A1768DDBA22B29C1058E071F9D74E74
7F87DE13D7B4DF0CF8D35D8AE7C47AB7CD67A2DA3192F2750406710A665312
13FBC94AA4718E5DD4735F927E1FFDB13F6E5FDBEFC6171F0FFF00670D360F
85FE138C81A8EAD0EE9E6B3824183E76A0E8312372D125B451CC4FF16D0CC3
F4CBE117C1EF873FB2CE8379A4F83659BC49E37D6487D77C4BA931B8D42FAE
3AB34B2B963B41FB91062ABD58B3EE66FF000CB837E8C3C3F96CFDB632F889
ADB9F482FF00B756FE7CCDA7D91FB5667C798CAEB9697B8BCB7FBFFC8FA835
AD7F43F0469EB67A7DBC6970E331DBA0031FED3E3B7EA7B7723F3F7FE0A13E
0FB9F8BBFB20DFF8A110CDAB781F5187542234059A204C138F645867F35BFE
B9D7BC5C5C4F773BDCDCC865964396663924D777E13F0FDAF8C3C3DE24F046
BF6AF3E85E21B19ACEE78214A4E8D1489BBB16473F957F5AF87D9F2C8735C1
E61878DA34671764ACB953D62979C6EBE67C1E320EB425193BB67F2055EF9F
043F664F8CFF00B42EA82C7E1A787E5BAB347D93EA33E60D3EDFD7CC9D86D2
40E7626E723A29AFD88F843FF04D4F81FF00085A1D7FE3CEB3FF0009C6B51F
CE9A6401A1B052391BA307CD9BA75919233D190D7DB379E3C92D34C87C3BE0
BB183C39A35A2795041688B16C8C74540802C63D900C7AD7F517D223F698F0
970A46A60B257F59C4AD3C93FF000E8FFF000270EEB9B639B86FC36C763AD3
92E58777FD7E57F91F21FC14FF00827BFC04F80A2DFC43F186E53E2178B22D
AEB68D1FFC4BA07EBF2DB31FDEE3FBD39DA4722306BED44D6FC4FF00102E93
40D1A35D374C8D42B470F091C406007618C8C7014601F4EF5C4F873C39A9F8
AB52FB2DA038CEE9A66E5501EE4F727B0EA7F335F9E3FB7CFF00C14134CF84
1A7EA1FB377ECD17DE678A5B75B6BBAFDBB6E360E7E592DAD5D7ADE7F0C922
F16FF713F7D930FF009458AF13F8E7C61CC1E3F3EC4CA965C9B5CB17673EF0
8B4969D25CAA31E9672D57EA35B2ECBB21A7C9462A75DF57D3CEDF95EEFCEC
47FF000508FDBEF4DF843A56A1FB34FECE3A97FC54AC1EDFC41AF5BBFCD604
8DB25ADB48BFF2F67A4922FF00C7B8F913F7D930FE01784BC1FE2AF1F7886C
FC27E0AD26EB5CD67517F2EDED2CE269A691BD91013803927A01C938AFD20F
D9B3FE097DF177E2D592FC41F8D175FF000ABFC091A7DA66B9D4804D427807
CCCE904A5442847FCB59CAE010C11C57DD6DFB40FECD3FB2068175F0FF00F6
37F0B41AA6B92279379E26BE06533329E499582CB71C8242AF97029C320752
457EF5196072AC2C284128538AB462BB2E897F5E679DC31C199BF10629D3C0
D273937EF49E915E7293D17A6EFA2679F7ECC5FB04683FB285E683FB4BFED6
BE354F0B6ABA2CCB75A6687A7CC1A6F3D47DC9E48C334ED8243C1002BB7979
0A6E5AFD76D7357D0BC7BE19D07E2AF84A4F3B49F10DB452AB10030DCB950E
013870328C33F2B2E2BF9C0F1D7C41F1AFC4DF10CDE2AF1EEB171ADEA93F06
6B86CED5C9212341848D0127088028CF0057EA67FC1387E2EDBEBFA0EB9FB3
A7896E3042C9A868E5CF45241B8857FDC7C4CA075CC84F02BC6CB38B962317
EC5C6D17B77BF9FA9FB771D7D1DA79370FBCC6159D4AF069CD2568A86CF97A
BE5766DBE9776562D7FC150FC5CDE0AFD86A0F0D228697C71ADD8D9B8CE088
A277BFDF8EE336B1AFFC0857F355E0FF000678B3E20F892C7C21E08D26E75C
D6B52711DBDA5A44D2CD237B2A83C01CB13C28C924004D7F527FB767EC83F1
13F6B2F12FC30F0268DA9C5E1AF047842DEF6EF59D5273BD77CFE4C5124100
2A649512190E58A22ABE4B64853F3CFF00C2E2FD997F623F0E5D7C3CFD9234
583C4BE2E9E310EA1E28BB22E03B03CE6750A67C11911C3B2DC1218163B94F
D3E3F31A386873D695BF37E87E11C27C179967789585CB6939BEAF68C57793
D92FC5F44D9C0FECFF00FB0D7C2FFD8E2D746FDA17F6C0F1128F1669F225EE
8DE1DD3662CD15D4043A12D1B2B5CCC8DB721596DD0FDF775391FAD7A17C53
D2FE3C7C21D37E2578225962D3E6674BCB3623CD86543B5E3976F74383E855
83F4C57F37FE35F1D78BFE23F88AE7C59E39D5A7D6756BB3979EE1B71C6490
88A30A88B93B5100551C00057D97FB047ED0517C29F88EFE02F154E17C27E3
464B797CC3FBBB7BD3F24329CF015F3E5C9D060AB1384AF8EC1F19FB5C5A84
95A9BD3CEFD1B3FA53893E8CEB03C3D531142A3A98B87BCEDF0B8AF8A315BD
EDAA6F576B24AE7FFFD6E07F693FDB07C45F196DD7C05E09B4FF008447E1CE
9E162B5D2EDC2C4D3C50E045F68116102A800AC09FBB4E3EF95561F18D7F42
BA67ECF3FB1DF87C85B0F878B7657F8AE649EE431FA4F3B7F2AEE6C7C3DF01
B4323FB0BE16685091FC7F60B557FC5BC9663F9D7E7388E11C66226EA622AA
BBF57FE47F68E51F48AE1BC9F0B1C1651809AA71EFCB1BBEEDDE4DB7D5BD4F
C40FD90FC2BFF098FED29F0FF4864DE90EA497CE3B6DD3D5AECE7D8F958FD2
B07F6E8BFD63E317EDB9E27F0D785B76AB74D7F61E1FD3A0523FD7C51456ED
0A93803FD28C99C9E0939AFE8EBC05A8787AE6FA74D2BC3D65A3476D117324
11A211C818F95170319AFC77FF008276FC3D4F8B9F1FFE227ED79E28B5F2B4
AD3350D46E2C430F94EA5AA3BCD29183826DEDE420A907999181CAD7F657D1
3A5478570F9CF12576A4E852518F4BCEA497247BEAE1AB5B26CFE6BF1CFC48
7C598EC34E149D38C55AD7E6EADB77B2E8D2B796E7E94785BE1F68DF013E0E
7857E077875D641A55B2B5ECEA08FB45CB9324D2904923CD98B38527E55DAA
3802A3B1B1BBD4AEA3B2B28CCB34A70AA3FCF007735A370FA8F8A75D924863
32DCDE484AA0EC3B0CFA28EFE82BE61FDB33F6CFF08FEC61E147F07783DA0D
77E2CEB706E8A16F9E1D3A271F2DC5C8F4EF145C1908DCD84033F84E6798D7
C6626A62F132E6A9393949BEADBBB7F367C0420A29456C8F52FDBC7E1449E2
5FD8C7C4FA5F96B7FA9785561D6ADDBA088DA4BBAE1D7BFCB6AF381EB9ED5F
CC368BACEADE1CD5ECB5FD06F25D3F52D3A68EE2DAE207292C3344C191D187
2194804115FD4AFEC6367AA7C44FD8A3C2565F156FE6D7AFFC77A7EAD36A33
DD36F92E5357BABA99C313DBCA9B680380A000000057F2EBE29F0E6A7E0EF1
3EAFE11D6D047A8E8779716372A0E42CD6D23452007D994D7FA17F428E2486
232BC7E4D51A7ECE6A767AE952366ADDBDDBB5FDEF33E4F892838CE153BAFC
8FDF9F811F143C23FB75786BC35E20D50C1A5FC71F8517567A8653117F68DB
DB4E8EC4018CC1391B6403FD44AC0E02380FE97E25FD8E34EF12FF00C1418F
ED3DE27B746F0C787F40B0D413CC00ACFAF42D35B44482A4116B042936410C
B279246466BF0F7F640F05FC72F177C71D06E3E01EEB5F1069132DCC97CF91
69696F9DB235DB0E0C4EA4A32726404AA824D7F581E2882CE5F0B5E7FC2413
4A96D04065B96B48DDDCAC437BEC8D16476E9C2A8663D067BFF2F7D293C31C
170BE6D56790CA3275A2E6A95ECE12E8A5DA127F0BDD24D5B44DFD7653C438
8C6E1A8E1B1927C949B49EF65269B4BE7ADB6BB7DCF967C4BAE4DE22D6AE35
4972164388D4FF000C6BC28FCBAFBE6B6F44F10DBFC3EF0078EBE28DE28F2F
C37A55CDD02DD1BECF13CECBF5251463BE6B99F0AF8A7F675F895711D97C34
F8B3A16B17B28DC96897F6D2DD11EF0891655FC5293F69DF85BF13353FD94F
C63F0EBE18E9FF00DBBE24D7DA14F2A19A387FD1CCF134C434ED1A9CC3195D
B9C92DC66BFCC1F003C0FCF65E2260B1BC51050A52A8E53A8E70E5BC9D9B6E
FA5B99CB5B5AC7EA5C4DC4F837954E860A5AD924ACEF65FF000D63F958BAB9
B8BDB99AF2EE432CF3BB4923B1C967639627DC939AFEB5FF0064C55D73F66B
F8357E0E56C742B407EB15BF918FC08FD2BF969F1E7C1DF8ADF0BE630FC44F
08EA9E1EF9B687BDB496289CFF00B12B2EC71EEAC457F417FB3A7C5097C03F
F04C383E263C9E5DCF86FC3DAF3DB9CFFCB7B4BABB8AD973EACEA807D6BFDE
BFA654A862786B058BC34D4A0AB249C5A6B584DE8D69F64FE7DE1E4E35A519
2D6DFA9FCDF7ED65F114FC58FDA57E2478F565F3ADF52D6EED6D5F39CDA5B3
FD9EDBFF0020C695FA01FF0004B2FD9FF411A8EBDFB617C59416FE0FF86E92
B69A655CACDA9469B9E6553F7FECE84040065A674DA772115F97FF00093E18
78A7E34FC4BF0F7C2EF0743E7EAFE24BB4B588904AC61B9926931C84890348
E7B2A935FBB3FB66F8A7C31F06BE1EF847F62BF852FE568BE14B4B7975875E
1A79C8F3634976900BBBB1BA946305DE3231B48AFF0031F38CCA385C3CAB3D
FA79B3F6AF0E382AAE7F9BD2CBA9E917ACDFF2C16EFF0045E6D1FA1BF077E2
FDEFED01F006E3E20EAB0A5BDD43AC5E47E4A608863139F2232401B8A412A2
96C0DD8DD8E6A504839070457CB3FF0004D5D706ADF083E24781C9DEFA75E4
5A82277CDDC05063FE056A2BEA5A9C8F14EB6129D493BB6B5F9686DE2A6414
F2CE21C660A8C7961195E2BB292524BEE66DD9F8935EB0C7D96FE6403F8779
65FF00BE4E47E95D65A7C46D7255FB16A36D0EA714DF2323260B83C6303839
F4DA6B3FC3BE04D5F5DDB7120FB25A1E7CC71CB0FF00657A9FAF03DEBACBAD
63C35E04692C344B5FB5EA49F2BCD2FF0009C773D7F05C0F7CD7AC9DB547E7
E72FA0FECEBF01ECFC63A57C62B6F87D61E13F13688D34B05D598FB080678D
A391A58EDCC7148595D8132A13CE6B9B87C03FB3EF827E236B9F14FC29E0CB
1BDF1BEBB726E6EB57953CD984A542130C92EF3102146442115BA9249269FA
C788357D765F3352B869141CAA0E117E8A38FC7AFBD6AE85FD83E1DD2353F8
8FE34B94B0F0FF00872092EA79A5CEC02152ECC40049DA06700124E0004F15
EA62F32C7661529C6BD49D5924A31BB72695F48C6F776BB764BABF322308C5
3B2B1EEFA05DDFB244BAF4E8BA85EA34E96CA02EC8A32A1B03A9C175DC4938
2C057E497ED47FB78EA5FB357ED7D7BF0B7E246969E29F84FE22D16C1AF6C5
A24926B533F991CB2C21FE5951C2E2485F86C654A9DDBBE8EFD8F7E2D6B9F1
C2DBE277ED25ADACD6763ACEAB0E89A1D94A005B5D2F4C4DD115C6417965BB
76998120C808076AA81F8E5FF059AB436DFB596933118FB578534F97EB8BAB
C8FF00F64AEEE2DE1BA994E3AA65B5DDE70B297652714E51FF00B75BE57DDA
6D682C2E21C92A90D3B7F9FEA7D29F1EFF00649D0B50F0ADBFC7EFD95AEC78
BFE1E6B09F6836D665AE27B2563C98C1CC8F121CABA30F3612087040665FD4
BD4FC3907C37F86DE08F85568CAC342D3E08E5651B449245188CC981DDDFCC
63EE6BF007FE0939F163E2DF87FF0069AD0FE14F84B5276F0978A7ED72EB16
132B4B6CA96B6B24A2E10647952E51630E31BB72AB061803FA6AF891168DA7
7876FBC577BE19BCF144BA7C3BCDA69888F7D2C6A72C21479610ECA096D81B
7B6308198853F82F883E1A62B37CB3119664F38C2A57E58FBCDA8A5CC9B574
9DB9AC9764AE7EC78BF1831D8FA184C3E6CDCD50727CCBE295D251E6EEE2AF
AEEEFAEAAEFE5AAE83C37E23D43C33A8ADFD8B641E248C9F9645F43FD0F6AF
0AD27F6DCFD863C4327D92F75DD47C2D719DA56F2CAEC32B038218A25C2291
DF240AF6EF0D788BF67CF888C89F0EFE2968FA84F27DDB6377035C127A6622
F1C83F14AFE64CE7E85BE2970CD68E3A1809A95377528F346CFBA738C13F3E
EB4D4E8A7E20E4D8B83A5527A3DD35FE573E5BF8FBFB331F0A7C5DF0FF00ED
EFFB2FE9AF2EBBE1FBEFB678AFC396683CDD4ECE4063BF96D23E9F6C781E41
2463898912A7EF81137DD7F15740D37E23FC09F8883C33347A8E97E36F0CDC
DC584D09DE92BDCD949E54A84750DFBB753DF357F47F07F8EBC17A80BFD2D6
2BF85B89628E4DA1D3DC3EDC1F42338F719AF6AD1D2D23D3A25B2B66B38BE6
221652850B312C369E9C938C71E9C62BFA9FC2EE2EC7636786C467184950C6
E164A76716A326935CD096CD34F549B7176E966FF38CEF034A839AC2D453A7
356DF55ADECD7CB47D4F9DB58F0F5B7817C15E0AF875624FD9BC37A55B5926
4E494B68920427F08EAFFC34BA16FE288E23FF002F31491FE437FF00ECB47C
4BB8F3BC512479FF00511469F98DFF00FB35739E19BB363E20D3EE41DA1664
0C7FD963B5BF426BF52C4E2275AA4AAD477949B6DF9BD59F3C959591FCFE7C
74F0E1F08FC67F1CF86F6EC4B0D6AFE38C74FDD79EE633F8A106BEA1FF0082
71783C7897F690B5D6654DD178634EBBBFC9E9E64805AA0FAFEFCB0FA67B56
3FFC1433C2A7C37FB4E6B97AA9E5C3E20B4B2D4631D8E6216EE47D648589F7
AFA7BFE0987A11D3BC35F137E203A7CCAB6B65037A189259A419F72D17E55F
8D65B80FF85654BF964DFDD768FF004738DB8AEFE1F4B1F17AD5A308FCE6A3
192F95DFDC7EC4473452C49346C191D4329EC548CE6BE40F889F1C3E1BF81B
C6F0781BE3FDA1F064DAA13FD93E21E4E91A828C02AD7001FB34C9D648AE06
C4182B2B820D59F8B5F16E6F841E01F03FC5AB81BB41D2756B7D335F3C9316
957DBAD8CC073F34573F66938E4A8651F7ABB3F8ABE0CF87DF13BC3973F0BB
E28DA47AA7853C44825B1BA0C336F263E468A519D8D196CC720E029DA72A48
AFDDFEBD96E4F1C263B8829CBEA58893A6EA41D9D39A696EFDDEB1BA968F9E
2AF172528FF9CD470D52BF3C30FF001C55EDDD7F5F93EDAD2BEF03DE7D8A2D
63C3D711EB5A6DC209629AD983EF8D8655976921811C82A4E7AD697833C6D2
E88E349D58B35913804E77427F9EDF51DBB7A57E18F8FB4FFDAB7FE09AFE3B
5B6F077886E2F7C09A94ECF60F3219F4ABC19DCD14F6EC4AC17381F398CA3B
019472B9C7D99F08FF00E0A6DF03BE28241A2FC78D15FC11AD3809FDA56C1E
E74F91B0064B2033C3B989C2BA488A065A4AFDBB893E8E79B53C24736C826B
1D8492BC654D7BF6FEF53DEEB66A3CCD3DD2D8F1E8E6F4DCBD9D5F765E7FE6
7DEBE2FF0008CFA5B1D5EC64379A75C1DE25CEE2A5B9F98F707B377EFCF5E4
34CD46E749BE8750B46DB2C2DB87A1F507D88E0D7AF7826E6CEF3478B59F02
EB367E30F0ADF06D8F6D3C73A11D1BCB910B46DFED0C8E78C66B2BC55F0FDE
343AB787636781BE67B720874FF741E48F6EA3DFB7F3E56A33A7374EA269AD
1A7A34FCCF553BEA8FCB5FF82997ECCD0F8C3438BF6A9F871665EE2DE28E1F
125B44B96314602477840E4B42311CC79FDDEC7C054763F86D5FD75F8535BB
4B17B8D1B5B852EB46D511A1BA86550F195906D6DC8D90CA4121811823AE6B
F9F9FDB9FF0064CBDFD9A7E231D43C3B03CDE00F133BCDA45C64C82DDBEF3D
948E7277479CC6589DF1E0E59964DBFE8BFD133C6858BC3C785F329FEF69AF
DCB7F6A0B787AC778FF774FB3AFC8E7D9772BF6F0D9EFF00E67EC27EC77AF4
BE30FD873C057971289AE7447B9B2931FC0B6D75343129FA4263AF68B4D735
9B0C0B3BE9A203B2BB6DFCB38AF847FE0941E298F5FF00827F133E1890CD3E
91A845AA47939056FA008AAA3FD97B3C9F76F7AFB66BF8EBC72C91E5FC5D99
619AB7EF2525E953DF5F848FA1CB2AF3E1E0FCBF2D0EE6DBE22F8AADF01EE5
6703B491AFF35C1FD6AEFC52FDA0741F819F0DE0F1F7C4C4FDE5E4F1C36B65
6807DA272E413B55DB1954CBB124003033B880733C1BA3DA5E5D4FAC6B0E90
E95A5219EE2490858C0405BE62780A002CC4F181CF5AFC30FDACFF00681BDF
DA0BE2A5DEB76D23AF86F492F69A3C0D9005B83F34CCBD9E7237377036A9CE
D15F84F11673F53A378FC6F6FF003F91FB77833E19BE24CCB92B5D61E9EB36
BAF68A7DE5F824DEF63FA12F0FFC51D2BE21F832D3C7BF0B2E6DFC41A55CA9
2769612A30196464FBCAEBFC48C030F439AE65FE2AEB606D86D2D93EA1CFFE
CC2BF9DEF81FF1F7E227C01F138F11781EF7104C545E584D96B4BB8D7F8644
0461873B5D70CBD8E0907F71BE127C68F855FB5268E750F08CEBA1F8BEDD37
DEE9370C3CD07BBAE00F363CF495064646F55240AC723E25A58B4A13F767DB
BFA7F91E9F8ABE0863B87E72C561EF570BFCDD63E534BFF4A5A3F26EC7A64D
F133C5127DC78A2FF763FF00E289AC89FC6DE2AB9FF59A8C8B9FEE054FFD04
0ABDA77C3EF125EDD3C13C1F648E23869253F2FF00C071F7BEA38F7AF07F8A
7FB587ECF7F013CED3B4F9FF00E13BF15C191F66B37568219076967F9A28F0
4721449229EA057BB8AC652A11E7AD2491F9470FF0CE3F35AEB0D97519549F
64B6F36F64BCDB48F7FD27C2FE2BF14959AF26963B56E7CDB8666C8FF6549C
B7B76F7AF9C3F6B8FDAC3C15FB1068760C9E0FD4BC55E25D6636FB14EF0BC1
A6238C8C497854A07182DE5441A42BF78A821ABF2F7E367ED8FF001B3E36CB
2D9EA9AA9D0F4263F2E99A696821201E3CD707CC98F4CEF6DB9E42AD7AE7C2
5FDB9AF93C3AFF000B3F695D163F895E08BD4F2656BB8D27BD8E3E31BFCDF9
2E429191BCAC809DC24380B5F31478D30B2ABC8D351EFF00F00FDCF31FA31E
7D432F58A84A33ABBBA69EA97949D937DD69E4D9F93BFB44FED75F1D3F69FD
5FEDDF13F5E67D32190BDAE91699834DB63DB64009DCC01C799217931C6EC7
15F38D8D8DEEA97B6FA6E9B6F25DDE5DC890C30C28649259242151111412CC
C480001927815FB6DF187FE098FF000FBE2F68375F15FF00613F14DBEB1644
979BC37793E2485CF3E54134D89226F48AEB071F379B8C0ACBFF00826EFEC7
9AE7843E23F897F681FDA23C3D77E1FD2FE1397FB2D95FDB324B2EAA91F99E
6AC4C32E2DA321E32A3E796489A362508AFAC8D584A3CE9E9DCFE7CAF97E22
957786A94DAA89DB95A69DFB5B7BF91F4449A0D97FC13CFF00644B2F855A54
91A7C5DF89B19B9D6AE622A64B5475DB22ABA9276DBA3791090D83219664C1
C8AFCBFAFB07E25F843F693FDA7BE276AFF1121F016B72C7A94BB2D15ECE58
E0B7B48F88615965091FCABCB107962CD8E6BB2F0A7FC138BF694F10EC6D5E
CF4EF0DC6DC937F7AAED8FF76D44FCFB1C7BE2BF25CE1E2B30C439D3A6DC56
8B47B7FC13FD0DF0DE9E43C2194470F8DC6538D797BD53DF8DF9BB249DDA8A
D179DDF53BFF00F82685F5AEADE2EF889F0BB505CDA78A7402F29F55B793C8
2B8EE4ADDB1FC0D7F3DDAEE8F7BE1ED6F50D03524F2EEF4CB896D665FEEC90
B9471F8106BFABAFD9BBF6298BF674F88165F11FC45F10A1B9BEB7827864B0
B7B71145224F19521A4790BB056DAE311AF2A3B56F4BFB23FEC4365E39D6FE
225E78022F136BBAFDFDCEA372F7CD35CDB09EE6469640B6D3B8802176240F
28E071D2BEFB8670B5A861552AEACD37F76FD0FE46F1CB3ECB733E209E3B2B
ABCF094637766BDE4B97ED25D12D763F93CF08F817C6DF103535D13C09E1FD
43C45A836316FA75ACB772F3D3E48958FE95FB59FB057ECAFF00F0517F82FE
2987C47A04765E0BF0ADFC8AFA8E95E22BADF6F7B1E002DF63B6F3658A7000
D921F29C60062532ADFB27A778C2C3C31A62687E04F0FD878774D886120B58
5238D3FDD4896341FF007C9AC1D47C47AEEAD95BFBD92546EA99DA87FE02B8
5FD2BE80FC7CF6EF1E7C41F0B7C37F879E21F1F7891D8691E1AB39AF350162
A6792348D4BCBB563C3640C9CFCBEA71D6BF9F9F12FF00C157BC05F0CB4F9F
C3BFB1F7C1CD3BC2F04A173A96AF1A09E5FEF196DAD1B73BF70F25DBF3D57D
7F6C3C37A2E91E35D03C4FF0DBC449E6E95E28D36E2CAE23FEF453C6D0CAA3
DCA487F2AFE3867F853E3D5F8A17DF06F4DD227D57C5B61A9DC692D63648D3
CAF776B2B4522A2A8C90190F38C003270335D14717569D2950A736A12B5E29
B49DB6BAD9DAEEDDAE2693777B9E87F19BF6B0FDA1FF00680778FE2A78E2FF
0056B0720FF67A38B5D3C6D6DCA7EC96E2384B29E8EC85FD58D7D6DFB167FC
1367C77FB441B5F88BF135A6F077C345C4A2E1C08EF3538C7245A2C8309111
D677057FB81F9DBF7F7EC73FF04A8F0E7C374B0F89BFB4D5BC7E24F122ED9A
D3C3708171656AE3906E88F96E641C6573E429EA64C823F55BC60C96BA4C9A
E7C42D6EC7C21E1AB103779F3C70C31A8E07992B948C1EC39C0EC2B3A34675
24A14D36DE892D5BF406EDAB3CE741B4F037C28F06D9FC2FF82BA443E1DF0E
69CA55440A55A463F79CB1CBB3B632F2392EC7A9F5D1D1BC15E20D6B6C9140
6085BFE5ACD945C7B0EA7F015F1A7C4FFF008291FECCFF000A3CED3FE15E99
73F1135B8495170B9B6B15756DA7371321638EA0C30B230E8E339AFCB2F8DB
FB7D7ED23F1B967D3750F101F0D685382A74DD13759C4CA41044B2EE69E50C
0E195E4319EA1057F45F01FD16F8A739E5AB5E97D5A93FB552EA5F287C5FF8
128A7DCF27159DD0A7A2777E5FE67EDD7C59FDA53F65FF00D9C7CEB5F1C788
87897C4B6F90747D2C2DD5C2B8C656545611C24641C4F229239553D2BF34BC
69FF000560F8BBAEF8DB45B9F06E916BE13F076997D6F35C584416EAEEFAD6
290192196E2450A8B228200891197382EC2BF2E345D035EF125EAE9DE1DD36
E754BB6E90DAC2F3C87E8B1827F4AF77F0C7EC83FB5078BE716FA37C2FD790
90087BCB292C2220FA4B742243FF007D57F5FF000CFD1D782386E93966F523
56A5B59569463157D2F183692F26F99A7B491F3F5B37C4D67FBB565E47F4AB
F10869BAABE97E37D0655B9D2FC476B15CC33272B22B22B238F668D948F5E6
B07C2DE13D47C557BF67B41E5C1191E6CC47CA83FA93D87F4E6B03F645F86D
F1774EFD9B748F85DF1EB486D0B58F0D5CB4164DF69B7BB792C14878496B79
245528AEF0852785553835F64DB5868FE1ED1DADA38D2DEC6DD18BEEE46DC7
CC5BD49EFEB5FE0B7885F454C3CF8FB1F55D78CF00A6E49C249FB46DBBA4E3
A24EDCCDAFE6E55ADDC7F78CBF8F254F2BA74E31FDEDADAF45D1FE89796BE7
F09FC633F1CFE29E9B2FC0FF00D9414784F429F316BBE3DBD2D1A46878920D
242E24B9B86190F711E228FEE248B27CD17C61E1BD1FF61CFD82C29F06D98F
8BFF00156D386D4A768E48AD6753CEC900782DB073C4225987DD77039AFA4B
F685FDB2BF62179EFBC2FF0012FE246ABACDBC20C371E1DD192F2081C8C861
2C96D140CFB81C1496E8A70084079AF852F7FE0A67FB23FC35D8BF023F67D4
BBB9B51B60BED5FECB6B3AF6DDE605BD99BF19013DC8AFDFA197D4A142384C
04634E9C55969B25DA2B4FC7E4639062B23A53FAD670AA579EFC91B462FF00
C536F9BD5462BCA4F6313C79F10BF6AAFDAFAFC4834AD5359D1C4A04361A45
9CC34BB77E80B150CA5873FBC99D99724020715DB7837FE09C5FB487898097
5CB5D3BC2D16E19FB7DE2C92143D4AA5A09F91E8C579F4EB5F3878FF00FE0B
0FFB5678A524B5F07C3A2782ADCF08F6565F6AB851EEF78D3464FB8896BE13
F889FB4AFC7FF8B3E6A7C45F883ADEB96F36775B4D7B28B4E7AE2D90AC23F0
415E5C783A94E5ED31352537F77F9FE67EB15BE9278EC3D0584C97054B0F4D
6CACE4D7FE92AFDDB8BB9FB61A9FECD1FB17FC11DF2FED09F1E2D67BB80866
D3F4B78A3B85DBD55EDE2FB65CB03D32A887D39AFB5BF6318BF64FF880BA9F
8D7F678F87F716FA668371F6787C47AADBB17B9BA64C48B62D752CB70A1108
F34ED897E70AA18EF0BFCC9FECB9FB3978BBF6A3F8BFA57C2FF0B66DA094FD
A353BF2A5A3B0D3E360269D8776E42C6B91BA465525412C3FA3CF82FF167C2
137ED47A17EC77FB3EC6965F0F3E0A6877B73AB4B01056EF52529662DD9C63
7F94F72F24CC7992E3731E63C9F77099261286B4E9ABF7DDFDECFCA7887C50
E20CD138637193717BC53E58BF58C6C9FCD1F6E7C5EF08780FE257822E3C31
E3A6BA9B42BA94C73358DD4D0ED92325712181C6F0AC0828E19770195C818F
CC7F1BFF00C13234BD5565BFF82DE3A8E75C656CF565048CF201B8B7191F43
07E35CBFEC63FB5EE9FAF7ED15F127E0FF008C750FB47867E23EBFAA6A1A04
D3499586EA69DCADBAB37459E10BE58C802440141696BF41F58D2EEFC3DAB4
B6323159216CA38E372F5561F5FD0D7DF78ADE11D5C9330581CCE9DDB8C651
96AAF192FF00DB5DE2D774FA58E3E05F15B38CA20FFB2F10E30BEB176946FE
8D3B5FBAB3F33F107E21FEC83FB447C34324DAEF83AEEF2CA3C9FB569A05F4
3B47F11306E641FF005D156BE6C92392291A2954A3A121948C10475041E86B
FA6AD37C79E27D370A2ECDCA0FE19C6FFF00C7BEF7FE3D599E2AB1F845F13A
331FC51F02D86AF232E0DCF928D38FF764C2CA9FF0192BF14C5F0245EB42A5
BC9FF9AFF23FA47877E9615A36866B8452FEF5376FFC9657FF00D291FFD7FD
44D5F46D4343BB6B3D46231B8FBA7AAB8F553DC7F93CD65D7E6BFEC59FF053
ED1FC6F6B63F05FF006B4BB8E1BC6DB0E9DE287C469237DD44BE2302393B0B
8C6C6FF96A072EDFAA5E24F0A5E787DD675617363360C53A72A41E4038E871
D3B1EDDE8032F5CBED5B40F81DF127C43E1F8DA5D61748BB8B4F4452CF25E9
81D6DD1547259E674500724902A97C2FF84F0FC09F823E0FF813A122CFAA2C
0B36A2F173E7DE4A7CCB87DD804A9949085BA468A0F02BDDBC07A3595F7842
18B5085668A4BA5BA0ADD3CCB6955E26FAAC912B0F715F3B7ED47FB497873F
66CD12E6F61F2B54F881E208D869F66C72B6F08F95659803958908E9C195C1
0300314F5F13C50F0D944B02DF2C1CFDA4BCDA8F2C17CAF3B2FEF1EA641C37
8ACD31F4F0982873D496897E6DF64B76FA2473BFB617C63D6FF638FD9CF50F
88FE10D21759F12DF5CC1A64771260DBD94B74AE567914E0B47194C051F7E4
64DD85E9FC8DF8ABC55E23F1C789351F17F8BF519B56D6B5799EE2EEEEE18B
CB34AE725989FC801C018000000AFE883E0EEA7E21FDAD3F647F8F5F06FC5D
7936B7E27759359B296760CF25CC8BF68B78E31FC2AB756A3214614498031C
57F37F5F379763A389A31AD0D99EA719F0AD7C9332AD96621DE50B6AB67749
A6BE4CFECBBF671BA4F0E7ECD3FB3D043B2397C39A33BFA62E2C22DC4FFDFC
26BF2C7F68CFD8A3E20FC57FDBB7C4FE13F0258AD868BE205B5D7EEB527526
DACE0BC5DB712C98C6E924BA8E7D9183973CE400CCBFA95A3E967C37F01FE0
F787172A74BF0D69D6F8EE3C8B3B68C7F2AF70F19F8A7518BC1BA7EAFA5158
9B54548E6987122FCA5B6A9FAEE19EDDB9391F2DE187D27F11C01C45C4F88A
51E7E4A54DA5BFC50A69C92D9B8B51DF4576DE97BC637853EBF84C125A3939
2BFA36D7EA789781BC15F0EFF667F02C7F0A7E0FDB08E55C1D47527C35CDCD
C630D249201F349D801F2C63E5503B7D13E29F13CFE0AF86DA9788ECE0FED0
BAF0EE95FDA0F6A09324D15BC664745FF6E458DD50F3F360907A57CB401621
475356BC49F16A0D13F6F5F0B7C0EBF90358F8A7C05772AC07A3DCC778EE99
1DC7916F702BF1AF057C51CEB8D33BCDF3CCE2B394DF2249B6D4799CDF5DDE
8AEFAE9B2492F7F89328C2E594F0B4610BC536E5D39AD6D3CBF43F1C3FE0A3
3FB26F86AE749B7FDB37F6778D6F7C09E2DDB71ACDB5B2F16177336D372107
DC8E49329321E629F23A3613F383E1D7ED25F1FF00E12ADAC1F0E7E216B9A1
5A593178ACE0BE9BEC409EB9B466681B3E8C8457ECB7C02F8C769FB377C55F
197ECEFF0015146ABF0DB53D46F748D423BA4DF1C2C1DADFED263230D14B18
0265C728438CEDDADF9E3FB7C7EC757DFB2B7C4B5BAF0D87BDF875E2A2F71A
1DE64C8221F79ECE57E72F1020A313FBC8F0D92C1C2FF4264D9AC7154EEF49
2D24BB3FF22BC4BF0FEAE438D508BE6A15173529FF00345EB67FDE5757F93B
59A3DC7E1BFF00C1617F692F0E431E95F1434BD1BE22696DB85C7DAAD858DD
CA87F80496C05B81FEF5B367BFAD7DBBFB61FC79D0FC4DFF0004BBD27C5DE1
6F09C7F0FED3E27DFDB5A43A3C1E585807DB66BB9590C4912B2CFF00646937
0452CB2658024D7F3795FD0DFED7FF00053C47E3CD37F644FD8874290A5CAE
9CB26AF2A2F16F0E9F696D04D74474F9545CB007AB617AB57B8AB4D41D34DF
2B77B74BF7B77D4FCE2DD4F3CFF826EFC38D1BF678F815E30FDB8BE225A2BD
E5D5BCBA6F866DE5E1A44DFE5BBA704837170044180CA471C8DCA31AF8DBC4
BE22D63C5FE21D4BC53E21B8377A9EAF712DD5CCAD805E5998BB9C0E00C9E0
0E00E0715F7A7EDEFF0012341B7D5FC3BFB357C3945B4F087C33B686DDA188
E633789108D132339FB3C3F267AEF7943722B80FD9CBF635F17FC66B7FF84D
FC5F71FF000887C3FB4569A7D52E711B4F0C632E6DC4985DA003BA67FDDAF2
7E620AD7E55C435AB6618C584C32E6E5D34EFD7FCBFE1CFEF6F05B26C0F0A7
0ECB3CCDE6A9CAB59DDEEA1F62296EDCBE2B2D5DD5D687B17FC12F35BB9B5F
8C5E25F0FF0096EF67AA68ACEECAA4AACB6F3C7B3711C0CABC98CF7E2BEEFF
008D7F1DBE05FECA3A60BDF88DA88D6BC51347E659E8969B64BA9013857642
711C79CFEF25201C1D81986D3F9DBF187F6EFF00873F027C3B3FC17FD8934C
82D5223B2F7C4F2C625334AA30CF6E2504CEF9E3CE94140322342851C7E426
B7ADEB3E25D5AEF5EF115FCFAA6A77F234B7175752B4D3CD23757791C96663
DC939AFF00423C01FA1D63ABE1A9E2B89E4E952DD535A4E57D7DEFE45FF933
D748E8CFE2FF0019FC51C2E799D55C7E029B8A692D7AF2AB5DDBAB5D2EEDDD
9FA5BA7FFC142BE357C5EFDA5BE1E5FEABA82F863C1B078874F8DB46B27616
FF00659AE16290DD49F2B5C3889CF2F88C300C91A1CD7EDB7C47B5FB378A67
7C605C24720FCB69FD54D7F2171C8F13ACB13147420AB038208E841F5AFEB9
F54F11DB78FBC0BE09F89562A560F12E956D7AA08C155B98527507DFE73C7B
57D07D2F7C3FC064F4F2BA995D08D3A569C1A8AB6CE32577BB6EF2D5DDBB6A
D9F9B6418B9D47353777A331347D2AE75AD461D36D47CF31C13D9547563EC0
57E637FC1507F694B779ADBF659F87F738D3347315C788248C9FDF5C8C4905
A1230088F8965EA0C8507CAD1B03FA17F1CFE3269DFB2C7C05D57E27DD0493
C4BABAFD8B44B690677DD4CA4C6597FB88019A4E4655428219857F317A659F
88BE25F8EAD34F7B87BFD7BC55A947119A762EF35DDF4C177BB1C92CF23E58
F524D65F449F0AE18AC4CF8A7318FEE6837ECEFB39A5773F482DBFBCEE9DE2
3CFB1DCB1F610DDEFE9FF04FE97BF66DF0BFFC2B9FD8D7E17F8715B336AB64
9AAC848C13FDA2CF7D83FEE79C8BF4515F941FF05B3D37CBF8F3E03D676F17
5E191067D7C8BDB87C7E1E6D7EEAFC4286D34B9349F0DE9C823B4D2AD12289
074451F22A81ECA82BF1B3FE0B69A6F9DFF0A57C548B917969ABC0EDE9B3EC
7220FC7CC6C7D2BF91F89739966398E27309EF56729BFF00B7A4DFEA7BF469
F2414174479D7FC11CB41D3F43F167C5CF8F3AC92B63E05F0E08181185DB76
ED7523863FC4896247D1F9EB5FA3BFF04E2FDA6F5AF8D3F0C35DF02F88EF45
C78CFC257125CC4656CB5D585DC8D247F78E488A42D09C0C2218BB9AF847F6
75825F843FF049CF88FE3694AA5E7C47D5A7B5B56030CF6D2C9069AE84F7C0
8AE5BE8715F13FECC3F1CB53FD9DFE34F87FE25D99924B1B693ECFA9DBC7D6
E34F9C859E3C6543301892304E3CC4427A57F4FF00833E0CC788F82B35AD18
FEFDCE3EC9FF007A945CACBCA7ED1C5F4BD9F43C5CC731F638982E96D7E7FF
000C7ED2FED7DFB0D785FF0068FD3EFBE29FC19861D1BE23400C97B60C5628
35561D4393858EE0FF0004DC2B9F965C677A7F3DFAE687ACF86758BCF0FF00
88AC66D3753D3E5682E6DAE11A29A1950E191D1802A41EA0D7F5D7AFDD416D
77A778FBC1D7893E99AE431DDDB5C4243452ACCA1C3023864914861EB935F3
5FED37FB27FC3EFDB07C3F26B5A5791E1AF89DA7C38B7BEDA44576A83E586E
8282CF11E8B200648B82372828DE9F809F496AD934A19271149CB0EBDD8CDD
DCA974B4BAB82FBE3D2EAC9679A64CAA7EF28EFF0099FCFAF803F684F8E3F0
B4C43C01E39D5F46822C6DB78AEE46B5E3A66DDCB42DF8A1AFD8CFD807F6D9
FDA1BE3E7C561F0C3C7BFD99AC69B69A75CEA177A87D9BECD7AA90948931E4
B2C0774B2C608F28704906BF117E217C3BF1A7C2AF175FF817C7FA54DA36B7
A6BEC9A09876FE17461957461CABA92AC39048AFD94FF8248783FF00B1FC0F
F13FE2F4EA84CD2DBE916AD8F9D1ADA337130CFA399E0FC56BFA4BE91B9670
F7FAA58ACE2586A552A4A3154EA28C6EDCDA4A519AD5D93E6DECEC78F944EA
FB78D3E669755E87DDDFB4E7ED27A0FECF3AC68D2F893C027C41A5F8822768
F52824881F3A2203C4CAF19E4215653BFE604E07CA6BE7FD3FFE0A1DFB32EA
85535BF076B7A6B9FE28A281D07D4C7728DF92D7D17F11BE1BE9FF00B43FC1
5D67E15EA0C8BABDA27DAB499DFF00E595CC40F9473CE1724C6FC7DC7E39AF
E73754D2F50D1353BBD1B56B77B4BEB09A48278641878E5898ABA30EC55810
6BFC64E23CDF1B83AC9C25EE4B6D17CD1FDDDE0AF879C2FC4B964A389A4D62
693B4AD392BA7F0C926DAF27A6EBCD1FA9BFF0523B7D27C71E1AF859F1CFC3
1BA5D335DB392DC48EBB5BCB9552EAD9587386C34B91D8822BDEFF00619D1F
FB03F642B9D4C0DAFE20D5EEAE01EE42BC56C47D3101FD6BE74D0107C61FF8
26BEA7A52AB4BA97C32D4A499371DCC638A4F3D9C770AB6D75228FF731D2BE
D1F80FA60D07F642F86DA728D9F6887ED447AFDAA49AE3F9C80D699453F699
87D6BF9A0A5F3D13FC99C9E22635E0B839E457D6862A54B5DDC1734E2FE6A5
135FE26F82FF00E16C7ECD1F137E1A2C1F6BBBB9D327B8B38B382F770AF9F6
C07FDB7853F3AF95BFE09D7F1EEDFE37FC21B8FD9FFC61760F8ABC150AC9A5
CB237CD71A721DB1FD4DB92226FF00A66C98C904D7DDDF0E350FB178963818
E12F11A23E99FBCBFA8C7E35FCDEFC4397C53FB1F7ED83E20B8F04EDD3EEBC
1FAE4B3D8440931BE9F73FBE82093182524B59551C7A13839C1AFECEF08780
F03C73C319CF04E392729255695FA4ADC92F44FDC8B6B6BDF7513F907158FA
982C4D2C6537669DBF53FA1DB93E18F19786B50F84BF1934B8F57F0FDEA9B7
923B804984A9C0E47CCA508CA3A90C84020F4C7E12FED89FB0B78C3F671BE9
3C61E1532F88FE1CDDB8306A0A03CB65E61F922BB0830339C24C06C7E33B58
85AFDC9D33C61E15F8F1F0CF45F8EBF0FDB7D9EA90AFDB20C8325B4C9F2C91
C807F1C4DF2376236B0F94E4E87873C5E34FB39FC3DAFDAA6ADA0DEA3453DA
4CAB2218E41875DAF9565604EE46F94FB649AFE15F037E955C4BE09F13D5E1
0E27E6A9838CADEF5EEA29D937BD9AB72F32BB8B5CAD4A2972FE9B9DF0961B
3DC22CC3036551EEBCFCBF3F3DF47BFF002E5F0DFE2EFC4EF841AC7F6F7C32
F135F7876ED8A990DACA5639B667689A2398E55193F2C8AC3DABF53FE0C7FC
15D3C6BA5FD9746F8DDE158BC4716550EA3A462D6F48C60B3DB37EE65763D9
1A051D8527ED67FF0004DD02D6EFE2CFECB71B6A9A4C9BA6BBF0F212F3DBF7
63659F99D47781BE75FE0DC0855F1EFF0082787C03D1758F156B9FB44FC5C5
5B0F037C29592EE47BA52236D42D90CC4B8C648B441E6B8C67798C6082457F
B39C4DC61E1D71770B55E29AD085784629DD351AAA4FE08F345DF5764B5707
BEA933F13A785C6E1B11F57D62EFF2F3FEB73F7B355D3FC33E2D8F489E2917
C3FE22D7ACCDFC1A65EB470DE3C6AB1B4C24B70CC774265459593705660093
906B82F187C3DF0CFC5DF02EA9F023E2F5931B2D4A3C5ACDC096DE65CF952C
12104078DB943CA9E51815254FF2B5FB4A7ED67F107E3B7ED0D79F1CF4CD46
EF40934E9845E1E5B795A19F4DB1819BC85578DB2B2B6E324A43106476C7CB
803F53FF00655FF82B2685E26B5B2F871FB5D40B0CE36C76FE28B58B085BA0
3790C6331B67ACB08DA78DD1A8058FF98B84CC6AE1B131C56164E138BE68B4
F58B4EEACFC8FB294135CB2D47FEC63E0CF19FEC89FB74DD7C10F1E863078B
74DBBB3B3B95052D6F638FFD2ADAE90127EF08248B6E49477643C826BF5175
BD35F4ED6EEF4D4527CB9595001C95272BC7B822BABF1EFC2CF06FC78F0C78
57C59A66A36BA96ABE18BCB6D6FC31AF5B3ACAA2685D655065889125BCE102
4EAA76BAFCC007552BE93A9786A29BC636DE21B8012D2184CB2B36028922E1
727B60107FE026BF48F15B8F69F12D7C366D38F2E21D350AA96CE507A4D794
A2D2B74716B6B37C780C23A29D35B5F4F9F43F3DBF6F9F8B3FF0AA3E10E9DF
05F409FCBD73C64AD2EA0C87E68EC14E2407183FBE71E583DD11C1AFC40AFD
2BD7FE047C6DFDB73E336B7F142CAD4E83E0BBBB81069FA9EA41A38CE9D010
909B6871E64A5D33265408CB9606406BEE2F845FB347ECD9FB3FDCDADC4F0F
FC25FE2642BE66A57B124EB6EE0A9DF043CC70ED65C82BBE55E46F238AFE42
E28CC28FB478CCC2BC68D1BF2C6536A29FA27ABBEFFA9FDFDC25C5D94706E4
B4F2D8275B18D73D4853D5A9BE9396D1E5568DB57A7C3A9F95DF04BF627F8D
BF1A05BEAB169DFF0008D78766DAFF00DA5A9AB44AF19C1DD0438F325CA9CA
B002338C7982BEB5B0D47F633FD8BEEA3BBD22697E2A7C4AB2C8596275686D
A6C0076B2EE820E41E9E74E84919C1AFD64F126A6B2E8A66834B8B5FD2EE50
89577AB2321EB9428C197D7F515E5165E36D274718F0FF0086AC74D2381E52
2AE3FEF844AFB7C170CD2A708D4C34936F5526B9BD1C55EDE8F53F18CF3C7D
C5E695670CCE9C950DBD9539FB3525DA73E594DAE8D2E54CFC6EF8ABFB427E
D69FB489974AD2B45D5ACFC3F71951A6687657263910F69A445324D91D413B
09E420AF2FF0FF00EC67FB4EF890A8B0F87F7F6E1BBDE98ACB03DFED2F19FD
335FBCD2FC50F1248A4225BC47D551B3FF008F31AC4B8F1CF8AEE54A49A83A
83FDC5543F9A806A2A707C6ACF9F115A527F2FF827A183FA48D5CBF0EB0D93
65B4A8C174BCA5F376E5BBF37A9F95BE1AFF0082657C7DD58AC9AFDFE8DA0C
5FC424B992E251F45863643FF7F057BD786BFE0991F0F74E9917C7DF11E7BE
90E336FA6DBC56CF9F40646B866FFBF63E95F73E91E1EF13F8B009AEEE2516
639335C3B32E07F7413CFF002F7AF8BFE3EFFC1427E0BFC028EEBC2BF06E28
7C7DE3340D1BDD87DDA65AC98FF9693A1FDF1048CC701C1E434AAC315F75C0
FE0C57CF316B07956165567D75D22BBC9E918AF5F45A9F1F9F7D24B89AAC5B
7898D25DA118AFB9B5297DCCFAE3E157ECB3F00BE03EAB65E20F0ADB5C5A6B
57445AC375777F389A72E37793E50748DF214B14F2FA29246071EEBAC78E74
8D13575D2AF031F941791791193D011D7A73C7B715F975FB053FC4AF8C1A87
88FF006C7F8F7AA4DAC5C5B89B4BF0DC328D96D6CAD817725A421424618848
15D3962250E58F35F5B5EDDCF7F7735EDCB6E96762EC7DCD7D3F1BF0451E1D
CC2593D3A919CE9A4AA38AB454F7718BDE5CBA26DA5EF5D5B4D7F22C6F11E3
3359FD6F1D565393D9C9B6EDD37D9792D0FA6759F133DA68136BBE1ED32E3C
4E6219169A7C96EB7327B27DAA6822C8EA43CABED93C57C33E21FDBB7F663D
2F579FC39F13DFC4FE08D5A2C19AC358D3AF639501E84C7179CBB4F62B9523
9048AF52D3F53D434A9C5CE9D3BC127AA9EBEC47423D8D763E3BF09FC37F89
DF0F2F25FDA3B40D2AE3C3B651349F6BD4710B40AC30D2472FCB240C4701E3
7463D075A7C2B8FC8E9CF933CC3CE54DFDAA73519C7E5252849797BAFF00BC
79D3A35A6D4687C4F44AD7BBF96A7CDD65FB607EC27AB4C20B6F89525BB9FF
009EB657F0A8FF00814B6817F5AED6D7E37FEC817EA1AD7E2F68F186E9E75E
C311FC44812BF3B7C63FF04E1F85DF176C6EBC63FB1CFC46B3D4E004BB68DA
94A58C3B893B16755F3A2C0C0449E124F5697BD7E66FC55F80FF00183E096A
034EF8A5E14BDD00BB6C8E79537DACCD8DD88AE632F0C840E48472477AFEB2
E0BF037C3AE27846591E6D579DFD893A7CFF00F80F246F6EF1E65E678F99E2
331C0D5951C5D0E592DD34D5BD53D57CCFE9617E27FECB12729F19BC3433FD
ED5AC47F39453FFE1647ECBDFF0045A7C2FF00F838B0FF00E3F5FCA4D7DAFF
00B267EC5DE34FDA4B506F11EAB2B786BE1E696CCDA86B330081D62E648AD7
7FCACE003B9CFC918E5B2708DF41C4FF0044AE1AC9B053CC332CD674E94376
E31F924B76DF44B57D0E2A19F56A9250841367F461F0C6EBE1878B7507D5FE
1B78E34EF14FF65328B8FECCBA82ED63F301016430BBEDDC338CF5C1C74AE6
75587F656FD9AFC7BAD7C44D7134CF0A78AFE204AF75777F323B5C5D98C224
8237DADB132159D13019CEF6058E6BC97F669F8D9F03ED342F1C687F01B4B8
ACFE0FFC21B465BBD71016FED5D4C219AE1ADDBEF4CB0C51E6499F2D33C89E
5811AAB49F397C5FD765FDB0FF00630FF85B5F668878BFE1EEA3732DE450AE
4A5B6EFDFA2670427D9DA2998F7F288E4D7F9F3C5798616856AB1CB2EE2AEE
1CF6E67156D5F2E89BDECAF6DAEED73F6BF0F382D6675A9D5C7B71C37B48D3
94A36D25352E4DD356BA4A4FA5D773EC6F12FEDB1FB2F4B61259C3F139F4C9
5BA4F61633CF28F65F32CE78F9F75FC457C39E3CF167FC138BC6FAA7F6DFC4
6D47C53F10AFD376C96FAF3567D81CE4AC4A65B748D49FE145551D80AFCA2A
F7EF85DFB2FF00C73F8C0619FC19E14BA6D3A7DA46A1763EC965B18E37ACD3
6D1201D488B7B7B57C9641E2CF1060A6FF00B26A3A537D69F3465FF8145DED
F3B1FD59987D1A3843054BDBE65899A82EB39C231FFD217E67D5567F14BFE0
9A5E0FCAF867E0A5FEA8E0E41BF45B943F8DDDECEDFF008ED741A0FED83F04
2D35A834FF00839FB336932EB172765B8B6B7B58EEA461C80A96D65248E7BE
0357A07C3FFF00826E781FC28B0EABF1E7C622F665DAC74DD2B3144483CAB4
CE0CD22B0E3E48E223FBD5F42FC5FD420FD9BBF65CF16FC45FD91BC1BA45BE
A9E1A8964B98EE6D59E57B285879F3C8EB22CB33411B19819646F955B209E2
BD09F8A7C4398E37EA18FCE1FB669BE4751CE765BDE2E4EDF3FBB43F24E20A
1E1EE5949CB2EC04F14D69CCE53853BFF8972B7F28D9F73A5F05F8E3F6A9D7
7487F1278DF48F0AFC20F0ADBC7E6CB26A7E6DD5DC71601DC635B882184638
26665653D6335F367C73FF0082B3FC04F8416937877E1CDC5C7C58F11C3B94
DC5B94B6D355FF00DABA58C0900EDE446EA47064079AFE77FE337ED2BF1CBF
681D47FB43E2D78BEF75D8D5F7C568CE22B284FAC56B104850E38DC1371EE4
D78C69DA7DF6ADA85B695A640F73797B2A430C518DCF24B23054451DCB1200
15ED61E8382F7A6E4FBB7FD23F08CEB398E2E77A74214A3D2305FAB6E4FE72
67F605FB33FC6CF8A7F167F65BB6F8D3F12DE0B2D5BC677B75269D6B650B5B
476562929B78A34DCCD23EE10C930919893E60C1DA140EF2C7E2478C2C7005
F79E83F866557CFE38DDFAD43A9F85ACBE18FC3AF01FC21D2E4F32D7C29A45
A598638CC82DA15815DB18F99B6331F526B8F8A29279521854BC9210AAAA32
493C0007726BFCF2FA40F89199C38AE7432BC4CE9AA318C3DC93577F13D13D
5DE5CBAF63F4EE0EC9283CBD4EBC13E66DEA93D36FD2E7A7CFE20D33E262C7
E15F1AF83B4CF145BDD9D8D6F77024D0907A9649D255C01C9CD7C09FB50F86
3FE0967F0F7C7B6DE01F8A5F0F6DED75BF23CF9BFE11B866B38AC84B8D82E1
6C27806F75F9953CB7217E620065DDF40FED31FB42681FB1BFC2F37107937F
F127C4D13C7A6DA310E201D1A7940FF96311EDFF002D5F0A3E50597F9A1F10
6BFAD78AB5CBFF0012F88EF65D4754D5267B8B9B999B7492CB212CEEC4F724
D7FAEDF41DFA30E7D9F64AF39E3BC44DD39FC11B4632FF00C0B96EEDF69BBF
BDEEAF8657FC678EB3EC1D3C4FB2CBA0925BBD75FC7EEFBFB1FA76FF00B27F
FC12BFE24492DC781BE34EA9E129E7FB905FCE90DB427D31A85A44E7F19CFD
6B317FE08F9A378BEDE69FE0DFC7ED07C592005E38C5AA6CDB9E374B6B7775
C7201611FE1DABC77F65AFD857E2B7ED29710EBCF1B785FC0EAC7CDD66EE33
89829C32D9C47699DB3905B2235C365F70D87F6EB5B1FB38FF00C137BF67BD
4FC61A169C88A11228DE4757D4F5DD40A9F22279B682771DCE42A88E24DEEA
80641FB0F1BFC38E10E1C9BC26578EA957129EB0F724A1FE39A51B3FEEA4DF
7B68CF132DC6622B2E69C5247E767C49D4F40FF82587ECBC3E11783351B6D4
3E3B7C4C88CDA96A76B9FF0043806E8FCE88B2AC82280168ED77852F29926D
AB868C703FF04A3F3BC09F0A3F68BFDA0AE10CB71A168EB1DABB1E5E5B7B7B
9BC99771EECC21FC4D7E487C60F8B5E35F8E3F11B5BF8A1F102F0DE6B3AE4C
65931911C518E23862524ED8E24011172781C92724FEBF7C0DB797E1D7FC12
1BC7BE2081FC8BBF1CEBAEB1B9EAF13DD5A58C883DBCBB79BF335F8BF0364E
B30CEB05806B4A9569C5FA4A493FC19E8E26A725394BB267E5A58DF5EE977D
6FA9E9B7125A5E5A489343344C5248A48C8647465C1565201041C83C8AFEA0
3F667F8E963FB5AFC0EB5F133B46BE3AF0B85B4D6AD93019E50A4ACCA83188
EE154BA7180E1E319DA4D7F2EB5F52FEC77F1AFC79F03FE38E89AF78234FBB
D7975371637FA459C6669B50B4958168E38C7265420491118C32804EC2C0FF
00AAFF00486F0A29F13E49274ACB1342F2A6DE9D3DE837D1492DDE8A4936ED
73E1F29C7BA1535D9EE7F42F5BFA1786B55F10CDE5D845FBB538795B845FA9
EE7D8735EA9ABF857C2B05DB78A358B83696138593ECECA6363230C918FBD9
3D4A019CE7E95E7BE22F89375770FF0065786A3FECCD3D46D0570B230FC384
1F4E7DF9C57F865E22F8B593F0CD2FF6EA97AAF6A71D64FD7F9579BB795DE8
7EBB92F0EE271D2FDD2B47AB7B7FC1F447FFD9
>    % End-of-data marker for ASCIIHexDecode data. Observe previous line doesn't end in ">".
def  % /ImageColour_data


% Recommendation: move changed parameters to just above this line.

% % % % % % % %
% Essentials  %
% % % % % % % %



/Circlearrays [
	[ (Fonseca)                  (1970)   (bot. Justerini & Brooks) ]
	[ (Kopke)                    (1970)   (bot. Dolamore) ]
	[ (Quinta do Noval)          (1970)   (bot. The Wine Society) ]
	[ (Sandeman)                 (1970)  [(bot. A) {-0.06 Kern} (very)] ]
	[ [(W) {-0.07 Kern} (arre)]  (1970)   (bot. Peatling & Cawdron) ]
] def
/Titles [
	(F70)
	(K70)
	(N70)
	(S70)
	(W70)
] def

/Belowtitles [
	(Justerini & Brooks)
	(Dolamore)
	(Wine Society)
	[(A) {-0.04 Kern} (very)]
	(Peatling & Cawdron)
] def

/Names [
	(JDAW)
	[(G) /uacute /edieresis (st ) /Ocircumflex /ntilde /egrave]
	(Guest Two)
	()
] def
/LeftHanders [ (RMW)  (RAW)  (SRG) (Simon G.)  (HEG) (Helen G.)  (CSD) (Chris D.)  (CFD) (Conan D.)  (NCG) (Marc Jackson)  (JG) (Jeff G.)  (ZDR) (Zak R.) ] def

/PaperType /A4 def  % /A4 /A3 /USL = 8.5"x11", /USLegal = 8.5"x14", /USL2 = 11"x17", [SmallerPts LargerPts]
/TastingNotesPaperType /A4 def  % If this is /USL then the distiller log is also on 8.5"x11", otherwise log on /A4

/ThePortForumIconPlacement /LowerNonWaterBox def  % /None
/ThePortForumIconTastingNotePlacement /LowerNonName def  % /None

/PDF_title (Placemats) def  % Names PDF file; appears as tab name in browser, and in search results

% Headers... are arrays of even length, alternately an item of PageOrdering, and the relevant compound string.
/HeadersLeft [
	0  [(Boot & Flogger, T) {-0.08 Kern} (uesday 18) {SuperscriptOn} (th) {SuperscriptOff} ( May 2021)]
] def  % /HeadersLeft
/HeadersCenter [
	0  [(1970s)]
] def  % /HeadersCenter
/HeadersRight [
	0
	[
		(www) {-0.08 Kern} (.) {-0.08 Kern} (ThePortForum.com, )
		% (www) {-0.08 Kern} (.) {-0.12 Kern} (W) {-0.08 Kern} (orldOf) {+0.12 Kern} (Port.de, )
		(www) {-0.08 Kern} (.jdawiseman.com)
	]
] def  % /HeadersRight
/ExternalLinks [  % Array, length a multiple of three:  indented0-boolean, (Descriptor0), (http://URL0),  indented1-boolean, (Descriptor1), (http://URL1),  ...
	false   (Thread on ThePortForum.com)     (http://www.theportforum.com/viewtopic.php?t=00175&view=unread#unread)
	false   (Latest version this placemat)   (http://www.jdawiseman.com/papers/placemat/placemat.pdf)
%	true    (in list of placemats)           (http://www.jdawiseman.com/papers/placemat/placemats_list.html#a2021MMDD)
	false   (Boot & Flogger)                 (http://www.davy.co.uk/wine-bar/boot-and-flogger/)
	true    (SE1 1TA, streetmap.co.uk)       (http://www.streetmap.co.uk/map.srf?x=532409&y=180083&z=106&pc=SE1+1TA)
	true    (SE1 1TA, google.co.uk)          (https://goo.gl/maps/7NEiwAMEZpG2)
	true    (SE1 1TA, bing.com)              (http://www.bing.com/maps/default.aspx?where1=SE1+1TA&cp=51.50428~-0.0935)
	true    (What3Words: cafe.humid.palace)  (http://map.what3words.com/cafe.humid.palace)
] def  % /ExternalLinks
/CopyrightStatementPlacemats (Copyright 2021 Julian D. A. Wiseman of www.jdawiseman.com) def

% % % % % % % % % % %
% Non-Glasses Pages %
% % % % % % % % % % %

/VoteRecorders true def
/CorkDisplayNumCopies 1 def
/NeckTagsNumCopies 1 def
/PlaceNames false def
/DecanterLabelsNumCopies 0 def
/GlassesNumCopies 1 def
/TastingNotePagesNumCopies 1 def
/DecantingNotesNumCopies  Circlearrays length 15 ge {1} {0} ifelse  def
/AccountsNumCopies  Names length 8 ge {1} {0} ifelse  def
/StickyLabelsNumCopies 0 def
/StickyLabelsTypes [0 1] def  % 0 = 2x4 on A4; 1 = 5x13 on A4

/Abovetitles [ Titles length {()} repeat ] def
/Overtitles [ Titles length {()} repeat ] def
/TitlesTastingNotes Titles def
/TitlesVoteRecorder Titles def
/TitlesDecantingNotes TitlesVoteRecorder def
/TitlesCorkDisplay TitlesTastingNotes def
/SubtitlesTastingNotes [ 0 1 Titles length 1 sub {dup Overtitles exch get dup length 0 gt {exch pop} {pop dup Belowtitles exch get dup length 0 gt {exch pop} {pop Abovetitles exch get} ifelse} ifelse} for ] def
/SubtitlesVoteRecorder SubtitlesTastingNotes def
/SubtitlesDecantingNotes SubtitlesVoteRecorder def
/SubtitlesCorkDisplay SubtitlesTastingNotes def
/CirclearraysTastingNotes Circlearrays def
/CirclearraysVoteRecorder CirclearraysTastingNotes def
/CirclearraysDecantingNotes CirclearraysVoteRecorder def
/CirclearraysCorkDisplay CirclearraysDecantingNotes def
/CirclearraysPrePour CirclearraysDecantingNotes def
/CirclearraysNeckTags CirclearraysDecantingNotes def  % Multiple copies? /CirclearraysNeckTags [ Circlearrays {[ exch aload pop [(Bottle #) {NeckTagsCopyNum 1 add}] ]} forall ] def
/CirclearraysStickyLabels CirclearraysDecantingNotes def

/NamesTastingNotes Names def
/NamesVoteRecorder Names def
/NamesAccounts     Names def
/NamesStickyLabels Names def
/NamesPlaceNames [ Names ] def

% % % % % % % % % % % % % % % % % % % % % % %
% Page Organisation and Page-Level Features %
% % % % % % % % % % % % % % % % % % % % % % %

% GlassesOnSheetsMaxPerSheet: 6 default, USLegal => 9; A3 or USL2 => 13. For all on one sheet replace with "/GlassesOnSheetsMaxPerSheet 999 def".
/GlassesOnSheetsMaxPerSheet  6  /PaperType load dup /A3 eq exch /USL2 eq or {pop 14} if  /PaperType load /USLegal eq {pop 9} if  def
/GlassesOnSheets [
	% For a custom arrangement replace the next line  with something of the form "[0 1 2 3] [4 5 6 7 8 9] [10 11 12 13]"
	% The code below spreads glasses evenly over the sheets, the sheets one glass larger being last. Replace "floor": with "ceiling" for larger sheets to be early; with "round" for them to be scattered.
	<< /p Titles length GlassesOnSheetsMaxPerSheet div ceiling cvi  /g 0 >> begin 0 1 p 1 sub {[exch p sub g Titles length sub exch div floor cvi {g /g g 1 add store} repeat]} for end
] def  % /GlassesOnSheets

/GlassesOnSheetsMaxPerTNSheet  /TastingNotesPaperType load /PaperType load eq {GlassesOnSheetsMaxPerSheet} {7} ifelse  def  % just enough writing space for 8 TNs per page.
/GlassesOnTastingNotePages [  % Consider "/GlassesOnTastingNotePages GlassesOnSheets def"; and see comment in GlassesOnSheets.
	<< /p Titles length GlassesOnSheetsMaxPerTNSheet div ceiling cvi  /g 0 >> begin 0 1 p 1 sub {[exch p sub g Titles length sub exch div floor cvi {g /g g 1 add store} repeat]} for end
] def  % /GlassesOnTastingNotePages

% Base styles: /RectangularDislocation /Diamonds /DiamondsPlus /Bespoke5 /Bespoke7 /Temple /PostsAndLintel /Arch /RectangularAlternateNudge /SquareGrid /TopRow /MiddleRow /BottomRow /Sides /LeftSide /RightSide  [ /Array ...  /Positions ... ]
% Variations, those on this line taking no parameters, those on the next two lines taking one: /Mirror  /ShoveLeft /ShoveRight  /ProhibitVerticalNudging /ProhibitHorizontalNudging
% /OnlyIfSheetNumMin /OnlyIfSheetNumMax  /OnlyIfOrientation  /GlassesNumMin /GlassesNumMax    /ImprovementPointsMin /ImprovementProportionMin
% /PackingDirectionTopToBottom /PackingDirectionLeftToRight /PackingNestingColumnMajor  /RowsNumMin /RowsNumMax  /CentralGlasses /RectColsToLeftOrRowsBelow /TempleExtraColsToLeftOrRowsBelow
% /SquareGrid only, /HorizontalAlignment is followed by one of /Left /Right /Centre /Justify; and /VerticalAlignment by one of /Top /Bottom /Middle /Justify.
% Also the flags /SuppressNonRightOrnaments and /SuppressNonLeftOrnaments suppress headers, icons, and water boxes that not on the labelled side (i.e., on other side or in centre).
/PackingNestingColumnMajor false def  % Default value, which can be overridden at the level of the individual item of PackingStyles
/PackingDirectionTopToBottom true def  % Ditto
/PackingDirectionLeftToRight true def  % Ditto
/PackingStyles [
	/RectangularDislocation
	/Diamonds
	/DiamondsAndRectangular
	[ /Bespoke5  /OnlyIfOrientation /Landscape ]
	[ /Bespoke7  /OnlyIfOrientation /Landscape ]
	[ /RectangularAlternateSplitNudge  /ImprovementPointsMin 2 ]
	[ /DiamondsPlus  /OnlyIfOrientation /Portrait ]
	[ /DiamondsPlus  /OnlyIfOrientation /Landscape  /ImprovementPointsMin 2 ]
	[ /Temple        /OnlyIfOrientation /Landscape  /ImprovementPointsMin 1 ]
	[ /Temple        /OnlyIfOrientation /Portrait   /ImprovementPointsMin 2 ]
	[ /RectangularAlternateNudge  /ImprovementPointsMin 2 ]
	% [ /RightSide  /GlassesNumMax 3  /OnlyIfOrientation /Portrait  /SuppressNonRightOrnaments ]
	% [ /PostsAndLintel  /CentralGlasses 1  /GlassesNumMin 7  /OnlyIfOrientation /Landscape ]
	% [ /Arch            /CentralGlasses 1  /GlassesNumMin 6  /OnlyIfOrientation /Landscape ]
] def  % /PackingStyles

/WaterBoxes { {GlassesNumCopies 0 le} MightBeTrue {/Both} {/Glasses} ifelse} bind def  % /Glasses /TastingNotes /Both, any other value being none
/WaterBoxesNum 15 def  % triangle number most elegant: 6, 10, 15, 21

/SideBySideGlassesTastingNotes false def  % If true TastingNotesPaperType and TastingNotesOrientation ignored

/VoteRecorderTopTexts [  % Must be same length as GlassesClusteredOnVoteRecorders, each sub-array containing some number of TopTexts
	[ (Wine Of The Night?)  /questiondown ]
	% [ (What is it?) ]  % If uncommenting this, insert a 'true' into the VoteRecorderShowTotalRow array.
] def  % Must be same length as GlassesClusteredOnVoteRecorders
/VoteRecorderShowTotalRow [ false ] def  % Same length as VoteRecorderTopTexts
/GlassesClusteredOnVoteRecorders [ VoteRecorderTopTexts length {GlassesOnTastingNotePages} repeat ] def  % triple-depth array, same length as VoteRecorderTopTexts and VoteRecorderShowTotalRow
/VoteRecorderCrossedBox {VoteRecorderShowTotalRow VoteRecorderSheetNum GetEU dup
	{pop Titles WithinTitles get ASCIIfy ThisName ASCIIfy eq ThisName length 0 gt and}
if} bind def  % /VoteRecorderCrossedBox

/Rotate180AlternateNames false def
/PageOrderingGlasses [ GlassesOnSheets length {1} repeat ] def
/PageOrderingTastingNotePages [ GlassesOnTastingNotePages length {1} repeat ] def

/TastingNotesStarsNameColsRowsArrangement  % (ASCIIfied Name) NumCols NumRows /Alternating|/Sideways|/Upright
[
	(DRT)  5 1 /Upright      (Derek T.)    4 copy pop
	(CSD)  5 1 /Upright      (Chris D.)    4 copy pop
	(WPS)  5 1 /Sideways     (Wolfgang S.) 4 copy pop
	(PW)   5 1 /Sideways     (Phil W.)     4 copy pop
	(DJ)   5 1 /Sideways     (Daniel J.)   4 copy pop
	(IDJ)  5 1 /Alternating  (Ian J.)      4 copy pop
	(DRL)  5 1 /Alternating  (Dave L.)     4 copy pop
	(TC)   5 1 /Alternating  (Tony C.)     4 copy pop
	(MPM)  5 1 /Alternating  (Mike M.)     4 copy pop
] def  % /TastingNotesStarsNameColsRowsArrangement

/PlaceNamesFirstAndThirdFoldsFromEdge 0 def  % Use 0 if printing on stiff card, 36 if printing on paper.


% % % % % % % % % % % % % % % % % % % % % % % % % % %
% Fonts, Colour Schemes, and Font-Size Constraints  %
% % % % % % % % % % % % % % % % % % % % % % % % % % %

% Fonts the author has used:
% /TrebuchetMS-Bold /Garamond  /Garamond-Bold /Cochin /Cochin-Bold /Didot /Didot-Bold /DejaVuSerifCondensed /DejaVuSerif-Bold /DejaVuSerif
% /Harrington /AmazeNormal /LiberateBold /GillSansMT-Condensed /GillSans-CondensedBold /GillSansMT-ExtCondensedBold /GillSans-Light
% /Optima-Regular /Optima-Bold /AvenirNextCondensed-DemiBold /LucidaSans /LucidaSans-Demi
% Others might be available to your interpreter; a list of PostScript names can be generated by decommenting the next line:
% (*) {=} 255 string /Font resourceforall
/TitlesFont          /TrebuchetMS-Bold def
/CircletextFont      /Garamond def
/AbovetitlesFont     {TitlesFont} def
/BelowtitlesFont     {AbovetitlesFont} def
/OvertitlesFont      {TitlesFont} def
/NamesFont           {PlaceNames {TitlesFont} {CircletextFont} ifelse} bind def
/SubtitlesFont       {OvertitlesFont} def
/FillTextFont        {TitlesFont} def

/PlaceNamesFont      {NamesFont} def
/BackgroundTextsFont {TitlesFont} def  % /UniversalisADFStd-BoldCond a good choice, http://typophile.com/node/82379

/HeaderFont          {CircletextFont} def
/FooterFont          {HeaderFont} def


/ColourSchemeTitles /Black def  % /MidGrey /Black
/ColourSchemeAbovetitles /Black def  % /MidGrey /Black
/ColourSchemeBelowtitles /Black def  % /MidGrey /Black
/ColourSchemeOvertitles /Black def  % /MidGrey /Black

/TitleMaxHeightProportionInnerRadius 1.5 def
/AbovetitleMaxFontSizeProportionTitles 0.4 def
/BelowtitleMaxFontSizeProportionTitles 0.4 def
/OvertitleMaxFontSizeProportionTitles  0.4 def
/ExclusionAnnulusProportionInnerRadiusTitlesAboveBelow 0 def
/ExclusionAnnulusProportionInnerRadiusOvertitles 0 def
/FontSizesSetsGlassesPages {PageOrderingGlasses} def
/FontSizesSetsAboveBelowOver [ 0 0 0 ] def  % Array of length 3, representing which of Abovetitles, Belowtitles, and Overtitles are considered together for font-size purposes
/FontSizesRatioTitlesMin 1.1892 def  % If font sizes closer than this ratio ~= 2^0.25, then collapsed to smaller.
/FontSizesRatioAboveBelowOverMin 999 def  % If font sizes closer than this ratio, then collapsed to smaller.
/FontSizesTitlesNotSmallerIfTitlesNotLonger true def  % If using FontSizesTitlesEquivalences then this probably should be false. If true then font size of "W" cannot be smaller than that of "II"; and "Df" must be same as "Dl".
/FontSizesAboveBelowOverNotSmallerIfTitlesNotLonger false def
/FontSizesTitlesEquivalences [ 0 1 Titles length 1 sub {} for ] def  % If using this then FontSizesTitlesNotSmallerIfTitlesNotLonger probably should be false.
/FontSizesAbovetitlesEquivalences FontSizesTitlesEquivalences def
/FontSizesBelowtitlesEquivalences FontSizesTitlesEquivalences def
/FontSizesOvertitlesEquivalences FontSizesTitlesEquivalences def
/RotationTitlesAboveBelowOverCirclearray 0 def

/DecanterLabelsMaxSmallerDimension 53.98 8 sub 360 mul 127 div def  % Size of business card in points, ISO 7810 ID1 being 53.98mm x 85.60mm (less 4mm margins)
/DecanterLabelsMaxLargerDimension  85.60 8 sub 360 mul 127 div def
/DecanterLabelsGuillotineMarks true def

/CircletextsMinNumSpacesBetween 3 def
/CircletextsMinCopies 2 def
/CircletextsTweakSize true def
/CircletextMaxFontSizeMayBeSlightlyExceeded true def
/CircletextMaxFontSizeProportionRadius 0.25 def
/CircletextMaxFontSizeAbsolute 8 def
/CircletextsSameFontSizeIfRadiiShrunkToBeSame true def


% % % % % % % % % % % %
% Glasses: Decoration %
% % % % % % % % % % % %

/ShapesInTitles false def
/ShapesInAbovetitles {ShapesInTitles} def
/ShapesInBelowtitles {ShapesInTitles} def
/ShapesInOvertitles  {ShapesInTitles} def
/ShapesInPlaceNames  {ShapesInTitles} def
/ShapesToUse [/Flower /Star /Heart] def  % At least one of: /Flower /Star /Heart
/ShapesStarsPointsAndStepsArray [[5 2] [6 2] [7 2] [7 3] [8 3]] def  % Less-polygonal more-pointy: [[3 1.31844] [4 1.79214] [5 2.27823] [6 2.77012] [7 3.26502] [8 3.76162] [9 4.25925]]

/CrossHatchingOutside false def
/CrossHatchingInside false def
/CrossHatchingTitles false def
/CrossHatchingAbovetitles {CrossHatchingTitles} def
/CrossHatchingBelowtitles {CrossHatchingTitles} def
/CrossHatchingOvertitles {CrossHatchingTitles} def
/CrossHatchingPlaceNames {CrossHatchingTitles} def

/InlineTitles true def
/InlineAbovetitles false def
/InlineBelowtitles false def
/InlineOvertitles false def
/InlinePlaceNames {ShapesInTitles CrossHatchingTitles or InlineTitles and} bind def
/InlineTitlesMaxNumberContours 1 def
/InlineAbovetitlesMaxNumberContours 1 def
/InlineBelowtitlesMaxNumberContours 1 def
/InlineOvertitlesMaxNumberContours 1 def

/OutlineTitles false def
/OutlineTitlesAlsoAbovetitles true def  % ignored if OutlineTitles is false
/OutlineTitlesAlsoBelowtitles true def  % ignored if OutlineTitles is false
/OutlineTitlesAlsoOvertitles true def  % ignored if OutlineTitles is false

/Spirals false def
/SpiralNumArms {SpiralCentreFromCentreProportionRadiiInside 0 eq {CirclearraysN SheetNum get WithinPage get dup 5 mod 0 eq {pop 5} {dup 3 mod 0 eq {pop 6} {dup 4 mod 0 eq {pop 4} {5} ifelse} ifelse} ifelse} {5} ifelse} bind def
/SpiralAngleOffset 0 def
/SpiralRadiusBetweenArms 18 def
/SpiralClockwise true def
/SpiralCentreFromCentreProportionRadiiInside 0 def
/SpiralCentreFromCentreAngle 0 def
/SpiralStrokeCode {stroke} def

/FillTitles false def
/FillAbovetitles {FillTitles} def
/FillBelowtitles {FillTitles} def
/FillOvertitles {FillTitles} def
/FillPlaceNames FillTitles def
/FillTextAngle {GlassesOnSheets length 2 eq {SheetNum 0 eq {/LowerRight} {/LowerLeft} ifelse} {NamesShowTop SheetNum get {/LowerCenter} {/Name} ifelse} ifelse} bind def  % E.g., /Name /LowerLeft /LowerRight /MiddleLeft /UpperCenter /UpperRight
/FillTexts /Titles load def  % ignored if no filling. If used typically set to a custom array (of same length as Titles).
/FillTextPlaceNames {ThisName} def
/FillTextPrintQuickerDistillSlower false def


% % % % % % % % % %
% Page background %
% % % % % % % % % %

/BackgroundTextsGlasses false def
/BackgroundTextsGlassesTexts [ GlassesOnSheets length {()} repeat ] def
/BackgroundTextsTNsTexts [ 0 1 GlassesOnTastingNotePages length 1 sub {BackgroundTextsGlassesTexts exch 1 index length mul GlassesOnTastingNotePages length div floor cvi get} for ] def
/BackgroundTextsAlignmentVertical {1 TypeOfPagesBeingRendered /TastingNotes eq {TastingSheetNum GlassesOnTastingNotePages} {SheetNum GlassesOnSheets} ifelse length dup 1 le {pop pop pop 0.5} {1 sub div sub} ifelse} bind def  % number /Middle /Bottom /Top
/BackgroundTextsAlignmentHorizontal /Centre def  % number /Centre /Left /Right
/BackgroundTextsSquooshMax 1 def  % y/x scaling, bigger being taller, smaller being fatter
/BackgroundTextsSquooshMin 1  BackgroundTextsSquooshMax dup 1 eq {pop} {div} ifelse  def
/BackgroundTextsTastingNotes BackgroundTextsGlasses def
/BackgroundTextsOrientation /Landscape def  % /Landscape /Portrait /Natural /Rotated
/BackgroundTextsGlassesPaintCode {clip 4.32 setlinewidth 0.9375 setgray stroke} def

/Droplets false def
/DropletsCharges [  % Length a multiple of 4
	/All  [200 500]   5  120  % SheetNum Location Charge Spin. SheetNum can be /All; position can be circle number.
	/All  [200 200]  -1    0
	/All  [400 200]  -1    0
] def  % DropletsCharges
/DropletsProportionBackwards 0.0204 def  % Keeping this small adds humour to their discovery. ("Naughty creatures being rebellious. It's like herding cats!")

/FlightSeparations false def
% The usual error is too shallow nesting of arrays. There is the outer array. Containing an array for each SheetNum. Each containing arrays, one per line. Each containing the line pieces.
% Example line descriptions (so FlightSeparations to be two deeper):
% --  [ [/Left 3] [0 3] [/Top 3] ]
% --  [ [/Top 4] [1 4] [/VerticalUp 1 1 1 1 4] [4 6] [/Bottom 4] ]
% --  [ /Closed [0 3] [1 3] [/HorizontalRightwards 0 3 3 3] [1 4] [2 4] [7 4] [6 4] [6 3] [5 3] ]
/FlightSeparationLines
[
	GlassesOnSheets length {[]} repeat
] def  % /FlightSeparationLines
/FlightSeparationPaintCode {gsave 0 setlinecap 2.4 setlinewidth 0.75 setgray stroke grestore 1 setlinecap 0.96 setlinewidth 1 setgray stroke} def
/FlightSeparationPaintSeparately false def
/FlightSeparationArcRadiusControl 1 def  % In range 0 to 1 inclusive. 0 = radius of circle; 1 = half-way to nearest glass. If glasses circles touch, irrelevant.

/PaintForegroundCode {} def  % Paints a pattern on top of everything. Will probably refer to TypeOfPagesBeingRendered and then to SheetNum or TastingSheetNum.


% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
% Needing to be translated (also VoteRecorderTopTexts and other params above).  %
% Please send good translations to the author, www.jdawiseman.com/author.html   %
% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %

/TastingNotesColumnHeadings [ (Times) (Eye) (Nose) (Mouth) (Score) ] def  % German: [ (Zeiten) (Auge) (Nase) (Gaumen) (Punkte) ]   Danish: [ (Gange) (Eye) [(N) /ae (se)] (Mund) (Score) ]   Dutch: [ (Tijd) (Kleur) (Geur) (Smaak) (Punten) ]
/TastingNotesPageNumCompoundString [(Page ) {TastingSheetNum 1 add 5 string cvs}] def

/VoteRecorderInstruction {VoteRecorderShowTotalRow VoteRecorderSheetNum GetEU {()} {(Record points, not rank.)} ifelse} bind def
/VoteRecorderTotalColTitle [(T) {-0.06 Kern} (otal)] def
/VoteRecorderTotalRowTitle [(T) {-0.09 Kern} (otal)] def

/DecantingNotesTopText (Decanting Notes) def  % German: [(V) {-0.06 Kern} (erkostungsnotizen)]
/DecantingNotesColumnHeadingTimes (Decant Time) def  % German: (Dekantierzeit)
/DecantingNotesColumnHeadingNotes (Cork condition, branding, etc) def  % German: (Korken, branding, etc)

/AccountsTopText (The Accounts) def  % German: Die Accounts
/AccountsColumnGroupHeadings [
	[/emdash ( Bestowals ) /emdash]    [/emdash ( Share of costs ) /emdash]   [/emdash ( Settlement ) /emdash]
	% German: [/emdash ( Geschenke ) /emdash]    [/emdash ( Kosten wurden geteilt ) /emdash]   [/emdash ( Einigung ) /emdash]
] def
/AccountsSubColumnHeadings [
	[  (Already paid)   (Wines)  ]
	[  (Wines)   (Food etc)  ]
	[  (Owes)   (Is owed)     [(P) {-0.02 Kern} (aid?)]  ]
	% German: [ (Bereits bezahlt)  [(W) {-0.06 Kern} (eine)] ]  [ [(W) {-0.06 Kern} (eine)]  (Essen etc) ] [ (Schuldet)  (Ist geschuldet)  (Bezahlt?) ] and maybe change AccountsColumnRelativeWidths
] def  % Must be same length as AccountsColumnGroupHeadings

/CorkDisplayTopText (The Corks) def  % German: (Die Korken)

/VoteRecorderMonkeyName (Monkey) def  % German: Affe

/DecanterLabelsTopText (Decanter labels: cut; paste to business cards; allow to dry; punch holes; hang on clean decanters; fill decanters; wait; pour; drink; enjoy. Also drink plenty of water.) def

/EmptyPageString (Fewer pages than before, so this page now omitted.) def


% % % % % % % % % % % % % % % % % % % %
% Obscure and Little-Used Parameters  %
% % % % % % % % % % % % % % % % % % % %

/CMYK0001replacesRGB000 false def  % True printers' CMYK black, rather than screen-optimal RGB black? Default = false because of HP Officejet Pro 8600 Plus: www.theportforum.com/viewtopic.php?t=175&start=1094

% Add annotations, perhaps a correction of a wine's information, without changing the printed PDF.
% Array of length a multiple of two, alternately elements of WithinTitles, and compound strings.
/GlassesAnnotations [ ] def

/NamesShowTop    [ GlassesOnSheets length {false} repeat ] def
/NamesShowBottom [ GlassesOnSheets length {true } repeat ] def
/GlassesPageWhiteCirclesBehind false def

/HeaderFontSize 6 def
/HeaderBaselineFromPageTop {MgnT HeaderFontSize 2 div sub} bind def
/FootersLeft [] def
/FootersRight [] def
/FootersCenter [] def
/FooterFontSize {HeaderFontSize} def
/FooterTopFromPageBottom {MarginB FooterFontSize 8 div sub} bind def
/HeaderFooterCenterX {PageWidth MgnL MgnR sub add 2 div} bind def

/MarginL 24 def  % For five on A4 consider 19.86386432719 = 3 sqrt 2 sqrt 2 copy 4 mul 8 sub mul 1 index 3 mul add exch sqrt mul 7500 mul 127 div exch 4 mul add
/MarginR MarginL def
/MarginT MarginL [ /HeadersLeft /HeadersCenter /HeadersRight ] {load length 0 ne {HeaderFontSize add exit} if} forall def
/MarginB MarginL [ /FootersLeft /FootersCenter /FootersRight ] {load length 0 ne {FooterFontSize add exit} if} forall def

/Orientation {SideBySideGlassesTastingNotes {/Landscape} {PaperType /A4 eq PaperType /USL eq or {/Portrait} {/Landscape} ifelse} ifelse} bind def  % /Landscape /Portrait
% ShrinkRadii can take values:
% /NotAtAll, so each page's radius is determined independently;
% /ToSmallest, so all pages have the same radius; or
% /ToSmallestSamePageOrdering, so the radius of each page in the same session, presumed to be equivalent to having the same value of PageOrderingGlasses, is shrunk to the smallest of that session's radii;
% array the same length as GlassesOnSheets, each radius being shrunk to the smallest of the pages with equal array element.
/ShrinkRadii /ToSmallestSamePageOrdering def  % /NotAtAll | /ToSmallest | /ToSmallestSamePageOrdering | array denoting equivalence classes
/MaxRadius 150 def  % Maximum radius of circles
/TitleMinHeightForAbovetitleProportionInnerRadius 0.4 def
/TitleMinHeightForBelowtitleProportionInnerRadius 0.4 def
/DecantersLabelsMinSpaceForAbovetitlesProportionSmaller 0.2 def
/DecantersLabelsMinSpaceForBelowtitlesProportionSmaller 0.2 def

/GlassesCirclesFadingFactor 1 def  % Person not drinking some wines? Use code returning a real >=0 <=1, depending on NameNum SheetNum WithinTitles WithinPage
/GlassesCrossedOut {GlassesCirclesFadingFactor 0.5 le} bind def
/GlassesDestForEachCircle {NameNum 0 eq} bind def  % For URL # tags. Always true typically adds 10%-12% to file size versus always false; {NameNum 0 eq} a compromise.

/CirclearraysFillBehind false def
/CirclearraysFillBehindCode {0.9375 setgray fill} def

/VerticalMiddlingTitles /MatchString def % /MatchNone /MatchRow /MatchPage /MatchAll /MatchString
/VerticalMiddlingIncludeBaselineTitles false def
/VerticalMiddlingStringTitles (D20T83) def  % Benchmark characters, deliberately not including those prone to having a 'tail' in some fonts
/VerticalMiddlingOvertitles {VerticalMiddlingTitles} def % /MatchNone /MatchRow /MatchPage /MatchAll /MatchString
/VerticalMiddlingTitlesAlwaysMatchNone [
	/dagger /daggerdbl ($) /dollar /sterling /Euro /yen (+) (++) (+++) (*) /spade /heart /diamond /club /multiply /bullet /periodcentered /lozenge
	/alpha /beta /gamma /delta /epsilon /zeta /eta /theta /iota /kappa /lambda /mu /nu /xi /omicron /pi /rho /sigma /tau /upsilon /phi /chi /psi /omega
	/uni2609 /uni263F /uni2640 /uni2641 /uni2642 /uni2643 /uni2644 /uni2645 /uni2646 /uni2647  % Astronomical symbols
] def  % /VerticalMiddlingTitlesAlwaysMatchNone
/VerticalMiddlingOvertitlesAlwaysMatchNone VerticalMiddlingTitlesAlwaysMatchNone def
/VerticalMiddlingIncludeBaselineOvertitles {VerticalMiddlingIncludeBaselineTitles} def
/VerticalMiddlingStringOvertitles {VerticalMiddlingStringTitles} def

/ShapesAverageSeparation 12.5 def
/ShapesEnclosingCircleRadiusMin {ShapesAverageSeparation 0.4 mul} bind def
/ShapesEnclosingCircleRadiusMax {ShapesAverageSeparation 0.6 mul} bind def
/ShapesAverageMaxTweakPlusMinus {ShapesAverageSeparation 0.3 mul} bind def
/ShapesFlowersNumPetalsMin 5 def
/ShapesFlowersNumPetalsMax 9 def
/ShapesFlowersAngularWidthMin 0.8 def  % as a proportion of 360 / num petals
/ShapesFlowersAngularWidthMax 2 def  % as a proportion of 360 / num petals, and an upper limit of 109.47122 degrees is also applied
/ShapesTitlesFill {1 setgray fill} def
/ShapesTitlesStroke {ColourSchemeCurrent /MidGrey eq {0 setgray stroke} {InlineTitles {0.4 setgray stroke} {newpath} ifelse} ifelse} def
/ShapesAbovetitlesFill {ShapesTitlesFill} def
/ShapesBelowtitlesFill {ShapesTitlesFill} def
/ShapesOvertitlesFill {ShapesTitlesFill} def
/ShapesAbovetitlesStroke {ShapesTitlesStroke} def
/ShapesBelowtitlesStroke {ShapesTitlesStroke} def
/ShapesOvertitlesStroke {ShapesTitlesStroke} def
/ShapesTitlesClip true def  /ShapesPlaceNamesClip ShapesTitlesClip def  % If shapes filled white with no border so identical to background, then def to false, to avoid bleed between clip and fill.
/ShapesAbovetitlesClip ShapesTitlesClip def   /ShapesBelowtitlesClip ShapesTitlesClip def   /ShapesOvertitlesClip ShapesTitlesClip def  % Ditto.
/ShapesPrintQuickerDistillSlower true def

/CrossHatchingOutsideStrokeCode {0 setgray 0.06 setlinewidth stroke} def
/CrossHatchingOutsideToPaperEdge false def
/CrossHatchingInsideStrokeCode {0 setgray 0.06 setlinewidth stroke} def
/CrossHatchingTitlesStrokeCode      {InlineTitles      ColourSchemeCurrent /MidGrey eq {{0.4 0.15} {0 0.24}} {{0 0.06} {1 0.24}} ifelse ifelse TypeOfPagesBeingRendered /PlaceName eq {PlaceNamesDetailsScalingFactor mul} if setlinewidth setgray stroke} def
/CrossHatchingAbovetitlesStrokeCode {InlineAbovetitles ColourSchemeCurrent /MidGrey eq {{0.4 0.15} {0 0.24}} {{0 0.06} {1 0.24}} ifelse ifelse TypeOfPagesBeingRendered /PlaceName eq {PlaceNamesDetailsScalingFactor mul} if setlinewidth setgray stroke} def
/CrossHatchingBelowtitlesStrokeCode {InlineBelowtitles ColourSchemeCurrent /MidGrey eq {{0.4 0.15} {0 0.24}} {{0 0.06} {1 0.24}} ifelse ifelse TypeOfPagesBeingRendered /PlaceName eq {PlaceNamesDetailsScalingFactor mul} if setlinewidth setgray stroke} def
/CrossHatchingOvertitlesStrokeCode  {InlineOvertitles  ColourSchemeCurrent /MidGrey eq {{0.4 0.15} {0 0.24}} {{0 0.06} {1 0.24}} ifelse ifelse TypeOfPagesBeingRendered /PlaceName eq {PlaceNamesDetailsScalingFactor mul} if setlinewidth setgray stroke} def
/CrossHatchingNumRadialLines {TypeOfPagesBeingRendered /PlaceName eq {90} {CrossHatchingOutside {120} {180} ifelse} ifelse} bind def
/CrossHatchingCellArea 491.4517721766749 def  % On A4, at centre of circle furthest from corner that is CrossHatching centre, the near-rectangles have near golden ratio
/CrossHatchingCentreX /CenterSheetsSamePageOrdering def  % number /Name /Left /Center /Right /CenterSheetsSamePageOrdering
/CrossHatchingCentreY /Bottom def  % number /Name /Bottom /Middle /Top

/InlinePrefillWhite {CrossHatchingInside Spirals or} bind def
/InlineTitlesBlackWidth {InlineTitlesMaxNumberContours 1 gt {0.96} {1.44} ifelse} bind def  % Black isn't always black. Sometimes it's grey.
/InlineTitlesWhiteWidth {InlineTitlesBlackWidth 2 mul} bind def  % White isn't always white. Sometimes it's grey.
/InlineAbovetitlesBlackWidth {InlineTitlesBlackWidth 2 div} bind def  % Black isn't always black. Sometimes it's grey.
/InlineAbovetitlesWhiteWidth {InlineTitlesWhiteWidth 2 div} bind def  % White isn't always white. Sometimes it's grey.
/InlineBelowtitlesBlackWidth {InlineTitlesBlackWidth 2 div} bind def  % Black isn't always black. Sometimes it's grey.
/InlineBelowtitlesWhiteWidth {InlineTitlesWhiteWidth 2 div} bind def  % White isn't always white. Sometimes it's grey.
/InlineOvertitlesBlackWidth  {InlineTitlesBlackWidth 2 div} bind def  % Black isn't always black. Sometimes it's grey.
/InlineOvertitlesWhiteWidth  {InlineTitlesWhiteWidth 2 div} bind def  % White isn't always white. Sometimes it's grey.
% Inline...AttemptMinimiseNumContours is crushingly slow in Ghostscript, so when using online distillation.
% See http://www.ThePortForum.com/viewtopic.php?t=175&start=913
/InlineTitlesAttemptMinimiseNumContours {InlineTitlesMaxNumberContours 3 gt  IsDistiller and} bind def
/InlineAboveBelowOverAttemptMinimiseNumContours {InlineAbovetitlesMaxNumberContours 3 gt  InlineBelowtitlesMaxNumberContours 3 gt  InlineOvertitlesMaxNumberContours 3 gt  or or  IsDistiller and} bind def
/InlinePlaceNamesAttemptMinimiseNumContours {InlineTitlesMaxNumberContours 3 gt  IsDistiller and} bind def

/OutlineTitlesInnerWidthWhite 3.6 def  % Ignored if OutlineTitles is false
/OutlineTitlesInnerWidthBlack 0.3 def  % Ditto
/OutlineTitlesMultiplierWhite  5 sqrt 1 add 2 div  def  % Ditto
/OutlineTitlesMultiplierBlack 1 def  % Ditto
/OutlineTitlesMaxNum 96 def  % Ditto

/FillTextNumSpaces 2 def
/FillTextNumOutlines {TypeOfPagesBeingRendered /PlaceName eq {2} {2} ifelse} bind def
/FillTextMinFontSizeAbsolute 6 def
/FillTextMinFontSizeProportionLargestTitleAboveBelowOver 0.03333333 def
/FillTextAnglePlaceNames 30 def
/FillPrioritiseSmallFileSizeOverPortability true def

/DropletsPathLength 12 def
/DropletsAverageSeparation DropletsPathLength 2 mul def  % If <10 then far too crowded. And <4, such that there are >65k droplets on an A3, might cause stack overflow.
/DropletsAverageMaxTweakPlusMinus {DropletsAverageSeparation 0.25 mul} bind def
/DropletsOuterWidthEnd   4.32   def
/DropletsOuterWidthStart 0.48   def
/DropletsInnerWidthEnd   DropletsOuterWidthEnd 4 div def
/DropletsInnerWidthStart {DropletsInnerWidthEnd DropletsOuterWidthEnd sub DropletsOuterWidthStart add} bind def
/DropletsOuterGrayEnd    {DropletNum 4 mod 12 add 16 div} def
/DropletsOuterGrayStart  {DropletsOuterGrayEnd} def
/DropletsInnerGrayEnd    1      def
/DropletsInnerGrayStart  1      def
/DropletsPaintAtEnd {} def
/DropletsShowSaddlePoints  true  3 4 DropletsCharges length 1 sub {DropletsCharges exch get 0 ne {pop //false exit} if} for  def

/CircletextsMaxCopies {dup 32 gt {dup dup 4 mod sub} {65535} ifelse} bind def

/SideBySideGlassesTastingNotesWidthGutter 0 def  % 0 works well for small numbers of glasses
/SideBySideGlassesTastingNotesProportionPageGlasses 0.5 def

/BackgroundTextsFontSizeMax 9999 def
/BackgroundTextsGlassesSameSizeIfAllOf [ /SamePageOrdering /SamePaperSize /TextSameLength ] def  % /False /OnSheetWithSameNumberGlasses /RadiiShrunkToBeSame /OnSheetWithSameRadius /SamePaperSize /TextSameLength /SamePageOrdering
/BackgroundTextsGlassesVerticalMiddling /MatchSamePaperSize def  % /MatchNone /MatchSamePaperSize /MatchAll
/BackgroundTextsDecanterLabels /BackgroundTextsGlasses load def
/PrePourShowBackgroundTexts /BackgroundTextsGlasses load def

/WaterBoxesOverrideShowEverySheet true def
/WaterBoxesSizeMax 15 def
/WaterBoxesGapProportionSize 0.25 def
/WaterBoxesFormatStroke {stroke} def
/WaterBoxesShowLeft [ 0 1 GlassesOnSheets length 1 sub {<< exch /i exch >> begin true  0 1 i 1 sub {PageOrderingGlasses exch get PageOrderingGlasses i get eq {pop false exit} if} for end} for ] def
/WaterBoxesShowRight [ 0 1 GlassesOnSheets length 1 sub {<< exch /i exch >> begin true  i 1 add 1 GlassesOnSheets length 1 sub {PageOrderingGlasses exch get PageOrderingGlasses i get eq {pop false exit} if} for end} for ] def
/WaterBoxesShowTN [ 0 1 GlassesOnTastingNotePages length 1 sub {<< exch /i exch >> begin true PageOrderingTastingNotePages 0 i getinterval {PageOrderingTastingNotePages i get eq {pop false exit} if} forall end} for ] def

/NamesFontSizeMin 18 def
/NamesFontSizeMax 24 def

/DecanterLabelsPaperType {<< /TastingSheetNum 0 >> begin TastingNotesPaperType end} bind def  % /A4 /A3 /B4  /USL /USLegal /USL2
/DecanterLabelsOrientation /Automatic def  % of labels, not of paper. /Landscape /Portrait /Automatic

% GhostScript doesn't pickle settransfer; Preview doesn't see non-pickled settransfer. The bug is in Preview. https://groups.google.com/forum/#!topic/comp.lang.postscript/NJLAfvN_jwU
/TastingNotesCirclesBehind {IsDistiller  {GlassesNumCopies 1 ge} MightBeTrue and  BackgroundTextsTastingNotes not and  SideBySideGlassesTastingNotes not and} bind def
/TastingNotesCirclesBehindFitAndCentreInRow false def
/TastingNotesCirclesBehindFadingFactorIfAllBlack 0.125 def
/TastingNotesCirclesBehindFadingFactorIfAnyGrey  0.2 def
/TastingNotesCirclesBehindTopX    {[0  1  0  0.5  1  1  0.5  0.5  0] TastingSheetNum       9 mod get} bind def  % 0 to 1, this complication giving a nice variety
/TastingNotesCirclesBehindBottomX {[0  1  0  0.5  1  1  0.5  0.5  0] TastingSheetNum 1 add 9 mod get} bind def  % 0 to 1, this complication giving a nice variety
/TastingNotesOrientation /Portrait def  % /Landscape /Portrait
/TastingNotesColumnRelativeWidths [ 1 2 4 8 1 ] def
/TastingNotesColumnHeadingsFontSize 6 def
/TastingNotesColumnStrokeCode {0 setgray  0.06 setlinewidth  0 currentlinecap ne {0 setlinecap} if  [2.4 16.8] 0 setdash  stroke} def
/TastingNotesLineGap 2 def
/TastingNotesTitlesFontSizeMax 24 def
/TastingNotesSubtitleFontSizeProportionTitles 0.5 def
/TastingNotesReplaceNameWithPageNum false def
/TastingNotesPageNumFontSizeFactor 0.333333333 def

/PlaceNamesShowNameAsFooter [ NamesPlaceNames {/Names load ne} forall ] def
/PlaceNamesPaperType {<< /TastingSheetNum 0 >> begin TastingNotesPaperType end} bind def  % /A4 /A3 /B4  /USL /USLegal /USL2
/PlaceNamesOrientation /Landscape def  % /Landscape /Portrait
/PlaceNamesMaxFontSizeAbsolute 192 def
/PlaceNamesDetailsScalingFactor 5 sqrt 1 add 2 div def
/ColourSchemePlaceNames /Black def  % /MidGrey /Black

/PrePourReverseOrder true def
/PrePourCollate true def
/PrePourRemoveDuplicatesByWithinTitles true def
/PrePourSortByWithinTitles true def
/PrePourPaperType {<< /TastingSheetNum 0 >> begin TastingNotesPaperType end} bind def  % /A4 /A3 /B4  /USL /USLegal /USL2
/PrePourOrientation /Landscape def  % /Landscape /Portrait
/PrePourShowDroplets true def

/VoteRecorderNamesOrientation /Either def  % /Horizontal /Vertical /Either
/VoteRecorderShowTotalCol [ GlassesClusteredOnVoteRecorders length {true} repeat ] def  % Must be same length as GlassesClusteredOnVoteRecorders
/VoteRecorderPaperType {<< /TastingSheetNum 0 >> begin TastingNotesPaperType end} bind def
/VoteRecorderOrientation /Portrait def
/VoteRecorderTitlesFontSizeMax 24 def
/VoteRecorderSubtitleFontSizeProportionTitles /Automatic def
/VoteRecorderMonkeyWhenShowTotalRow true def

/GlassesClusteredOnDecantingNotes [ GlassesOnTastingNotePages ] def
/DecantingNotesPaperType /VoteRecorderPaperType load def
/DecantingNotesOrientation /Portrait def
/DecantingNotesTitlesFontSizeMax 24 def
/DecantingNotesSubtitleFontSizeProportionTitles VoteRecorderSubtitleFontSizeProportionTitles def

/AccountsExtraRows [ ()  VoteRecorderTotalRowTitle  () ] def
/AccountsColumnRelativeWidths [ 4 4 4 4 4 4 1 ] def
/AccountsColumnHeadingsFontSize 8 def
/AccountsPaperType /DecantingNotesPaperType load def
/AccountsOrientation /Portrait def

/GlassesClusteredOnCorkDisplay [ GlassesOnSheets ] def
/CorkDisplayMinWidth 216 def
/CorkDisplayMinHeight 216 def
/CorkDisplayPaperType /DecantingNotesPaperType load def

/NeckTagsMinWidth 250 def
/NeckTagsMaxWidth 300 def
/NeckTagsMinHeight 350 def
/NeckTagsMaxHeight 400 def
/NeckTagsHoleRadius {54  //false [Abovetitles Belowtitles Overtitles] {WithinTitles get (Magnum) eq or} forall Circlearrays WithinTitles get {(Magnum) eq {pop //true exit} if} forall {1.2 mul} if} bind def  % 19mm/23mm radius
/NeckTagsHoleLineWidth 0.12 def
/NeckTagsSpaceAboveHole 60 def
/NeckTagsSpaceAboveTitlesEtc 48 def
/NeckTagsSpaceBelowTitlesEtc 12 def
/NeckTagsShowDroplets false def
/NeckTagsShowBackgroundTexts true def
/NeckTagsShowOutlineTitles false def  % ignored if OutlineTitles is false
/NeckTagsShowCrossHatchingInside false def  % ignored if CrossHatchingInside is false
/NeckTagsPaperType /DecantingNotesPaperType load def

/DecanterLabelsShowOutlineTitles false def  % ignored if OutlineTitles is false
/DecanterLabelsShowCrossHatchingInside false def  % ignored if CrossHatchingInside is false

% Defaults:
% Type 0 = www.ryman.co.uk/0220013460/Product ;
% Type 1 = www.amazon.co.uk/exec/obidos/ASIN/B000SHP9OC/jdaw  www.avery.co.uk/avery/en_gb/Products/Labels/Labels-for-Letters-%26-Envelopes/White-Address-Labels/White-Mini-Inkjet-Labels_J8651_25.htm
/StickyLabelsPaperType {[/A4 /A4] StickyLabelsTypeThis get} bind def
/StickyLabelsByNameWhichReplaceCirclearrays {StickyLabelsWithPagePortraitNumRows StickyLabelsWithPagePortraitNumCols mul 24 gt} bind def
/StickyLabelsNamesChangeFaster {[false false] StickyLabelsTypeThis get} bind def
/StickyLabelsAvoidAcrossColumnsOrRows true def  % Ignored unless StickyLabelsByNameWhichReplaceCirclearrays
/StickyLabelsAvoidAcrossPages true def  % Ignored unless StickyLabelsByNameWhichReplaceCirclearrays
/StickyLabelsWithPagePortraitNumRows {[4 13] StickyLabelsTypeThis get} bind def
/StickyLabelsWithPagePortraitNumCols {[2 5] StickyLabelsTypeThis get} bind def
/StickyLabelsWithPagePortraitGapL 12 def
/StickyLabelsWithPagePortraitGapR 12 def
/StickyLabelsWithPagePortraitGapT {[36 31] StickyLabelsTypeThis get} bind def
/StickyLabelsWithPagePortraitGapB {[36 31] StickyLabelsTypeThis get} bind def
/StickyLabelsWithPagePortraitGapBetweenRows 0 def
/StickyLabelsWithPagePortraitGapBetweenCols 8 def
/StickyLabelsOrientation /Automatic def  % of labels, not of paper. /Landscape /Portrait /Automatic
/StickyLabelsColumnsChangeFaster {[true false] StickyLabelsTypeThis get} bind def
/StickyLabelsFirstPageStartPosition 0 def
/StickyLabelsPaddingWithPagePortraitTB {[12 6] StickyLabelsTypeThis get} bind def
/StickyLabelsPaddingWithPagePortraitRL {[6 3] StickyLabelsTypeThis get} bind def
/StickyLabelsShowBackgroundTexts {[true false] StickyLabelsTypeThis get} bind def
/StickyLabelsShowDroplets {[false false] StickyLabelsTypeThis get} bind def
/StickyLabelsShowCirclearraysInCircle {/StickyLabelsShowBackgroundTexts load exec GlassesNumCopies 1 ge and} bind def
/StickyLabelsReverseOrder false def
/StickyLabelsRemoveDuplicatesByWithinTitles true def
/StickyLabelsSortByWithinTitles true def

/ThePortForumIconColour false def

/PageOrderingVoteRecorder [ GlassesClusteredOnVoteRecorders length {PageOrderingTastingNotePages length 1 ge {PageOrderingTastingNotePages 0 get} {1} ifelse} repeat ] def
/PageOrderingDecantingNotes [ GlassesClusteredOnDecantingNotes length {PageOrderingTastingNotePages length 1 ge {PageOrderingTastingNotePages 0 get} {1} ifelse} repeat ] def
/PageOrderingAccounts [ PageOrderingVoteRecorder {counttomark 1 sub -1 1 {index 1 index eq {pop exit} if} for} forall ] def  % Removes duplicates
/PageOrderingCorkDisplay [ GlassesClusteredOnCorkDisplay length {PageOrderingGlasses length 1 ge {PageOrderingGlasses 0 get} {1} ifelse} repeat ] def
/PageOrderingNeckTags [ PageOrderingGlasses length {PageOrderingTastingNotePages length 1 ge {PageOrderingTastingNotePages 0 get} {1} ifelse} repeat ] def
/PageOrderingPrePourPages PageOrderingGlasses def  % Of length the same as GlassesOnSheets, not necessarily being of length PrePourNumCopies
/PageOrderingPlaceNames [ NamesPlaceNames length {100} repeat ] def  % Near end to facilitate advance folding
/PageOrderingDecanterLabels [ PageOrderingGlasses {200 add} forall ] def  % By default decanter-label pages appear together at the end, to facilitate advance manufacture
/PageOrderingStickyLabels [ GlassesOnSheets length {300} repeat ] def  % Of length the same as GlassesOnSheets, not necessarily being of length StickyLabelsNumCopies
/PageOrderingSections [] def  % Array of even length, alternately elements of the PageOrder...s, and compound strings

/MirrorPagesGlasses [ PageOrderingGlasses length {false} repeat ] def  % If printing to the reverse side of acetate, so that wine never causes ink to run
/MirrorPagesTastingNotePages [ PageOrderingTastingNotePages length {false} repeat ] def
/MirrorPagesVoteRecorder [ PageOrderingVoteRecorder length {false} repeat ] def
/MirrorPagesDecantingNotes [ PageOrderingDecantingNotes length {false} repeat ] def
/MirrorPagesAccounts [ PageOrderingAccounts length {false} repeat ] def
/MirrorPagesCorkDisplay [ PageOrderingCorkDisplay length {false} repeat ] def
/MirrorPagesNeckTags false def
/MirrorPagesPrePour [ PageOrderingPrePourPages length {false} repeat ] def
/MirrorPagesPlaceNames [ PageOrderingPlaceNames length {false} repeat ] def
/MirrorPagesDecanterLabels [ PageOrderingDecanterLabels length {false} repeat ] def
/MirrorPagesStickyLabels [ PageOrderingStickyLabels length {false} repeat ] def

/PagesToBeInserted false def
/PagesToBeInsertedBeforeInstances [ 0 ] def
/PagesToBeInsertedBeforeTypeOneOf [ [/VoteRecorder] ] def
/PagesToBeInsertedDests [ /FoodOrder_0 ] def
/PagesToBeInsertedNumPages [ 1 ] def
/PagesToBeInsertedDescriptions [ (Food order) ] def

/LogThisExtra () def
/LicensingAgreementTextPlacemats (This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International Licence.) def
/LicensingAgreementLinkPlacemats (http://creativecommons.org/licenses/by-sa/4.0/deed.en) def
/OutputLogToLog true def
/OutputLogToPage true def
/OutputLogToAnnotation OutputLogToPage not def
/PageLabelOverride false def  % E.g., {/Glasses TypeOfPagesBeingRendered eq}
/PageLabelOverrideWith {[(PageNum) ShownPages 5 string cvs]} def
/PrologueCode {} def  % Executed once, just before painting pages
/EpilogueCode {} def  % Executed once, just after painting pages
/EmptyGlassesPageAtStart false def
/EmptyGlassesPageOrientation /Portrait def
/TestingSuppressPageTypes [ ] def  % Useful value: [ /Glasses 1 /TastingNotes 1 /PlaceName 1 /PrePour 1 /StickyLabels 1 /VoteRecorder 1 /DecantingNotes 1 /CorkDisplay 1 /NeckTags 1 ]. Can also /DistillerLog without an integer.
/TestingMaxNumPagesToShow 2147483647 def  % maximum integer
/TestingShowThesePagesOnly null def   % Either null, in which case having no effect, or an array of integers. If making a PDF for insertion to another doc, perhaps also "/pdfmark {cleartomark} def".


% Adds extra space in the logical page around the usual layout. ...Glasses... for glasses pages; other for all others.
/OuterGlassesMarginL 0 def
/OuterGlassesMarginR 0 def
/OuterGlassesMarginT 0 def
/OuterGlassesMarginB 0 def
/OuterGlassesCropMarks true def
/OuterMarginL 0 def
/OuterMarginR 0 def
/OuterMarginT 0 def
/OuterMarginB 0 def

1 srand  % Change for different randomisation (1 is the starting value for both GhostScript and Adobe Distiller).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Parameters above here; code below. %% Unless you are Julian D. A. Wiseman himself, don't touch anything below here. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% OVERVIEW

% Navigation was always a difficult art, / Though with only one ship and one bell: / And he feared he must really decline, for his part, / Undertaking another as well. -- The Hunting of the Snark
% Use the parameters to navigate the code. Choose a parameter that would be used in the code of interest, and command/control-F.

% Code exists in effectively four layers.

% 1. Innermost are various routines, some dedicated to this purpose, others more general in nature.
% Those of a general nature work with compound strings (being a string, a glyph, an array of compound strings,
% or within some limitations, code). Most of the re-usable code is described in
% www.jdawiseman.com/papers/placemat/postscript_routines.html

% 2. These are routines and linking code are bundled togther in various forms. A good PS->PDF converter
% uses forms to re-use various picture fragments, reducing distil time and the size of the resultant PDF.

% 3. The execform commands calling these forms lie in the ..InnerLoop code fragments.
% These are not self-contained bits of tidy code: they are very much inline code fragments.

% 4. These two are then called from the outermost substantial code, which is a nested loop, calling by
% page-ordering parameter, within that by paper size, and within that by Name.

% Slightly separate from this hierarchy are various pieces of debugging code. The operators GSave and
% GRestore keep track of the size of the graphics stack, just to allow post-execution verification
% that nothing remains on it. OutputToLog outputs stuff according to OutputLogToLog and OutputLogToPage.

/usertimeStart usertime def
/SoftwareVersionDateTimeAdobeFormat (D:202102131515) def
/DeBugLevel 65535 def  % Smaller numbers are smaller more-core routines.

% Checks whether initial dictionary sizes are sufficient. It is neater that they are, even though redundant.
% /dict {dup 1 add dict dup 3 -1 roll /DictionaryOriginalSize exch put} bind def
% /end {currentdict /DictionaryOriginalSize known {DictionaryOriginalSize currentdict length 1 sub lt {() = TypeOfPagesBeingRendered = DictionaryOriginalSize = currentdict length 1 sub = (###) =} if} if end} bind def

/RandMax 2147483647 def  % 2^31-1, page 637 of PLRM3
/HalfRandMax RandMax 2 div def
/IntegerMax  2147483647 def  % 2^31-1, page 739 of PLRM3
/Pi          3.14159265358979323846 def
/TwoPi       6.2831853071795864769 def
/HalfPi      1.57079632679489661923 def
/Sqrt2       1.4142135623730950488 def  % SqrtHalf Sqrt2 mul  is not necessarily identical to 1.
/Sqrt3       1.7320508075688772935 def
/Sqrt5       2.2360679774997896964 def
/SqrtSqrt2   1.1892071150027210667 def
/SqrtSqrt12  1.8612097182041991979 def
/SqrtHalf    0.7071067811865475244 def  % SqrtHalf Sqrt2 mul  is not necessarily identical to 1.
/SqrtSixth   0.4082482904638630163662 def
/Sin15       0.2588190451025207623488988376 def  % 3 sqrt 1 sub 8 sqrt div
/Cos15       0.9659258262890682867497431997 def  % 3 sqrt 1 add 8 sqrt div
/Cos01Sqd    0.999695413509547865 def  % N[Cos[1 Degree]^2, 18]
/GoldenRatio 1.6180339887498948482 def  % 5 sqrt 1 add 2 div
/DegreeInRadians  0.0174532925199432957692369 def  % pi / 180
/ArcCosMinusOneThird 109.471220634490691369 def  % In degrees
/ArcTanOneQuarter    14.03624346792647858289 def  % In degrees
/ArcTanFiveEighths   32.00538320808349556079 def  % In degrees
/Infinity 32767 def  % = 2^15-1, which in points ~= 11559mm, bigger than the ~7184mm diagonal of the 200"x200" largest allowed PDF page. Can be 8th-powered without overflow, as max float = 2 23 exp 1 sub 2 104 exp mul ~= 1.7*10^38.
/InfinityNeg Infinity neg def
/PrinterEpsilon 0.01 def  % 0.01 points is half a pixel at 3600 dpi, and less at less. Also 163.84 times bigger than minimum single-precision increment over 17" = 1224pt.
/Epsilon 0.00005 def  % 23-bit mantissa is one part in 8,388,608. This is one part in 20k, so about 419 times the single-precision minimum.
/AsciiTab (\t) 0 get def   /AsciiNewline (\n) 0 get def   /AsciiSpace ( ) 0 get def

/OneThird 1 3 div def   /Cbrt {dup 0 lt {neg //OneThird exp neg} {//OneThird exp} ifelse} bind def

PrinterEpsilon setflat  % According to PLRM3 p669, automatically substituted with 0.2, being the smallest allowed value. Presumably from an era of lower resolution printers.

/TypeOfPagesBeingRendered /Multiple def  % Always being one of /Multiple /Glasses /TastingNotes /PlaceName /PrePour /VoteRecorder /DecantingNotes /Accounts /CorkDisplay /NeckTags /DecanterLabels /StickyLabels /DistillerLog
/UserScratchDict << >> def  % Not 0 dict, to avoid addition of /DictionaryOriginalSize
/execU {    //UserScratchDict begin exec end} bind def
/GetEU {get //UserScratchDict begin exec end} bind def
/WithinPage-WithinTitles-def {/WithinPage exch def   /WithinTitles //GlassesOnSheets SheetNum get //UserScratchDict begin exec WithinPage get exec end def} bind def

/OutputLog 127 array def  /OutputtedToLog 0 def
% If taking this because other subroutines are being copied, perhaps replace with  /OutputToLog {=} bind def
/OutputToLog
{
	4 dict begin
	/Output exch def   /ShowBlankLine //false def
	OutputLogToLog
	{
		/Output load type /stringtype eq
		{
			/i 0 def  /j -1 def
			0 1 Output length 1 sub
			{
				/j exch def
				Output j get //AsciiNewline eq {Output i j i sub getinterval dup length 0 gt /ShowBlankLine exch def = /i j 1 add def} if
			} for
			j i sub 1 add 0 ge {Output i j i sub 1 add getinterval dup length 0 gt /ShowBlankLine exch def =} if   ShowBlankLine {() =} if
		} {/Output load ==} ifelse flush  % ... /stringtype ...
	} if  % OutputLogToLog
	OutputtedToLog OutputLog length ge {/OutputLog  OutputLog length 2 mul 1 add dup 65535 le {array dup  0  OutputLog  putinterval  store} {pop pop} ifelse} if
	OutputtedToLog OutputLog length lt {OutputLog OutputtedToLog /Output load  put  /OutputtedToLog dup load 1 add store} if
	end
} bind def  % /OutputToLog


/SuppressANN   % https://groups.google.com/forum/#!topic/comp.lang.postscript/8V9XFDwuLPg
/currentdistillerparams where
{
	pop currentdistillerparams /CheckCompliance 2 copy known {get //false exch {dup /PDFX1a:2001 eq exch /PDFX3:2002 eq or or} forall} {pop pop //false} ifelse
	currentdistillerparams /PDFX1aCheck 2 copy known {get or} {pop pop} ifelse
	currentdistillerparams /PDFX3Check 2 copy known {get or} {pop pop} ifelse
} {false} ifelse  def  % /SuppressANN
/pdfmark where
{
	false  % Use testing routine? In user-distributed code should be false.
		{pop /pdfmark {dup == pdfmark} bind def}
		{pop /pdfmark {dup /ANN eq //SuppressANN and {cleartomark} {pdfmark} ifelse} bind def}
	ifelse  % Use testing routine
} {/globaldict where {pop globaldict} {userdict} ifelse  /pdfmark /cleartomark load put} ifelse  % /pdfmark where

% https://groups.google.com/forum/#!topic/comp.lang.postscript/DWky6YmjQQI
/NullDevices where {pop} {/NullDevices 31 array def  NullDevices 0 0 put} ifelse  % 5 would be enough. Done here to allow immediate execution.
/CountGraphicsStack where {pop}
{
	/CountGraphicsStack 0 def
	/GSave {/CountGraphicsStack CountGraphicsStack 1 add store  //NullDevices CountGraphicsStack 2 copy 1 sub get put  gsave} bind def
	/GRestore {/CountGraphicsStack CountGraphicsStack 1 sub store  grestore} bind def
	/NullDevice {//NullDevices CountGraphicsStack 2 copy get 1 add put  nulldevice} bind def
} ifelse  % /CountGraphicsStack where
/CountClipStack where {pop}
{
	/CountClipStack 0 def
	/ClipSave {/CountClipStack CountClipStack 1 add store  clipsave} bind def
	/ClipRestore {/CountClipStack CountClipStack 1 sub store  cliprestore} bind def
} ifelse  % /CountClipStack where

/Stopped {countdictstack exch /StoppedStackMarker exch stopped
	{{/StoppedStackMarker eq {exit} if} loop  countdictstack sub neg {end} repeat  //true}
	{count 1 sub 0 exch 1 exch {dup 1 add index /StoppedStackMarker eq {exit} {pop} ifelse} for  2 add -2 roll pop pop  //false}
ifelse} bind def


/ShellSortGaps
[
	% PostScript's max array size usually 65535, but an implementation could allow longer.
	% Each is either 4*__-_, or 5*__-2*_, in manner that keeps ratio bounded, and where that ambiguous, preferring coprimality.
	1 2 3 5 7 11 17 27 41 67 97 141 203 299 417 661 1007 1637 2391 3403 5149 8463 12133 18049 24567 41111 57157 91241 137387 227577 321971 493943 793941 1181831 1606043
	2697069 3727103 6031139 8877273 12401149 19584067 30020529 48315739 71766377 98045941 162740003 229443761 354812493 562962551 856287421 1395562783 2029586901
] readonly def
/ShellSortGapsLength1Sub ShellSortGaps length 1 sub def
% Immediate dependencies: DeBugLevel; ShellSortGaps; ShellSortGapsLength1Sub.
% [ thing thing ... ] {comparison code that takes two things and returns a boolean} ShellSort -
% Sorts array such that for elements i and i+1 the comparison code returns true (or equal).
% E.g.,   [1 2 3 4 5 2. 3. 4. 5. 3 4 5 4. 5. 5] dup {le} ShellSort ==   outputs   [1 2 2.0 3 3 3.0 4 4.0 4 4.0 5 5 5.0 5.0 5]
% Based on https://www.tutorialspoint.com/data_structures_algorithms/shell_sort_algorithm.htm
/ShellSort
{
	DeBugLevel 25 le {(+ShellSort) OutputToLog} if
	8 dict begin
	/ComparisonCode exch def
	/Things exch def
	/n Things length def
	n 2 ge
	{
		1  1  //ShellSortGapsLength1Sub
		{
			/gapNum exch def
			//ShellSortGaps gapNum get 2 mul n gt {/gapNum gapNum 1 sub def exit} if
		} for  % gapNum up

		gapNum  -1  0
		{
			//ShellSortGaps exch get /gap exch def
			gap  1  n 1 sub
			{
				/outer exch def
				/valueToInsert Things outer get def
				/inner outer def
				{
					inner gap lt {exit} if
					Things inner gap sub get  valueToInsert  ComparisonCode  {exit} if
					Things  inner  Things inner gap sub get  put
					/inner inner gap sub def
				} loop  % inner
				Things inner valueToInsert put
			} for  % outer
		} for  % gap down
	} if  % n 2 ge
	end
	DeBugLevel 25 le {(-ShellSort) OutputToLog} if
} bind def  % /ShellSort
currentdict /ShellSortGaps undef
currentdict /ShellSortGapsLength1Subs undef


% Immediate dependencies: DeBugLevel; OutputToLog.
% [ c0 c1 ... ] LowerLimit UpperLimit Tolerance  PolynomialRoot  root true|false
/PolynomialRoot
{
	DeBugLevel 5 le {(+PolynomialRoot) OutputToLog} if
	10 dict begin
	/Tolerance exch def
	/UpperX exch def
	/LowerX exch def
	/Coeffs exch def

	//false
	/Alternation false def
	1 {
		/LowerY  {{0  Coeffs length 1 sub -1 0 {exch LowerX mul exch Coeffs exch get add} for} Stopped {/LowerX LowerX 0.95 mul                     def} {exit} ifelse} loop  def  LowerY 0 eq {pop LowerX //true exit} if
		/UpperY  {{0  Coeffs length 1 sub -1 0 {exch UpperX mul exch Coeffs exch get add} for} Stopped {/UpperX UpperX 0.99 mul LowerX 0.01 mul add def} {exit} ifelse} loop  def  UpperY 0 eq {pop UpperX //true exit} if
		LowerY 0 le UpperY 0 ge and  LowerY 0 ge UpperY 0 le and  or  % Multiplication before testing would risk an overflow error
		{
			{
				/X  LowerY dup UpperY sub div   Alternation {dup 0.143 lt {pop 0.143} {dup 0.857 gt {pop 0.857} if} ifelse} if   UpperX LowerX sub  mul LowerX add  def  % Constant good enough but approximate. Not known whether one/six seventh(s).
				/StepsRemaining   UpperX LowerX sub abs Tolerance le {StepsRemaining 1 sub} {8} ifelse  def  % 8 is too many. PostScript has a 23-bit mantissa, and this either gains 3 bits, or doubles bits, every loop.
				StepsRemaining 0 le  {pop X //true exit} if

				/Y 0  Coeffs length 1 sub -1 0 {exch X mul exch Coeffs exch get add} for  def
				Y 0 eq {pop X //true exit} if
				Y 0 gt LowerY 0 gt and  Y 0 lt LowerY 0 lt and  or {/LowerX /LowerY} {/UpperX /UpperY} ifelse Y def X def
				/Alternation Alternation not def
			} loop
		} if  % LowerY UpperY different sides of 0
	} repeat  % 1
	end
	DeBugLevel 5 le {(-PolynomialRoot) OutputToLog} if
} bind def  % PolynomialRoot

% Immediate dependencies: DeBugLevel; OutputToLog; IntegerMax; OneThird; Cbrt; PolynomialRoot; ShellSort; Stopped.
% [ c0 c1 ... ] LimitLower StrictLower LimitUpper StrictUpper Tolerance  PolynomialRoots  [ in-range values of x ]
% For polynomials of degree up to cubic, all roots found analytically, and Tolerance ignored.
% Of higher degree: to within Tolerance; repeated roots can be problematic; out-of-range errors possible as PostScript's maximum float ~= 1.7 * 10^38.
/PolynomialRoots
{
	DeBugLevel 5 le {(+PolynomialRoots) OutputToLog} if
	25 dict begin
	/Tolerance exch def
	/StrictUpper exch def  /LimitUpper exch def
	/StrictLower exch def  /LimitLower exch def
	/Coeffs exch def

	Coeffs length 1 sub  -1  0 {Coeffs exch get 0 eq {/Coeffs Coeffs dup length 1 sub 0 exch getinterval def} {exit} ifelse} for  % Removes top powers with 0 coefficient.
	Coeffs length 1 ge
	{
		/CoeffsScaled   0 Coeffs {abs 2 copy lt {exch} if pop} forall  dup //IntegerMax gt {/MaxAbs exch def  [ Coeffs {MaxAbs div} forall ] } {pop Coeffs} ifelse   def  % Large coeffs risk overflow: rescale; don't add another machine-precision error to small.
		0  1  CoeffsScaled length 1 sub {/ExtraZeroes exch def  CoeffsScaled ExtraZeroes get 0 ne {exit} if} for  ExtraZeroes 0 gt {/CoeffsScaled CoeffsScaled ExtraZeroes CoeffsScaled length ExtraZeroes sub getinterval def} if  % Counts and remove roots of 0.

		1 {
			//true  1  2  CoeffsScaled length 1 sub {CoeffsScaled exch get 0 ne {pop //false exit} if} for  % Odd coefficients all zero?
			{
				[
					[ 0  2  CoeffsScaled length 1 sub {CoeffsScaled exch get} for ]
					LimitLower dup mul LimitUpper dup mul 2 copy gt {exch} if  LimitLower LimitUpper mul 0 le {exch pop 0 exch} if  //false exch //false  % Not strict as later sqrt will introduce machine-precision error. Filtered later.
					Tolerance 16 div   PolynomialRoots  {sqrt dup neg} forall  % Tolerance not correct here because roots are squares.
				] exit
			} if  % Odd coefficients all zero?

			CoeffsScaled length 4 gt
			{
				/DerivCoeffs [1 1 CoeffsScaled length 1 sub {dup CoeffsScaled exch get mul} for] def
				/DerivRoots  DerivCoeffs LimitLower //true LimitUpper //true Tolerance  PolynomialRoots  dup {le} ShellSort  def  % Strict because test bounds anyway.
				[
					-1  1  DerivRoots length 1 sub
					{
						/i exch def
						/ThisLower i 0                       ge {DerivRoots i       get} {LimitLower} ifelse def
						/ThisUpper i DerivRoots length 2 sub le {DerivRoots i 1 add get} {LimitUpper} ifelse def
						CoeffsScaled ThisLower ThisUpper Tolerance PolynomialRoot
						i 0 ge  and {dup ThisLower le {pop} if} if
					} for  % i
				] exit
			} if  % CoeffsScaled length 4 gt

			% Otherwise cubic or shorter
			[
				/c0 CoeffsScaled length 0 gt {CoeffsScaled 0 get} {0} ifelse def
				/c1 CoeffsScaled length 1 gt {CoeffsScaled 1 get} {0} ifelse def
				/c2 CoeffsScaled length 2 gt {CoeffsScaled 2 get} {0} ifelse def
				/c3 CoeffsScaled length 3 gt {CoeffsScaled 3 get} {0} ifelse def
				c3 abs 1e15 lt dup {pop c0 abs c1 abs c2 abs 2 {2 copy lt {exch} if pop} repeat  c3 abs 1e15 mul  gt} if  % c3 ~= 0?
				{
					% So c3 is 0 or almost 0.
					c2 0 eq
					{
						c1 0 ne {c0 c1 div neg} if
					}{
						/determ c1 c1 mul c2 c0 mul 4 mul sub def
						determ 0 ge
						{
							c1 -2 c2 mul div  determ sqrt 2 c2 mul div   2 copy add 3 1 roll sub
						}{
							% Single-precision limitations can make determ appear to be negative. So check for roots near '-b/2a'. We know 'a' non-zero.
							[ c0 c1 c2 ]  c1 -2 div c2 div  dup  c1 dup mul c2 c0 mul abs 4 mul add //Epsilon mul 2 mul sqrt   4 copy
							sub exch  0  PolynomialRoot {5 1 roll} if
							add       0  PolynomialRoot pop
						} ifelse  % determ 0 ge
					} ifelse  % c2 0 eq
				}{
					% So c3 is materially non-zero.
					/f c1 c3 div  c2 c3 div dup mul 3 div  sub def
					/g c2 c3 div dup dup mul mul 2 mul  9 c1 c3 div mul c2 c3 div mul  sub 27 div  c0 c3 div add def
					/h g g mul 4 div  f f f mul mul 27 div  add def

					h 0 ge
					{
						f 0 eq  g 0 eq  and
						{
							c0 c3 div  Cbrt neg dup dup
						}{
							g -2 div  h sqrt  2 copy
							add Cbrt  3 1 roll   sub Cbrt  add
							c2 c3 3 mul div sub
						} ifelse % f 0 eq  g 0 eq  h 0 eq  and and
					}{
						/i f -3 div dup sqrt mul def
						/j i //OneThird exp  def
						/k  g  i i mul 4 mul g g mul sub sqrt  atan  90 add def
						/m  k 3 div cos  def
						/n  1 m m mul sub 3 mul sqrt def
						j m mul 2 mul  c2 c3 3 mul div  sub
						m n add j mul neg  c2 c3 3 mul div  sub
						m n sub j mul neg  c2 c3 3 mul div  sub
					} ifelse  % h 0 ge
				} ifelse  % c3 is within a machine precision of zero
			] exit
		} repeat  % 1

		[  % Polish with at most a dozen steps of Newton Raphson, then check limits. For precision polish with Coeffs, not CoeffsScaled.
			exch
			{
				/X exch def
				/Y 0  Coeffs length 1 sub -1 0 {exch X mul exch Coeffs exch get add} for  def
				Y 0 ne {12} {0} ifelse
				{
					/Deriv 0  Coeffs length 1 sub -1 1 {dup 3 -1 roll X mul 3 1 roll Coeffs exch get mul add} for  def
					Deriv abs 0 gt
					{
						/NewX X Y Deriv div sub def   NewX X eq {exit} if
						/NewY 0  Coeffs length 1 sub -1 0 {exch NewX mul exch Coeffs exch get add} for  def  NewY 0 eq {/X NewX def exit} if
						NewY abs Y abs lt {/X NewX store /Y NewY store} {exit} ifelse
					} {exit} ifelse  % Deriv abs 0 gt
				} repeat

				X LimitUpper StrictUpper {lt} {le} ifelse  X LimitLower StrictLower {gt} {ge} ifelse  and {X} if
			} forall
			LimitLower 0 StrictLower {lt} {le} ifelse LimitUpper 0 StrictUpper {gt} {ge} ifelse and {ExtraZeroes {0} repeat} if
		]
	} {[]} ifelse  % Coeffs length 1 ge
	end
	DeBugLevel 5 le {(-PolynomialRoots) OutputToLog} if
} bind def  % /PolynomialRoots

% string string  Concatenate  string
/Concatenate
{
	2 copy length exch length dup 3 1 roll add
	dup 65535 le
		{string dup dup 5 3 roll exch putinterval 3 -1 roll 0 exch putinterval}
		{pop exch pop dup 65532 le {dup 3 add string dup dup 4 -1 roll (...) putinterval 0 4 -1 roll putinterval} {pop} ifelse}
	ifelse
} bind def

% Immediate dependencies: ToString.
% mark string|number|other ... string|number|other  ConcatenateToMark  string
/ConcatenateToMark
{
	4 dict begin
	counttomark /ctm exch def  /n 0 def
	ctm {ToString  dup length n add /n exch def  ctm 1 roll} repeat
	/p 0 def  /s n 65535 2 copy gt {exch} if pop string def
	ctm  -1  0
	{
		dup 0 gt
		{
			-1 roll   dup length p add  65532 le
				{s exch p exch dup length p add /p exch def putinterval}
				{s exch p exch 0 65532 p sub getinterval putinterval  s 65532 (...) putinterval  cleartomark  s  exit}
			ifelse  % too long
		} {pop pop s} ifelse
	} for
	end
} bind def  % /ConcatenateToMark

% thing DepthOverWhichArraysAndDictsSeparatedWithNewlines ShowStringBrackets ThingToDebugText  -
/ThingToDebugText {12  ThingToDebugTextRecursive} bind def

% Thing DepthOverWhichArraysAndDictsSeparatedWithNewlines ShowStringBrackets DepthMax ThingToDebugTextRecursive  -
/ThingToDebugTextRecursive
{
	6 dict begin
	/DepthMax exch def
	/ShowStringBrackets exch def
	/DepthLines exch def
	/Thing exch def
	/Separator ( ) def   DepthLines 0 gt {Separator 0 12 put} if

	DepthMax 0 ge
	{
		1 {
			/Thing load dup xcheck  exch cvlit type /arraytype eq  and
			{
				mark ({ ) /Thing load cvlit {DepthLines ShowStringBrackets DepthMax 1 sub  ThingToDebugTextRecursive} forall (} ) ConcatenateToMark % use same DepthLines
				exit
			} if  % xcheck and array

			/Thing load type /operatortype eq
			{
				/Thing load cvlit 127 string cvs ( ) Concatenate
				exit
			} if  % /operatortype

			/Thing load dup xcheck  exch cvlit type /nametype eq  and
			{
				/Thing load cvlit 127 string cvs ( ) Concatenate
				exit
			} if  % /operatortype

			/Thing load type /nametype eq
			{
				/Thing load 127 string cvs ( ) Concatenate dup 0 1 getinterval (/) ne {(/) exch Concatenate} if
				exit
			} if  % /nametype

			/Thing load type /stringtype eq
			{
				/Thing load rcheck
				{
					mark ShowStringBrackets {(\() /Thing load (\) )} {/Thing load ( )} ifelse ConcatenateToMark exit
				}
				{(--string--)} ifelse  % /Thing load rcheck
			} if  % /stringtype

			/Thing load type dup /arraytype eq exch /packedarraytype eq  or
			{
				/Thing load rcheck
				{
					mark ([) Separator /Thing load {DepthLines 0 gt {DepthLines 1 sub} {0} ifelse ShowStringBrackets DepthMax 1 sub  ThingToDebugTextRecursive  DepthLines 0 gt {Separator} if} forall (]) Separator ConcatenateToMark
				}{
					/Thing load type /arraytype eq {(--array--)} {(--packedarray--)} ifelse
				} ifelse  % /Thing load rcheck
				exit
			} if  % /arraytype /packedarraytype

			/Thing load type /dicttype eq
			{
				/Thing load rcheck
				{
					mark (<) Separator /Thing load {pop DepthLines 0 gt {DepthLines 1 sub} {0} ifelse ShowStringBrackets DepthMax 1 sub  ThingToDebugTextRecursive DepthLines 0 gt {Separator} if} forall (>) Separator ConcatenateToMark
				}
				{(--dict-- )} ifelse  % /Thing load rcheck
				exit
			} if  % /dicttype

			/Thing load type /booleantype eq {/Thing load {(true )} {(false )} ifelse exit} if

			/Thing load type dup /integertype eq exch /realtype eq  or
			{
				/Thing load 16 string cvs ( ) Concatenate
				exit
			} if  % /integertype /realtype

			/Thing load type /marktype eq {(mark ) exit} if  % /marktype

			/Thing load type /nulltype eq {(null ) exit} if
			/Thing load type /filetype eq {(--file-- ) exit} if
			/Thing load type /fonttype eq {(--font-- ) exit} if
			/Thing load type /gstatetype eq {(--gstate-- ) exit} if
			/Thing load type /savetype eq {(--save-- ) exit} if

			% otherwise
			mark (--) /Thing load type 127 string cvs (-- ) ConcatenateToMark exit
		} repeat  % 1
	} {( ... )} ifelse  % DepthMax 0 ge
	end
} bind def  % /ThingToDebugTextRecursive

/ToString
{
	1 dict begin  dup type cvlit /Type exch def
	1 {
		Type /integertype  eq {11 string cvs exit} if
		Type /realtype     eq {16 string cvs exit} if
		Type /nametype     eq {dup length string cvs exit} if
		Type /stringtype   eq {exit} if
		Type /booleantype  eq {5 string cvs exit} if
		Type /operatortype eq {127 string cvs exit} if
		Type /marktype     eq {pop (mark) exit} if
		Type /nulltype     eq {pop (null) exit} if
		0 //true ThingToDebugText  % fall-back
	} repeat  end
} bind def  % /ToString

% Immediate dependencies: ConcatenateToMark.
% num int  FormatDecimalPlaces  string
/FormatDecimalPlaces
{
	3 dict begin
	/dp exch def
	/num exch def
	dp 0 gt
	{
		10 dp exp dup num mul round exch div  15 string cvs
		0 1 dp {/i exch def dup dup length 1 sub i sub 1 getinterval (.) eq {exit} if} for  i dp lt {mark exch dp i sub {(0)} repeat ConcatenateToMark} if
	}{
		10 dp neg exp cvi dup num exch div round cvi exch mul  15 string cvs
	} ifelse  % dp 0 gt
	end
} bind def  % FormatDecimalPlaces

/TruncateTo255 {dup length 255 gt {0 254 getinterval (\203) Concatenate} if} bind def

% name|code  WatchExpression  -
/WatchExpression
{
	1 dict begin   /param exch def  mark  /param load ToString
	/param load dup type /nametype eq exch xcheck or {(   =   )  param /param load type /nametype eq {cvx exec} if} {(WatchExpression: ) exch} ifelse   ConcatenateToMark  OutputToLog  end
} bind def  % /WatchExpression

/WatchExpressions
{
	1 dict begin   mark exch   () exch
	{
		/param exch def   /param load ToString
		/param load dup type /nametype eq exch xcheck or {(   =   )  param /param load type /nametype eq {cvx exec} if} {(WatchExpression: ) exch} ifelse  (\n)
	} forall
	pop ConcatenateToMark  OutputToLog  end
} bind def  % WatchExpressions, plural

% array, perhaps nested  AllEqual, returning either  false  or  value true
/AllEqual
{
	3 dict begin
	/ValueAssigned //false def
	/ValuesAllEqual //true def
	/Value //null def
	AllEqualRec
	ValuesAllEqual ValueAssigned and {/Value load //true} {//false} ifelse
	end
} bind def  % /AllEqual

/AllEqualRec
{
	ValuesAllEqual
	{
		1 dict begin
		/param exch def
		/param load dup xcheck not exch type /arraytype eq and
		{
			param {AllEqualRec  ValuesAllEqual not {exit} if} forall
		}{
			ValueAssigned
				{/Value load /param load ne {/ValuesAllEqual //false store} if}
				{/Value /param load store  /ValueAssigned //true store}
			ifelse  % ValueAssigned
		} ifelse  % ... xcheck not ... /arraytype
		end
	} {pop} ifelse  % ValuesAllEqual
} bind def  % /AllEqualRec

/SizeArrayOutput {mark 3 1 roll dup LengthCompoundObject 1 gt {dup AllEqual} {//false} ifelse {exch pop (, all of them)} {0 //false ThingToDebugText} ifelse ConcatenateToMark} bind def

/GlyphToASCII <<
	/adieresis (ae)  /Adieresis (Ae)  /odieresis (oe)  /Odieresis (Oe)  /udieresis (ue)  /Udieresis (Ue)
	/aring (aa)  /Aring (Aa)  /oslash (oe)  /Oslash (Oe) /scaron (sh)  /Scaron (Sh) /zcaron (zh)  /Zcaron (Zh)
	/quotedbl    (\")  /quotedblleft 1 index  /quotedblright 1 index  /second 1 index
	/quotesingle (\')  /quoteleft    1 index  /quoteright    1 index  /minute 1 index
	/question (?)  /questiondown (?)  /exclam (!)  /exclamdown (!)
	/less (<)  /greater (>)  /lessequal (<=)  /greaterequal (>=)  /approxequal (=)  /multiply (*)  /divide (/)  /plus (+)  /fraction (/)
	/dagger (+)  /daggerdbl (++)  /lozenge (<>)  /bullet (O)
	/bar (|)  /verticalbar (|)  /brokenbar (|)  /periodcentered (.)
	/club (Club)  /diamond (Diamond)  /heart (Heart)  /spade (Spade)
	/sterling (GBP)  /dollar ($)  /Euro (EUR)  /euro 1 index  /yen (Y)  % last can be JPY or CNY
	/ellipsis (...)  /emdash (--)  /endash (-)  /minus (-)
	/eth (d)  /Eth (D)  /dotlessi (i)
	/oneeighth ( 1/8 )  /onequarter ( 1/4 )  /onethird ( 1/3 )  /threeeighths ( 3/8 )  /onehalf  ( 1/2 )  /fiveeighths ( 5/8 )  /twothirds ( 2/3 )  /threequarters ( 3/4 )  /seveneighths ( 7/8 )
	/registered (\(R\))  /trademark  (\(TM\))
	/arrowup (^)  /arrowdown (\\\/)  /arrowleft (<--)  /arrowright (-->)  /arrowboth (<-->)
	/zerosuperior (^0)  /onesuperior (^1)  /twosuperior (^2)  /threesuperior (^3)  /foursuperior (^4)  /fivesuperior (^5)  /sixsuperior (^6)  /sevensuperior (^7)  /eightsuperior (^8)  /ninesuperior (^9)
	/zeroinferior (_0)  /oneinferior (_1)  /twoinferior (_2)  /threeinferior (_3)  /fourinferior (_4)  /fiveinferior (_5)  /sixinferior (_6)  /seveninferior (_7)  /eightinferior (_8)  /nineinferior (_9)
	/a (a)  /b (b)  /c (c)  /d (d)  /e (e)  /f (f)  /g (g)  /h (h)  /i (i)  /j (j)  /k (k)  /l (l)  /m (m)  /n (n)  /o (o)  /p (p)  /q (q)  /r (r)  /s (s)  /t (t)  /u (u)  /v (v)  /w (w)  /x (x)  /y (y)  /z (z)
	/A (A)  /B (B)  /C (C)  /D (D)  /E (E)  /F (F)  /G (G)  /H (H)  /I (I)  /J (J)  /K (K)  /L (L)  /M (M)  /N (N)  /O (O)  /P (P)  /Q (Q)  /R (R)  /S (S)  /T (T)  /U (U)  /V (V)  /W (W)  /X (X)  /Y (Y)  /Z (Z)
	/zero (0)  /one (1)  /two (2)  /three (3)  /four (4)  /five (5)  /six (6)  /seven (7)  /eight (8)  /nine (9)
	/parenleft (\()  /parenright (\))  /bracketleft (\[)  /bracketright (\])   /braceleft (\{)  /braceright (\})  /comma (,)  /semicolon (;)  /colon (:)  /period (.)
	/equal (=)  /asterisk (*)  /hyphen (-)  /percent (\%)  /asciicircum (^)  /ampersand (&)  /slash (\/)  /backslash (\\)  /grave (`)  /numbersign (#)  /at (@)
	/uni1D00 (A)  /uni0299 (B)  /uni1D04 (C)  /uni1D05 (D)  /uni1D07 (E)  /uniA730 (F)  /uni0262 (G)  /uni029C (H)  /uni026A (I)  /uni1D0A (J)  /uni1D0B (K)  /uni029F (L)  /uni1D0D (M)
	/uni0274 (N)  /uni1D0F (O)  /uni1D18 (P)  /uni0280 (R)  /uniA731 (S)  /uni1D1B (T)  /uni1D1C (U)  /uni1D20 (V)  /uni1D21 (W)  /uni028F (Y)  /uni1D22 (Z)  /uni1D01  (AE)  /uni0276  (OE)
	/uni2626 (Orthodox cross)  /uni2628 (Lorraine cross)  /uni2629 (Jerusalem cross)  /uni2670 (West Syriac cross)  /uni2671 (East Syriac cross)  /uni2720 (Maltese cross)  % These few lines best in font /Menlo-Regular or /Menlo-Bold
	/uni263F (Mercury)  /uni2640 (Venus)  /uni2641 (Earth)  /uni2642 (Mars)  /uni2643 (Jupiter)  /uni2644 (Saturn)  /uni2645 (Uranus)  /uni2646 (Neptune)  /uni2647 (Pluto)
	/uni2648 (Aries)  /uni2649 (Taurus)    /uni264A (Gemini)       /uni264B (Cancer)     /uni264C (Leo)       /uni264D (Virgo)
	/uni264E (Libra)  /uni264F (Scorpius)  /uni2650 (Sagittarius)  /uni2651 (Capricorn)  /uni2652 (Aquarius)  /uni2653 (Pisces)
	/uni2654 (King white)  /uni2655 (Queen white)  /uni2656 (Rook white)  /uni2657 (Bishop white)  /uni2658 (Knight white)  /uni2659 (Pawn white)
	/uni265A (King black)  /uni265B (Queen black)  /uni265C (Rook black)  /uni265D (Bishop black)  /uni265E (Knight black)  /uni265F (Pawn black)
>> readonly def  % /GlyphToASCII
/GlyphToPDFDocEncoding <<  % Appendix D of PDF 32000-1:2008
	/breve (\030)          /caron (\031)           /circumflex (\032)    /dotaccent (\033)       /hungarumlaut (\034)  /ogonek (\035)        /ring (\036)           /tilde (\037)
	                                                                     /braceleft (\173)       /bar (\174)           /braceright (\175)    /asciitilde (\176)
	/bullet (\200)         /dagger (\201)          /daggerdbl (\202)     /ellipsis (\203)        /emdash (\204)        /endash (\205)        /florin (\206)         /fraction (\207)
	/guilsinglleft (\210)  /guilsinglright (\211)  /minus (\212)         /perthousand (\213)     /quotedblbase (\214)  /quotedblleft (\215)  /quotedblright (\216)  /quoteleft (\217)
	/quoteright (\220)     /quotesinglbase (\221)  /trademark (\222)     /fi (\223)              /fl (\224)            /Lslash (\225)        /OE (\226)             /Scaron (\227)
	/Ydieresis (\230)      /Zcaron (\231)          /dotlessi (\232)      /lslash (\233)          /oe (\234)            /scaron (\235)        /zcaron (\236)
	/Euro (\240)           /exclamdown (\241)      /cent (\242)          /sterling (\243)        /currency (\244)      /yen (\245)           /brokenbar (\246)      /section (\247)
	/dieresis (\250)       /copyright (\251)       /ordfeminine (\252)   /guillemotleft (\253)   /logicalnot (\254)                          /registered (\256)     /macron (\257)
	/degree (\260)         /plusminus (\261)       /twosuperior (\262)   /threesuperior (\263)   /acute (\264)         /mu (\265)            /paragraph (\266)      /periodcentered (\267)
	/cedilla (\270)        /onesuperior (\271)     /ordmasculine (\272)  /guillemotright (\273)  /onequarter (\274)    /onehalf (\275)       /threequarters (\276)  /questiondown (\277)
	/Agrave (\300)         /Aacute (\301)          /Acircumflex (\302)   /Atilde (\303)          /Adieresis (\304)     /Aring (\305)         /AE (\306)             /Ccedilla (\307)
	/Egrave (\310)         /Eacute (\311)          /Ecircumflex (\312)   /Edieresis (\313)       /Igrave (\314)        /Iacute (\315)        /Icircumflex (\316)    /Idieresis (\317)
	/Eth (\320)            /Ntilde (\321)          /Ograve (\322)        /Oacute (\323)          /Ocircumflex (\324)   /Otilde (\325)        /Odieresis (\326)      /multiply (\327)
	/Oslash (\330)         /Ugrave (\331)          /Uacute (\332)        /Ucircumflex (\333)     /Udieresis (\334)     /Yacute (\335)        /Thorn (\336)          /germandbls (\337)
	/agrave (\340)         /aacute (\341)          /acircumflex (\342)   /atilde (\343)          /adieresis (\344)     /aring (\345)         /ae (\346)             /ccedilla (\347)
	/egrave (\350)         /eacute (\351)          /ecircumflex (\352)   /edieresis (\353)       /igrave (\354)        /iacute (\355)        /icircumflex (\356)    /idieresis (\357)
	/eth (\360)            /ntilde (\361)          /ograve (\362)        /oacute (\363)          /ocircumflex (\364)   /otilde (\365)        /odieresis (\366)      /divide (\367)
	/oslash (\370)         /ugrave (\371)          /uacute (\372)        /ucircumflex (\373)     /udieresis (\374)     /yacute (\375)        /thorn (\376)          /ydieresis (\377)
>> readonly def % /GlyphToPDFDocEncoding
% CompoundString  ASCIIfy  string, the string being an all-ASCII approximation to the CompoundString
/ASCIIfy
{
	DeBugLevel 15 le {(+ASCIIfy) OutputToLog} if
	3 dict begin
	/param exch def
	/param load xcheck
	{
		UserScratchDict /AsciiEquivalent undef  GSave NullDevice /Courier 10 selectfont 0 0 moveto [ [/param load /execU cvx] cvx Stopped pop] GRestore
		UserScratchDict /AsciiEquivalent 2 copy known {2 copy get 4 1 roll undef ASCIIfy Concatenate} {pop pop ASCIIfy} ifelse
	}
	{1 {
		param type /stringtype eq {param exit} if
		param type /arraytype eq {mark param {ASCIIfy} forall ConcatenateToMark exit} if
		param type /integertype eq {param ToString exit} if
		param type /realtype eq {param ToString exit} if
		param type /nametype eq
		{
			GlyphToASCII param known {GlyphToASCII param get}
			{
				/paramlength param length def
				param ToString % default
				[ (acute) (circumflex) (grave) (dieresis) (tilde) (cedilla) (slash) (ring) (ringacute) (breve) (macron) (ogonek) (caron) (dot) (dotaccent) (hungarumlaut) (bar) (commaaccent) (croat) ]
				{
					/diacritic exch def
					paramlength diacritic length sub dup 1 ge exch 2 le and
					{
						dup  paramlength diacritic length sub  diacritic length  getinterval   diacritic   eq
							{0  paramlength diacritic length sub  getinterval   exit}
						if  % ... diacritic eq
					} if  % param 1 or 2 longer than diacritic
				} forall
			} ifelse  % GlyphToASCII param known
			exit
		} if % nametype
		param type /booleantype eq {param {(true)} {(false)} ifelse exit} if

		mark  (Warning: ASCIIfy parameter )  /param load 0 //true ThingToDebugText
		( is of type )  /param load type
		( rather than executable, string, name, array, number, or boolean.) ConcatenateToMark OutputToLog
		()
	} repeat} ifelse  % xcheck
	end
	DeBugLevel 15 le {(-ASCIIfy) OutputToLog} if
} bind def  % /ASCIIfy
/PDFDocEncodingify
{
	DeBugLevel 15 le {(+PDFDocEncodingify) OutputToLog} if
	3 dict begin
	/param exch def
	/param load xcheck
	{
		UserScratchDict /AsciiEquivalent undef  GSave NullDevice /Courier 10 selectfont 0 0 moveto [ [/param load /execU cvx] cvx Stopped pop] GRestore
		UserScratchDict /AsciiEquivalent 2 copy known {2 copy get 4 1 roll undef PDFDocEncodingify Concatenate} {pop pop PDFDocEncodingify} ifelse
	}
	{1 {
		param type /stringtype eq {param exit} if
		param type /arraytype eq {mark param {PDFDocEncodingify} forall ConcatenateToMark exit} if
		param type /integertype eq {param ToString exit} if
		param type /realtype eq {param ToString exit} if
		param type /nametype eq {GlyphToPDFDocEncoding param 2 copy known {get} {exch pop ASCIIfy} ifelse exit} if
		mark  (Warning: PDFDocEncodingify parameter )  /param load 0 //true ThingToDebugText
		( is of type )  /param load type ToString
		( rather than executable, string, name or array.) ConcatenateToMark OutputToLog
		()
	} repeat} ifelse  % xcheck
	end
	DeBugLevel 15 le {(-PDFDocEncodingify) OutputToLog} if
} bind def  % /PDFDocEncodingify

% String  Trim  StringNeitherStartingNorEndingInASpace
/TrimSpaces
{
	3 dict begin
	/param exch def
	/LastNonSpace param length 1 sub def
	{
		LastNonSpace 0 lt {exit} if
		param LastNonSpace get //AsciiSpace ne {exit} if
		/LastNonSpace LastNonSpace 1 sub def
	} loop
	/FirstNonSpace 0 def
	{
		FirstNonSpace LastNonSpace ge {exit} if
		param FirstNonSpace get //AsciiSpace ne {exit} if
		/FirstNonSpace FirstNonSpace 1 add def
	} loop
	param  FirstNonSpace  LastNonSpace FirstNonSpace sub 1 add  getinterval
	end
} bind def  % /TrimSpaces

/MightBeCompoundString
{
	1 {
		dup type /stringtype eq
		{
			<< /CharsBelow 0 /CharsAbove 0 >> begin
			dup dup {dup 31 le {/CharsBelow dup load 1 add store} if  128 ge {/CharsAbove dup load 1 add store} if} forall
			CharsBelow 0 gt  CharsAbove 0 gt  or
			{
				mark exch (Warning: the string fragment \") exch (\", perhaps part of a compound string, contains )
				CharsBelow 0 gt {(ASCII control characters)  CharsAbove 0 gt {(, and )} if} if
				CharsAbove 0 gt {(non-ASCII characters \(which should be specified in a form resembling \"[\(C\) \/aacute \(lem\)]\"\))} if
				(. Continuing, but the output should be carefully checked.) ConcatenateToMark OutputToLog
			} {pop} ifelse  end  pop //true exit  % CharsBelow 0 gt  CharsAbove 0 gt  or
		} if  % /stringtype
		dup type /nametype eq {pop //true exit} if
		dup type /integertype eq {pop //true exit} if
		dup type /realtype eq {pop //true exit} if
		dup xcheck {pop //true exit} if  % execution can depend on sundry other variables, so not looking inside
		dup type dup /arraytype eq exch /packedarraytype eq or
		{
			//true exch {MightBeCompoundString not {pop //false exit} if} forall
		} {pop //false} ifelse  % array
	} repeat  % 1
} bind def  % /MightBeCompoundString

mark [ CopyrightStatementPlacemats LicensingAgreementTextPlacemats LicensingAgreementLinkPlacemats ] {dup length 0 eq {pop} {counttomark 2 ge {(\n) exch} if} ifelse} forall ConcatenateToMark
dup length 0 eq {pop} {OutputToLog} ifelse

mark  (product = ) product (; languagelevel = ) /languagelevel where {pop languagelevel} {(undefined and hence 1)} ifelse (; version = ) version  (; revision = ) revision  (; usertime = ) usertimeStart  ConcatenateToMark OutputToLog

/IsDistiller false  1 dict begin /SearchString (Distiller) def  0 1 product length SearchString length sub {product exch SearchString length getinterval SearchString eq {pop //true exit} if} for  end def

/MonthNames [(Jan) (Feb) (March) (April) (May) (June) (July) (Aug) (Sep) (Oct) (Nov) (Dec)] def
% https://en.wikibooks.org/wiki/PostScript_FAQ#How_to_get_date_and_time.3F
% https://groups.google.com/forum/#!topic/comp.lang.postscript/UAkMrNLakKs
(\%Calendar\%) dup /IODevice resourcestatus
{
	pop pop  currentdevparams begin
	Running
	{
		mark (Distilled ) Hour 2 string cvs dup length 1 le {(0) exch} if (:) Minute 2 string cvs dup length 1 le {(0) exch} if ( ) [(Sun) (Mon) (Tue) (Wed) (Thu) (Fri) (Sat)] Weekday get ( )
		Day 2 string cvs dup length 1 le {(0) exch} if ( ) MonthNames Month 1 sub get ( ) Year  (, according to the clock of the computer running the distillation application.)  ConcatenateToMark OutputToLog
	} if  % Running
	end
} {pop} ifelse  % ... resourcestatus

% AdobeFormatDate  AdobeFormatDateToString  string
/AdobeFormatDateToString
{
	4 dict begin
	/AdobeFormatDate exch def
	/YYYY AdobeFormatDate 2 4 getinterval cvi def  /MM AdobeFormatDate 6 2 getinterval cvi def  /DD AdobeFormatDate 8 2 getinterval cvi def
	mark
	AdobeFormatDate 10 2 getinterval  (:)  % HH
	AdobeFormatDate 12 2 getinterval  ( )  % MM
	YYYY 2099 le
	{
		[ (Mon) (Tue) (Wed) (Thu) (Fri) (Sat) (Sun) ]
		[ 3 5 6 0 1 3 4 5 6 1 2 3 4 6 0 1 2 4 5 6 0 2 3 4 5 0 1 2 ] YYYY 28 mod get
		[ 0 31 59 90 120 151 181 212 243 273 304 334 ] MM 1 sub get  YYYY 4 mod 0 eq MM 3 ge and {1 add} if  DD add add 7 mod get ( )
	} if  % <= 2099
	AdobeFormatDate 8 2 getinterval ( )  % DD
	MonthNames MM 1 sub get ( )  % Month
	AdobeFormatDate 2 4 getinterval  % YYYY
	end ConcatenateToMark
} bind def  % /AdobeFormatDateToString
mark
(Software version  =    SoftwareVersionDateTimeAdobeFormat  =  ) SoftwareVersionDateTimeAdobeFormat   (  =  )  1 index AdobeFormatDateToString (\n)
(These placemats  ~=  ParametersVersionDateTimeAdobeFormat  =  ) ParametersVersionDateTimeAdobeFormat (  =  )  1 index AdobeFormatDateToString ConcatenateToMark OutputToLog
/WizardVersionDateTimeAdobeFormat where {pop  /WizardLongName where {pop
	mark  WizardLongName (, version =  ) WizardVersionDateTimeAdobeFormat (  =  ) 1 index AdobeFormatDateToString ConcatenateToMark OutputToLog
} if} if

TestingMaxNumPagesToShow 2147483647 lt  TestingSuppressPageTypes length 0 gt  or
{
	mark  (Nota bene: some pages might be suppressed = not shown, perhaps because this is an example or a test.)
	(\n\(At the end there might be an extra page, blank, caused by a bug in erasepage.\))
	TestingMaxNumPagesToShow 2147483647 lt {(\nTestingMaxNumPagesToShow = ) TestingMaxNumPagesToShow} if
	TestingSuppressPageTypes length 0 gt {(\nTestingSuppressPageTypes = \[) TestingSuppressPageTypes {dup type /nametype eq {( /) exch} if ( )} forall (\])} if
	ConcatenateToMark OutputToLog
} if  % TestingMaxNumPagesToShow ... TestingSuppressPageTypes ... or

% Changes RGB black to proper CMYK printers' black. http://groups.google.com/forum/#!topic/comp.lang.postscript/6JW6VamdVlw
CMYK0001replacesRGB000   /setcolor load type /operatortype eq   and
{
	(Black is a printers\' black with \"0 0 0 1 setcmykcolor\" rather than screen black with \"0 setgray\", by CMYK0001replacesRGB000.) OutputToLog
	/ClrSpcOrig currentcolorspace def

	[
		[  /setcolorspace   {/ClrSpcOrig 1 index     store   setcolorspace                                                                    }  ]
		[  /setgray         {/ClrSpcOrig /DeviceGray store dup 0 eq                                {0 0 1 setcmykcolor} {setgray}     ifelse  }  ]
		[  /setrgbcolor     {/ClrSpcOrig /DeviceRGB  store 3 copy 0 eq exch 0 eq and exch 0 eq and {    1 setcmykcolor} {setrgbcolor} ifelse  }  ]
		[  /sethsbcolor     {/ClrSpcOrig /DeviceRGB  store dup 0 eq                  {pop pop pop 0 0 0 1 setcmykcolor} {sethsbcolor} ifelse  }  ]
		[  /setcmykcolor    {/ClrSpcOrig /DeviceCMYK store                                                setcmykcolor                        }  ]
		[  /setpattern      {/ClrSpcOrig [/Pattern [currentcolorspace 0 get dup /Pattern eq {pop /DeviceRGB} if] ] store  setpattern          }  ]
	] {aload 0 get load type /operatortype eq {bind def} {pop pop} ifelse} forall

	/setcolor {1 {
		currentcolorspace /DeviceGray eq {setgray      exit} if
		currentcolorspace /DeviceRGB  eq {setrgbcolor  exit} if
		currentcolorspace /DeviceCMYK eq {setcmykcolor exit} if
		setcolor
	} repeat} bind def

	% Without the next, some but not all bitmap images fail. No, I don't know why. And there are no bitmap images from this code, but there could be some in user-inserted code.
	/image     load type /operatortype eq {/image     {ClrSpcOrig setcolorspace image    } bind def} if
	/imagemask load type /operatortype eq {/imagemask {ClrSpcOrig setcolorspace imagemask} bind def} if
} if  % BlackCmykReplacesRgbBlack ... /operatortype ... and (latter condition to lessen chance of self-calling)


% This error checking needs to be done early.
/ErrorFlag false store
GlassesAnnotations length 2 mod 0 ne {mark (GlassesAnnotations is of length ) GlassesAnnotations length (, but must be of even length.) ConcatenateToMark OutputToLog /ErrorFlag //true store} if
0  2  GlassesAnnotations length 1 sub
{
	dup GlassesAnnotations exch GetEU dup type /integertype eq {dup dup 0 ge exch Titles length lt and} {//false} ifelse
		{pop pop}
		{mark (GlassesAnnotations, item ) 4 2 roll (, is ) exch 0 //true ThingToDebugText TrimSpaces (, which should be a non-negative integer < the length of Titles = ) Titles length (.) ConcatenateToMark OutputToLog /ErrorFlag //true store}
	ifelse  % suitable integer
} for
1  2  GlassesAnnotations length 1 sub
	{dup GlassesAnnotations exch GetEU dup MightBeCompoundString {pop pop} {mark (GlassesAnnotations, item ) 4 2 roll (, is ) exch (, which should be a compound string.) ConcatenateToMark OutputToLog /ErrorFlag //true store} ifelse}
for
ErrorFlag {stop} if   currentdict /ErrorFlag undef

GlassesAnnotations length 2 ge
{
	mark (There ) GlassesAnnotations length 2 idiv 1 eq {(is one glass annotation.)} {(are ) GlassesAnnotations length 2 idiv ( glass annotations.)} ifelse (\n)
	0 2 GlassesAnnotations length 2 sub {(\t) exch dup GlassesAnnotations exch GetEU Titles exch get ASCIIfy exch (: ) exch 1 add GlassesAnnotations exch GetEU ASCIIfy (\n)} for
	pop ConcatenateToMark OutputToLog
} if  % GlassesAnnotations length 2 ge

LogThisExtra ASCIIfy dup length 0 gt {mark exch (\n) exch (\n ) ConcatenateToMark OutputToLog} {pop} ifelse

/MightBeTrue {<< >> begin  GSave NullDevice  Stopped {//true} {//false ne} ifelse  GRestore  end} bind def

% Thing  ValueIfAscertainable
%     false            =>  values depend on variables not currently known
%     any ... any true =>  known value(s)
/ValueIfAscertainable {GSave NullDevice [exch /execU cvx] cvx Stopped not  GRestore} bind def

/NonEmptyCompoundObject
{
	DeBugLevel 5 le {(+NonEmptyCompoundObject) OutputToLog} if
	1 dict begin
	/param exch def
	1 {
		/param load xcheck {/param load length 0 gt exit} if
		param type /stringtype eq {param length 0 gt exit} if
		param type /nametype eq {//true exit} if
		param type /integertype eq {//true exit} if
		param type /realtype eq {//true exit} if
		param type /arraytype eq {//false param {NonEmptyCompoundObject {pop //true exit} if} forall exit} if
		//false param {dup type dup /stringtype ne exch /nametype ne and {NonEmptyCompoundObject {pop //true exit} if} {pop} ifelse} forall
		mark (Warning: NonEmptyCompoundObject parameter ) /param load 0 //true ThingToDebugText  ( is of type ) param type ( rather than executable, string, name, number or array.) ConcatenateToMark OutputToLog  //true
	} repeat
	end
	DeBugLevel 5 le {(-NonEmptyCompoundObject) OutputToLog} if
} bind def  % /NonEmptyCompoundObject

/LengthCompoundObject
{
	DeBugLevel 5 le {(+LengthCompoundObject) OutputToLog} if
	1 dict begin
	GSave
	NullDevice
	0 0 moveto % in case no currentpoint and code does a rmoveto
	/param exch def
	/param load xcheck
	{
		UserScratchDict /EffectiveNumCharacters 0 put
		GSave [/param load execU] GRestore
		UserScratchDict /EffectiveNumCharacters get
		exch LengthCompoundObject add
		UserScratchDict /EffectiveNumCharacters undef
	}  % in case the executable puts something on the stack
	{
	param type /stringtype eq {param length}
	{
	param type /nametype eq {1}
	{
	param type /arraytype eq
	{
		0  param {LengthCompoundObject add} forall
	} {1} ifelse  % /arraytype
	} ifelse  % /nametype
	} ifelse  % /stringtype
	} ifelse  % xcheck
	GRestore
	end
	DeBugLevel 5 le {(-LengthCompoundObject) OutputToLog} if
} bind def  % /LengthCompoundObject

% Similar to 'for' loop, except numbers out-of-order. Half-way number first, then odd quarter-way numbers, then odd eighth-way numbers, etc.
% Start Step End Code  ForReverseBinary  [anything left by Code, which might be the out-of-order numbers]
/ForReverseBinaryDict  8 dict  def  % Code might do things to operand stack, or to dictionaries on dictionary stack, so variables must be stored elsewhere.
/ForReverseBinary
{
	//ForReverseBinaryDict /Code  3 -1 roll put
	3 copy
	//ForReverseBinaryDict /End   3 -1 roll put
	//ForReverseBinaryDict /Step  3 -1 roll put
	//ForReverseBinaryDict /Start 3 -1 roll put
	3 -1 roll  3 copy  ge exch 0 gt and  4 1 roll  lt exch 0 lt and  or
	{
		//ForReverseBinaryDict  /N  //ForReverseBinaryDict /End get  //ForReverseBinaryDict /Start get sub //ForReverseBinaryDict /Step get div floor cvi  put  % Need 0 ... N
		//ForReverseBinaryDict  /AnyRepeats  //false  put
		//ForReverseBinaryDict  /Power2  2  put
		//ForReverseBinaryDict  /Odd  1  put
		{
			//ForReverseBinaryDict /Power2 get   //ForReverseBinaryDict /N get   //ForReverseBinaryDict /Odd get  3 copy 3 copy
			      mul exch div round cvi  dup dup 9 3 roll
			1 add mul exch div round cvi  5 1 roll
			1 sub mul exch div round cvi  eq 3 1 roll eq or
				{pop  //ForReverseBinaryDict /AnyRepeats //true put}
				{//ForReverseBinaryDict /Step get mul  //ForReverseBinaryDict /Start get add  //ForReverseBinaryDict /Code get exec}
			ifelse  % A repeat
			//ForReverseBinaryDict /Odd  //ForReverseBinaryDict /Odd get 2 add  dup  //ForReverseBinaryDict /Power2 get  gt
			{
				//ForReverseBinaryDict /AnyRepeats get {pop pop pop exit} if
				pop 1  put  % Restart Odd loop
				//ForReverseBinaryDict /Power2 //ForReverseBinaryDict /Power2 get 2 mul put  % Advance Power2 loop
			} {put} ifelse  % if end of Odd loop then advance Power2 loop
		} loop  % This loop does the work of nested Power2 and Odd loops, but being one loop, is exit'able.
		1 {
			//ForReverseBinaryDict /Start get  //ForReverseBinaryDict /Code get exec
			//ForReverseBinaryDict /N get 0 ne {//ForReverseBinaryDict /Step get //ForReverseBinaryDict /N get mul //ForReverseBinaryDict /Start get add  //ForReverseBinaryDict /Code get exec} if
		} repeat  % The 1 ... repeat because exit'able.
	} if  % Any steps to do
} bind def  % /ForReverseBinary
currentdict /ForReverseBinaryDict undef

% array  KleinSum  sum
% http://en.wikipedia.org/wiki/Kahan_summation_algorithm#Further_enhancements
/KleinSum
{
	8 dict begin
	/a exch def
	/s 0 def  /cs 0 def  /ccs 0 def
	0  1  a length 1 sub
	{
		/i exch def
		/t  a i get  s  add  def
		/c  s abs  a i get abs  ge {s t sub a i get add} {a i get t sub s add} ifelse  def
		/s t def
		/t cs c add def
		/cc  cs abs  c abs  ge {cs t sub c add} {c t sub cs add} ifelse  def
		/cs t def
		/ccs ccs cc add def
	} for  % i
	s cs add ccs add
	end
} bind def  % /KleinSum

% These links constitute the signature of the author of the code. Yes, the code is open source, so you have the power to remove them.
% Please don't. If you want code to be open source, respect this wish of an author who has released code for free. Thank you.
/ExternalLinksExtras [
	false   (GitHub)              (http://github.com/jdaw1/placemat)
	false   (Raw PostScript)      (http://github.com/jdaw1/placemat/blob/main/PostScript/placemat.ps)
	false   (Documentation start) (http://github.com/jdaw1/placemat/blob/main/Documentation/introduction_first_placemat.md)
	false   (Placemats, list)     (http://www.jdawiseman.com/papers/placemat/placemats_list.html)
	false   (Author)              (http://www.jdawiseman.com/author.html)
] def % /ExternalLinksExtras

/mm {2.83464566929 mul} bind def  % 360 mul 127 div

% PaperType Orientation  Dimensions  PageWidth PageHeight
% https://groups.google.com/forum/#!topic/comp.lang.postscript/vlfF8eGOCMA
/Dimensions
{
	DeBugLevel 10 le {(+Dimensions) OutputToLog} if
	1 dict begin
	exch /PaperType exch def
	1 {
		/A4      PaperType eq {595.27559   841.88976 exit} if  % For speed start with the five values most often used.
		/A3      PaperType eq {841.88976  1190.55118 exit} if
		/USL     PaperType eq {612     792     exit} if
		/USLegal PaperType eq {612    1008     exit} if
		/USL2    PaperType eq {792    1224     exit} if
		PaperType type /arraytype eq {PaperType {execU} forall exit} if  % [ Small Large ]
		/A4_USL PaperType eq {210 mm 792 exit} if  % Smaller of the A4/USL widths; smaller of the heights
		/A0  PaperType eq { 841 mm 1189 mm  exit} if  % A0 can hold 112 glasses slightly larger than five on A4. Which is a large enough page size.
		/A1  PaperType eq { 594 mm  841 mm  exit} if
		/A2  PaperType eq { 420 mm  594 mm  exit} if
		/A5  PaperType eq { 148 mm  210 mm  exit} if
		/A6  PaperType eq { 105 mm  148 mm  exit} if
		/A7  PaperType eq {  74 mm  105 mm  exit} if
		/A8  PaperType eq {  52 mm   74 mm  exit} if
		/A9  PaperType eq {  37 mm   52 mm  exit} if
		/A10 PaperType eq {  26 mm   37 mm  exit} if  % Much much smaller than useful. Included for completeness.
		/B0  PaperType eq {1000 mm 1414 mm  exit} if
		/B1  PaperType eq { 707 mm 1000 mm  exit} if
		/B2  PaperType eq { 500 mm  707 mm  exit} if
		/B3  PaperType eq { 353 mm  500 mm  exit} if
		/B4  PaperType eq { 250 mm  353 mm  exit} if
		/B5  PaperType eq { 176 mm  250 mm  exit} if
		/B6  PaperType eq { 125 mm  176 mm  exit} if
		/B7  PaperType eq {  88 mm  125 mm  exit} if
		/B8  PaperType eq {  62 mm   88 mm  exit} if
		/B9  PaperType eq {  44 mm   62 mm  exit} if
		/B10 PaperType eq {  31 mm   44 mm  exit} if
		/C0  PaperType eq { 917 mm 1297 mm  exit} if
		/C1  PaperType eq { 648 mm  917 mm  exit} if
		/C2  PaperType eq { 458 mm  648 mm  exit} if
		/C3  PaperType eq { 324 mm  458 mm  exit} if
		/C4  PaperType eq { 229 mm  324 mm  exit} if
		/C5  PaperType eq { 162 mm  229 mm  exit} if
		/C6  PaperType eq { 114 mm  162 mm  exit} if
		/C7  PaperType eq {  81 mm  114 mm  exit} if
		/C8  PaperType eq {  57 mm   81 mm  exit} if
		/C9  PaperType eq {  40 mm   57 mm  exit} if
		/C10 PaperType eq {  28 mm   40 mm  exit} if
		(Error: unknown paper type in Dimensions) OutputToLog
		stop
	} repeat  end  % 1
	3 -1 roll /Landscape eq {exch} if
	DeBugLevel 10 le {(-Dimensions) OutputToLog} if
} bind def  % /Dimensions

/PaperTypeStringShortPDF  % Unlike PaperTypeString, does not take parameters: uses ThisPaperType
{
	//true [/A4 /A3 /A0 /A1 /A2 /A5 /A6 /A7 /A8 /A9 /A10  /B0 /B1 /B2 /B3 /B4 /B5 /B6 /B7 /B8 /B9 /B10  /C0 /C1 /C2 /C3 /C4 /C5 /C6 /C7 /C8 /C9 /C10]
		{ThisPaperType eq {pop //false exit} if}
	forall
	{
		1 dict begin   mark
		[ ThisPaperType /Portrait Dimensions ]
		{
			/z exch def
			1 {
				z 18  div dup round sub abs //Epsilon le {z 18 div round cvi dup 4 idiv exch 4 mod [(\") (\274\") (\275\") (\276\")] exch get exit} if  % quarter inch
				z 7.2 div dup round sub abs //Epsilon le {z 72 div 1 FormatDecimalPlaces (\") exit} if  % 0.1 inch
				z 127 mul 360 div dup round sub abs //Epsilon le {z 127 mul 360 div round cvi (mm) exit} if  % mm
				z dup type /realtype eq {1 FormatDecimalPlaces} if (pt)  % othewise in points, rounded to 0.1
			} repeat  (\327)
		} forall   pop ConcatenateToMark end
	} {ThisPaperType ToString} ifelse  % ISO 216
} bind def  % /PaperTypeStringShortPDF
/PaperTypeString  % Unlike PaperTypeStringShortPDF, takes one parameter
{
	2 dict begin
	/ThisPaperType exch def
	mark
	ThisPaperType type /nametype eq {ThisPaperType ( = )} if
	[ ThisPaperType /Portrait Dimensions ]
	{
		/z exch def
		1 {
			z 72 div dup round sub abs //Epsilon le {z 72 div round cvi (\") exit} if  % 1 inch
			z 7.2 div dup round sub abs //Epsilon le {z 72 div 1 FormatDecimalPlaces (\") exit} if  % 0.1 inch
			z 3.6 div dup round sub abs //Epsilon le {z 72 div 2 FormatDecimalPlaces (\") exit} if  % 0.05 inch
			z 127 mul 360 div dup round sub abs //Epsilon le {z 127 mul 360 div round cvi (mm) exit} if  % mm
			z dup type /realtype eq {1 FormatDecimalPlaces} if (pt)  % othewise in points, rounded to 0.1
		} repeat  (*)
	} forall   pop ConcatenateToMark end
} bind def  % /PaperTypeString

% Returns true if sole parameter is one of /USL, /USL2 or /USLegal
/NorthAmericanPaperSize {dup dup   /USL eq exch   /USL2 eq or exch   /USLegal eq or} bind def

/DefaultOutputFaceUp currentpagedevice /OutputFaceUp 2 copy known {get} {pop pop //false} ifelse def

% ShowCropMarks Rotate180 Mirror Callsetpagedevice PaperType Orientation  SetPaperSize  -
% First two params ignored if Callsetpagedevice is false
/SetPaperSize
{
	DeBugLevel 15 le {(+SetPaperSize) OutputToLog} if
	Dimensions /PageHeight exch def  /PageWidth exch def

	% Sets the page size; and attempts to disable duplex; draws crop marks
	{
		[PageWidth PageHeight] {14400 gt {(Warning: with a paper side > 14400pt = 16\'8\" = 5.08 metres, about to call setpagedevice, which might fail.) OutputToLog} if} forall
		<<
			/OutputFaceUp DefaultOutputFaceUp 4 index {not} if   /PageSize [PageWidth PageHeight]   /ImagingBBox //null
			//true [/TastingNotes /PrePour /VoteRecorder /DecantingNotes /Accounts /DistillerLog] {TypeOfPagesBeingRendered eq {pop //false exit} if} forall  {/Duplex //false} if
		>> setpagedevice
		/InitialMatrix matrix currentmatrix store
		{
			{[1 0 0 -1 0 PageHeight] concat}
			{[-1 0 0 1 PageWidth 0] concat} ifelse  % Rotate180
		}{
			{[-1 0 0 -1 PageWidth PageHeight] concat} if  % Rotate180
		} ifelse  % Mirror
		/InitialMatrix matrix currentmatrix store
	} {pop pop} ifelse  % Callsetpagedevice
	{
		OuterGlassesMarginL OuterGlassesMarginB translate
		<< /PageWidth dup load OuterGlassesMarginL OuterGlassesMarginR add sub  /PageHeight dup load OuterGlassesMarginB OuterGlassesMarginT add sub >> begin    //false
		OuterGlassesMarginL 0 gt
		{
			OuterGlassesMarginB 0 gt
			{
				OuterGlassesMarginL 108 ge {-36 0 -36 0} {OuterGlassesMarginL -3 div 0 2 copy} ifelse  moveto rlineto
				OuterGlassesMarginB 108 ge {0 -36 0 -36} {0 OuterGlassesMarginB -3 div 2 copy} ifelse  moveto rlineto  pop //true
			} if  % OuterGlassesMarginB 0 gt
			OuterGlassesMarginT 0 gt
			{
				OuterGlassesMarginL 108 ge {-36 0 -36} {OuterGlassesMarginL -3 div 0 1 index} ifelse PageHeight  moveto rlineto
				OuterGlassesMarginT 108 ge {0 36 0 36} {0 OuterGlassesMarginT 3 div 2 copy} ifelse PageHeight add  moveto rlineto  pop //true
			} if  % OuterGlassesMarginB 0 gt
		} if  % OuterGlassesMarginL 0 gt
		OuterGlassesMarginR 0 gt
		{
			OuterGlassesMarginB 0 gt
			{
				OuterGlassesMarginR 108 ge {36 0 36} {OuterGlassesMarginR 3 div 0 1 index} ifelse PageWidth add 0  moveto rlineto
				OuterGlassesMarginB 108 ge {0 -36 PageWidth -36} {0 OuterGlassesMarginB -3 div PageWidth 1 index} ifelse  moveto rlineto  pop //true
			} if  % OuterGlassesMarginT 0 gt
			OuterGlassesMarginT 0 gt
			{
				OuterGlassesMarginR 108 ge {36 0 36} {OuterGlassesMarginR 3 div dup 0 exch} ifelse PageWidth add PageHeight  moveto rlineto
				OuterGlassesMarginT 108 ge {0 36} {0 OuterGlassesMarginT 3 div} ifelse dup PageHeight add PageWidth exch  moveto rlineto  pop //true
			} if  % OuterGlassesMarginT 0 gt
		} if  % OuterGlassesMarginR 0 gt
		{0 setgray  0.24 dup currentlinewidth ne {setlinewidth} {pop} ifelse  0 currentlinecap ne {0 setlinecap} if  stroke} if  end  InitialMatrix setmatrix
	} if  % show crop marks
	DeBugLevel 15 le {(-SetPaperSize) OutputToLog} if
} bind def  % /SetPaperSize


/CompassPoints16
[
	(north)
			(north-northeast)
		(north-east)
			(east-northeast)
	(east)
			(east-southeast)
		(south-east)
			(south-southeast)
	(south)
			(south-southwest)
		(south-west)
			(west-southwest)
	(west)
			(west-northwest)
		(north-west)
			(north-northwest)
] dup {readonly pop} forall readonly def % So data can't be corrupted.
% angle  CompassPointText  text
/CompassPointText {16 mul 360 div round cvi 16 mod 16 add 16 mod //CompassPoints16 exch get} bind def  % /CompassPointText
currentdict	/CompassPoint16 undef

DeBugLevel 100 le {( Main: computing NumSheets, SheetLengths, PaperTypes, UsedPaperTypes, UsedPageOrderings) OutputToLog} if
/NumSheets GlassesOnSheets length def
/SheetLengths [ 0 1 NumSheets 1 sub {/SheetNum exch def  GlassesOnSheets SheetNum GetEU length} for ] def
/TypeOfPagesBeingRendered /Glasses store
/PaperTypes   [  0  1  NumSheets 1 sub {/SheetNum exch def  PaperType} for  ] def  currentdict /SheetNum undef  % Duplicates not removed
/TypeOfPagesBeingRendered /TastingNotes store
/TastingNotesPaperTypes [   0  1  GlassesOnTastingNotePages length 1 sub {/TastingSheetNum exch def   TastingNotesPaperType   counttomark 1 sub -1 1 {index 1 index eq {pop exit} if} for} for   ] def  currentdict /TastingSheetNum undef  % No duplicates

/TypeOfPagesBeingRendered /Multiple store
/UsedPaperTypes   [   [ 7 dict begin  /SheetNum 0 def  /TastingSheetNum 0 def  % Construct an array with many duplicates; construct new duplicates-free array.
	PaperTypes aload pop   TastingNotesPaperTypes aload pop
	{PlaceNames} MightBeTrue {0  1  NamesPlaceNames length 1 sub {/PlaceNameSetNum exch def  PlaceNamesPaperType} for} if
	/VoteRecorders load MightBeTrue {0  1  GlassesClusteredOnVoteRecorders length 1 sub {/VoteRecorderSheetNum exch def  /VoteRecorders load MightBeTrue {VoteRecorderPaperType} if} for} if
	0  1  NumSheets 1 sub {/SheetNum exch def  0 1 SheetLengths SheetNum get 1 sub {WithinPage-WithinTitles-def  {PrePourNumCopies 1 ge} MightBeTrue {PrePourPaperType} if  {NeckTagsNumCopies 1 ge} MightBeTrue {NeckTagsPaperType} if} for} for
	{DecanterLabelsNumCopies 1 ge} MightBeTrue {0  1  NumSheets 1 sub {/SheetNum exch def  DecanterLabelsPaperType} for} if
	{StickyLabelsNumCopies 1 ge} MightBeTrue {StickyLabelsTypes {execU /StickyLabelsTypeThis exch def  {StickyLabelsNumCopies 1 ge} MightBeTrue {StickyLabelsPaperType} if  } forall} if  {CorkDisplayNumCopies 1 ge} MightBeTrue {CorkDisplayPaperType} if
	{AccountsNumCopies 1 ge} MightBeTrue {AccountsPaperType} if   {DecantingNotesNumCopies 1 ge} MightBeTrue {DecantingNotesPaperType} if
end ]   {counttomark 1 sub -1 1 {index 1 index eq {pop exit} if} for} bind forall   ]    def  % /UsedPaperTypes

/UsedPageOrderings   [   [   % Construct an array with many duplicates; construct new duplicates-free array; sort it.
	[ PageOrderingGlasses PageOrderingTastingNotePages PageOrderingVoteRecorder PageOrderingDecantingNotes PageOrderingCorkDisplay PageOrderingNeckTags PageOrderingPrePourPages PageOrderingPlaceNames PageOrderingDecanterLabels PageOrderingStickyLabels ]
	{{execU} forall} forall
]   {counttomark 1 sub -1 1 {index 1 index eq {pop exit} if} for} bind forall   ]  dup {le} ShellSort  def  % /UsedPageOrderings

mark (Used paper types: ) UsedPaperTypes {PaperTypeString (; )} forall pop (.) ConcatenateToMark dup length 10 gt {OutputToLog} {pop} ifelse

8 dict begin   /DesMaxLength -1 def  mark (External links for document outline:)
0 1 1
{
	0 eq {ExternalLinks} {ExternalLinksExtras} ifelse /A exch def
	0  3  A length 3 sub
	{
		/i exch def
		/Des  A i 1 add get ASCIIfy TrimSpaces length  A i get execU {4 add} if  def
		/URL  A i 2 add get ASCIIfy TrimSpaces length def
		Des URL add 123 gt URL 0 eq or {0} {Des} ifelse dup DesMaxLength gt {/DesMaxLength exch def} {pop} ifelse
	} for  % i = position in array A
} bind for  % ExternalLinks | ExternalLinksExtras
/RowNum 0 def
0 1 1
{
	0 eq {ExternalLinks} {ExternalLinksExtras} ifelse /A exch def
	0  3  A length 3 sub
	{
		/i exch def
		/Des  A i 1 add get ASCIIfy TrimSpaces  def
		/URL  A i 2 add get ASCIIfy TrimSpaces  def
		Des length 0 gt
		{
			(\n)  Des  A i get {(    ) exch Concatenate} if
			URL length 0 gt
			{
				dup  length dup URL length add 127 ge {pop 0} {DesMaxLength exch sub  dup 0 lt {pop 0} if} ifelse  /Extras exch def
				Extras 5 mod {( )} repeat
				Extras 5 idiv {RowNum 3 mod 0 eq {(  =  )} {(     )} ifelse} repeat
				(  =  )  URL
			} if  % URL length 0 gt
		}{
			URL length 0 gt {(\n)  A i get execU {(    )} if  URL} if
		} ifelse  % Descriptor non-zero length
		/RowNum RowNum 1 add def
	} for  % i = position in array A
} bind for  % ExternalLinks | ExternalLinksExtras
DesMaxLength 0 ge {ConcatenateToMark OutputToLog} {cleartomark} ifelse   end

/AnyFillTextingAtAll {FillTitles FillAbovetitles or FillBelowtitles or FillOvertitles or FillPlaceNames or} MightBeTrue  def

/NamesIsLeftHander [ Names length {//false} repeat ] def
/NamesIsLeftHanderTN [ NamesTastingNotes length {//false} repeat ] def
/NamesIsLeftHanderPN [ NamesPlaceNames { [ exch execU length {//false} repeat ] } forall ] def
3 dict begin
0  1  LeftHanders length 1 sub
{
	LeftHanders exch get PDFDocEncodingify /Leftie exch def
	Names length 1 sub  -1  0  % Glass pages
	{
		/NameNum exch def
		NamesIsLeftHander NameNum get not
		{
			Names NameNum get PDFDocEncodingify Leftie eq {NamesIsLeftHander NameNum //true put exit} if
		} if  % NamesIsLeftHander NameNum get not
	} for  % NameNum
	NamesTastingNotes length 1 sub  -1  0   % Tasting-note pages
	{
		/NameNum exch def
		NamesIsLeftHanderTN NameNum get not
		{
			NamesTastingNotes NameNum get PDFDocEncodingify Leftie eq {NamesIsLeftHanderTN NameNum //true put exit} if
		} if  % NamesIsLeftHanderTN NameNum get not
	} for  % NameNum
	0  1  NamesPlaceNames length 1 sub   PlaceNames not {pop -1} if % Place names
	{
		/PlaceNameSetNum exch def
		NamesPlaceNames PlaceNameSetNum GetEU length 1 sub  -1  0
		{
			/NameNum exch def
			NamesIsLeftHanderPN PlaceNameSetNum get NameNum get not
			{
				NamesPlaceNames PlaceNameSetNum GetEU NameNum get PDFDocEncodingify Leftie eq {NamesIsLeftHanderPN PlaceNameSetNum get NameNum //true put exit} if
			} if  % NamesIsLeftHanderPN PlaceNameSetNum get NameNum get not
		} for  % NameNum
	} for  % PlaceNameSetNum
} bind for  % Leftie
//false NamesIsLeftHander {{pop //true exit} if} forall
{
	mark  (Left-handers amongst Names:)
	0  1  NamesIsLeftHander length 1 sub
	{
		/NameNum exch def
		NamesIsLeftHander NameNum get {( NameNum=) NameNum (, ) Names NameNum get ASCIIfy (;)} if
	} bind for  % NameNum
	ConcatenateToMark  OutputToLog
} if  % any lefties
//false  NamesTastingNotes Names ne {NamesIsLeftHanderTN {{pop //true exit} if} forall} if
{
	mark  (Left-handers amongst NamesTastingNotes:)
	0  1  NamesIsLeftHanderTN length 1 sub
	{
		/NameNum exch def
		NamesIsLeftHanderTN NameNum get {( NameNum=) NameNum (, ) NamesTastingNotes NameNum get ASCIIfy (;)} if
	} bind for  % NameNum
	ConcatenateToMark  OutputToLog
} if  % any lefties
{PlaceNames} MightBeTrue
{
	//false  0 1 NamesPlaceNames length 1 sub {/PlaceNameSetNum exch def NamesPlaceNames PlaceNameSetNum GetEU Names ne {NamesIsLeftHanderPN PlaceNameSetNum get {{pop //true exit} if} forall} if} for
	{
		mark  (Left-handers amongst NamesPlaceNames, excluding those amongst Names:)
		0  1  NamesPlaceNames length 1 sub
		{
			/PlaceNameSetNum exch def
			NamesPlaceNames PlaceNameSetNum GetEU Names ne
			{
				0  1  NamesPlaceNames PlaceNameSetNum GetEU length 1 sub
				NamesIsLeftHanderPN PlaceNameSetNum get NameNum get {( PlaceNameSetNum=) PlaceNameSetNum (, NameNum=) NameNum (, ) NamesPlaceNames PlaceNameSetNum GetEU NameNum get ASCIIfy (;)} if
			} for  % NameNum
		} bind for  % PlaceNameSetNum
		ConcatenateToMark  OutputToLog
	} if  % any lefties
} if  % ...PlaceNames...
end

4 dict begin
/FontData [
[
	Titles                NonEmptyCompoundObject {/TitlesFont} if
	Abovetitles           NonEmptyCompoundObject {/AbovetitlesFont} if
	Belowtitles           NonEmptyCompoundObject {/BelowtitlesFont} if
	Overtitles            NonEmptyCompoundObject {/OvertitlesFont} if
	Circlearrays          NonEmptyCompoundObject {/CircletextFont} if
	Names                 NonEmptyCompoundObject {/NamesFont} if
	SubtitlesTastingNotes NonEmptyCompoundObject {/SubtitlesFont} if
	AnyFillTextingAtAll                          {/FillTextFont} if
	/PlaceNames load MightBeTrue                 {/PlaceNamesFont} if
	HeadersLeft length 0 gt HeadersCenter length 0 gt HeadersRight length 0 gt or or {/HeaderFont} if
	FootersLeft length 0 gt FootersCenter length 0 gt FootersRight length 0 gt or or {/FooterFont} if
	{BackgroundTextsGlasses PrePourShowBackgroundTexts BackgroundTextsTastingNotes or or} MightBeTrue {/BackgroundTextsFont} if
]  {[ exch dup /fv exch def fv load ValueIfAscertainable not {fv load} if ]} forall ] def % FontData
mark (Fonts: )
0 1 FontData length 1 sub {/i exch def FontData i get 1 get dup //null ne {dup type /nametype eq {(\/) exch} if  ( \() FontData i get 0 get (, )
	i 1 add 1 FontData length 1 sub {/j exch def FontData i get 1 get FontData j get 1 get eq {FontData j get 0 get (, )  FontData j get 1 //null put} if} for  pop (\)) (; )
} {pop} ifelse} for  pop (; and perhaps others.) ConcatenateToMark OutputToLog
end

% thing1 thing2  eqArray  boolean
/eqArray
{
	1 {
		2 copy eq {pop pop //true exit} if  % So 1 = 1.0
		2 copy type dup /arraytype ne exch /packedarraytype ne and  exch type dup /arraytype ne exch /packedarraytype ne and  or {pop pop //false exit} if
		2 copy 2 copy length exch length ne 3 1 roll xcheck exch xcheck ne or {pop pop //false exit} if
		//true 0 1 3 index length 1 sub << /thing1 8 -2 roll /thing2 exch >> begin  {dup /thing1 load exch get exch /thing2 load exch get eqArray not {pop //false exit} if} for  end
	} repeat  % 1
} bind def  % /eqArray
mark (Array equalities:  \{)  4 dict begin
/ArraysToCompare [
	/Circlearrays /Titles /Abovetitles /Belowtitles /Overtitles  AnyFillTextingAtAll {/FillTexts} if
	{GlassesOnTastingNotePages length 0 gt} MightBeTrue {TastingNotePagesNumCopies 1 ge} MightBeTrue and {/CirclearraysTastingNotes /TitlesTastingNotes /SubtitlesTastingNotes /Names /NamesTastingNotes} {/Names} ifelse
	/VoteRecorders load            MightBeTrue {/CirclearraysVoteRecorder   /TitlesVoteRecorder   /SubtitlesVoteRecorder /NamesVoteRecorder} if
	{DecantingNotesNumCopies 1 ge} MightBeTrue {/CirclearraysDecantingNotes /TitlesDecantingNotes /SubtitlesDecantingNotes} if
	{AccountsNumCopies 1 ge}       MightBeTrue {/NamesAccounts} if
	{CorkDisplayNumCopies 1 ge}    MightBeTrue {/CirclearraysCorkDisplay    /TitlesCorkDisplay    /SubtitlesCorkDisplay} if
	{NeckTagsNumCopies 1 ge}       MightBeTrue {/CirclearraysNeckTags} if
	{PrePourNumCopies 1 ge}        MightBeTrue {/CirclearraysPrePour} if
	/PlaceNames load MightBeTrue {0 1 NamesPlaceNames length 1 sub {[ exch /NamesPlaceNames cvx exch /get cvx ] cvx} for} if
	{StickyLabelsNumCopies 1 ge} {StickyLabelsTypes length 0 gt} MightBeTrue exch MightBeTrue and {/CirclearraysStickyLabels} if
	//false 1 dict begin StickyLabelsTypes {/StickyLabelsTypeThis exch def {StickyLabelsNumCopies 1 ge} MightBeTrue /StickyLabelsByNameWhichReplaceCirclearrays load MightBeTrue and {pop //true exit} if} forall end  {/NamesStickyLabels} if
	4 dict begin  counttomark /i exch 1 sub def
	{
		i 1 le {exit} if              i index 32 string cvs 0 3 getinterval  /is exch def  % assumes all of length >=3
		i 1 sub  -1  0 {/j exch def   j index 32 string cvs 0 3 getinterval  is  ne {exit} if} for  % j
		j 1 sub  -1  0 {/k exch def   k index 32 string cvs 0 3 getinterval  is  eq {k 1 add -1 roll  j 1 add 1 roll  /j j 1 sub def} if} for  % k
		/i j def
	} loop  end
] def  % /ArraysToCompare
/ArraysRemaining [ ArraysToCompare {dup type /nametype eq {load NonEmptyCompoundObject} {pop //true} ifelse} forall ] def
0  1  ArraysToCompare length 1 sub
{
	/i exch def
	ArraysRemaining i get
	{
		ArraysToCompare i get ToString TrimSpaces
		i 1 add  1  ArraysToCompare length 1 sub
		{
			/j exch def
			ArraysToCompare i get dup type /nametype eq {load} {exec} ifelse
			ArraysToCompare j get dup type /nametype eq {load} {exec} ifelse  eqArray
				{( = )  ArraysToCompare j get ToString TrimSpaces  ArraysRemaining j //false put}
			if  % ... i ... j ... eq
		} for  % j
		(\}) (;   \{)
	} if  % ArraysRemaining i get
} bind for  % i
end pop (.) ConcatenateToMark OutputToLog

% Log settings of used decorative parameters
[
	{ShapesInTitles ShapesInAbovetitles or ShapesInBelowtitles or ShapesInOvertitles or ShapesInPlaceNames or} MightBeTrue {[
		/ShapesInTitles /ShapesInAbovetitles /ShapesInBelowtitles /ShapesInOvertitles /ShapesInPlaceNames /ShapesToUse /ShapesStarsPointsAndStepsArray
		/ShapesAverageSeparation /ShapesEnclosingCircleRadiusMin /ShapesEnclosingCircleRadiusMax /ShapesAverageMaxTweakPlusMinus
		/ShapesFlowersNumPetalsMin /ShapesFlowersNumPetalsMax /ShapesFlowersAngularWidthMin /ShapesFlowersAngularWidthMax
		/ShapesInTitles load MightBeTrue {/ShapesTitlesFill /ShapesTitlesStroke} if
		/ShapesInAbovetitles load MightBeTrue {/ShapesAbovetitlesFill /ShapesAbovetitlesStroke} if
		/ShapesInBelowtitles load MightBeTrue {/ShapesBelowtitlesFill /ShapesBelowtitlesStroke} if
		/ShapesInOvertitles load MightBeTrue {/ShapesOvertitlesFill /ShapesOvertitlesStroke} if
	]} if  % ... ShapesInTitles ...
	{CrossHatchingOutside CrossHatchingInside or CrossHatchingTitles or CrossHatchingAbovetitles or CrossHatchingBelowtitles or CrossHatchingOvertitles or CrossHatchingPlaceNames or} MightBeTrue {[
		/CrossHatchingOutside /CrossHatchingInside /CrossHatchingTitles /CrossHatchingAbovetitles /CrossHatchingBelowtitles /CrossHatchingOvertitles /CrossHatchingPlaceNames
		/CrossHatchingOutside load MightBeTrue {/CrossHatchingOutsideStrokeCode} if
		/CrossHatchingInside load MightBeTrue {/DecanterLabelsShowCrossHatchingInside /CrossHatchingInsideStrokeCode} if
		/CrossHatchingTitles load MightBeTrue {/CrossHatchingTitlesStrokeCode} if
		/CrossHatchingAbovetitles load MightBeTrue {/CrossHatchingAbovetitlesStrokeCode} if
		/CrossHatchingBelowtitles load MightBeTrue {/CrossHatchingBelowtitlesStrokeCode} if
		/CrossHatchingOvertitles load MightBeTrue {/CrossHatchingOvertitlesStrokeCode} if
		/CrossHatchingNumRadialLines /CrossHatchingCellArea /CrossHatchingCentreX /CrossHatchingCentreY
	]} if  % ... CrossHatchingTitles  ...
	{InlineTitles InlineAbovetitles or InlineBelowtitles or InlineOvertitles or InlinePlaceNames or} MightBeTrue {[
		/InlineTitles /InlineAbovetitles /InlineBelowtitles /InlineOvertitles
		/InlineTitles load MightBeTrue {/InlineTitlesMaxNumberContours /InlineTitlesBlackWidth /InlineTitlesWhiteWidth} if
		/InlineAbovetitles load MightBeTrue {/InlineAbovetitlesMaxNumberContours} if
		/InlineBelowtitles load MightBeTrue {/InlineBelowtitlesMaxNumberContours} if
		/InlineOvertitles load MightBeTrue {/InlineOvertitlesMaxNumberContours} if
		/InlineAbovetitles load MightBeTrue {/InlineAbovetitlesBlackWidth /InlineAbovetitlesWhiteWidth} if
		/InlineBelowtitles load MightBeTrue {/InlineBelowtitlesBlackWidth /InlineBelowtitlesWhiteWidth} if
		/InlineOvertitles load MightBeTrue {/InlineOvertitlesBlackWidth /InlineOvertitlesWhiteWidth} if
	]} if  % ... InlineTitles ...
	/OutlineTitles load MightBeTrue {[
		/OutlineTitles /OutlineTitlesAlsoAbovetitles /OutlineTitlesAlsoBelowtitles /OutlineTitlesAlsoOvertitles /OutlineTitlesInnerWidthWhite /OutlineTitlesInnerWidthBlack
		/OutlineTitlesMultiplierWhite /OutlineTitlesMultiplierBlack /DecanterLabelsShowOutlineTitles /OutlineTitlesMaxNum
	]} if  % ... OutlineTitles ...
	AnyFillTextingAtAll {[
		/FillTitles /FillAbovetitles /FillBelowtitles /FillOvertitles /FillPlaceNames /FillTextAngle /FillTexts /FillTextPrintQuickerDistillSlower /FillPrioritiseSmallFileSizeOverPortability
		/FillTextNumSpaces /FillTextNumOutlines /FillTextMinFontSizeAbsolute /FillTextMinFontSizeProportionLargestTitleAboveBelowOver
		{PlaceNames} MightBeTrue {/FillTextPlaceNames /FillTextAnglePlaceNames} if
	]} if  % ... FillTitles ...
	/TastingNotesCirclesBehind load MightBeTrue {[ /TastingNotesCirclesBehind /TastingNotesCirclesBehindFadingFactorIfAllBlack /TastingNotesCirclesBehindFadingFactorIfAnyGrey /TastingNotesCirclesBehindTopX /TastingNotesCirclesBehindBottomX ]} if
	/BackgroundTextsGlasses load MightBeTrue {[
		/BackgroundTextsGlasses /BackgroundTextsGlassesTexts /BackgroundTextsSquooshMin /BackgroundTextsSquooshMax /BackgroundTextsTastingNotes /PrePourShowBackgroundTexts
		/BackgroundTextsFontSizeMax /BackgroundTextsOrientation /BackgroundTextsGlassesPaintCode /BackgroundTextsGlassesSameSizeIfAllOf /BackgroundTextsGlassesVerticalMiddling
	]} if  % ... BackgroundTextsGlasses ...
	/PaintBackgroundCode load length 0 gt {[/PaintBackgroundCode]} if
	/PaintForegroundCode load length 0 gt {[/PaintForegroundCode]} if
]
{
	2 dict begin  /Parameters exch def  mark
	0  1  Parameters length 1 sub
	{
		/i exch def
		Parameters i get ( = )
		Parameters i get load dup [ exch ValueIfAscertainable ] dup length 1 eq {pop} {aload pop {exch pop} if} ifelse 0 //true ThingToDebugText
		dup dup length 1 sub get //AsciiSpace eq {dup length 1 sub 0 exch getinterval} if  % remove trailing space
		i Parameters length 1 sub lt {(; )} if
	} for  % i
	ConcatenateToMark  OutputToLog  end
} bind forall  % used sets of decorative parameters

% Prefixed to the page names visible from within Acrobat
/UnnamedAttendee dup where {pop pop} {Names length 1 le {(Everybody)} {(Extra)} ifelse def} ifelse

/InitialMatrix matrix currentmatrix def

/ShownPages 0 def
/ShownPagesData 512 array def
/ShownGlassesCircles 0 def
/ShownGlassesCirclesData 1024 array def
/DestOther          0 def  /DestPrefixOther (Other_) def
/DestGlasses        0 def  /DestPrefixGlasses (Glasses_) def
/DestDecanterLabels 0 def  /DestPrefixDecanterLabels (DecanterLabels_) def
/DestTastingNotes   0 def  /DestPrefixTastingNotes (TastingNotes_) def
/DestPlaceName      0 def  /DestPrefixPlaceName (PlaceName_) def
/DestPrePour        0 def  /DestPrefixPrePour (PrePour_) def
/DestStickyLabels   0 def  /DestPrefixStickyLabels (StickyLabels_) def
/DestVoteRecorder   0 def  /DestPrefixVoteRecorders (VoteRecorder_) def
/DestDecantingNotes 0 def  /DestPrefixDecantingNotes (DecantingNotes_) def
/DestAccounts       0 def  /DestPrefixAccounts (Accounts_) def
/DestCorkDisplay    0 def  /DestPrefixCorkDisplay (CorkDisplay_) def
/DestNeckTags       0 def  /DestPrefixNeckTags (NeckTags_) def
/DestEmpty          0 def  /DestPrefixEmpty (Empty_) def
PagesToBeInserted {/PagesToBeInsertedInstanceNums [ PagesToBeInsertedDests length {-1} repeat ] def} if
/PagesToBeInsertedWarning (\n\nWarning, don't forget to insert pages with named destinations as follows:) def

% UpdatePageCount  PageSuppressed  bool
/PageSuppressed
{
	<< exch /UpdatePageCount exch  /i 0 >> begin
	ShownPages TestingMaxNumPagesToShow lt
	{
		//false
		{
			i TestingSuppressPageTypes length ge {exit} if
			TestingSuppressPageTypes i get TypeOfPagesBeingRendered eq
			{
				i TestingSuppressPageTypes length 1 sub lt {TestingSuppressPageTypes i 1 add get IsNumber {
					/i i 1 add store  TestingSuppressPageTypes  i  2 copy  get dup 1 lt {pop pop pop pop //true exit} {UpdatePageCount {1 sub put} {pop pop pop} ifelse} ifelse
				} {pop //true exit} ifelse} {pop //true exit} ifelse
			} if  % ... TypeOfPagesBeingRendered eq
			/i i 1 add store
		} loop  % i
	} {//true} ifelse
	end
} bind def  % /PageSuppressed

/ShowPage
{
	//true PageSuppressed not
	{
		3 dict begin
		/PagesToBeInsertedNum 0 def  % If a page is to be inserted into the file after this page, then there might be an extra Table-of-Contents entry for it.
		/PageNum ShownPages 0 eq {0} {ShownPagesData ShownPages 1 sub get /PageNum get 1 add PagesToBeInsertedNum add} ifelse def
		PagesToBeInserted
		{
			/PagesToBeInsertedData
			[
				0 1 PagesToBeInsertedNumPages length 1 sub
				{
					/i exch def
					% Need this page to be one of set, but not previous page
					//false  PagesToBeInsertedBeforeTypeOneOf i get {TypeOfPagesBeingRendered eq {pop //true exit} if} forall
					{
						//true  ShownPages 0 gt {PagesToBeInsertedBeforeTypeOneOf i get {ShownPagesData ShownPages 1 sub get /TypeOfPagesBeingRendered get eq {pop //false exit} if} forall} if
						{
							PagesToBeInsertedInstanceNums i 2 copy get 1 add dup 4 1 roll put
							PagesToBeInsertedBeforeInstances i get eq
							{
								<<
									/PagesToBeInsertedDest PagesToBeInsertedDests i get dup type /nametype ne {dup mark (Warning: PagesToBeInsertedDests ) i ( get = ) 5 -1 roll ( is not a name. Continuing.) ConcatenateToMark OutputToLog} if
									/PagesToBeInsertedDescription PagesToBeInsertedDescriptions i get
									/PagesToBeInsertedPageNum PageNum   /PageNum dup load 1 add store
								>>
								/PagesToBeInsertedNum dup load PagesToBeInsertedNumPages i GetEU add store
							} if  % correct instance num
						} if  % prev page not of type
					} if  % this page of type
				} for  % i
			] def  % /PagesToBeInsertedData
		} if  % PagesToBeInserted

		% User-visible page titles
		PageLabelOverride
		{
			PageLabelOverrideWith
		}{
			ParametersVersionDateTimeAdobeFormat dup length 2 sub 2 exch getinterval
			TypeOfPagesBeingRendered /Glasses eq  TypeOfPagesBeingRendered /TastingNotes eq  TypeOfPagesBeingRendered /PlaceName eq  or or
			{pop [
				/ThisName load dup NonEmptyCompoundObject not {pop UnnamedAttendee} if
				TypeOfPagesBeingRendered /Glasses      eq {(: Glasses: ) SheetNum (: ) DestGlasses} if
				TypeOfPagesBeingRendered /TastingNotes eq SideBySideGlassesTastingNotes not and {(: Tasting notes: ) TastingSheetNum (: ) DestTastingNotes} if
				TypeOfPagesBeingRendered /PlaceName    eq {(: place-setting names: ) DestPlaceName} if
			]} if  % ... /Glasses ... /TastingNotes ... /PlaceName ... or or
			TypeOfPagesBeingRendered /PrePour        eq {pop [ Titles WithinTitles get (: Pre-Pour: ) DestPrePour ]} if
			TypeOfPagesBeingRendered /VoteRecorder   eq {pop [ (Vote recorder: )  VoteRecorderSheetNum (: ) VoteRecorderTopTextNum (: ) DestVoteRecorder]} if
			TypeOfPagesBeingRendered /DecantingNotes eq {pop [ (Decanting notes: ) DestDecantingNotes ]} if
			TypeOfPagesBeingRendered /Accounts       eq {pop [ (Accounts: ) DestAccounts ]} if
			TypeOfPagesBeingRendered /CorkDisplay    eq {pop [ (Cork display: ) DestCorkDisplay ]} if
			TypeOfPagesBeingRendered /NeckTags       eq {pop [ (Neck tags: ) DestNeckTags ]} if
			TypeOfPagesBeingRendered /DecanterLabels eq {pop [ (Decanter labels: ) DestDecanterLabels ]} if
			TypeOfPagesBeingRendered /StickyLabels   eq {pop [ (Sticky labels: ) DestStickyLabels ]} if
			TypeOfPagesBeingRendered /Empty          eq {pop [ (Empty: ) EmptyPageString ]} if
		} ifelse  % PageLabelOverride

		% https://groups.google.com/forum/#!topic/comp.lang.postscript/xqXz9g44ATs
		% http://www.jdawiseman.com/papers/bugs/20151113_PDFDocEncodingify.txt
		% https://acrobat.uservoice.com/forums/590923-acrobat-for-windows-and-mac/suggestions/19268545--pagelabel-pdfmark-does-not-allow-pdf-encoding
		IsDistiller {version {cvr} stopped {pop //true} {3018.1009999 gt} ifelse} {//true} ifelse {PDFDocEncodingify} {ASCIIfy} ifelse
		dup length 255 gt {0 255 getinterval} if
		mark exch /Label exch /PAGELABEL pdfmark  % Former bug in Adobe Distiller affecting /PAGELABELs but not /OUTs

		% Destination, for use in URLs of the form ...#...
		DestPrefixOther /DestOther
		TypeOfPagesBeingRendered /Glasses        eq {pop pop DestPrefixGlasses        /DestGlasses} if
		TypeOfPagesBeingRendered /TastingNotes   eq {pop pop DestPrefixTastingNotes   /DestTastingNotes} if
		TypeOfPagesBeingRendered /PlaceName      eq {pop pop DestPrefixPlaceName      /DestPlaceName} if
		TypeOfPagesBeingRendered /PrePour        eq {pop pop DestPrefixPrePour        /DestPrePour} if
		TypeOfPagesBeingRendered /StickyLabels   eq {pop pop DestPrefixStickyLabels   /DestStickyLabels} if
		TypeOfPagesBeingRendered /VoteRecorder   eq {pop pop DestPrefixVoteRecorders  /DestVoteRecorder} if
		TypeOfPagesBeingRendered /DecantingNotes eq {pop pop DestPrefixDecantingNotes /DestDecantingNotes} if
		TypeOfPagesBeingRendered /Accounts       eq {pop pop DestPrefixAccounts       /DestAccounts} if
		TypeOfPagesBeingRendered /CorkDisplay    eq {pop pop DestPrefixCorkDisplay    /DestCorkDisplay} if
		TypeOfPagesBeingRendered /NeckTags       eq {pop pop DestPrefixNeckTags       /DestNeckTags} if
		TypeOfPagesBeingRendered /DecanterLabels eq {pop pop DestPrefixDecanterLabels /DestDecanterLabels} if
		TypeOfPagesBeingRendered /Empty          eq {pop pop DestPrefixEmpty          /DestEmpty} if

		dup load dup 3 1 roll 1 add store  ToString Concatenate cvn  /PageDestName exch def
		mark /Dest PageDestName  /View [TypeOfPagesBeingRendered /VoteRecorder eq {/FitH PageHeight} {/Fit} ifelse]   /DEST  pdfmark

		ShownPages ShownPagesData length ge {/ShownPagesData  ShownPagesData length 2 mul array dup  0  ShownPagesData  putinterval  store} if
		ShownPagesData  ShownPages
		<<
			[
				/PageWidth /PageHeight  /MgnL /MgnB /MgnR /MgnT
				/PageDestName /ThisPageOrdering /TypeOfPagesBeingRendered /SideBySideGlassesTastingNotes
				/NameNum /SheetNum /TastingSheetNum /WithinTitles   /PlaceNameSetNum
				/VoteRecorderSheetNum /VoteRecorderTopTextNum /DecantingNotesSheetNum /DecanterLabelsThisPageTitles
				/CorkDisplayThisPageTitles   /NeckTagsThisPageTitles
				/StickyLabelsTypeThis /StickyLabelsWithPagePortraitNumRows /StickyLabelsWithPagePortraitNumCols /StickyLabelsThisPageTitlesNames
			] {dup dup where {exch get} {pop //null} ifelse} forall  % Over wanted fields
			/ThisPaperType //null //null
			TypeOfPagesBeingRendered /Glasses        eq {pop pop PaperType               Orientation              } if
			TypeOfPagesBeingRendered /TastingNotes   eq {pop pop TastingNotesPaperType   TastingNotesOrientation  } if
			TypeOfPagesBeingRendered /PlaceName      eq {pop pop PlaceNamesPaperType     PlaceNamesOrientation    } if
			TypeOfPagesBeingRendered /PrePour        eq {pop pop PrePourPaperType        PrePourOrientation       } if
			TypeOfPagesBeingRendered /StickyLabels   eq {pop pop StickyLabelsPaperType   /Portrait                } if
			TypeOfPagesBeingRendered /VoteRecorder   eq {pop pop VoteRecorderPaperType   VoteRecorderOrientation  } if
			TypeOfPagesBeingRendered /DecantingNotes eq {pop pop DecantingNotesPaperType DecantingNotesOrientation} if
			TypeOfPagesBeingRendered /Accounts       eq {pop pop AccountsPaperType       AccountsOrientation      } if
			TypeOfPagesBeingRendered /CorkDisplay    eq {pop pop CorkDisplayPaperType    CDBestOrientation        } if
			TypeOfPagesBeingRendered /NeckTags       eq {pop pop NeckTagsPaperType       /Portrait                } if
			TypeOfPagesBeingRendered /DecanterLabels eq {pop pop DecanterLabelsPaperType DLOrientation {/Portrait} {/Landscape} ifelse} if
			TypeOfPagesBeingRendered /Empty          eq {pop pop PaperType               Orientation              } if
			/ThisOrientation exch
			/PageNum PageNum
			/PagesToBeInsertedData  PagesToBeInserted {PagesToBeInsertedData} {[]} ifelse
			TypeOfPagesBeingRendered /Glasses      eq {/ThisName Names                               dup length NameNum gt {NameNum get} {pop UnnamedAttendee PDFDocEncodingify} ifelse} if
			TypeOfPagesBeingRendered /TastingNotes eq {/ThisName NamesTastingNotes                   dup length NameNum gt {NameNum get} {pop UnnamedAttendee PDFDocEncodingify} ifelse} if
			TypeOfPagesBeingRendered /PlaceName    eq {/ThisName NamesPlaceNames PlaceNameSetNum get dup length NameNum gt {NameNum get} {pop UnnamedAttendee PDFDocEncodingify} ifelse} if
		>> put  % This works if the dictionary is made readonly, but just in case it doesn't in an unexpected way, not done

		TypeOfPagesBeingRendered /Glasses eq dup {pop /GlassesDestForEachCircle load MightBeTrue} if
		{
			4 dict begin
			0  1  SheetLengths SheetNum get 1 sub
			{
				WithinPage-WithinTitles-def
				CircleNonEmpty SheetNum get WithinPage get
				{
					[
						mark (Circle) [ NameNum SheetNum WithinPage GlassesCopyNum dup 0 le {pop} if ] {(_) exch 5 string cvs dup length 1 eq {(0) exch} if} forall ConcatenateToMark
						GlassesNumCopies 2 ge GlassesCopyNum 0 le and {dup (_00) Concatenate exch cvn exch} if  cvn  % If GlassesNumCopies>1 then double DEST, both with and without GlassesCopyNum
					]
					{
						/GlassesCircleDestName exch def
						GlassesDestForEachCircle
						{
							mark /Dest GlassesCircleDestName  /View [/FitR
								GlassPositions SheetNum get WithinPage get aload pop exch Radii SheetNum get //PrinterEpsilon add exch 1 index % y r x r
								4 copy  sub 3 1 roll sub 6 2 roll add 3 1 roll add
							]  /DEST  pdfmark
						} if  % GlassesDestForEachCircle
					} forall
					ShownGlassesCircles ShownGlassesCirclesData length ge {/ShownGlassesCirclesData  ShownGlassesCirclesData length 2 mul array dup  0  ShownGlassesCirclesData  putinterval  store} if
					ShownGlassesCirclesData ShownGlassesCircles << /SheetNum SheetNum  /PaperType PaperType  /WithinPage WithinPage  /WithinTitles WithinTitles  /NameNum NameNum  /GlassesCircleDestName GlassesCircleDestName  /PageNum ShownPages >> put
					/ShownGlassesCircles dup load 1 add store
				} if  % CircleNonEmpty ...
			} for  % WithinPage, WithinTitles
			end
		} if  % ... /Glasses ...GlassesDestForEachCircle ...

		end
		TestingShowThesePagesOnly dup type /arraytype eq {//false exch {execU ShownPages eq {pop //true exit} if} forall} {pop //true} ifelse {showpage} {erasepage initgraphics} ifelse
		/ShownPages dup load 1 add store
	} {erasepage initgraphics} ifelse  % PageSuppressed not  % http://groups.google.com/forum/#!topic/comp.lang.postscript/HVZVz0eBwrw
} bind def  % /ShowPage

/IsNumber {type dup /integertype eq exch /realtype eq or} bind def

/Min {//Infinity exch {2 copy gt {exch} if pop} forall} bind def
/Max {//InfinityNeg exch {2 copy lt {exch} if pop} forall} bind def

% array  ShuffleArray  array
/ShuffleArray
{
	2 dict begin
	dup length 1 sub  -1  1
	{
		/i exch def   /j rand i 1 add mod def
		i j ne {dup dup dup dup i get 3 1 roll j get i exch put j exch put} if
	} for  % i
	end
} bind def  % /ShuffleArray

% Thing0 Thing1 Code ExecArrays  TwoArraysFunction  Thing
% Builds new array, as deep as deeper, with Code applied to pairwise non-array elements.
% If a non-array thing applied to array, it is used with all inner things of the array.
% Use: applying the likes of {mul} to two nested arrays.
/TwoArraysFunction
{
	2 dict begin
	/ExecArrays exch def
	/Code exch def
	TwoArraysFunctionRecursive
	end
} bind def  % /TwoArraysFunction

/TwoArraysFunctionRecursive
{
	2 dict begin
	/Thing1 exch def
	/Thing0 exch def
	/Thing1 load type /arraytype eq  % for inner test
	/Thing0 load type /arraytype eq
	{
		{
			/Thing0 load length /Thing1 load length eq
				{[ 0 1 /Thing0 load ExecArrays {execU} if length 1 sub {dup /Thing0 load ExecArrays {execU} if exch get exch /Thing1 load ExecArrays {execU} if exch get TwoArraysFunctionRecursive} for ]}
				{(Error: TwoArraysFunctionRecursive, arrays of different lengths.) OutputToLog stop}
			ifelse  % equal lengths
		}{
			[ /Thing0 load ExecArrays {execU} if {/Thing1 load TwoArraysFunctionRecursive} forall ]
		} ifelse  % /Thing1 ... /arraytype eq
	}{
			{[ /Thing1 load ExecArrays {execU} if {/Thing0 load exch TwoArraysFunctionRecursive} forall ]}
			{/Thing0 load  /Thing1 load  Code}
		ifelse  % /Thing1 ... /arraytype eq
	} ifelse  % /Thing0 ... /arraytype eq
	end
} bind def % /TwoArraysFunctionRecursive

/TwoArraysFunctionDiv {dup abs //PrinterEpsilon le {pop abs //PrinterEpsilon le {(0/0)} {(Infinity)} ifelse} {div dup abs 0.01 lt {pop (small)} if} ifelse} bind def

% Array  AnyMatches  boolean
/AnyMatches
{
	4 dict begin  /Param exch def

	//false
	1  1  Param length 1 sub
	{
		/a exch def
		0  1  a 1 sub
		{
			/b exch def
			Param dup a GetEU exch b GetEU eq {pop //true exit} if
		} for  % b
		dup {exit} if
	} for  % a
	end
} bind def  % /AnyMatches

% http://bugs.ghostscript.com/show_bug.cgi?id=689664
/CurrentFontSize
{
	DeBugLevel 5 le {(+CurrentFontSize) OutputToLog} if
	currentfont dup
	/FontMatrix get 3 get  % current y scale
	exch /FontName get findfont /FontMatrix get 3 get  % original y scale
	div
	DeBugLevel 5 le {(-CurrentFontSize) OutputToLog} if
} bind def  % /CurrentFontSize
% https://groups.google.com/forum/#!topic/comp.lang.postscript/cteFkRmWMVg
/CurrentFontName {currentfont /FontName get} bind def

/SubscriptOn {0 CurrentFontSize -0.25 mul rmoveto  CurrentFontName CurrentFontSize 1.7 div selectfont} bind def
/SubscriptOff {CurrentFontName CurrentFontSize 1.7 mul selectfont  0 CurrentFontSize 0.25 mul rmoveto} bind def
/SuperscriptOn {0 CurrentFontSize 0.375 mul rmoveto  CurrentFontName CurrentFontSize 1.7 div selectfont} bind def
/SuperscriptOff {CurrentFontName CurrentFontSize 1.7 mul selectfont  0 CurrentFontSize -0.375 mul rmoveto} bind def
/Kern {CurrentFontSize mul 0 rmoveto} bind def
/UnderlineX0 null def  /UnderlineY0 null def  /UnderlineMatrix null def
/UnderlineBegin {/UnderlineMatrix matrix currentmatrix store  currentpoint /UnderlineY0 exch store /UnderlineX0 exch store} def
/UnderlinePaint
{
	DeBugLevel 15 le {(+UnderlinePaint) OutputToLog} if
	5 dict begin
	matrix currentmatrix UnderlineMatrix setmatrix currentpoint  /UnderlineY1 exch def /UnderlineX1 exch def  setmatrix
	/UnderlineLength UnderlineX1 UnderlineX0 sub dup mul  UnderlineY1 UnderlineY0 sub dup mul  add sqrt  def
	UnderlineLength 0 gt
	{
		/HalfUnderlineWidth
		currentfont /FontInfo known {currentfont /FontInfo get /UnderlineThickness known} {//false} ifelse
			{currentfont /FontInfo get /UnderlineThickness get CurrentFontSize mul}
			{CurrentFontSize 20.48 div}  % 20.48 is actual constant for /TimesNewRomanPS-ItalicMT
		ifelse  2 div def  % /HalfUnderlineWidth
		/OffsetY
		currentfont /FontInfo known {currentfont /FontInfo get /UnderlinePosition known} {//false} ifelse
		{currentfont /FontInfo get /UnderlinePosition get CurrentFontSize mul}
		{
			GSave  0 0 moveto (Qgjpqy) //true charpath PathBBox  GRestore
			pop pop exch pop   3 div   currentlinewidth 2 div sub
		} ifelse  def  % /OffsetY
		matrix currentmatrix UnderlineMatrix setmatrix
		UnderlineY0 UnderlineY1 sub UnderlineLength div OffsetY HalfUnderlineWidth add mul UnderlineX0 add
		UnderlineX1 UnderlineX0 sub UnderlineLength div OffsetY HalfUnderlineWidth add mul UnderlineY0 add
		moveto  % top of arc at start of underline
		UnderlineY0 UnderlineY1 sub UnderlineLength div  % x
		UnderlineX1 UnderlineX0 sub UnderlineLength div  % y
		2 copy   atan neg /a exch def  OffsetY mul exch OffsetY mul 2 copy
		UnderlineX0 add exch UnderlineY0 add  HalfUnderlineWidth  a 90 add a 270 add  arc
		UnderlineX1 add exch UnderlineY1 add  HalfUnderlineWidth  a 90 sub a  90 add  arc
		closepath   fill
		UnderlineX1 UnderlineY1 moveto setmatrix
	} if  % UnderlineLength 0 gt
	end
	/UnderlineMatrix null store  /UnderlineY0 null store  /UnderlineX0 null store
	DeBugLevel 15 le {(-UnderlinePaint) OutputToLog} if
} def  % /UnderlinePaint

% compoundString  ToSmallCaps  [pieces]
% Doesn't touch executable pieces: they not small-caps'd. Works well with font /DejaVuSerifCondensed, and presumably (but not tested) other /DejaVu... fonts.
/ToSmallCaps
{
	[ exch ToSmallCapsRecursive ]
} bind def  % /ToSmallCaps
/SmallCapsDict
<<
	/a /uni1D00  /b /uni0299  /c /uni1D04  /d /uni1D05  /e /uni1D07  /f /uniA730  /g /uni0262  /h /uni029C  /i /uni026A  /j /uni1D0A  /k /uni1D0B  /l  /uni029F  /m  /uni1D0D
	/n /uni0274  /o /uni1D0F  /p /uni1D18  /r /uni0280  /s /uniA731  /t /uni1D1B  /u /uni1D1C  /v /uni1D20  /w /uni1D21  /y /uni028F  /z /uni1D22  /ae /uni1D01  /oe /uni0276
>> readonly def  % /SmallCapsDict
/ToSmallCapsRecursive
{
	1 {
		dup xcheck {exit} if
		dup type /arraytype  eq { [ exch {ToSmallCapsRecursive} forall ] exit} if
		dup type /nametype   eq {dup //SmallCapsDict exch known {//SmallCapsDict exch get} if exit} if
		dup type /stringtype eq
		{
			3 dict begin
			/s exch def
			/iPrev 0 def
			0  1  s length 1 sub
			{
				/i exch def
				//SmallCapsDict  s i 1 getinterval cvn  known
				{
					i iPrev gt {s iPrev  i iPrev sub  getinterval} if
					//SmallCapsDict  s i 1 getinterval cvn  get
					/iPrev i 1 add store
				}{
					i s length 1 sub eq {s  iPrev  i 1 add iPrev sub  getinterval} if
				} ifelse  % //SmallCapsDict ... known
			} for  % i
			end
			exit
		} if  % ... /stringtype eq
	} repeat
} bind def  % /ToSmallCapsRecursive
currentdict /SmallCapsDict undef


% X0 Y0 X1 Y1 HeadLength HeadWidth TailWidth Head0 Head1  ArrowPath  -
% Head0 and Head1 are Booleans; other parameters numeric. Recommend HeadLength:HeadWidth:TailWidth in ratio 3:3:1 ==> tip angle = 2 ArcTan[1/2] ~= 53.13 degrees.
/ArrowPath
{
	DeBugLevel 10 le {(+ArrowPath) OutputToLog} if
	9 dict begin
	/Head1 exch def  /Head0 exch def  2 div /TailWidthHalf exch def  2 div /HeadWidthHalf exch def  /HeadLength exch def  /Y1 exch def  /X1 exch def  /Y0 exch def  /X0 exch def
	X1 X0 sub dup mul  Y1 Y0 sub dup mul  add sqrt  dup 0 gt
	{
		matrix currentmatrix exch  X0 Y0 translate  X0 X1 sub Y1 Y0 sub atan rotate
		Head0
			{TailWidthHalf HeadLength moveto  HeadWidthHalf HeadLength lineto  0 0 lineto  HeadWidthHalf neg HeadLength lineto  TailWidthHalf neg HeadLength lineto}
			{TailWidthHalf 0 moveto  TailWidthHalf neg 0 lineto}
		ifelse  % Head0
		Head1
			{dup HeadLength sub TailWidthHalf neg exch lineto  dup HeadLength sub HeadWidthHalf neg exch lineto  dup 0 exch lineto  dup HeadLength sub HeadWidthHalf exch lineto  HeadLength sub TailWidthHalf exch lineto}
			{dup TailWidthHalf neg exch lineto  TailWidthHalf exch lineto}
		ifelse  % Head1
		closepath  setmatrix
	} {pop} ifelse  % Point not the same
	end
	DeBugLevel 10 le {(-ArrowPath) OutputToLog} if
} bind def  % /ArrowPath

% Immediate dependencies: DeBugLevel; OutputToLog; PolynomialRoots; Stopped.
% -  PathBBox  llx lly urx ury
% assesses only parts that will show visibly. I.e., proper handling of curves.
/PathBBox
{
	DeBugLevel 10 le {(+PathBBox) OutputToLog} if
	22 dict begin

	1 {
		/MinMaxDefinedX //false def
		/MinMaxDefinedY //false def
		/b //false def  % boolean playing two roles

		/SetMinMaxX  % takes one parameter
		{
			/z exch def
			MinMaxDefinedX
				{MaxX z lt {/MaxX z def} {MinX z gt {/MinX z def} if} ifelse}  % test Max first as charpath typically drawn right-to-left
				{/MaxX z def    /MinX z def    /MinMaxDefinedX //true def}
			ifelse
		} def  % SetMinMaxX
		/SetMinMaxY  % takes one parameter
		{
			/z exch def
			MinMaxDefinedY
				{MaxY z lt {/MaxY z def} {MinY z gt {/MinY z def} if} ifelse}
				{/MaxY z def    /MinY z def    /MinMaxDefinedY //true def}
			ifelse
		} def  % SetMinMaxY

		% First rough bounds from a quick run-through, as doing so can save doing needless arithmetic in curve routine.
		{
			{ % start move
				/y0 exch def    /x0 exch def
				/b //true def
			}  % end of move
			{  % start line
				/y1 exch def    /x1 exch def
				b {x0 SetMinMaxX  y0 SetMinMaxY  /b //false def} if
				x1 SetMinMaxX y1 SetMinMaxY
			}  % end of line
			{  % start curve
				/y3 exch def  /x3 exch def  pop pop pop pop
				b {x0 SetMinMaxX  y0 SetMinMaxY  /b //false def} if
				x3 SetMinMaxX  y3 SetMinMaxY
			}  % end of curve
			{  % start close
			}  % end of close
			pathforall
		} Stopped {(Warning: protected path in PathBBox, position 1) OutputToLog  GSave 0 setflat flattenpath pathbbox GRestore  exit} if

		% Second a slower run-through, not redoing the above, but, where necessary, thinking hard about curves. Different role for b.
		{
			{ % start move
				/y0 exch def    /x0 exch def
				/b //true def
			}  % end of move
			{  % start line
				/y0 exch def    /x0 exch def
			}  % end of line
			{  % start curve
				/y3 exch def  /x3 exch def    /y2 exch def  /x2 exch def    /y1 exch def  /x1 exch def

				x1 MaxX gt  x1 MinX lt  x2 MaxX gt  x2 MinX lt  or or or
				{
					% Cubic: a t^3 + b t^2 + c t + x0
					/a x0 neg x1 3 mul add x2 3 mul sub x3 add def
					/b x0 x1 2 mul sub x2 add 3 mul def
					/c x1 x0 sub 3 mul def

					% Solve first differential for zero
					[ c  2 b mul  3 a mul ] 0 //true 1 //true //Epsilon PolynomialRoots {dup dup a mul b add mul c add mul x0 add SetMinMaxX} forall
				} if  % x bounds outside MinX to MaxX

				y1 MaxY gt  y1 MinY lt  y2 MaxY gt  y2 MinY lt  or or or
				{
					/a y0 neg y1 3 mul add y2 3 mul sub y3 add def
					/b y0 y1 2 mul sub y2 add 3 mul def
					/c y1 y0 sub 3 mul def
					[ c  2 b mul  3 a mul ] 0 //true 1 //true //Epsilon PolynomialRoots {dup dup a mul b add mul c add mul y0 add SetMinMaxY} forall
				} if  % y bounds outside MinY to MaxY
				/y0 y3 def    /x0 x3 def
			}  % end of curve
			{  % start close
			}  % end of close
			pathforall
		} Stopped {(Warning: protected path in PathBBox, position 2, which is weird unless a routine such as PolynomialRoots is missing.) OutputToLog  GSave 0 setflat flattenpath pathbbox GRestore  exit} if

		MinMaxDefinedX MinMaxDefinedY and
		{
			MinX MinY MaxX MaxY
		}{
			b
			{
				% No lines, no curves, but some moves
				{
					{SetMinMaxY SetMinMaxX} {pop pop} {pop pop pop pop pop pop} {}  % the pop's should be redundant
					pathforall
				} Stopped {(Warning: protected path in PathBBox, position 3) OutputToLog  GSave 0 setflat flattenpath pathbbox GRestore  exit} if
				MinX MinY MaxX MaxY
			}{
				% completely empty path
				emptycurrentpath  % this may well cause execution to cease
			} ifelse  % b
		} ifelse  % MinMaxDefinedX MinMaxDefinedY and
	} repeat  % 1

	end
	DeBugLevel 10 le {(-PathBBox) OutputToLog} if
} bind def  % PathBBox

% CentreX CentreY MinMaxRadiusSquared Tolerance   PathBRadiusSquared   MaxRadiusSquared
% What is largest distance from CentreX,CentreY?
/PathBRadiusSquared
{
	DeBugLevel 10 le {(+PathBRadiusSquared) OutputToLog} if
	23 dict begin
	/Tolerance exch def  /MaxRadiusSquared exch def  /CentreY exch def  /CentreX exch def

	/SetMaxR  % takes two parameters, x y
	{
		CentreY sub dup mul  exch  CentreX sub dup mul  add
		dup MaxRadiusSquared gt {/MaxRadiusSquared exch def} {pop} ifelse
	} def  % SetMaxR

	1 {
		% First rough bounds from a quick run-through, as doing so can save doing needless arithmetic in curve routine.
		{
			{ % start move
				/y0 exch def    /x0 exch def
				/b //true def
			}  % end of move
			{  % start line
				b {x0 y0 SetMaxR  /b //false def} if
				/y0 exch def    /x0 exch def
				x0 y0 SetMaxR
			}  % end of line
			{  % start curve
				b {x0 y0 SetMaxR  /b //false def} if
				/y0 exch def  /x0 exch def  pop pop pop pop
				x0 y0 SetMaxR
			}  % end of curve
			{  % start close
			}  % end of close
			pathforall
		} Stopped
		{
			(Warning: protected path in PathBRadiusSquared, position 1) OutputToLog
			GSave flattenpath pathbbox GRestore  4 copy 3 1 roll exch  SetMaxR SetMaxR SetMaxR SetMaxR  exit
		} if  % Stopped

		% Second a slower run-through, not redoing the above, but, where necessary, thinking hard about curves. Different role for b.
		{
			{  % start move
				/y0 exch def    /x0 exch def
			}  % end of move
			{  % start line
				/y0 exch def    /x0 exch def
			}  % end of line
			{  % start curve
				/y3 exch def  /x3 exch def    /y2 exch def  /x2 exch def    /y1 exch def  /x1 exch def
				y2 CentreY sub dup mul  x2 CentreX sub dup mul  add  MaxRadiusSquared gt
				y1 CentreY sub dup mul  x1 CentreX sub dup mul  add  MaxRadiusSquared gt  or
				{
					/ax x0 neg x1 3 mul add x2 3 mul sub x3 add def
					/ay y0 neg y1 3 mul add y2 3 mul sub y3 add def
					/bx x0 x1 2 mul sub x2 add 3 mul def
					/by y0 y1 2 mul sub y2 add 3 mul def
					/cx x1 x0 sub 3 mul def
					/cy y1 y0 sub 3 mul def

					/tNumIntervals
					Tolerance 0 eq {256}
					{
						x0 x1 sub abs  x0 x2 sub abs  x0 x3 sub abs  x1 x2 sub abs  x1 x3 sub abs  x2 x3 sub abs
						y0 y1 sub abs  y0 y2 sub abs  y0 y3 sub abs  y1 y2 sub abs  y1 y3 sub abs  y2 y3 sub abs
						11 {2 copy lt {exch} if pop} repeat
						Tolerance add  3 mul  Tolerance div ceiling cvi  % the 3 mul is slightly excessive
					} ifelse  def  % /tNumIntervals

					1  1  tNumIntervals 1 sub
					{
						tNumIntervals div /t exch def
						ax t mul bx add t mul cx add t mul x0 add
						ay t mul by add t mul cy add t mul y0 add
						SetMaxR
					} for  % t
				} if  % curve might cross current boundary
				/y0 y3 def    /x0 x3 def
			}  % end of curve
			{  % start close
			}  % end of close
			pathforall
		} exec //false % Stopped
		{
			(Warning: protected path in PathBRadiusSquared, position 2) OutputToLog
			GSave flattenpath pathbbox GRestore  4 copy 3 1 roll exch  SetMaxR SetMaxR SetMaxR SetMaxR  exit
		} if  % Stopped
	} repeat  % 1

	MaxRadiusSquared
	end
	DeBugLevel 10 le {(-PathBRadiusSquared) OutputToLog} if
} bind def  % PathBRadiusSquared

% ExpansionCentreX ExpansionCentreY CircleCentreX CircleCentreY CircleRadius   PathMaxScalingFitCircle   Scaling
% Given a fixed circle, and a path, buy how what factor can the path be expanded about a fixed point and still fit in circle?
/PathMaxScalingFitCircle
{
	DeBugLevel 10 le {(+PathMaxScalingFitCircle) OutputToLog} if
	31 dict begin
	/CircleRadius exch def  /CircleCentreY exch def  /CircleCentreX exch def  /ExpansionCentreY exch def  /ExpansionCentreX exch def

	/MaxS //Infinity def

	1 {
		/SetMaxS  % takes two parameters, x y, returns boolean showing whether an improvement
		{
			/yyy exch def  /xxx exch def

			% ( s*(xxx-ExpansionCentreX) + ExpansionCentreX - CircleCentreX )^2  +  ( s*(yyy-ExpansionCentreY) + ExpansionCentreY - CircleCentreY )^2  ==  CircleRadius^2
			% Hence:
			% s^2: (xxx-ExpansionCentreX)^2 + (yyy-ExpansionCentreY)^2
			% s^1: 2(xxx-ExpansionCentreX)*(ExpansionCentreX-CircleCentreX) + 2(yyy-ExpansionCentreY)*(ExpansionCentreY-CircleCentreY)
			% s^0: (ExpansionCentreX-CircleCentreX)^2 + (ExpansionCentreY-CircleCentreY)^2 - CircleRadius^2
			/aaa  xxx ExpansionCentreX sub dup mul  yyy ExpansionCentreY sub dup mul  add def
			//false
			aaa 0 gt
			{
				/bbb  xxx ExpansionCentreX sub ExpansionCentreX CircleCentreX sub mul  yyy ExpansionCentreY sub ExpansionCentreY CircleCentreY sub mul  add 2 mul  def
				/ccc  ExpansionCentreX CircleCentreX sub dup mul  ExpansionCentreY CircleCentreY sub dup mul  add  CircleRadius dup mul sub  def
				[ ccc bbb aaa ] 0 //true //Infinity //true //PrinterEpsilon PolynomialRoots {dup MaxS lt {/MaxS exch def pop //true} {pop} ifelse} forall
			} if  % aaa 0 gt
		} def  % SetMaxS

		% Can't test for bounding box, so only one run-through
		{
			{ % start move
				/y0 exch def    /x0 exch def
				/b //true def
			}  % end of move
			{  % start line
				b {x0 y0 SetMaxS pop  /b //false def} if
				/y0 exch def    /x0 exch def
				x0 y0 SetMaxS pop
			}  % end of line
			{  % start curve
				/y3 exch def  /x3 exch def    /y2 exch def  /x2 exch def    /y1 exch def  /x1 exch def
				b {x0 y0 SetMaxS pop  /b //false def} if
				x3 y3 SetMaxS pop
				/ax x0 neg x1 3 mul add x2 3 mul sub x3 add def
				/ay y0 neg y1 3 mul add y2 3 mul sub y3 add def
				/bx x0 x1 2 mul sub x2 add 3 mul def
				/by y0 y1 2 mul sub y2 add 3 mul def
				/cx x1 x0 sub 3 mul def
				/cy y1 y0 sub 3 mul def

				/MoreWorkToDo //false def
				1  1  7
				{
					8 div /t exch def
					ax t mul bx add t mul cx add t mul x0 add
					ay t mul by add t mul cy add t mul y0 add
					SetMaxS {/MoreWorkToDo //true def} if
				} for  % t
				MoreWorkToDo
				{
					1  1  255
					{
						dup 8 mod 0 ne
						{
							256 div /t exch def
							ax t mul bx add t mul cx add t mul x0 add
							ay t mul by add t mul cy add t mul y0 add
							SetMaxS pop
						} {pop} ifelse  % 8 mod 0 ne
					} for  % t
				} if  % MoreWorkToDo
				/y0 y3 def    /x0 x3 def
			} % end of curve
			{  % start close
			}  % end of close
			pathforall
		} Stopped
		{
			(Warning: protected path in PathMaxScalingFitCircle) OutputToLog
			GSave flattenpath pathbbox GRestore  4 copy 3 1 roll exch  SetMaxS pop  SetMaxS pop  SetMaxS pop  SetMaxS pop  exit
		} if  % Stopped

		MaxS
	} repeat  % 1

	end
	DeBugLevel 10 le {(-PathMaxScalingFitCircle) OutputToLog} if
} bind def  % PathMaxScalingFitCircle


% Immediate dependencies: DeBugLevel; OutputToLog; PrinterEpsilon; Epsilon; Infinity; PolynomialRoots.
% Have functions X[z] and Y[z], for z over some range. ApproximatingCurve approximates such a path with a single cubic Bezier curve. That approximation
% has, at the _s_tart and _e_nd points, same position as original function, same tangent, same curvature. ApproximatingCurve returns the middle two
% knot points of a cubic Bezier. The calling code might, for example, have the first as the currentpoint, and append the last before calling curveto.
% Xs Ys Xe Ye dXs dYs dXe dYe ddXs ddYs ddXe ddYe  ApproximatingCurve  X1 Y1 X2 Y2
% https://groups.google.com/forum/#!topic/comp.lang.postscript/3RIq0Jnwrbo
/ApproximatingCurve
{
	DeBugLevel 10 le {(+ApproximatingCurve) OutputToLog} if
	32 dict begin
	/ddYe exch def /ddXe exch def /ddYs exch def /ddXs exch def /dYe exch def /dXe exch def /dYs exch def /dXs exch def /Ye exch def /Xe exch def /Ys exch def /Xs exch def
	currentpoint Ys ne exch Xs ne or {Xs Ys lineto} if
	1 {
		dXs 0 eq dYs 0 eq and
		{
			(Warning in ApproximatingCurve: function to be approximated has zero speed at start. This case has not been coded. Straight line output.) OutputToLog
			Xs 2 mul Xe add 3 div  Ys 2 mul Ye add 3 div   Xs Xe 2 mul add 3 div  Ys Ye 2 mul add 3 div   exit
		} if  % Zero speed at start
		dXe 0 eq dYe 0 eq and
		{
			(Warning in ApproximatingCurve: function to be approximated has zero speed at end. This case has not been coded. Straight line output.) OutputToLog
			Xs 2 mul Xe add 3 div  Ys 2 mul Ye add 3 div   Xs Xe 2 mul add 3 div  Ys Ye 2 mul add 3 div   exit
		} if  % Zero speed at end

		/Xgap Xe Xs sub def  /Ygap Ye Ys sub def  % Implicitly setting (Xs,Ys) to (0,0) lessens accumulated arithmetic errors.
		/OrigSpeed_s dXs dup mul dYs dup mul add sqrt def
		/OrigSpeed_e dXe dup mul dYe dup mul add sqrt def

		% Two equations, each factors into two quartics. Can arrange Speed2 in terms of Speed1, but that has a divide-by-zero if end velocities
		% parallel. Instead consider the four possibilities of one quartic from each equation, solve pairwise, take best. Inelegant, but functional.
		/Speed1Coeffs [
			[
				4 -2 dXs dup mul mul Xgap mul dYe mul 2 dXe mul dXs mul 2 dYs mul Xgap mul dXs Ygap mul add mul add dYe mul -2 dYs mul dYs Xgap mul dXs Ygap mul 2 mul add mul dXe dup mul mul 3 ddXe mul dYs Xgap mul dXs Ygap mul sub dup mul mul add add
				dYe mul dXe 3 ddYe mul Xgap dup mul mul 2 dXe dup mul mul Ygap mul sub dYs mul 6 ddYe mul dXs mul Xgap mul Ygap mul sub dYs mul 3 ddYe mul dXs dup mul mul Ygap dup mul mul add mul sub mul  % Coeff 0
				8 dXs dYe mul dXe dYs mul sub dup dup mul mul mul  % Coeff 1
				36 ddYe dXe mul ddXe dYe mul sub mul ddYs dXs mul ddXs dYs mul sub mul dXs Ygap mul dYs Xgap mul sub mul  % Coeff 2
				0  % Coeff 3
				-27 ddYe dXe mul ddXe dYe mul sub mul ddYs dXs mul ddXs dYs mul sub dup mul mul  % Coeff 4
			][
				4 2 dXs dup mul mul Xgap mul dYe mul 2 dXe mul dXs mul 2 dYs mul Xgap mul dXs Ygap mul add mul sub dYe mul 2 dYs mul dYs Xgap mul dXs Ygap mul 2 mul add mul dXe dup mul mul 3 ddXe mul dYs Xgap mul dXs Ygap mul sub dup mul mul add add
				dYe mul dXe 3 ddYe mul Xgap dup mul mul 2 dXe dup mul mul Ygap mul add dYs mul 6 ddYe mul dXs mul Xgap mul Ygap mul sub dYs mul 3 ddYe mul dXs dup mul mul Ygap dup mul mul add mul sub mul  % Coeff 0
				-8 dXs dYe mul dXe dYs mul sub dup dup mul mul mul  % Coeff 1
				36 ddYe dXe mul ddXe dYe mul sub mul ddYs dXs mul ddXs dYs mul sub mul dXs Ygap mul dYs Xgap mul sub mul  % Coeff 2
				0  % Coeff 3
				-27 ddYe dXe mul ddXe dYe mul sub mul ddYs dXs mul ddXs dYs mul sub dup mul mul  % Coeff 4
			][
				4 -2 dXs dup mul mul Xgap mul dYe mul 2 dXe mul dXs mul 2 dYs mul Xgap mul dXs Ygap mul add mul add dYe mul -2 dYs mul dYs Xgap mul dXs Ygap mul 2 mul add mul dXe dup mul mul 3 ddXe mul dYs Xgap mul dXs Ygap mul sub dup mul mul add add
				dYe mul dXe 3 ddYe mul Xgap dup mul mul 2 dXe dup mul mul Ygap mul sub dYs mul 6 ddYe mul dXs mul Xgap mul Ygap mul sub dYs mul 3 ddYe mul dXs dup mul mul Ygap dup mul mul add mul sub mul  % Coeff 0
				8 dXs dYe mul dXe dYs mul sub dup dup mul mul mul  % Coeff 1
				-36 ddYe dXe mul ddXe dYe mul sub mul ddYs dXs mul ddXs dYs mul sub mul dXs Ygap mul dYs Xgap mul sub mul  % Coeff 2
				0  % Coeff 3
				-27 ddYe dXe mul ddXe dYe mul sub mul ddYs dXs mul ddXs dYs mul sub dup mul mul  % Coeff 4
			][
				4 2 dXs dup mul mul Xgap mul dYe mul 2 dXe mul dXs mul 2 dYs mul Xgap mul dXs Ygap mul add mul sub dYe mul 2 dYs mul dYs Xgap mul dXs Ygap mul 2 mul add mul dXe dup mul mul 3 ddXe mul dYs Xgap mul dXs Ygap mul sub dup mul mul add add
				dYe mul dXe 3 ddYe mul Xgap dup mul mul 2 dXe dup mul mul Ygap mul add dYs mul 6 ddYe mul dXs mul Xgap mul Ygap mul sub dYs mul 3 ddYe mul dXs dup mul mul Ygap dup mul mul add mul sub mul  % Coeff 0
				-8 dXs dYe mul dXe dYs mul sub dup dup mul mul mul  % Coeff 1
				-36 ddYe dXe mul ddXe dYe mul sub mul ddYs dXs mul ddXs dYs mul sub mul dXs Ygap mul dYs Xgap mul sub mul  % Coeff 2
				0  % Coeff 3
				-27 ddYe dXe mul ddXe dYe mul sub mul ddYs dXs mul ddXs dYs mul sub dup mul mul  % Coeff 4
			]
		] def  % /Speed1Coeffs
		/Speed2Coeffs [
			[
				8 dXe dup mul mul Xgap mul dYs mul 8 dXe mul dXs mul 2 dYe mul Xgap mul dXe Ygap mul add mul sub dYs mul 4 2 dYe mul dYe Xgap mul dXe Ygap mul 2 mul add mul dXs dup mul mul 3 ddXs mul dYe Xgap mul dXe Ygap mul sub dup mul mul sub mul add
				dYs mul 4 dXs mul 3 ddYs mul Xgap dup mul mul 2 dXs dup mul mul Ygap mul sub dYe mul 6 ddYs mul dXe mul Xgap mul Ygap mul sub dYe mul 3 ddYs mul dXe dup mul mul Ygap dup mul mul add mul add  % Coeff 0
				8 dXs dYe mul dXe dYs mul sub dup dup mul mul mul  % Coeff 1
				-36 ddYe dXe mul ddXe dYe mul sub mul ddYs dXs mul ddXs dYs mul sub mul dXe Ygap mul dYe Xgap mul sub mul  % Coeff 2
				0  % Coeff 3
				27 ddYe dXe mul ddXe dYe mul sub dup mul mul ddYs dXs mul ddXs dYs mul sub mul  % Coeff 4
			][
				8 dXe dup mul mul Xgap mul dYs mul 8 dXe mul dXs mul 2 dYe mul Xgap mul dXe Ygap mul add mul sub dYs mul 4 2 dYe mul dYe Xgap mul dXe Ygap mul 2 mul add mul dXs dup mul mul 3 ddXs mul dYe Xgap mul dXe Ygap mul sub dup mul mul sub mul add
				dYs mul 4 dXs mul 3 ddYs mul Xgap dup mul mul 2 dXs dup mul mul Ygap mul sub dYe mul 6 ddYs mul dXe mul Xgap mul Ygap mul sub dYe mul 3 ddYs mul dXe dup mul mul Ygap dup mul mul add mul add  % Coeff 0
				8 dXs dYe mul dXe dYs mul sub dup dup mul mul mul  % Coeff 1
				36 ddYe dXe mul ddXe dYe mul sub mul ddYs dXs mul ddXs dYs mul sub mul dXe Ygap mul dYe Xgap mul sub mul  % Coeff 2
				0  % Coeff 3
				27 ddYe dXe mul ddXe dYe mul sub dup mul mul ddYs dXs mul ddXs dYs mul sub mul  % Coeff 4
			][
				-8 dXe dup mul mul Xgap mul dYs mul 8 dXe mul dXs mul 2 dYe mul Xgap mul dXe Ygap mul add mul add dYs mul 4 2 dYe mul dYe Xgap mul dXe Ygap mul 2 mul add mul dXs dup mul mul 3 ddXs mul dYe Xgap mul dXe Ygap mul sub dup mul mul add mul sub
				dYs mul 4 dXs mul 3 ddYs mul Xgap dup mul mul 2 dXs dup mul mul Ygap mul add dYe mul 6 ddYs mul dXe mul Xgap mul Ygap mul sub dYe mul 3 ddYs mul dXe dup mul mul Ygap dup mul mul add mul add  % Coeff 0
				-8 dXs dYe mul dXe dYs mul sub dup dup mul mul mul  % Coeff 1
				-36 ddYe dXe mul ddXe dYe mul sub mul ddYs dXs mul ddXs dYs mul sub mul dXe Ygap mul dYe Xgap mul sub mul  % Coeff 2
				0  % Coeff 3
				27 ddYe dXe mul ddXe dYe mul sub dup mul mul ddYs dXs mul ddXs dYs mul sub mul  % Coeff 4
			][
				-8 dXe dup mul mul Xgap mul dYs mul 8 dXe mul dXs mul 2 dYe mul Xgap mul dXe Ygap mul add mul add dYs mul 4 2 dYe mul dYe Xgap mul dXe Ygap mul 2 mul add mul dXs dup mul mul 3 ddXs mul dYe Xgap mul dXe Ygap mul sub dup mul mul add mul sub
				dYs mul 4 dXs mul 3 ddYs mul Xgap dup mul mul 2 dXs dup mul mul Ygap mul add dYe mul 6 ddYs mul dXe mul Xgap mul Ygap mul sub dYe mul 3 ddYs mul dXe dup mul mul Ygap dup mul mul add mul add  % Coeff 0
				-8 dXs dYe mul dXe dYs mul sub dup dup mul mul mul  % Coeff 1
				36 ddYe dXe mul ddXe dYe mul sub mul ddYs dXs mul ddXs dYs mul sub mul dXe Ygap mul dYe Xgap mul sub mul  % Coeff 2
				0  % Coeff 3
				27 ddYe dXe mul ddXe dYe mul sub dup mul mul ddYs dXs mul ddXs dYs mul sub mul  % Coeff 4
			]
		] def  % /Speed2Coeffs

		/CurvatureWanted_s dXs ddYs mul dYs ddXs mul sub  dXs dup mul dYs dup mul add dup sqrt mul  div def
		/CurvatureWanted_e dXe ddYe mul dYe ddXe mul sub  dXe dup mul dYe dup mul add dup sqrt mul  div def
		/BestError //Infinity def
		/BestSpeed1 //InfinityNeg def
		/BestSpeed2 //InfinityNeg def

		0 1 3
		{
			/CoeffsNum exch def
			/Speed1s  Speed1Coeffs CoeffsNum get  0  //false  Infinity OrigSpeed_s dup 1 lt {div} {pop} ifelse  //true   //PrinterEpsilon OrigSpeed_s div Epsilon 2 copy gt {exch} if pop  PolynomialRoots  def
			/Speed2s  Speed2Coeffs CoeffsNum get  0  //false  Infinity OrigSpeed_e dup 1 lt {div} {pop} ifelse  //true   //PrinterEpsilon OrigSpeed_e div Epsilon 2 copy gt {exch} if pop  PolynomialRoots  def

			Speed1s
			{
				/Speed1 exch def
				/X1 Xs Speed1 dXs mul add def
				/Y1 Ys Speed1 dYs mul add def
				Speed2s
				{
					/Speed2 exch def
					/X2 Xe Speed2 dXe mul sub def
					/Y2 Ye Speed2 dYe mul sub def
					1 {
						Ys Y1 sub X2 mul Y1 Y2 sub Xs mul add Y2 Ys sub X1 mul add 2 mul  X1 Xs sub dup mul Y1 Ys sub dup mul add dup sqrt mul 3 mul  dup 0 eq {pop pop     Infinity exit} if div  CurvatureWanted_s sub dup mul
						Y1 Y2 sub Xe mul Y2 Ye sub X1 mul add Ye Y1 sub X2 mul add 2 mul  X2 Xe sub dup mul Y2 Ye sub dup mul add dup sqrt mul 3 mul  dup 0 eq {pop pop pop Infinity exit} if div  CurvatureWanted_e sub dup mul add
					} repeat  % 1
					dup BestError lt {/BestError exch def /BestSpeed1 Speed1 def /BestSpeed2 Speed2 def} {pop} ifelse
				} forall  % Speed2s
			} forall  % Speed1s
		} for  % CoeffsNum

		BestSpeed1 //InfinityNeg ne  BestSpeed2 //InfinityNeg ne  and
		{
			Xs BestSpeed1 dXs mul add
			Ys BestSpeed1 dYs mul add
			Xe BestSpeed2 dXe mul sub
			Ye BestSpeed2 dYe mul sub  exit  % gsave newpath 4 copy 2 {0.24 0 360 arc closepath 0.03 setlinewidth 0 setgray stroke} repeat grestore
		}{
			( ApproximatingCurve: failure to find solution. Approximating approximation.) OutputToLog
			Xs 2 mul Xe add 3 div  Ys 2 mul Ye add 3 div   Xs Xe 2 mul add 3 div  Ys Ye 2 mul add 3 div   exit
		} ifelse  % any solution to speeds
	} repeat % 1
	end
	DeBugLevel 10 le {(-ApproximatingCurve) OutputToLog} if
} bind def  % /ApproximatingCurve

% Immediate dependencies: DeBugLevel; OutputToLog; PrinterEpsilon; Epsilon; DegreeInRadians.
% NumArms AngOffset CentreX CentreY RadiusMax RadiusBetweenArms Clockwise  ArchimedeanSpiralPath  -
/ArchimedeanSpiralPath
{
	DeBugLevel 1 le {(+ArchimedeanSpiralPath) OutputToLog} if
	28 dict begin
	/Clockwise exch def  /RadiusBetweenArms exch def  /RadiusMax exch def  /CentreY exch def  /CentreX exch def  /AngOffset exch def  /NumArms exch def

	/dRadius RadiusBetweenArms NumArms mul 360 div def

	0 1 NumArms 1 sub
	{
		/SpiralNum exch def
		/LastLap false def
		/AngSumSteps 0 def
		/AngStart SpiralNum 360 mul NumArms div  AngOffset  add def
		0 1 1023 % max number of loops: if this many done, something broken.
		{
			/i exch def
			/Radius AngSumSteps abs dRadius mul def
			Radius abs RadiusMax abs //PrinterEpsilon sub gt
			{
				/LastLap true def
				Radius abs RadiusMax abs gt {/AngSumSteps RadiusMax dRadius div AngSumSteps 0 lt {neg} if def  /Radius RadiusMax def} if
			} if  % Within PrinterEpsilon of done
			AngStart AngSumSteps add  {dup 360 ge {360 sub} {exit} ifelse} loop  {dup -270 le {360 add} {exit} ifelse} loop  dup sin /SinAng exch def cos /CosAng exch def
			/Xe SinAng Radius mul CentreX add def    /dXe SinAng dRadius mul  CosAng //DegreeInRadians mul Radius mul  Clockwise {add} {sub} ifelse  def
			/Ye CosAng Radius mul CentreY add def    /dYe CosAng dRadius mul  SinAng //DegreeInRadians mul Radius mul  Clockwise {sub} {add} ifelse  def
			/ddXe SinAng //DegreeInRadians dup mul mul Radius mul neg  CosAng //DegreeInRadians mul dRadius mul  2 mul Clockwise {add} {sub} ifelse  def
			/ddYe CosAng //DegreeInRadians dup mul mul Radius mul neg  SinAng //DegreeInRadians mul dRadius mul -2 mul Clockwise {add} {sub} ifelse  def
			i 0 eq {Xe Ye moveto} {Xs Ys Xe Ye dXs dYs dXe dYe ddXs ddYs ddXe ddYe ApproximatingCurve  Xe Ye curveto} ifelse
			% gsave newpath Xe Ye 0.24 0 360 arc closepath gsave 0 0 1 setrgbcolor fill grestore 0.03 setlinewidth 1 0 0 setrgbcolor stroke grestore
			LastLap {exit} if
			/Xs Xe def /dXs dXe def /ddXs ddXe def  /Ys Ye def /dYs dYe def /ddYs ddYe def
			/AngSumSteps  AngSumSteps  60  Clockwise {add} {sub} ifelse  def  % [ 10 20 30 60 ] dup length 1 sub dup i gt {pop i} if get
		} for  % i
	} for  % SpiralNum
	end
	DeBugLevel 20 le {(-ArchimedeanSpiralPath) OutputToLog} if
} bind def  % ArchimedeanSpiralPath


% Two uses.
% Bug in Adobe Distiller 8.1.3 (23/10/2006). In attempting to treat paths derived from text as copyable text, it fails to cope with paths made partly thereby and partly from a upath.
% Also, eliminates some types of problems with embedding fonts.
/DeFontPath
{
	DeBugLevel 10 le {(+DeFontPath) OutputToLog} if
	{
		[ {/moveto cvx} {/lineto cvx} {/curveto cvx} {/closepath cvx} pathforall ] newpath cvx exec
	} Stopped {(Warning: protected path in DeFontPath) OutputToLog} if
	DeBugLevel 10 le {(-DeFontPath) OutputToLog} if
} bind def  % /DeFontPath

% A valid first parameter is a glyph name, a string, or an array of valid parameters.
% CharPathRecMoveto computes the path, moving the currentpoint as if after a show.
/CharPathRecMoveto
{
	DeBugLevel 10 le {(+CharPathRecMoveto) OutputToLog} if
	2 dict begin
	/bln exch def
	/param exch def
	1 {
		/param load xcheck {[/param load ExecUExceptNotBindedPainting] bln CharPathRecMoveto exit} if
		param type dup /integertype eq exch /realtype eq or {/param param ToString store} if  % no 'exit'.
		param type /stringtype eq {currentpoint exch param stringwidth pop add exch  param bln charpath  moveto exit} if
		param type /nametype eq {param bln GlyphPathMoveto exit} if
		param type /arraytype eq {param {bln CharPathRecMoveto} forall exit} if
		mark (Error: CharPathRecMoveto parameter ) /param load 0 //true ThingToDebugText  ( is of type ) /param load type  ( rather than executable, string, name, number or array.)  ConcatenateToMark OutputToLog stop
	} repeat
	end
	DeBugLevel 10 le {(-CharPathRecMoveto) OutputToLog} if
} bind def  % /CharPathRecMoveto

% https://groups.google.com/forum/#!topic/comp.lang.postscript/hZmiLPonDl8
/CharPathRecursiveMoveto
{
	DeBugLevel 10 le {(+CharPathRecursiveMoveto) OutputToLog} if
	1 index  XcheckRecursive  3 1 roll
	CharPathRecMoveto
	{DeFontPath} if
	DeBugLevel 10 le {(-CharPathRecursiveMoveto) OutputToLog} if
} bind def  % /CharPathRecursiveMoveto

% A valid first parameter is a glyph name, a string, or an array of valid parameters.
% CharPathRec computes the path, destroying the currentpoint.
/CharPathRec
{
	DeBugLevel 9 le {(+CharPathRec) OutputToLog} if
	9 dict begin
	/bln exch def
	/param exch def
	1 {
		/param load xcheck {[/param load ExecUExceptNotBindedPainting] bln CharPathRec exit} if
		param type dup /integertype eq exch /realtype eq or {/param param ToString store} if  % no 'exit'.
		param type /stringtype eq {param bln charpath exit} if
		param type /nametype eq {param bln GlyphPath exit} if
		param type /arraytype eq {param length 0 gt {0 1 param length 2 sub {param exch get bln CharPathRecMoveto} for  param  dup length 1 sub  get   bln CharPathRec} if exit} if
		mark  (Error: CharPathRec parameter )  /param load 0 //true ThingToDebugText  ( is of type ) /param load type  ( rather than executable, string, name, number, or array.) ConcatenateToMark OutputToLog stop
	} repeat
	end
	DeBugLevel 9 le {(-CharPathRec) OutputToLog} if
} bind def  % /CharPathRec

% https://groups.google.com/forum/#!topic/comp.lang.postscript/hZmiLPonDl8
/CharPathRecursive
{
	DeBugLevel 10 le {(+CharPathRecursive) OutputToLog} if
	1 index  XcheckRecursive  3 1 roll
	CharPathRec
	{DeFontPath} if
	DeBugLevel 10 le {(-CharPathRecursive) OutputToLog} if
} bind def  % /CharPathRecursive

% nulldevice causes some bad rounding: https://groups.google.com/forum/#!topic/comp.lang.postscript/7RQ2cQy_k-Y
/ExecUExceptNotBindedPainting  % executes the one parameter, without painting
{
	DeBugLevel 5 le {(+ExecUExceptNotBindedPainting) OutputToLog} if
	<<
		/fill {}  /eofill 1 index  /stroke 1 index
		/ufill /uappend load  /ueofill 1 index
		/rectfill {newpath 4 2 roll moveto exch dup 0 rlineto exch 0 exch rlineto neg 0 rlineto currentpoint closepath moveto} bind  % per PLRM3 p642
		/rectstroke [2 index aload pop /strokepath load] cvx
		/shfill {pop GSave clippath //false upath GRestore uappend} bind
	>> begin execU end
	DeBugLevel 5 le {(-ExecUExceptNotBindedPainting) OutputToLog} if
} bind def  % /ExecUExceptNotBindedPainting

% (compound string)  StringPathBBox  llx lly urx ury
/StringPathBBox
{
	DeBugLevel 10 le {(+StringPathBBox) OutputToLog} if
	GSave 16384 dup scale newpath 0 0 moveto  //true CharPathRecursive PathBBox GRestore
	DeBugLevel 10 le {(-StringPathBBox) OutputToLog} if
} bind def  % /StringPathBBox

% -  BaseHeight  num, being current font's usual height above baseline
/BaseHeight
{
	DeBugLevel 10 le {(+BaseHeight) OutputToLog} if
	(AHTfhi1) StringPathBBox  4 1 roll pop pop pop
	DeBugLevel 10 le {(-BaseHeight) OutputToLog} if
} bind def  % /BaseHeight

% (compound string)  StringHeight  num, being top minus bottom for supplied compound string
/StringHeight
{
	DeBugLevel 10 le {(+StringHeight) OutputToLog} if
	StringPathBBox  exch pop sub neg exch pop
	DeBugLevel 10 le {(-StringHeight) OutputToLog} if
} bind def  % /StringHeight

% A valid parameter is a glyph name, a string, or an array of valid parameters.
% Computes the total width.
/StringWidthRec
{
	DeBugLevel 9 le {(+StringWidthRec) OutputToLog} if
	1 {
		dup xcheck {currentpoint pop exch [exch ExecUExceptNotBindedPainting] StringWidthRec exch currentpoint pop exch sub add exit} if
		dup type dup /integertype eq exch /realtype eq or {ToString} if  % no 'exit'
		dup type /stringtype eq {stringwidth pop exit}  if
		dup type /nametype eq {matrix currentmatrix GSave newpath setmatrix 0 0 moveto //true GlyphPath currentpoint GRestore pop exit} if  % https://groups.google.com/forum/#!topic/comp.lang.postscript/gQppSBL-x74
		dup type /arraytype eq {0 exch {StringWidthRec add} forall exit} if
		mark exch dup (Error: StringWidthRec parameter ) counttomark -1 roll 0 //true ThingToDebugText ( is of type ) counttomark -1 roll type ToString ( rather than executable, string, name or array.) ConcatenateToMark OutputToLog stop
	} repeat
	DeBugLevel 9 le {(-StringWidthRec) OutputToLog} if
} bind def  % /StringWidthRec
/StringWidthRecursive
{
	DeBugLevel 10 le {(+StringWidthRecursive) OutputToLog} if
	GSave  newpath 0 0 moveto  %  NullDevice  16384 dup scale
	StringWidthRec GRestore
	DeBugLevel 10 le {(-StringWidthRecursive) OutputToLog} if
} bind def  % moveto in case no currentpoint

% TargetAccuracy  LineWidthThatCoversPath  WidthMax WidthMin
% Calculates, for the current path, the greatest distance from an interior point to the edge.
% WidthMin is known to be less than this distance. WidthMax will be greater.
% https://groups.google.com/forum/#!topic/comp.lang.postscript/86b7Sg8v7B0
/LineWidthThatCoversPath
{
	DeBugLevel 25 le {(+LineWidthThatCoversPath) OutputToLog} if
	20 dict begin
	//PrinterEpsilon 2 copy lt {exch} if pop /TargetAccuracy exch def
	% Target accuracy is split into two equal parts. The grid separation is half. And then the WidthMax-WidthMin separation is allowed the other half, and sometimes less than that.

	PathBBox /ury exch def /urx exch def /lly exch def /llx exch def
	urx llx sub //PrinterEpsilon gt  ury lly sub //PrinterEpsilon gt  and
	{
		% For an equilateral triangle the point furthest from the three corners is 2/3 of the height from the corners, which is Sqrt3/3 of the base.
		/NumRows  ury lly sub TargetAccuracy 0.75 mul div def  % Error to be <= TargetAccuracy/2, which is 2/3 of row height. So row height = 0.75*TargetAccuracy.
		/NumCols  urx llx sub TargetAccuracy 1.5 mul //Sqrt3 div div def  % Error to be <= TargetAccuracy/2, which is Sqrt3/3 of the width. So width = TargetAccuracy * 1.5 / Sqrt3.
		30000 NumRows ceiling 1 add NumCols ceiling 1 add mul div dup 1 gt  % 30k => max stack of about 60k
			{sqrt dup NumRows mul ceiling cvi 1 add /NumRows exch def NumCols mul ceiling cvi 1 add /NumCols exch def}
			{pop /NumRows NumRows ceiling cvi 1 add def  /NumCols NumCols ceiling cvi 1 add  def}
		ifelse  % NumRows*NumCols small
		/HalfGapRows  ury lly sub  NumRows 2 mul  div def
		/HalfGapCols  urx llx sub  NumCols 2 mul  div def
		/MaxResolutionError HalfGapRows dup 4 mul HalfGapCols dup mul exch div add def
		DeBugLevel 15 le {mark ( LineWidthThatCoversPath: NumRows = ) NumRows (; NumCols = ) NumCols (; HalfGapRows = ) HalfGapRows (; HalfGapCols = ) HalfGapCols (; MaxResolutionError = ) MaxResolutionError ConcatenateToMark OutputToLog} if

		count  currentsystemparams /MaxOpStack 2 copy known {get} {pop pop 65535} ifelse exch sub /StackSpaceRemaining exch def
		/PointsMostDistanceFromEdge
		[
			1  1  NumCols 2 mul 1 sub
			{
				/ColNum exch def  /X ColNum HalfGapCols mul llx add def
				1  2  NumRows 2 mul
				{
					/RowNum exch def  /Y RowNum HalfGapRows mul lly add def
					RowNum 4 mod 2 idiv  ColNum 2 mod  eq {X Y infill {X Y /StackSpaceRemaining StackSpaceRemaining 2 sub def} if   StackSpaceRemaining 2 lt {exit} if} if
				} for  % Y
				StackSpaceRemaining 2 lt {exit} if
			} for  % X
		] def  % /PointsMostDistanceFromEdge
		StackSpaceRemaining 2 lt {(Warning: LineWidthThatCoversPath has incomplete calculation because there might be too little stack space. Increasing TargetAccuracy would help.) OutputToLog} if
		DeBugLevel 15 le {mark ( LineWidthThatCoversPath: PointsMostDistanceFromEdge length = ) PointsMostDistanceFromEdge length ConcatenateToMark OutputToLog} if

		/WidthMin null def   /WidthMax null def
		/Width ury lly sub 6 div //PrinterEpsilon 2 copy lt {exch} if pop def
		{
			GSave
			Width dup currentlinewidth ne {setlinewidth} {pop} ifelse strokepath
			/NewArrayLength 0 def
			0  2  PointsMostDistanceFromEdge length 2 sub
			{
				dup PointsMostDistanceFromEdge exch get exch 1 add PointsMostDistanceFromEdge exch get 2 copy
				infill not
				{
					PointsMostDistanceFromEdge NewArrayLength 1 add 3 -1 roll put  PointsMostDistanceFromEdge NewArrayLength 3 -1 roll put
					/NewArrayLength NewArrayLength 2 add def
				} {pop pop} ifelse  % infill not
			} for  % PointsMostDistanceFromEdge
			NewArrayLength 0 gt {/WidthMin Width def  /PointsMostDistanceFromEdge PointsMostDistanceFromEdge 0 NewArrayLength getinterval def} {/WidthMax Width def} ifelse
			GRestore
			DeBugLevel 15 le {mark ( LineWidthThatCoversPath: WidthMin = ) WidthMin (; WidthMax = ) WidthMax (; PointsMostDistanceFromEdge length = ) PointsMostDistanceFromEdge length  ConcatenateToMark OutputToLog} if

			WidthMax null ne
			{
				WidthMin null ne
				{
					% Complicated exit conditions. Generally by the time this becomes close, PointsMostDistanceFromEdge is short, so a few extra rounds are fast.
					WidthMax WidthMin sub MaxResolutionError lt  WidthMin TargetAccuracy div cvi WidthMax MaxResolutionError add TargetAccuracy div cvi eq  and {exit} if
					WidthMax WidthMin sub dup TargetAccuracy 64 div lt  exch //PrinterEpsilon le  or {exit} if
				} {WidthMax TargetAccuracy 2 div le WidthMax //PrinterEpsilon le or {/WidthMin 0 def exit} if} ifelse  % WidthMin null ne
			} if  % WidthMax null ne

			/Width WidthMax null eq {WidthMin 2 mul} {WidthMin null eq {WidthMax 2 div} {WidthMin WidthMax add 2 div} ifelse} ifelse def
		} loop

		WidthMax MaxResolutionError add  WidthMin
	} {//PrinterEpsilon 0} ifelse  end  % Non-zero area
	DeBugLevel 25 le {(-LineWidthThatCoversPath) OutputToLog} if
} bind def  % /LineWidthThatCoversPath

% CentreX CentreY Radius LineWidthThatCoversCircle  WidthMax WidthMin [ X0 Y0 X1 Y1 ... ]
% The maximum of, for each point in the specified circle, the distance to the nearest edge of the current path.
% WidthMin is known to be less than this distance. WidthMax might be greater.
% Returned array is of points that are, approximately, maximally far from the edge.
% In a typical case, the most distant point will be on the edge of the circle. So these points are denser.
% But if the path is the likes of a large letter 'O', the relevant point could be internal, so there are plenty fo these as well.
% http://www.ThePortForum.com/viewtopic.php?p=55028#p55028 (reason for doing this computation)
% https://groups.google.com/forum/#!topic/comp.lang.postscript/86b7Sg8v7B0 (non-discussion about how to do it)
/LineWidthThatCoversCircle
{
	DeBugLevel 25 le {(+LineWidthThatCoversCircle) OutputToLog} if
	20 dict begin
	/Radius exch def  /CentreY exch def  /CentreX exch def

	% Accuracy is fixed. Points a quarter of a degree round edge, and separated by circumference/360 in interior. Hence know that there is enough stack space.
	PathBBox /ury exch def /urx exch def /lly exch def /llx exch def

	urx llx sub //PrinterEpsilon gt  ury lly sub //PrinterEpsilon gt  and
	{
		/Gap Radius //Pi mul 180 div def
		/NumOnCircleEdge  Radius //TwoPi mul 0.24 div 4 div ceiling cvi 4 mul  5760  2 copy gt {exch} if pop  def
		/RadiusSquared Radius dup mul def
		/PointsMostDistanceFromEdge
		[
			0 1 NumOnCircleEdge 1 sub {360 mul NumOnCircleEdge div dup cos Radius mul CentreX add exch sin Radius mul CentreY add 2 copy infill {pop pop} if} for
			Radius Gap div floor cvi  -1  1 index neg
			{
				/ColNum exch def  /X ColNum Gap mul def
				Radius Gap div floor cvi  -1  1 index neg
				{
					/RowNum exch def  /Y RowNum Gap mul def
					X dup mul Y dup mul add RadiusSquared lt
					{
						X CentreX add Y CentreY add 2 copy infill {pop pop} if
					} if  % inside circle
				} for  % RowNum, Y
			} for  % ColNum, X
		] def  % /PointsMostDistanceFromEdge
		% Whilst constructing PointsMostDistanceFromEdge max points on stack is 2*(10325+5760) = 32170.

		/ExitThreshhold Radius //Pi mul NumOnCircleEdge div def
		/WidthMin null def   /WidthMax null def
		/Width Radius 6 div //PrinterEpsilon 2 copy lt {exch} if pop def
		{
			GSave
			Width dup currentlinewidth ne {setlinewidth} {pop} ifelse strokepath
			/NewArrayLength 0 def
			0  2  PointsMostDistanceFromEdge length 2 sub
			{
				dup PointsMostDistanceFromEdge exch get exch 1 add PointsMostDistanceFromEdge exch get 2 copy
				infill not
				{
					PointsMostDistanceFromEdge NewArrayLength 1 add 3 -1 roll put  PointsMostDistanceFromEdge NewArrayLength 3 -1 roll put
					/NewArrayLength NewArrayLength 2 add def
				} {pop pop} ifelse  % infill not
			} for  % PointsMostDistanceFromEdge
			NewArrayLength 0 gt {/WidthMin Width def  /PointsMostDistanceFromEdge PointsMostDistanceFromEdge 0 NewArrayLength getinterval def} {/WidthMax Width def} ifelse
			GRestore
			DeBugLevel 15 le {mark ( LineWidthThatCoversCircle: WidthMin = ) WidthMin (; WidthMax = ) WidthMax (; PointsMostDistanceFromEdge length = ) PointsMostDistanceFromEdge length  ConcatenateToMark OutputToLog} if

			WidthMax null ne
			{
				WidthMin null ne
				{
					WidthMax WidthMin sub dup  ExitThreshhold le exch //PrinterEpsilon le or {exit} if
				} {WidthMax ExitThreshhold le WidthMax //PrinterEpsilon le or {/WidthMin 0 def exit} if} ifelse  % WidthMin null ne
			} if  % WidthMax null ne

			/Width WidthMax null eq {WidthMin 2 mul} {WidthMin null eq {WidthMax 2 div} {WidthMin WidthMax add 2 div} ifelse} ifelse def
		} loop

		WidthMax ExitThreshhold add   WidthMin  PointsMostDistanceFromEdge
	} {//PrinterEpsilon 0 []} ifelse  end  % Non-zero area
	DeBugLevel 25 le {(-LineWidthThatCoversCircle) OutputToLog} if
} bind def  % /LineWidthThatCoversCircle

% Immediate dependencies: DeBugLevel; OutputToLog; ConcatenateToMark; ToString.
% A valid parameter is a glyph name, a string, some code, or an array of valid parameters.
% ShowRecursive shows the sequences of entities in the natural manner.
/ShowRecursive
{
	DeBugLevel 20 le {(+ShowRecursive) OutputToLog} if
	1 dict begin
	/param exch def
	1 {
		/param load xcheck {[/param load execU] ShowRecursive exit} if  % in case the executable puts something on the stack
		param type dup /integertype eq exch /realtype eq or {/param param ToString store} if  % no 'exit'.
		param type /stringtype eq {param show exit} if
		param type /nametype eq {param glyphshow exit} if
		param type /arraytype eq {param {ShowRecursive} forall exit} if
		mark  (Error: ShowRecursive parameter ) /param load 0 //true ThingToDebugText  ( is of type ) /param load type  ( rather than executable, string, name or array.)  ConcatenateToMark OutputToLog stop
	} repeat
	end
	DeBugLevel 20 le {(-ShowRecursive) OutputToLog} if
} bind def  % /ShowRecursive

% Computes the path of a glyph, with the charpath-style boolean flag, destroying the currentpoint.
% http://groups.google.com/g/comp.lang.postscript/c/rvAGfbsbLVw
/GlyphPath
{
	DeBugLevel 10 le {(+GlyphPath) OutputToLog} if
	2 dict begin
	/bln exch def
	/glyphname exch def
	currentfont
	currentfont length dict begin
	currentfont {1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding [ 256 {/.notdef} repeat ] def
	Encoding 97 glyphname put  % ASCII a = 97
	currentdict
	end
	/TemporaryFont exch definefont pop
	/TemporaryFont 1 selectfont
	(a) bln charpath
	setfont
	/TemporaryFont undefinefont
	end
	DeBugLevel 10 le {(-GlyphPath) OutputToLog} if
} bind def  % /GlyphPath

% Computes the path of a glyph, with the charpath-style boolean flag, moving the currentpoint as if after a show.
/GlyphPathMoveto
{
	DeBugLevel 10 le {(+GlyphPathMoveto) OutputToLog} if
	2 dict begin
	/bln exch def
	/glyphname exch def
	currentfont
	currentfont length dict begin
	currentfont {1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding [ 256 {/.notdef} repeat ] def
	Encoding 97 glyphname put  % ASCII a = 97
	currentdict
	end
	/TemporaryFont exch definefont pop
	/TemporaryFont 1 selectfont
	currentpoint exch (a) stringwidth pop add exch
	(a) bln charpath % (a) has been redefined
	moveto
	setfont
	/TemporaryFont undefinefont
	end
	DeBugLevel 10 le {(-GlyphPathMoveto) OutputToLog} if
} bind def  % /GlyphPathMoveto

% Is this, or does this contain, an executable?
/XcheckRecursive
{
	DeBugLevel 5 le {(+XcheckRecursive) OutputToLog} if
	dup xcheck
	{pop //true}
	{
		dup type /arraytype eq
			{//false exch {XcheckRecursive {pop //true exit} if} forall}
			{pop //false}
		ifelse  % arraytype
	} ifelse  % xcheck
	DeBugLevel 5 le {(-XcheckRecursive) OutputToLog} if
} bind def  % XcheckRecursive

% Assumes path defined, which is used as the clipping region, and also the various CrossHatching... parameters
% X Y {FormatStrokeCode} RadialCrossHatching -
/RadialCrossHatching
{
	DeBugLevel 40 le {(+RadialCrossHatching) OutputToLog} if
	GSave
	12 dict begin
	/FormatStrokeCode exch def  /Y exch def  /X exch def
	% /up false upath def
	PathBBox /ury exch def /urx exch def /lly exch def /llx exch def
	clip
	urx llx gt  ury lly gt  and
	{
		newpath
		X llx sub dup mul  X urx sub dup mul  2 copy lt {exch} if pop
		Y lly sub dup mul  Y ury sub dup mul  2 copy lt {exch} if pop
		add sqrt 0.24 add /Rmax exch def
		X llx lt {X llx sub dup mul} {X urx gt {X urx sub dup mul} {0} ifelse} ifelse
		Y lly lt {Y lly sub dup mul} {Y ury gt {Y ury sub dup mul} {0} ifelse} ifelse
		add sqrt 0.24 sub dup 0 lt {pop 0} if /Rmin exch def

		% Angles measured from vertical, clockwise, to ensure that the 0 line is vertical.
		1 {
			Y lly lt
			{
				/Amin  llx X sub  X llx lt {ury} {lly} ifelse Y sub  atan  def
				/Amax  urx X sub  X urx gt {ury} {lly} ifelse Y sub  atan  def
				exit
			} if  % Y lly lt
			Y ury gt
			{
				/Amin  urx X sub  X urx lt {ury} {lly} ifelse Y sub  atan  def
				/Amax  llx X sub  X llx gt {ury} {lly} ifelse Y sub  atan  def
				exit
			} if  % Y ury gt
			X llx lt
			{
				/Amin  llx X sub ury Y sub atan  def
				/Amax  llx X sub lly Y sub atan  def
				exit
			} if  % X llx lt
			X urx gt
			{
				/Amin  urx X sub lly Y sub atan  def
				/Amax  urx X sub ury Y sub atan  def
				exit
			} if  % X llx lt
			% If X Y inside, choose 'join' so that as few joins as possible are inside
			/Amax [ ury Y sub  Y lly sub  urx X sub  X llx sub ] def  % reusing variable name
			/Amin 0 def  1 1 3 {dup Amax exch get Amax Amin get lt {/Amin exch def} {pop} ifelse} for  % reusing variable name
			/Amin [ 0  -180  90  -90 ] Amin get def
			/Amax Amin 360 add def
		} repeat  % 1
		Amin Amax gt {/Amin Amin 360 sub def} if

		90 180 CrossHatchingNumRadialLines div sub CrossHatchingNumRadialLines mul 360 div dup floor sub 360 mul CrossHatchingNumRadialLines div dup
		Amin exch sub CrossHatchingNumRadialLines mul 360 div ceiling 360 mul CrossHatchingNumRadialLines div add
		360 CrossHatchingNumRadialLines div  Amax
		{
			dup cos exch sin  2 copy
			Rmin mul X add exch Rmin mul Y add moveto
			Rmax mul X add exch Rmax mul Y add lineto
			% /up load instroke {FormatStrokeCode} {newpath} ifelse
		} for  % angles

		[Rmax Rmin] {dup mul //Pi mul CrossHatchingCellArea CrossHatchingNumRadialLines mul div} forall ceiling cvi exch 1 exch cvi
		{
			% CrossHatchingCellArea = (Rthis^2-Rprev^2)*Pi/CrossHatchingNumRadialLines  <==  R = Sqrt[ N * CrossHatchingCellArea*CrossHatchingNumRadialLines/Pi ]
			CrossHatchingNumRadialLines mul CrossHatchingCellArea mul //Pi div sqrt /R exch def
			X Amax sin R mul add  Y Amax cos R mul add  moveto   X Y R 90 Amax sub 90 Amin sub arc
		} for  % 'R'
		FormatStrokeCode newpath
	} if  % non-empty bounding box of clip path
	end
	GRestore
	DeBugLevel 40 le {(-RadialCrossHatching) OutputToLog} if
} bind def  % /RadialCrossHatching

% OuterRegionLlx OuterRegionLly OuterRegionUrx OuterRegionUry {FillCode} {StrokeCode} DoActuallyClip  ShapesClippedToPath  -
% Everything clipped to current path, which is left unchanged
/ShapesClippedToPath
{
	DeBugLevel 40 le {(+ShapesClippedToPath) OutputToLog} if
	21 dict begin  GSave
	GSave flattenpath pathbbox /ury exch def /urx exch def /lly exch def /llx exch def GRestore  % pathbbox rather than PathBBox because approximate suffices, and is faster
	{clip} if  % DoActuallyClip
	/UClipPath //true upath def  newpath  % Even if not clipping, show only those shapes that intersect this path

	/StrokeCode exch def
	/FillCode exch def
	/OuterRegionUry exch def
	/OuterRegionUrx exch def
	/OuterRegionLly exch def
	/OuterRegionLlx exch def

	[
		OuterRegionLly ShapesAverageSeparation div floor cvi  1  OuterRegionUry ShapesAverageSeparation div ceiling cvi
		{
			/ShapesIntY exch def   % Cannot test here for llx etc, as that would cause Titles and Overtitles to behave differently.
			OuterRegionLlx ShapesAverageSeparation div floor cvi  1  OuterRegionUrx ShapesAverageSeparation div ceiling cvi {dup 0 ne ShapesIntY 0 ne or {[ exch ShapesIntY ]} {pop} ifelse} for
		} for  % ShapesIntY
		[0 0]  % Last, so on top. It might be out of range, but if so, will be caught by later tests.
	] dup dup length 1 sub 0 exch getinterval ShuffleArray pop  % The shuffling removes the apparent direction caused by overlapping
	{
		aload pop /ShapesIntY exch def /ShapesIntX exch def
		/Shapes_rand_X rand def   /Shapes_rand_Y rand def   /Shapes_rand_R rand def  % Saved for possible use by ShapesTitlesFill | ShapesTitlesStroke
		/ThisShape ShapesToUse  dup length dup 1 le {1 sub} {rand exch mod} ifelse  get  def
		ShapesIntY 0 eq  ShapesIntX 0 eq  and
		{
			/x 0 def  /y 0 def  /ThisShapeRadius ShapesEnclosingCircleRadiusMax def
		}{
			/x ShapesIntX Shapes_rand_X  /y ShapesIntY Shapes_rand_Y  2 {//HalfRandMax div 1 sub ShapesAverageMaxTweakPlusMinus mul  exch ShapesAverageSeparation mul add  def} repeat
			/ThisShapeRadius Shapes_rand_R //RandMax div ShapesEnclosingCircleRadiusMax ShapesEnclosingCircleRadiusMin sub mul ShapesEnclosingCircleRadiusMin add def
		} ifelse  % At centre?

		/PerhapsShow
			x 0.8 ThisShapeRadius mul add  llx  gt       x 0.8 ThisShapeRadius mul sub  urx  lt  and  % Can't compare to RadiiCirclearrayInsideUsableTAB because might be a PlaceName page.
			y 0.8 ThisShapeRadius mul add  lly  gt  and  y 0.8 ThisShapeRadius mul sub  ury  lt  and  % The 0.8s reject some of the inelegant cases where only a thin sliver of the shape is painted.
			x ThisShapeRadius add  OuterRegionLlx  gt and  x ThisShapeRadius sub  OuterRegionUrx  lt and  % These tests might be redundant.
			y ThisShapeRadius add  OuterRegionLly  gt and  y ThisShapeRadius sub  OuterRegionUry  lt and  % These tests might be redundant.
		def  % /PerhapsShow = some of shape in T|A|B|O's bounding box

		/Star ThisShape eq
		{
			ShapesIntY 0 ne ShapesIntX 0 ne or {rand //RandMax div 360 mul} {0} ifelse
			ShapesStarsPointsAndStepsArray dup length rand exch mod get aload pop
			PerhapsShow
			{
				x y moveto   /Center  /Middle  ThisShapeRadius  /Radius  7 -3 roll  //false //false   Star pop
				ShapesPrintQuickerDistillSlower {/UClipPath load infill} {//true} ifelse {GSave FillCode GRestore StrokeCode} if newpath  % Insideness assumes path width of zero
			} {pop pop pop} ifelse  % PerhapsShow
		} if  % /Star

		/Flower ThisShape eq
		{
			rand //RandMax div  ShapesFlowersNumPetalsMax 1 add ShapesFlowersNumPetalsMin sub  mul  cvi  ShapesFlowersNumPetalsMin add
			dup 360 exch div  rand //RandMax div  ShapesFlowersAngularWidthMax ShapesFlowersAngularWidthMin sub mul  ShapesFlowersAngularWidthMin add  mul
			//ArcCosMinusOneThird 2 copy gt {exch} if pop
			ThisShapeRadius
			ShapesIntY 0 ne ShapesIntX 0 ne or {rand //RandMax div 360 mul} {0} ifelse
			rand 2 mod 0 eq
			PerhapsShow
			{
				x y moveto //true  Flower  % Always strokeable, because filling works on strokeable but stroke not with just fillable
				ShapesPrintQuickerDistillSlower {/UClipPath load infill} {//true} ifelse {GSave FillCode GRestore StrokeCode} if newpath  % Insideness assumes path width of zero
			} {pop pop pop pop pop} ifelse  % PerhapsShow
		} if  % Flower

		/Heart ThisShape eq
		{
			rand //HalfRandMax div 1 sub //ArcTanFiveEighths mul
			PerhapsShow
			{
				matrix currentmatrix x y translate  exch ShapesIntY 0 ne ShapesIntX 0 ne or {rotate} {pop} ifelse
				ThisShapeRadius 6 sqrt mul dup scale 0 -0.3846762000998701793217521379 translate
				0 0 moveto 0.8 0.5 0.25 1 0 0.65526715987207729968624 CurvetoFourPieces -0.25 1 -0.8 0.5 0 0 CurvetoFourPieces closepath  setmatrix  % The 0.655... minimises the path length
				ShapesPrintQuickerDistillSlower {/UClipPath load infill} {//true} ifelse {GSave FillCode GRestore StrokeCode} if newpath  % Insideness assumes path width of zero
			} {pop} ifelse  % PerhapsShow
		} if  % /Heart
	} forall  % 'ShapesInts'
	GRestore end
	DeBugLevel 40 le {(-ShapesClippedToPath) OutputToLog} if
} bind def  % /ShapesClippedToPath

% X Y  Filltext  FillTextNumSpaces  FilltextLineStep  Angle  NumOutlines  InnerMostColor OtherColor  RepeatClippedWithin  -
% On calling RepeatClippedWithin there is a current font, and a current path to be used as a clipping path.
% Renders multiple copies of Filltext, outlined in alternate colors, within the clipping region.
% Used X Y to determine offset of repeats, so that multiple calls can be aligned.
% Some coding help was requested and provided at
% https://groups.google.com/forum/#!topic/comp.lang.postscript/XegnvWwDAC4
%
% As repeated stroke'ing of text makes PDF files heavy and slow to render,
% there is an attempt not to paint anything entirely outside the clipping region.
% If the clipping region contains a protected font, the test is weaker and the PDF heavier.
% This extensive use of infill slows distillation.
%
% On exit the clipping path is still the current path
/RepeatClippedWithin
{
	DeBugLevel 40 le {(+RepeatClippedWithin) OutputToLog} if
	38 dict begin
	/OtherColor exch def
	/InnerMostColor exch def
	/NumOutlines exch def
	/Angle exch def
	/FilltextLineStep exch def
	/FillTextNumSpaces exch def
	/Filltext exch def
	/Y exch def
	/X exch def

	GSave  newpath  0 0 moveto  /Filltext load  //true CharPathRecursive PathBBox  GRestore
	/FilltextT exch def  /FilltextR exch def  /FilltextB exch def  /FilltextL exch def

	FilltextR FilltextL sub //PrinterEpsilon gt
	{
		GSave  clip

		GSave  matrix currentmatrix  Angle rotate  newpath  0 0 moveto  /Filltext load  //true CharPathRecursive  setmatrix  PathBBox  GRestore
		/FilltextTa exch def  /FilltextRa exch def  /FilltextBa exch def  /FilltextLa exch def

		PathBBox /ury exch def  /urx exch def  /lly exch def  /llx exch def
		Angle rotate
		currentpoint  /Ya exch def  /Xa exch def
		PathBBox /urya exch def  /urxa exch def  /llya exch def  /llxa exch def

		/AngleCos Angle cos def
		/AngleSin Angle sin def
		/Xa  X AngleCos mul  Y AngleSin mul  sub  def
		/Ya  Y AngleCos mul  X AngleSin mul  add  def
		/SlowInsidenessTest FillTextPrintQuickerDistillSlower def
		/WidthPower //GoldenRatio def
		/FilltextSpacing  ( ) stringwidth pop  FillTextNumSpaces mul  def
		/Xstep  FilltextR FilltextL sub FilltextSpacing add  def

		SlowInsidenessTest
		{
			{//true upath} Stopped {/SlowInsidenessTest //false def} {/CurrentClipUPathA exch def} ifelse
		} if  % SlowInsidenessTest

		newpath  1 currentlinecap ne {1 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if

		NumOutlines  -1  0
		{
			dup 2 mod 0 eq {InnerMostColor} {OtherColor} ifelse
			dup 0 gt
				{WidthPower exch exp 1 sub  WidthPower 1 sub  div  WidthPower sqrt sqrt mul}
				{pop 0}
			ifelse
			FilltextLineStep 12 div dup 1 lt {pop 1} if mul  dup dup currentlinewidth ne {setlinewidth} {pop} ifelse 2 div /HalfLineWidth exch def

			/Xstart Xa {dup dup llxa lt exch urxa lt and {exit} {Xstep sub} ifelse} loop def

			llya Ya FilltextT add HalfLineWidth add sub FilltextLineStep div ceiling cvi  % int * FilltextLineStep + Ya FilltextT add HalfLineWidth add > llya
			1
			urya Ya FilltextB add HalfLineWidth sub sub FilltextLineStep div floor   cvi  % int * FilltextLineStep + Ya FilltextB add HalfLineWidth sub < urya
			{
				FilltextLineStep mul Ya add /Yfa exch def  /Xfa Xstart def
				{ % loop
					Xfa urxa le  Xfa FilltextR FilltextL sub add llxa ge  and
					{
						Yfa AngleCos mul  Xfa AngleSin mul  add  dup  % Yf
						FilltextTa add HalfLineWidth add  lly  gt  exch
						FilltextBa add HalfLineWidth sub  ury  lt  and
						{
							Xfa AngleCos mul  Yfa AngleSin mul  sub  dup  % Xf
							FilltextRa add HalfLineWidth add  llx  gt  exch
							FilltextLa add HalfLineWidth sub  urx  lt  and
							{
								SlowInsidenessTest
								{
									newpath  Xfa Yfa moveto  /Filltext load  HalfLineWidth 0 le  CharPathRecursiveMoveto
									/CurrentClipUPathA load  HalfLineWidth 0 le {infill} {instroke} ifelse
								} {//true} ifelse  % SlowInsidenessTest
								{
									newpath Xfa Yfa moveto
									/Filltext load  HalfLineWidth 0 le {//true  CharPathRecursiveMoveto fill} {//false CharPathRecursiveMoveto stroke} ifelse
								} if  % SlowInsidenessTest {...} {//true} ifelse
							} if  % in original x range
						} if  % in original y range
					} if  % Xfa in angle-rotated range
					/Xfa  Xfa Xstep add  def
					Xfa urxa ge {exit} if
				} loop  % Xfa
			} for  % Yfa
		} for  % NumOutlines  -1  0

		GRestore
	} if  % FilltextR FilltextL sub PrinterEpsilon gt
	end
	DeBugLevel 40 le {(-RepeatClippedWithin) OutputToLog} if
} bind def  % /RepeatClippedWithin


% int1 int2 GreatestCommonDivisor int
% best if int1 > int2
/GreatestCommonDivisor
{
	DeBugLevel 3 le {(+GreatestCommonDivisor) OutputToLog} if
	3 dict begin
	/j exch abs def
	/i exch abs def
	i type /integertype ne  j type /integertype ne  or {(GreatestCommonDivisor: non-integer parameter) OutputToLog} if

	j 0 eq
	{i}
	{
		0  % answer if fails
		93  % Copes with up to 2^64; finite repetition might prevent certain failures
		{
			/k i j mod def
			k 0 eq {pop j exit} if
			/i j def
			/j k def
		} repeat
	} ifelse  % j 0 eq
	end
	DeBugLevel 3 le {(-GreatestCommonDivisor) OutputToLog} if
} bind def  % /GreatestCommonDivisor


% /Left|/Center|/Right  /Top|/Middle|/Bottom  Size  /Radius|/Diameter|/Height|/Width  AngleOffset  NumPoints  NumStep  DrawLinesInside  AntiClockwise
% ...    Star    dict, the dictionary containing /LeftX, /CenterX, /RightX, /BottomY, /CenterY, /TopY, /Radius, /InnerRadius, /AntiClockwise
/Star
{
	DeBugLevel 30 le {(+Star) OutputToLog} if
	20 dict begin

	/AntiClockwise exch def
	/DrawLinesInside exch def
	/m exch abs def
	/n exch abs def
	/a exch def
	/ssMeaning exch def
	/ss exch def
	/yyMeaning exch def
	/xxMeaning exch def

	currentpoint  /yy exch def  /xx exch def

	/FromCenterMinX -0.00000001 def  % avoids divide-by-zero errors
	/FromCenterMinY -0.00000001 def
	/FromCenterMaxX  0.00000001 def
	/FromCenterMaxY  0.00000001 def

	0  1  n 1 sub
	{
		360 mul n div a add  dup
		sin dup FromCenterMaxX gt {/FromCenterMaxX exch def} {dup FromCenterMinX lt {/FromCenterMinX exch def} {pop} ifelse} ifelse
		cos dup FromCenterMaxY gt {/FromCenterMaxY exch def} {dup FromCenterMinY lt {/FromCenterMinY exch def} {pop} ifelse} ifelse
	} for

	ssMeaning /Radius   eq {/r ss       def} if
	ssMeaning /Diameter eq {/r ss 2 div def} if
	ssMeaning /Height eq {/r ss FromCenterMaxY FromCenterMinY sub div def} if
	ssMeaning /Width  eq {/r ss FromCenterMaxX FromCenterMinX sub div def} if

	/x xx def /y yy def
	xxMeaning /Left   eq {/x xx FromCenterMinX r mul sub def} if
	xxMeaning /Right  eq {/x xx FromCenterMaxX r mul sub def} if
	yyMeaning /Bottom eq {/y yy FromCenterMinY r mul sub def} if
	yyMeaning /Top    eq {/y yy FromCenterMaxY r mul sub def} if

	% See www.jdawiseman.com/papers/easymath/surds_star_inner_radius.html
	/InnerRadius  m 180 mul n div cos  m 1 sub 180 mul n div cos  div  r mul def
	DrawLinesInside
	{
		0  1  n m GreatestCommonDivisor 1 sub
		{
			/j exch def
			/i j def
			{
				i  AntiClockwise {neg} if  360 mul n div a add sin r mul x add
				i  AntiClockwise {neg} if  360 mul n div a add cos r mul y add
				i j eq {moveto} {lineto} ifelse
				/i i m add n mod def
				i j eq {exit} if
			} loop  % i
			closepath
		} for  % j
	}{
		0  1  n 2 mul 1 sub  % i's meaning different by factor of 2
		{
			/i exch def
			i 2 mod 0 eq {r} {InnerRadius} ifelse  i AntiClockwise {neg} if 180 mul n div a add  2 copy
			sin mul x add 3 1 roll   cos mul y add   i 0 eq {moveto} {lineto} ifelse
		} for  % i
		closepath
	} ifelse  % DrawLinesInside

	% Left on stack is a dictionary
	<<
		/LeftX         xxMeaning /Left   eq {xx} {x FromCenterMinX r mul add} ifelse
		/CenterX       x
		/RightX        xxMeaning /Right  eq {xx} {x FromCenterMaxX r mul add} ifelse
		/BottomY       xxMeaning /Bottom eq {yy} {y FromCenterMinY r mul add} ifelse
		/CenterY       y
		/TopY          xxMeaning /Top    eq {yy} {y FromCenterMaxY r mul add} ifelse
		/Radius        ssMeaning /Radius eq {ss} {r} ifelse
		/InnerRadius   InnerRadius
		/AntiClockwise AntiClockwise
	>> end
	DeBugLevel 30 le {(-Star) OutputToLog} if
} bind def  % /Star


% Height  CheckMark  -
/CheckMark
{
	3 dict begin  //Sqrt3 9 mul 2 add div /R exch def
	currentpoint /Y exch def /X exch def
	4 R mul  X add              3       R mul Y add  moveto
	R        X add  //Sqrt3 3 mul 1 add R mul Y add  R  030  210  arc
	R  4 mul X add                      R     Y add  R  210  330  arc
	R 13 mul X add  //Sqrt3 9 mul 1 add R mul Y add  R  -30  150  arc
	closepath  fill   R 14 mul X add  Y  moveto   end
} bind def  % /CheckMark


/ThePortForumIconForm  % Fits in box with lower-left at (0,0) and unit sides. Calling code to translate and scale and revert.
<<
	/FormType 1
	/BBox [ -0.0625 dup  1.0625 dup ]
	/Matrix matrix identmatrix
	/PaintProc
	{
		pop  matrix currentmatrix  0.0625 dup scale
		% White background, one 'pixel' away, including interior spaces
		% 2 8 moveto   0 7 1 90 180 arc   0 6 1 180 270 arc   1 2 1 180 270 arc   2 1 lineto   3 0 1 180 270 arc   14 0 1 -90 0 arc  15 2 1 -90 0 arc
		% 16 4 1 -90 0 arc   16 7 1 0 90 arc   15 8 lineto   14 15 1 0 90 arc   13 16 1 0 90 arc   4 16 1 90 180 arc   3 15 1 90 180 arc   1 setgray closepath fill
		2 8 moveto   -1 8 lineto   -1 5 lineto   0 5 lineto   0 1 lineto   2 1 lineto   2 -1 lineto   15 -1 lineto   15 1 lineto   16 1 lineto   16 3 lineto
		17 3 lineto   17 8 lineto   15 8 lineto   15 16 lineto   14 16 lineto   14 17 lineto   3 17 lineto   3 16 lineto   2 16 lineto   closepath
		% 3 2 moveto   3 5 lineto   4 5 lineto   4 4 lineto   5 4 lineto   5 3 lineto   7 3 lineto   7 2 lineto   closepath  % Near T
		% 10 2 moveto   10 3 lineto   12 3 lineto   12 4 lineto   13 4 lineto   13 2 lineto   closepath  % Near F
		% 5 11 moveto   5 14 lineto   6 14 lineto   6 11 lineto   closepath  % Left of P
		% 9 11 moveto   9 12 lineto   11 12 lineto   11 14 lineto   12 14 lineto   12 11 lineto   closepath  % Right of P
		1 setgray fill

		ThePortForumIconColour {0.6 0 0 setrgbcolor} {0 setgray} ifelse
		% T
		0 6 moveto   0 7 lineto   3 7 lineto   3 6 lineto   2 6 lineto   2 2 lineto   1 2 lineto   1 6 lineto   closepath fill
		% P
		8 14 moveto   9 14 lineto   9 15 lineto   8 15 lineto   closepath
		7 11 moveto   7 16 lineto   10 16 lineto   10 13 lineto   8 13 lineto   8 11 lineto   closepath fill
		% F
		14 2 moveto   14 7 lineto   16 7 lineto   16 6 lineto   15 6 lineto   15 5 lineto  16 5 lineto  16 4 lineto   15 4 lineto   15 2 lineto   closepath fill
		% Liquid, lying partly under glass in case of sloppy rendering engine
		ThePortForumIconColour not {0.4 setgray} if
		3.8 10 moveto   4 8 lineto   4.8 7.8 lineto   5 6 lineto   5.8 5.8 lineto   6 5 lineto   8.5 4.8 lineto   11 5 lineto   11.2 5.8 lineto   12 6 lineto   12.2 7.8 lineto   13 8 lineto  13.2 10 lineto   closepath fill
		% Glass
		3 0 moveto   3 1 lineto   8 1 lineto   8 4 lineto  6 4 lineto  6 5 lineto   5 5 lineto   5 6 lineto   4 6 lineto   4 8 lineto   3 8 lineto   3  15 lineto   4  15 lineto   4 16 lineto   5 16 lineto
		5 15 lineto   4 15 lineto   4 8 lineto   5 8 lineto   5 6 lineto   6 6 lineto   6 5 lineto   11 5 lineto   11 6 lineto   12 6 lineto   12 8 lineto   13 8 lineto   13 15 lineto   12 15 lineto   12 16 lineto
		13 16 lineto   13 15 lineto   14 15 lineto   14 8 lineto   13 8 lineto   13 6 lineto   12 6 lineto   12 5 lineto   11 5 lineto   11 4 lineto   9 4 lineto   9 1 lineto  14 1 lineto  14 0 lineto   closepath
		0 setgray fill  setmatrix
	} bind % /PaintProc
>> def  % /ThePortForumIconForm

/IconSizeTN WaterBoxesSizeMax def

% ThePortForumIconPlacement  PlaceThePortForumIcon  -
/PlaceThePortForumIcon
{
	DeBugLevel 6 le {(+PlaceThePortForumIcon) OutputToLog} if
	4 dict begin
	/param exch def
	/IconForm //ThePortForumIconForm def  % Allows easy replacement with something else.
	/param load xcheck
	{
		[param] PlaceThePortForumIcon
	}{
		param type /arraytype eq
		{
			param {PlaceThePortForumIcon} forall
		}{
			/IconSize  10
			TypeOfPagesBeingRendered /Glasses eq  TypeOfPagesBeingRendered /PrePour eq   or {pop  1 //SqrtHalf sub Radii SheetNum get mul} if
			TypeOfPagesBeingRendered /TastingNotes eq {pop  NamesFont NamesFontSize selectfont BaseHeight} if
			def  % /IconSize
			TypeOfPagesBeingRendered /Glasses eq
			{
				param /UpperNonWaterBox eq {/param NamesIsLeftHander NameNum get {/UpperRight} {/UpperLeft} ifelse def} if
				param /UpperWaterBox    eq {/param NamesIsLeftHander NameNum get {/UpperLeft} {/UpperRight} ifelse def} if
				param /LowerNonWaterBox eq {/param NamesIsLeftHander NameNum get {/LowerRight} {/LowerLeft} ifelse def} if
				param /LowerWaterBox    eq {/param NamesIsLeftHander NameNum get {/LowerLeft} {/LowerRight} ifelse def} if
			} if  % ... /Glasses ...
			TypeOfPagesBeingRendered /TastingNotes eq
			{
				/IconSizeTN IconSize store
				param /UpperNonName eq {/param NamesIsLeftHanderTN NameNum get {/UpperRight} {/UpperLeft} ifelse def} if
				param /UpperName    eq {/param NamesIsLeftHanderTN NameNum get {/UpperLeft} {/UpperRight} ifelse def} if
				param /LowerNonName eq {/param NamesIsLeftHanderTN NameNum get {/LowerRight} {/LowerLeft} ifelse def} if
				param /LowerName    eq {/param NamesIsLeftHanderTN NameNum get {/LowerLeft} {/LowerRight} ifelse def} if
			} if  % TypeOfPagesBeingRendered /TastingNotes eq
			//true TypeOfPagesBeingRendered /Glasses eq {PackingDescriptors SheetNum get dup type /arraytype eq { {/SuppressNonRightOrnaments eq {pop //false exit} if} forall} {pop} ifelse} if
			{
				param /LowerLeft  eq {matrix currentmatrix MgnL MgnB translate IconSize dup scale IconForm execform setmatrix} if
				param /UpperLeft  eq {matrix currentmatrix MgnL PageHeight MgnT sub IconSize sub translate IconSize dup scale IconForm execform setmatrix} if
			} if  % not /SuppressNonRightOrnaments
			//true TypeOfPagesBeingRendered /Glasses eq {PackingDescriptors SheetNum get dup type /arraytype eq { {/SuppressNonLeftOrnaments  eq {pop //false exit} if} forall} {pop} ifelse} if
			{
				param /LowerRight eq {matrix currentmatrix PageWidth MgnR sub IconSize sub MgnB translate IconSize dup scale IconForm execform setmatrix} if
				param /UpperRight eq {matrix currentmatrix PageWidth MgnR sub IconSize sub PageHeight MgnT sub IconSize sub translate IconSize dup scale IconForm execform setmatrix} if
			} if  % not SuppressNonLeftOrnaments
			TypeOfPagesBeingRendered /PrePour eq  param /None ne  and
			{
				% Parameter not an empty array
				/temp  CirclearraysT SheetNum get WithinPage get CirclearraysB SheetNum get WithinPage get sub CirclearraysFontSizes SheetNum get WithinPage get mul  IconSize 16 div  add  def
				matrix currentmatrix MgnL temp add                             MgnB temp add                              translate IconSize dup scale IconForm execform setmatrix
				matrix currentmatrix PageWidth MgnR sub temp sub IconSize sub  MgnB temp add                              translate IconSize dup scale IconForm execform setmatrix
				matrix currentmatrix MgnL temp add                             PageHeight MgnT sub temp sub IconSize sub  translate IconSize dup scale IconForm execform setmatrix
				matrix currentmatrix PageWidth MgnR sub temp sub IconSize sub  PageHeight MgnT sub temp sub IconSize sub  translate IconSize dup scale IconForm execform setmatrix
			} if  % ... /PrePour ...
		} ifelse  % /arraytype
	} ifelse  % /param load xcheck
	end
	DeBugLevel 6 le {(-PlaceThePortForumIcon) OutputToLog} if
} bind def  % /PlaceThePortForumIcon


% Splits a curveo into four pieces, so that the control points more closely hug the rendered curve.
% This can help renderers with clipping.
% [currentpoint defined] X1 Y1 X2 Y2 X3 Y3  CurvetoFourPieces  -   [path extended by four curve pieces]
/CurvetoFourPieces
{
	8 dict begin
	/Y3 exch def  /X3 exch def
	/Y2 exch def  /X2 exch def
	/Y1 exch def  /X1 exch def
	currentpoint
	/Y0 exch def  /X0 exch def

	X0 3 mul X1 add 4 div
	Y0 3 mul Y1 add 4 div
	X0 9 mul X1 6 mul add X2 add 16 div
	Y0 9 mul Y1 6 mul add Y2 add 16 div
	X0 X1 add 27 mul X2 9 mul add X3 add 64 div
	Y0 Y1 add 27 mul Y2 9 mul add Y3 add 64 div
	curveto

	X0 9 mul X1 15 mul add X2 7 mul add X3 add 32 div
	Y0 9 mul Y1 15 mul add Y2 7 mul add Y3 add 32 div
	X0 3 mul X1 7 mul add X2 5 mul add X3 add 16 div
	Y0 3 mul Y1 7 mul add Y2 5 mul add Y3 add 16 div
	X1 X2 add 3 mul X0 add X3 add 8 div
	Y1 Y2 add 3 mul Y0 add Y3 add 8 div
	curveto

	X0 X1 5 mul add X2 7 mul add X3 3 mul add 16 div
	Y0 Y1 5 mul add Y2 7 mul add Y3 3 mul add 16 div
	X0 X1 7 mul add X2 15 mul add X3 9 mul add 32 div
	Y0 Y1 7 mul add Y2 15 mul add Y3 9 mul add 32 div
	X0 X1 9 mul add X2 X3 add 27 mul add 64 div
	Y0 Y1 9 mul add Y2 Y3 add 27 mul add 64 div
	curveto

	X1 X2 6 mul add X3 9 mul add 16 div
	Y1 Y2 6 mul add Y3 9 mul add 16 div
	X2 X3 3 mul add 4 div
	Y2 Y3 3 mul add 4 div
	X3 Y3 curveto
	end
} bind def  % /CurvetoFourPieces

% Bug! Flower has a bug!
% If FlowerNumPetals=8 and FlowerPetalsAngularWidth=125 then need to stroke two pieces of path of each petal
% (the two parts around the two maxima of the radius). Hence OK with Cos(FlowerPetalsAngularWidth) >= -1/3.
% Sometimes more than once piece required: sometimes many more.

% FlowerNumPetals FlowerPetalsAngularWidth FlowerRadius FlowerAngleOffset Clockwise? Strokeable Flower -
/Flower
{
	DeBugLevel 25 le {(+Flower) OutputToLog} if
	33 dict begin
	/Strokeable exch def  /Clockwise exch def
	/AngleOffset exch def  /Radius exch def  abs /AngularWidth exch def  /NumPetals exch def
	currentpoint /y exch def /x exch def

	% Require 0 <= AngularWidth < 180. Have already done an abs.
	{AngularWidth 360 ge {/AngularWidth AngularWidth 360 sub def} {exit} ifelse} loop
	AngularWidth 180 ge {/AngularWidth 360 AngularWidth sub def} if

	AngularWidth //ArcCosMinusOneThird le
	{
		/r Radius 4 mul 3 div AngularWidth 2 div cos div def
	}{
		Strokeable {(Warning: FlowerPetalsAngularWidth > ArcCos(-1/3) = 109.47122 degrees, and Strokeable) OutputToLog} if
		/r Radius  AngularWidth 2 div sin dup mul  mul  2 mul //Sqrt3 mul  def
	} ifelse  % mid-point of curve is radius max or local min?

	AngularWidth NumPetals mul 360 gt
	{
		% start by calculating the t value of consecutive petal intersect
		/x0 0 def  /y0 0 def  /x3 0 def  /y3 0 def
		/x1 AngularWidth 2 div sin def
		/y1 AngularWidth 2 div cos def
		/x2 x1 neg def  /y2 y1 def

		/ax x0 neg x1 3 mul add x2 3 mul sub x3 add def
		/bx x0 x1 2 mul sub x2 add 3 mul def
		/cx x1 x0 sub 3 mul def
		/ay y0 neg y1 3 mul add y2 3 mul sub y3 add def
		/by y0 y1 2 mul sub y2 add 3 mul def
		/cy y1 y0 sub 3 mul def

		% Want t at which angle is 180/NumPetals
		/AngTarget 180 NumPetals div def

		/tMin 0.1 def
		/tMax 0.5 def
		/tMinAng
			ax tMin mul bx add tMin mul cx add tMin mul % x0 add
			ay tMin mul by add tMin mul cy add tMin mul % y0 add
		atan {dup 90 gt {180 sub} {exit} ifelse} loop def
		/tMaxAng
			ax tMax mul bx add tMax mul cx add tMax mul % x0 add
			ay tMax mul by add tMax mul cy add tMax mul % y0 add
		atan {dup 90 gt {180 sub} {exit} ifelse} loop def
		/DoingInterp //true def  % For robustness alternate bisection and interpolation
		/exitcount 30 def
		{
			DoingInterp
			{
				/tCut tMinAng AngTarget sub tMax mul  AngTarget tMaxAng sub tMin mul  add  tMinAng tMaxAng sub  div  def
				/DoingInterp //false def
			}{
				/tCut tMin 0.75 mul tMax 0.25 mul add def
				/DoingInterp //true def
			} ifelse  % DoingInterp
			/tCutAng
				ax tCut mul bx add tCut mul cx add tCut mul % x0 add
				ay tCut mul by add tCut mul cy add tCut mul % y0 add
			atan def
			/exitcount exitcount 1 sub def
			% mark (tCut=) tCut (; tCutAng=) tCutAng
			% (; tMin=) tMin (; tMinAng=) tMinAng
			% (; tMax=) tMax (; tMaxAng=) tMaxAng
			% (; AngTarget=) AngTarget ConcatenateToMark =
			exitcount 0 eq {exit} if
			tCutAng AngTarget sub abs 0.01 lt  exitcount 4 gt  and {/exitcount 4 def} if  % Do extra laps for polishing
			tCutAng AngTarget gt
				{tCutAng tMinAng lt {/tMin tCut def  /tMinAng tCutAng def} if}
				{tCutAng tMaxAng gt {/tMax tCut def  /tMaxAng tCutAng def} if}
			ifelse  % tCutAng AngTarget lt
		} loop
	} if  % Petals overlap

	Clockwise {0  1  NumPetals 1 sub} {NumPetals 1 sub  -1  0} ifelse
	{
		/i exch def
		x i NumPetals div 360 mul AngularWidth 2 div add AngleOffset add sin r mul add
		y i NumPetals div 360 mul AngularWidth 2 div add AngleOffset add cos r mul add
		x i NumPetals div 360 mul AngularWidth 2 div sub AngleOffset add sin r mul add
		y i NumPetals div 360 mul AngularWidth 2 div sub AngleOffset add cos r mul add
		Clockwise {4 2 roll} if
		/y2 exch def  /x2 exch def  /y1 exch def  /x1 exch def

		AngularWidth NumPetals mul 360 gt  Strokeable and
		{
			% Overlapping, strokeable: cut at tCut
			x y moveto
			tCut x x1 sub mul x1 add
			tCut y y1 sub mul y1 add
			x1 x2 sub 2 mul tCut mul  x2  add  x x2 add x1 2 mul sub tCut dup mul mul  add
			y1 y2 sub 2 mul tCut mul  y2  add  y y2 add y1 2 mul sub tCut dup mul mul  add
			3 tCut mul 3 sub tCut mul 1 add x mul  x1 x2 sub tCut mul x2 add tCut mul 1 tCut sub mul 3 mul  add
			3 tCut mul 3 sub tCut mul 1 add y mul  y1 y2 sub tCut mul y2 add tCut mul 1 tCut sub mul 3 mul  add
			CurvetoFourPieces
		}{
			% Not overlapping
			x y moveto x1 y1 x2 y2 x y CurvetoFourPieces closepath
		} ifelse   % Petals overlap
	} for  % i
	end
	DeBugLevel 25 le {(-Flower) OutputToLog} if
} bind def  % /Flower


% End standard subroutines


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Start code specific to setting out placemats

% boolean  DefStoreMgns  -
% true => def; false => store
/DefStoreMgns
{
	DeBugLevel 5 le {(+DefStoreMgns) OutputToLog} if
	/MgnB MarginB TypeOfPagesBeingRendered /Glasses eq {OuterGlassesMarginB} {OuterMarginB} ifelse add
	/MgnT MarginT TypeOfPagesBeingRendered /Glasses eq {OuterGlassesMarginT} {OuterMarginT} ifelse add
	/MgnL MarginL TypeOfPagesBeingRendered /Glasses eq {OuterGlassesMarginL} {OuterMarginL} ifelse add
	/MgnR MarginR TypeOfPagesBeingRendered /Glasses eq {OuterGlassesMarginR} {OuterMarginR} ifelse add  8 index {def def def def} {store store store store} ifelse
	TypeOfPagesBeingRendered /Glasses eq  TypeOfPagesBeingRendered /TastingNotes eq  or   SideBySideGlassesTastingNotes  and
	{
		TypeOfPagesBeingRendered /Glasses eq
			{/MgnR 1 SideBySideGlassesTastingNotesProportionPageGlasses sub}
			{/MgnL SideBySideGlassesTastingNotesProportionPageGlasses}
		ifelse  % TypeOfPagesBeingRendered /Glasses eq
		% The swap for left-handers must be done with a 'translate'
		PageWidth mul  SideBySideGlassesTastingNotesWidthGutter 2 div  add   3 -1 roll {def} {store} ifelse
	} {pop} ifelse  % ... SideBySideGlassesTastingNotes ...
	DeBugLevel 5 le {(-DefStoreMgns) OutputToLog} if
} bind def  % /DefStoreMgns

/UndefMgns {currentdict dup dup dup  /MgnB undef  /MgnT undef  /MgnL undef  /MgnR undef} bind def

% r1 r2  RadiiEffectivelyEqual  boolean
% Passes if within PrinterEpsilon
/RadiiEffectivelyEqual {sub abs //PrinterEpsilon le} bind def

%  a packing type   ProcessOnePackingType  -
/ProcessOnePackingType
{
	DeBugLevel 50 le {(+ProcessOnePackingType) OutputToLog} if
	37 dict begin
	/PackingDescriptor exch execU def
	/BaseStyle  PackingDescriptor dup type /arraytype eq {0 GetEU} if  def

	/ShoveLeft //false def
	/ShoveRight //false def
	/RowsNumMin 1 def
	/RowsNumMax NG def
	/GlassesNumMin 1 def
	/GlassesNumMax 65535 def
	/CentralGlasses 0 def
	/OnlyIfSheetNumMin 0 def
	/OnlyIfSheetNumMax //IntegerMax def
	/OnlyIfOrientation /Either def
	/ImprovementPointsMin 0 def
	/ImprovementProportionMin 0 def
	/ProhibitVerticalNudging //false def
	/ProhibitHorizontalNudging //false def
	/PositionsStart PackingDescriptor length def
	/PositionsEnd 0 def
	PackingDescriptor type /arraytype eq
	{
		/i 1 def
		{
			i PackingDescriptor length ge {exit} if
			PackingDescriptor i GetEU
			1 {
				dup  /ShoveLeft                   eq {pop  /ShoveLeft                   //true                          store  /i i 1 add store  exit} if
				dup  /ShoveRight                  eq {pop  /ShoveRight                  //true                          store  /i i 1 add store  exit} if
				dup  /ProhibitVerticalNudging     eq {pop  /ProhibitVerticalNudging     //true                          store  /i i 1 add store  exit} if
				dup  /ProhibitHorizontalNudging   eq {pop  /ProhibitHorizontalNudging   //true                          store  /i i 1 add store  exit} if
				dup  /RowsNumMin                  eq {pop  /RowsNumMin                  PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /RowsNumMax                  eq {pop  /RowsNumMax                  PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /GlassesNumMin               eq {pop  /GlassesNumMin               PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /GlassesNumMax               eq {pop  /GlassesNumMax               PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /CentralGlasses              eq {pop  /CentralGlasses              PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /OnlyIfSheetNumMin           eq {pop  /OnlyIfSheetNumMin           PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /OnlyIfSheetNumMax           eq {pop  /OnlyIfSheetNumMax           PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /OnlyIfOrientation           eq {pop  /OnlyIfOrientation           PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /ImprovementPointsMin        eq {pop  /ImprovementPointsMin        PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /ImprovementProportionMin    eq {pop  /ImprovementProportionMin    PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /Positions eq {pop  /PositionsStart  i 1 add store  PositionsStart 1 PackingDescriptor length 1 sub {dup PackingDescriptor exch get type /arraytype eq {/PositionsEnd exch store} {pop exit} ifelse} for /i PositionsEnd 1 add store  exit} if
				dup  /Mirror                           eq {pop  /i i 1 add store  exit} if
				dup  /SuppressNonLeftOrnaments         eq {pop  /i i 1 add store  exit} if
				dup  /SuppressNonRightOrnaments        eq {pop  /i i 1 add store  exit} if
				dup  /VerticalAlignment                eq {pop  /i i 2 add store  exit} if
				dup  /HorizontalAlignment              eq {pop  /i i 2 add store  exit} if
				dup  /RectColsToLeftOrRowsBelow        eq {pop  /i i 2 add store  exit} if
				dup  /PackingNestingColumnMajor        eq {pop  /i i 2 add store  exit} if
				dup  /PackingDirectionTopToBottom      eq {pop  /i i 2 add store  exit} if
				dup  /PackingDirectionLeftToRight      eq {pop  /i i 2 add store  exit} if
				dup  /TempleExtraColsToLeftOrRowsBelow eq {pop  /i i 2 add store  exit} if
				mark exch (Warning: an item of PackingStyles contains the non-recognised sub-parameter ) exch 256 string cvs ConcatenateToMark OutputToLog
				/i i 1 add store
			} repeat  % 1
		} loop
	} if  % PackingDescriptor type /arraytype eq

	% Ensure RowsNumMin and RowsNumMax are sensible
	BaseStyle /Bespoke5 eq NG 5 le and {/RowsNumMin 2 store /RowsNumMax 3 store} if  % Because if /Bespoke5 also test /Diamonds
	BaseStyle /Bespoke7 eq NG 7 le and {Orientation /Landscape eq {/RowsNumMin 2 store /RowsNumMax 3 store} {/RowsNumMin 5 store /RowsNumMax 7 store} ifelse} if  % Because if /Bespoke7 also test /Diamonds
	RowsNumMin 1 lt {/RowsNumMin 1 store} if   RowsNumMin NG gt {/RowsNumMin NG store} if
	RowsNumMax RowsNumMin lt {/RowsNumMax RowsNumMin store} if   RowsNumMax NG gt {/RowsNumMax NG store} if
	NG BaseStyle /PostsAndLintel eq {1 add 2 idiv} if  dup  RowsNumMin lt {dup /RowsNumMin exch store} if  dup RowsNumMax lt {/RowsNumMax exch store} {pop} ifelse

	ShoveLeft ShoveRight and {mark (Error: ProcessOnePackingType, packing with BaseStyle /) BaseStyle ( has both /ShoveLeft and /ShoveRight. Continuing regardless.) ConcatenateToMark OutputToLog} if

	/PriorBestRadius BestRadius def

	1 {
		% Check meet this PackingDescriptor's requirements
		OnlyIfOrientation dup /Either eq {pop} {Orientation ne {exit} if} ifelse
		SheetNum OnlyIfSheetNumMin lt  SheetNum OnlyIfSheetNumMax gt  or {exit} if
		NG 0 gt  BaseStyle /TopRow ne  or {NG GlassesNumMin lt NG GlassesNumMax gt or {exit} if} if

		% /Diamonds is, uniquely, a fall-back for special cases of some others.
		/Diamonds BaseStyle eq  /RectangularAlternateNudge BaseStyle eq or  /Bespoke5 BaseStyle eq NG 5 le and or   /Bespoke7 BaseStyle eq NG 7 le and or   /Temple BaseStyle eq or
		{
			DeBugLevel 50 le {( ProcessOnePackingType, /Diamonds | /Bespoke5 | /Bespoke7) OutputToLog} if
			% /Diamonds trivia: fix the number of glasses at eight, and increase the page's usable Height/Width ratio. At which ratios does the number of rows change?
			% 2 -> 3    0.44444444      4 9 div                                                = 4/9
			% 3 -> 4    0.68572971      7 sqrt 1 sub 5 mul 12 div                              = (Sqrt(7)-1) * 5/12
			% 4 -> 3    0.70562062      35 sqrt 15 sqrt add 2 mul 21 sqrt sub 3 sub 17 div     = ( (Sqrt(35)+Sqrt(15))*2 - Sqrt(21) - 3 ) / 17
			% 3 -> 5    1               1                                                      = 1
			% 5 -> 4    1.41719214      35 sqrt 15 sqrt sub 2 mul 21 sqrt add 3 sub 4 div      = ( (Sqrt(35)-Sqrt(15))*2 - 3 + Sqrt(21) ) / 4
			% 4 -> 5    1.45830052      7 sqrt 1 add 2 mul 5 div                               = (Sqrt(7)+1) * 2/5
			% 5 -> 8    2.25            9 4 div                                                = 9/4
			RowsNumMin 1 RowsNumMax
			{
				/NR exch def % NumRows
				NR 3 eq  /Temple BaseStyle ne  or
				{
					/Temple BaseStyle eq
						{/NC  NG 1 sub 3 div ceiling cvi 2 mul 1 add  def}
						{/NC  NG 1 eq {1} {NG NR idiv 2 mul  NG NR mod dup 0 eq {pop} {NR 1 add 2 idiv gt {2} {1} ifelse add} ifelse} ifelse  def}
					ifelse  % /Temple BaseStyle eq
					/a  1  NC 2 sub NC mul NR 2 sub mul NR mul  sub 4 mul  def
					/b  NC 1 sub dup mul H mul  NR 1 sub dup mul W mul  add  -4 mul  def
					/c  NC 1 sub H mul dup mul  NR 1 sub W mul dup mul add  def
					/R  [ H NR 1 add div   W NC 1 add div   [ c b a ] 0 //true //Infinity //true //PrinterEpsilon PolynomialRoots aload pop ] Min def

					R  PriorBestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
					R  PriorBestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and  R BestRadius gt and
					{
						/BestRadius R store
						BestParamsDict {pop BestParamsDict exch undef} forall
						BestParamsDict /PackingDescriptor PackingDescriptor put
						BestParamsDict /BaseStyle /Diamonds put
						BestParamsDict /NumRows NR put
						BestParamsDict /NumCols NC put
					} if  % R PriorBestRadius ... gt ...
				} if  % NR 3 eq  /Temple BaseStyle ne  or
			} for  % NR
			% No exit as /Diamonds used as a fallback for others
		} if  % /Diamonds /RectangularAlternateNudge /Bespoke5 /Bespoke7 /Temple


		/Bespoke5 BaseStyle eq  NG 5 le  and
		{
			DeBugLevel 50 le {( ProcessOnePackingType, /Bespoke5) OutputToLog} if
			W H 2 copy lt {exch} if   /S exch def   /L exch def  % short side, long side
			/a 21 S mul 10 L mul sub 2 S mul L sub 6 mul //Sqrt3 mul add S mul def
			a 0 ge
			{
				/R 2 S mul L sub //Sqrt3 mul 5 S mul add L sub a sqrt sub 4 div def
				R  PriorBestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
				R  PriorBestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and
				R S 2 div //PrinterEpsilon add le  and  % second test should be redundant, but the equations have multiple solutions
				{
					/b  L S //Sqrt3 mul sub R 2 mul //Sqrt3 1 sub mul add  def
					b 0 ge  b R le  and  % not pushed out of bounds
					{
						/BestRadius R store
						BestParamsDict {pop BestParamsDict exch undef} forall
						BestParamsDict /PackingDescriptor PackingDescriptor put
						BestParamsDict /BaseStyle BaseStyle put
					} if  % b 0 ge  b R le  and
				} if  % R BestRadius gt ...
			} if  % a 0 ge
			exit  % 1 {...} repeat
		} if  % ... /Bespoke5 ...  NG 5 le  and


		/Bespoke7 BaseStyle eq  NG 7 le  and
		{
			DeBugLevel 50 le {( ProcessOnePackingType, /Bespoke7) OutputToLog} if
			W H 2 copy lt {exch} if   /S exch def   /L exch def  % short side, long side
			L S div dup  2 //Sqrt3 sub 8 mul lt  exch  //Sqrt3 1 sub 1.5 mul gt  and
			{
				/a 4 def
				/b 7 4 //Sqrt3 mul sub L mul 2 //Sqrt3 sub S mul add -8 mul def
				/c 7 4 //Sqrt3 mul sub 4 S S mul mul L L mul add mul def
				[ c b a ]  //PrinterEpsilon  //true  S 2 //Sqrt3 add div L 6 div 2 copy gt {exch} if pop //PrinterEpsilon add  //false  //PrinterEpsilon  PolynomialRoots
				dup length 1 ge
				{
					Min /R exch def
					R  PriorBestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
					R  PriorBestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and
					{
						/BestRadius R store
						BestParamsDict {pop BestParamsDict exch undef} forall
						BestParamsDict /PackingDescriptor PackingDescriptor put
						BestParamsDict /BaseStyle BaseStyle put
					} if  % R BestRadius gt ...
				} {pop} ifelse  % ... PolynomialRoots ... length 1 ge
			} if  % Usable paper of valid aspect ratio
			exit  % 1 {...} repeat
		} if  % ... /Bespoke7 ...  NG 7 le  and


		/Temple BaseStyle eq
		{
			DeBugLevel 50 le {( ProcessOnePackingType, /Temple) OutputToLog} if
			% http://www.jdawiseman.com/papers/placemat/PackingStyles_formulae.nb and .pdf
			% The constraint on the aspect ratio might be <= (Sqrt3-1)*5/2 ~= 1.8301 and also >= (27+11*Sqrt3)*(4-SqrtSqrt12)/61 ~= 1.6147
			/N NG 1 sub 3 div ceiling cvi dup 2 lt {pop 2} if def
			0 1 1  % 0 = Landscape-style, N=NumCols and NumRows~=3; 1 = Portrait-style, N=NumRows and NumCols~=3;
			{
				dup /O exch def  0 eq {/L W /S H} {/L H /S W} ifelse  def def
				/MinR  L N 1 add             2 mul div  S //SqrtSqrt12 2 mul 2 add div  2 copy gt {exch} if pop  def
				/MaxR  L N 1 sub //Sqrt3 add 2 mul div  S //Sqrt3      2 mul 2 add div  2 copy gt {exch} if pop  def
				[
					S S mul dup mul 16 mul dup  S L mul dup mul 4 mul sub L L mul dup mul add exch  S L mul dup mul 12 mul add L L mul dup mul 9 mul add mul  % Coeff 0
					512 S mul  N 1 add 64 mul L mul add S mul  192 L L mul mul add S mul  112 N mul 32 sub L L L mul mul mul add S mul  112 L L mul dup mul mul add  S mul
					48 36 N mul sub L L mul dup mul L mul mul add S mul  12 L L L mul mul dup mul mul sub S mul  N 18 mul 9 sub L L L mul mul dup mul L mul mul add  -8 mul  % Coeff 1
					64 N mul 128 add N mul 2880 add S mul  N 1 add 768 mul L mul add S mul  336 N mul 192 sub N mul 736 add L L mul mul add S mul  896 N mul 256 sub L L L mul mul mul add S mul
					-180 N mul 480 add N mul 184 add L L mul dup mul mul add S mul  -144 N mul 192 add L L mul dup mul L mul mul add S mul  N 1 sub 126 mul N mul 9 sub L L L mul mul dup mul mul add   8 mul  % Coeff 2
					192 N mul 384 add N mul 1472 add S mul  112 N mul 96 sub N mul 736 add N mul 848 add L mul add S mul  672 N mul 384 sub N mul 192 add L L mul mul add S mul
					-120 N mul 480 add N mul 368 add N mul 304 sub L L L mul mul mul add S mul  -180 N mul 480 add N mul 40 sub L L mul dup mul mul add S mul  126 N mul 189 sub N mul 27 sub N mul 75 add L L mul dup mul L mul mul add   -32 mul  % Coeff 3
					112 N mul 128 sub N mul 1472 add N mul 3392 add N mul 1136 sub S mul  1792 N mul 1536 sub N mul 1536 add N mul 3328 add L mul add S mul  -360 N mul 1920 add N mul 2208 add N mul 3648 sub N mul 360 add L L mul mul add S mul
					-960 N mul 3840 add N mul 640 sub N mul 1408 sub L L L mul mul mul add S mul  630 N mul 1260 sub N mul 270 sub N mul 1500 add N mul 239 sub L L mul dup mul mul add  16 mul  % Coeff 4
					112 N mul 128 sub N mul 192 add N mul 832 add N mul 1392 sub S mul  -36 N mul 240 add N mul 368 add N mul 912 sub N mul 180 add N mul 320 add L mul add S mul
					-180 N mul 960 add N mul 240 sub N mul 1056 sub N mul 308 add L L mul mul add S mul  126 N mul 315 sub N mul 90 sub N mul 750 add N mul 239 sub N mul 176 sub L L L mul mul mul add  -128 mul  % Coeff 5
					-126 N mul 378 add N mul 135 add N mul 1500 sub N mul 717 add N mul 1056 add N mul 416 sub  L L mul mul   144 N mul 960 sub N mul 320 add N mul 2112 add N mul 1232 sub N mul  L S mul mul
					12 N mul 96 sub N mul 184 sub N mul 608 add N mul 180 sub N mul 640 sub N mul 1248 add  S S mul mul   add add -128 mul  % Coeff 6
					-18 N mul 63 add N mul 27 add N mul 375 sub N mul 239 add N mul 528 add N mul 416 sub  L mul   12 N mul 96 sub N mul 40 add N mul 352 add N mul 308 sub N mul  S mul   add 512 N mul mul  % Coeff 7
					9 N mul 36 sub N mul 18 sub N mul 300 add N mul 239 sub N mul 704 sub N mul 832 add  256 N N mul mul mul  % Coeff 8
				]  MinR //false MaxR //false //PrinterEpsilon PolynomialRoots  % On exact boundary, prefer Diamonds or RectangularDislocation
				dup length 0 gt {Min} {pop MaxR} ifelse  /R exch def
				R  PriorBestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
				R  PriorBestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and  R BestRadius gt and
				{
					/BestRadius R store
					BestParamsDict {pop BestParamsDict exch undef} forall
					BestParamsDict /PackingDescriptor dup load put
					BestParamsDict /BaseStyle dup load put
					BestParamsDict /N N put
					BestParamsDict /O O put
				} if  % R PriorBestRadius ... gt ...
			} for  % O
			exit  % 1 {...} repeat
		} if  % /Temple


		BaseStyle dup dup dup  /SquareGrid eq  exch /TopRow eq or  exch /MiddleRow eq or  exch /BottomRow eq or
		{
			DeBugLevel 50 le {( ProcessOnePackingType, /SquareGrid | /TopRow | /MiddleRow | /BottomRow) OutputToLog} if
			BaseStyle /SquareGrid eq {RowsNumMin 1 RowsNumMax} {1 1 1} ifelse
			{
				/NR exch def % NumRows
				/NC NG NR div ceiling cvi def
				/R  H NR 2 ge {NR div} if   W NC 2 ge {NC div} if  2 copy gt {exch} if pop  2 div  def
				R  PriorBestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
				R  PriorBestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and  R BestRadius gt and
				{
					/BestRadius R store
					BestParamsDict {pop BestParamsDict exch undef} forall
					BestParamsDict /PackingDescriptor dup load put
					BestParamsDict /BaseStyle dup load put
					BestParamsDict /NumRows NR put
					BestParamsDict /NumCols NC put
				} if  % R PriorBestRadius ... gt ...
			} for  % NR
			exit  % 1 {...} repeat
		} if  % /SquareGrid /TopRow /MiddleRow /BottomRow


		/Sides BaseStyle eq
		{
			DeBugLevel 50 le {( ProcessOnePackingType, /Sides) OutputToLog} if
			NG 1 ge
			{
				/NR NG 1 add 2 idiv def
				/R  H NR 2 mul div  W 4 div  2 copy gt {exch} if pop  def
				R  BestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
				R  BestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and
				{
					/BestRadius R store
					BestParamsDict {pop BestParamsDict exch undef} forall
					BestParamsDict /PackingDescriptor dup load put
					BestParamsDict /BaseStyle dup load put
					BestParamsDict /NumRows NR put
					BestParamsDict /NumCols 2 put
				} if  % R BestRadius ... gt ...
			} if  % NG 1 ge
			exit  % 1 {...} repeat
		} if  % /Sides


		/LeftSide BaseStyle eq  /RightSide BaseStyle eq  or
		{
			DeBugLevel 50 le {mark ( ProcessOnePackingType, /) BaseStyle ConcatenateToMark OutputToLog} if
			NG 1 ge
			{
				/R  H NG 2 mul div  W 2 div  2 copy gt {exch} if pop  def
				R  BestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
				R  BestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and
				{
					/BestRadius R store
					BestParamsDict {pop BestParamsDict exch undef} forall
					BestParamsDict /PackingDescriptor dup load put
					BestParamsDict /BaseStyle dup load put
					BestParamsDict /NumRows NG put
					BestParamsDict /NumCols 1 put
				} if  % R BestRadius ... gt ...
			} if  % NG 1 ge
			exit  % 1 {...} repeat
		} if  % /LeftSide ... /RightSide ...


		/RectangularDislocation BaseStyle eq
		{
			DeBugLevel 50 le {( ProcessOnePackingType, /RectangularDislocation) OutputToLog} if
			RowsNumMin 1 RowsNumMax
			{
				/NR exch def
				/NC NG NR div ceiling cvi def
				/R  W NC 2 mul div  H NR 2 mul div  2 copy gt {exch} if pop  def
				NR NC mul NG gt
				{
					% With dislocation. For calculating R it matters not between which rows.
					/a  4  NC 1 sub NR 1 sub mul 4 mul dup mul add  NC 1 sub 4 mul dup mul sub  def
					/b  -4 W mul  NC 1 sub dup mul NR 1 sub mul 16 mul H mul sub  def
					/c  W W mul  NC 1 sub 2 mul H mul dup mul add  def
					/R  W NC 2 mul div  H NR 1 sub 2 mul div  2 copy gt {exch} if pop  def
					[ c b a ] 0 //true R //false //PrinterEpsilon PolynomialRoots  dup length [ {pop R} {0 get} {Min} ] exch get exec /R exch def
				} if  % Dislocation
				R  PriorBestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
				R  PriorBestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and  R BestRadius gt and
				{
					/BestRadius R store
					BestParamsDict {pop BestParamsDict exch undef} forall
					BestParamsDict /PackingDescriptor dup load put
					BestParamsDict /BaseStyle dup load put
					BestParamsDict /NumRows NR put
					BestParamsDict /NumCols NC put  % One fewer column in narrower section
				} if  % R PriorBestRadius ... gt ...
			} for  % NR
			exit  % 1 {...} repeat
		} if  % /RectangularDislocation


		/PostsAndLintel BaseStyle eq
		{
			DeBugLevel 50 le {( ProcessOnePackingType, /PostsAndLintel) OutputToLog} if
			% Recall V is number touching a side, so ignores those touching top
			CentralGlasses type /integertype ne  CentralGlasses 0 lt  CentralGlasses 3 gt  or or {(Error: ProcessOnePackingType, PostsAndLintel, CentralGlasses should be 0, 1, 2, or 3. Continuing with CentralGlasses=0.) OutputToLog /CentralGlasses 0 def} if
			/NGaE NG CentralGlasses sub def  % Num Glasses at Edge
			NGaE 1 le
			{
				/R  W NGaE 2 eq {2 div} if  H  2 copy gt {exch} if pop  2 div  def
				/V 0 def
			}{
				RowsNumMin 1 RowsNumMax
				{
					/V exch 1 sub def  % num glasses touching each vertical side, so 1 less than the number of rows
					/a  V V mul 8 mul  NGaE V 4 mul sub NGaE mul add  4 sub  def
					/b  H V mul 4 mul  NGaE V 2 mul sub W mul add  neg  def
					/c  W W mul 4 div H H mul add  def
					[
					[ c b a ]  0  //true  [V 0 gt {H //PrinterEpsilon add V 2 mul div} if  NGaE V 2 mul gt {W //PrinterEpsilon add NGaE V 2 mul sub 2 mul div} if] Min  //true  //PrinterEpsilon  PolynomialRoots
					dup length [ {pop H  V 1 add 2 mul  div   NGaE V 2 mul sub  dup 0 gt {2 mul W exch div} {pop //Infinity} ifelse} {0 get} {Min (Warning: ProcessOnePackingType, PostsAndLintel, two seemingly good solutions.) OutputToLog} ] exch get exec
					W 4 div  H 2 div  % As above geometry doesn't prevent overlapping of non-adjacent circles
					CentralGlasses 1 eq {W 6 div  H NGaE 2 mod 0 eq {//Sqrt3 2 add} {4} ifelse div} if
					CentralGlasses 2 eq {W 8 div  H NGaE 2 mod 1 eq {//Sqrt3 2 add} {4} ifelse div} if
					CentralGlasses 3 eq {W 8 div  H NGaE 2 mod 1 eq {//Sqrt3 4 add} {//Sqrt3 2 mul 2 add} ifelse div} if
					] Min /R exch def

					R  PriorBestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
					R  PriorBestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and  R BestRadius gt and
					{
						/BestRadius R store
						BestParamsDict {pop BestParamsDict exch undef} forall
						BestParamsDict /PackingDescriptor dup load put
						BestParamsDict /BaseStyle dup load put
						BestParamsDict /NumRows V 1 add put
						BestParamsDict /CentralGlasses dup load put
						W H lt {(Warning: PostsAndLintel packings rarely look good with Orientation equalling /Portrait: consider "... /OnlyIfOrientation /Landscape ...".) OutputToLog} if
					} if  % R PriorBestRadius ... gt ...

				} for  % V

			} ifelse  % NGaE 1 le
			exit  % 1 {...} repeat
		} if  % /PostsAndLintel


		/Arch BaseStyle eq
		{
			DeBugLevel 50 le {( ProcessOnePackingType, /Arch) OutputToLog} if
			/NGiA  NG CentralGlasses sub  def  % Number Glasses in Arch
			NGiA 3 ge
			{
				% In all other patterns the radius can be computed analytically. Not this.
				% Outer loop interval bisects R.
				% Inner attempts to jiggle circles into place. If possible with distance >= 2R, that R good. If not possible, or too hard to tell, fails.
				% Can be slow and complicated, though many cases fail quickly.
				19 dict begin
				/UpperR [
					90 NGiA 1 sub div  NGiA 2 mod 0 eq {dup sin 1 exch div dup 3 -1 roll cos mul} {sin 1 exch div dup} ifelse  2 add H exch div exch  1 add W 2 div exch div   2 copy lt {exch} if pop
					CentralGlasses 0 eq {W 4 div   H 2 div} if
					CentralGlasses 1 eq {W 6 div   H  NGiA 2 mod 1 eq {4} {//Sqrt3 2 add} ifelse  div} if
					CentralGlasses 2 eq {W 8 div   H  NGiA 2 mod 0 eq {4} {//Sqrt3 2 add} ifelse  div} if
					CentralGlasses 3 eq {W 8 div   H  NGiA 2 mod 0 eq {//Sqrt3 2 mul 2 add} {//Sqrt3 4 add} ifelse  div} if
				] Min def  % /UpperR
				/LowerR  [ H H mul W W mul 4 div add
				NGiA 2 mod 0 eq
					{H 2 mul W add -2 mul   4 NGiA sub NGiA mul 4 add}
					{H -4 mul W sub         2 NGiA sub NGiA mul 4 add}
				ifelse ]  0  //true  H W lt {H} {W} ifelse 2 div  //false  //PrinterEpsilon  PolynomialRoots  dup length 0 eq {pop 0} {Min} ifelse
				NGiA 4 le {//PrinterEpsilon 2 mul sub} if  UpperR //PrinterEpsilon 2 mul sub 2 copy gt {exch} if pop  def
				/R  LowerR BestRadius lt {BestRadius //PrinterEpsilon sub} {LowerR UpperR add 2 div} ifelse  def  % If BestRadius not tiny, try to fail early
				/LittleN2sub NGiA 1 add 2 idiv  2 sub def
				/PositionsX LittleN2sub 2 add array def  % First element is top-most circle, or right of two top-most. Page X centre at 0, so 0 <= PositionsX <= W/2 - R.
				/PositionsY LittleN2sub 2 add array def  % Page Y bottom at 0, so R <= PositionsY <= H - R.
				/BestX NGiA 1 add 2 idiv array def  /BestY NGiA 1 add 2 idiv array def

				{
					% mark (NGiA = ) NGiA 3 string cvs (; LowerR = ) LowerR 15 string cvs (; UpperR = ) UpperR 15 string cvs (; diff = ) UpperR LowerR sub (; R = ) R 15 string cvs ConcatenateToMark =
					UpperR BestRadius le {exit} if  % Continuing purposeless
					true BestX {IsNumber not {pop //false exit} if} forall BestY {IsNumber not {pop //false exit} if} forall  UpperR LowerR sub //PrinterEpsilon le  and {exit} if
					/RR4 R R mul 4 mul def
					/EllipseSemiX  W 2 div R sub  def
					/EllipseSemiY  H R 2 mul sub  def
					PositionsY  0  H R sub  put  % constant
					0  1  LittleN2sub 1 add
					{
						/i exch def
						NGiA 2 mod 0 eq  i 0 eq  and {/EllipseSemiY  H 2 R mul sub  90 NGiA 1 sub div cos  div  store} if
						PositionsX i PositionsY i   NGiA 1 add 2 mod  i 2 mul add  90 mul  NGiA 1 sub div dup   cos EllipseSemiY mul R add exch  sin EllipseSemiX mul  4 1 roll put put
					} for  % i

					NGiA 2 add dup mul  -1  0
					{
						0 le {/UpperR R def (Error: ProcessOnePackingType, Arch, extremely slow convergence. Please send PostScript file to the author. www.jdawiseman.com/author.html) OutputToLog exit} if
						/DistSquaredMax 0 def
						/DistSquaredMin H W add dup mul def
						% Test for exit of jiggling of PositionsX & PositionsY
						NGiA 1 add 2 mod neg  1  LittleN2sub
						{
							/i exch def
							i -1 eq {PositionsX 0 get 2 mul dup mul} {PositionsX i get PositionsX i 1 add get sub dup mul  PositionsY i get PositionsY i 1 add get sub dup mul add} ifelse
							dup dup dup   DistSquaredMin lt {/DistSquaredMin exch def} {pop} ifelse   DistSquaredMax gt {/DistSquaredMax exch def} {pop} ifelse
						} for  % i

						DistSquaredMax RR4 lt {/UpperR R def  exit} if
						DistSquaredMin RR4 ge {/LowerR R def  BestX 0 PositionsX putinterval  BestY 0 PositionsY putinterval  exit} if
						% Done position optimisation?  Max-Min<PrinterEpsilon  ==>  Max<Min+PrinterEpsilon  ==>  Max^2 < Min^2 + 2*PrinterEpsilon*Min + small  ==>  Max^2 - Min^2 < 2 PrinterEpsilon Min  ==>  (Max^2 - Min^2)^2 < 4 PrinterEpsilon^2 Min^2
						DistSquaredMax DistSquaredMin sub dup mul  //PrinterEpsilon 2 mul dup mul DistSquaredMin mul  le
						DistSquaredMax DistSquaredMin div  //Epsilon 2 mul 1 add lt   DistSquaredMax sqrt DistSquaredMin sqrt sub //PrinterEpsilon le
						or or  {/UpperR R def  exit} if  % Min and Max straddle cutoff, and optimisation done
						% Not testing extras as embedded into intial value of UpperR

						% Update PositionsX and PositionsY
						0 1 LittleN2sub
						{
							/i exch def
							i 0 eq
							{
								NGiA 2 mod 0 eq
								{
									PositionsX 0   H R sub PositionsY 1 get sub dup mul 3 mul   PositionsX 1 get dup mul 4 mul  add sqrt   PositionsX 1 get sub 3 div  put
									/EllipseSemiY  H R 2 mul sub  1 PositionsX 0 get EllipseSemiX div dup mul sub  dup 0 gt {sqrt div} {pop pop //PrinterEpsilon} ifelse  store
								} if  % NGiA 2 mod 0 eq
							}{
								/X1 PositionsX i 1 sub get def
								/X3 PositionsX i 1 add get def
								/Y1 PositionsY i 1 sub get def
								/Y3 PositionsY i 1 add get def
								/X2
								[
									X1 X1 mul X3 X3 mul sub  EllipseSemiY R sub 2 mul Y1 add Y3 add Y1 Y3 sub mul add
									X1 X1 mul X3 X3 mul sub  EllipseSemiY R add 2 mul Y1 sub Y3 sub Y1 Y3 sub mul sub  mul  EllipseSemiX dup mul mul

									X1 X1 mul X3 X3 mul sub Y1 Y1 mul add Y3 Y3 mul sub  Y3 Y1 sub 2 mul R mul add  X1 X3 sub mul  EllipseSemiX dup mul mul -4 mul
									X1 X3 sub EllipseSemiX mul dup mul  Y1 Y3 sub EllipseSemiY mul dup mul  add 4 mul
								]  0  //true  W R sub  //false  //PrinterEpsilon  PolynomialRoots  dup length 0 eq {(Error: ProcessOnePackingType, Arch, no solutions) OutputToLog stop} if  Max   R 2 copy lt {exch} if pop  def  % /X2
								PositionsX i X2 put
								PositionsY i   X1 X1 mul X3 X3 mul sub Y1 Y1 mul add Y3 Y3 mul sub  X3 X1 sub 2 mul X2 mul add  Y1 Y3 sub 2 mul div  put
							} ifelse  % i 0 eq
						} for  % i
					} for  % loop count to stop slow convergence, updating PositionsX, PositionsY, EllipseSemiY
					/R UpperR LowerR add 2 div def
				} loop  % R, UpperR, LowerR
				[ 0 1 BestX length 1 sub {/i exch def  BestX i get IsNumber BestY i get IsNumber and {BestX i get W 2 div LowerR sub div  BestY i get LowerR sub H LowerR sub div  atan} {null} ifelse} for ]   LowerR
				end
				/R exch def
				R  BestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
				R  BestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and
				{
					/BestRadius R store
					BestParamsDict {pop BestParamsDict exch undef} forall
					BestParamsDict /BaseStyle BaseStyle put
					BestParamsDict /PackingDescriptor PackingDescriptor put
					BestParamsDict exch /PseudoAngles exch put
					W H lt {(Warning: Arch packings rarely look good with Orientation equalling /Portrait: consider "... /OnlyIfOrientation /Landscape ...".) OutputToLog} if
				} {pop} ifelse  % LowerR BestRadius gt
			} if  % NGiA 3 ge
			exit  % 1 {...} repeat
		} if  % /Arch


		/DiamondsPlus BaseStyle eq  NG 5 ge  and
		{
			DeBugLevel 50 le {( ProcessOnePackingType, /DiamondsPlus) OutputToLog} if
			W H 2 copy lt {exch} if   /S exch def   /L exch def  % short side, long side
			RowsNumMin dup 2 mod 0 eq {1 add} if dup 3 lt {pop 3} if  2  RowsNumMax dup 3 gt {pop 3} if  % Currently copes only with 3 rows. Should cope with any odd number. Later, perhaps.
			{
				/NR exch def
				% NC refers to the fully filled diamonds section, outside which are NR+1 glasses.
				/NC  NG NR 1 add sub NR div ceiling cvi 2 mul   NG NR 1 add sub NR mod 2 mul dup 0 gt exch NR le and {1 sub} if  def
				/NEaT NC 1 add 2 idiv def  % Number Extras at Top
				% This is the quartic that solves for radius with three rows (Landscape), when adjacent items in a row don't touch -- but do touch the circles in the neighbouring row(s).
				% Valid range will be 0 to its first turning point, which will be the next thing solved.
				/QuarticCoeffs
				[
					NC dup mul 1 sub S S mul mul dup mul  S L mul dup mul 8 mul NC dup mul 1 add mul add  L L mul dup mul 16 mul add  % Coeff 0
					NC dup mul dup 2 sub exch 1 sub mul -8 mul S S S mul mul mul  NC dup mul 1 add L S S mul mul mul  NC dup mul 2 add L L S mul mul mul  add 32 mul sub  128 L L L mul mul mul sub  % Coeff 1
					NC dup mul dup 3 sub exch 4 add mul -8 mul S S mul mul  NC dup mul 2 add 128 mul S L mul mul add  NC dup mul 4 sub -96 mul L L mul mul add  % Coeff 2
					NC dup mul 3 mul 4 sub 128 mul L mul  NC dup mul dup 4 sub exch 3 mul 2 add mul 32 mul S mul add  % Coeff 3
					NC dup mul 3 mul 4 sub dup mul 16 mul  % Coeff 4
				] def  % /QuarticCoeffs
				QuarticCoeffs  0  //true  S 4 div L NEaT 2 mul div 2 copy gt {exch} if pop //PrinterEpsilon add  //false  //PrinterEpsilon  PolynomialRoots dup length 0 eq {pop //Infinity} {Min} ifelse
				S 4 div  2 copy gt {exch} if pop   /R exch def

				% If diagonal touching has horizontal overlapping, then instead have horizontal touching and diagonal gaps.
				8 R mul S sub S mul dup 0 ge {sqrt 2 div  2 R mul add L exch sub NC div  //PrinterEpsilon add  R lt} {pop //false} ifelse
				{
					% Next equation assumes that circles in the top row touch, so this is effectively /PostsAndLintel with two circles in the lintel.
					[ 4 L L mul mul S S mul add   NC 2 mod 1 eq {NEaT 2 mul 1 add L mul S add -8 mul  NEaT 2 mul 1 add dup mul 4 mul} {NEaT 1 add L mul -16 mul S 8 mul sub  NEaT 1 add dup mul 16 mul} ifelse ]
					0  //true  S 2 div  //false  //PrinterEpsilon  PolynomialRoots  dup length 0 eq {pop //Infinity} {Min} ifelse
					% And check that middle row doesn't interfere with end two
					[
						S dup mul dup L dup mul 16 mul add mul
						L L mul 8 mul  S S mul add  NC 2 mul 3 add 2 mul L S mul mul add  S mul -8 mul
						8 L L mul mul  NC 2 mul 3 add 4 mul L S mul mul add  NC dup 3 add mul S S mul mul add  16 mul
						NC 4 mul 6 add L mul  NC dup 3 add mul 1 sub S mul add  -64 mul
						NC dup 3 add mul 2 mul 1 add 64 mul
					]  0  //true  L  //false  //PrinterEpsilon  PolynomialRoots  dup length 0 eq {pop //Infinity} {Min} ifelse
					S //Sqrt3 1 add 2 mul div  2 {2 copy gt {exch} if pop} repeat   /R exch def
					/DistHorizontal //true def
				} {/DistHorizontal //false def} ifelse
				L NEaT 2 mul 2 add div  dup R  lt {/R exch def} {pop} ifelse

				R S 2 div //PrinterEpsilon add lt
				{
					R  PriorBestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
					R  PriorBestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and
					{
						mark (DiamondsPlus improves radius by ) R PriorBestRadius sub dup (pt = ) exch 72 div dup (\" = ) exch 25.4 mul (mm )
						PriorBestRadius 0 gt {(= ) R PriorBestRadius div 1 sub 100 mul (\% )} if (to ) R (pt from ) PriorBestRadius (pt on SheetNum=) SheetNum (.) ConcatenateToMark OutputToLog
						/BestRadius R store
						BestParamsDict {pop BestParamsDict exch undef} forall
						BestParamsDict /PackingDescriptor PackingDescriptor put
						BestParamsDict /BaseStyle BaseStyle put
						BestParamsDict /NumCols NC put
						BestParamsDict /DistHorizontal DistHorizontal put
					} if  % R BestRadius gt ...
				} if  % R finite
			} for  % NR
			exit
		} if  % /DiamondsPlus


		/DiamondsAndRectangular BaseStyle eq
		{
			DeBugLevel 50 le {( ProcessOnePackingType, /DiamondsAndRectangular) OutputToLog} if
			RowsNumMin 1 RowsNumMax
			{
				/NR exch def
				/NiLR NG NR div ceiling cvi def  % Num in Longer Rows
				/NC NiLR 2 mul 1 sub def  % Always odd
				/NSR  NiLR NR mul NG sub  NR 1 sub 2 idiv  2 copy gt {exch} if pop  def  % Num Short Rows, the upper limit being /Diamonds with an odd number of columns

				NR 3 ge
				{
					% /AboveBelow true
					[
						NSR W mul dup mul 4 mul  NC 1 sub H mul dup mul add
						NR 2 NSR mul sub NC 1 sub dup mul mul -4 mul H mul  NSR dup mul 16 mul W mul sub
						NC 1 sub dup mul NR mul NR NSR 4 mul sub mul NSR dup mul 4 mul add  4 mul
					] 0  //false  //Infinity  //true  //PrinterEpsilon  PolynomialRoots
					dup length 0 gt
					{
						Min   W NiLR 2 mul div 2 copy gt {exch} if pop  NR NSR gt {H NR NSR sub 2 mul div 2 copy gt {exch} if pop} if  /R exch def
						R  PriorBestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
						R  PriorBestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and  R BestRadius gt and
						{
							/BestRadius R store
							BestParamsDict {pop BestParamsDict exch undef} forall
							BestParamsDict /PackingDescriptor dup load put
							BestParamsDict /BaseStyle dup load put
							BestParamsDict /AboveBelow //true put
							BestParamsDict /NumRows NR put
							BestParamsDict /NumCols NC put
							BestParamsDict /NumInLongerRows NiLR put
							BestParamsDict /NumShorterRows NSR put
						} if  % R PriorBestRadius ... gt ...
					} {pop} ifelse  % any solutions to quadratic
				} if  % NR 3 ge

				% /AboveBelow false
				% In this section except BestParamsDict, meaning of rows and columns is reversed. Careful!
				NR 2 mod 1 eq
				{
					[
						NSR H mul dup mul 4 mul  NC 1 sub W mul dup mul add
						NR 2 NSR mul sub NC 1 sub dup mul mul -4 mul W mul  NSR dup mul 16 mul H mul sub
						NC 1 sub dup mul NR mul NR NSR 4 mul sub mul NSR dup mul 4 mul add  4 mul
					] 0  //true  H W lt {H} {W} ifelse 2 div  //false  //PrinterEpsilon  PolynomialRoots
					dup length 0 gt
					{
						Min   H NiLR 2 mul div 2 copy gt {exch} if pop  NR NSR gt {W NR NSR sub 2 mul div 2 copy gt {exch} if pop} if  /R exch def
						R  PriorBestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
						R  PriorBestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and  R BestRadius gt and
						{
							/BestRadius R store
							BestParamsDict {pop BestParamsDict exch undef} forall
							BestParamsDict /PackingDescriptor dup load put
							BestParamsDict /BaseStyle dup load put
							BestParamsDict /AboveBelow //false put
							BestParamsDict /NumRows NC put
							BestParamsDict /NumCols NR put
							BestParamsDict /NumInLongerCols NiLR put
							BestParamsDict /NumShorterCols NSR put
						} if  % R PriorBestRadius ... gt ...
					} {pop} ifelse  % any solutions to quadratic
				} if  % NR 2 mod 1 eq

			} for  % NR
			exit
		} if  % /DiamondsAndRectangular


		/RectangularAlternateSplitNudge BaseStyle eq
		{
			DeBugLevel 50 le {( ProcessOnePackingType, /RectangularAlternateSplitNudge) OutputToLog} if
			RowsNumMin 1 RowsNumMax
			{
				/NR exch def
				/NC NG NR div ceiling cvi def
				NR 2 ge NC 2 ge and
				{[
					{
						/NudgeRows //true def
						/c  4 H H mul mul  NR 1 sub W mul dup mul  add def
						/b  NR 1 sub dup mul NC mul W mul  4 H mul add  -4 mul def
						/a  NR 1 sub NC mul dup mul  NR 2 sub NR mul 4 mul sub  4 mul def
					} ProhibitHorizontalNudging {pop} if
					{
						/NudgeRows //false def
						/c  4 W W mul mul  NC 1 sub H mul dup mul  add def
						/b  NC 1 sub dup mul NR mul H mul  4 W mul add  -4 mul def
						/a  NC 1 sub NR mul dup mul  NC 2 sub NC mul 4 mul sub  4 mul def
					} ProhibitVerticalNudging {pop} if
				]} {[]} ifelse  % at least two rows and columns
				{
					exec [ c b a ]  0  //true  H W lt {H} {W} ifelse 2 div  //false  //PrinterEpsilon  PolynomialRoots
					{
						/R exch def
						NudgeRows
							{NR 1 add R mul H //PrinterEpsilon add lt  NC 2 mul R mul W //PrinterEpsilon add lt  NC 1 add 2 mul R mul W //PrinterEpsilon sub gt  and and}
							{NC 1 add R mul W //PrinterEpsilon add lt  NR 2 mul R mul H //PrinterEpsilon add lt  NR 1 add 2 mul R mul H //PrinterEpsilon sub gt  and and}
						ifelse  % NudgeRows
						{
							R  PriorBestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
							R  PriorBestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and  R BestRadius gt and
							{
								mark (RectangularAlternateSplitNudge improves radius by ) R PriorBestRadius sub dup (pt = ) exch 72 div dup (\" = ) exch 25.4 mul (mm )
								PriorBestRadius 0 gt {(= ) R PriorBestRadius div 1 sub 100 mul (\% )} if (to ) R (pt from ) PriorBestRadius (pt on SheetNum=) SheetNum (.) ConcatenateToMark OutputToLog
								/BestRadius R store
								BestParamsDict {pop BestParamsDict exch undef} forall
								BestParamsDict /PackingDescriptor dup load put
								BestParamsDict /BaseStyle dup load put
								BestParamsDict /NumRows NR put
								BestParamsDict /NumCols NC put
								BestParamsDict /NudgeRows  NudgeRows put
							} if  % R PriorBestRadius ... gt ...
						} if  % valid solution
					} forall  % solutions to PolynomialRoots
				} forall  % Nudge rows or columns
			} for  % NR
			exit
		} if  % /RectangularAlternateSplitNudge


		/RectangularAlternateNudge BaseStyle eq
		{
			DeBugLevel 50 le {( ProcessOnePackingType, /RectangularAlternateNudge) OutputToLog} if
			% Not entirely happy with this code. If there isn't a solution to the quadratic, there should still be something sensible to do. But what? Answers to the author, www.jdawiseman.com/author.html
			RowsNumMin 1 RowsNumMax
			{
				/NR exch def
				/NC NG NR div ceiling cvi def
				[
					{
						/NudgeRows //true def
						H NR 1 sub //Sqrt3 mul 2 add div  W NC 2 mul div  % R may not exceed lesser of these
						/a  NR 1 sub NC mul dup mul  NR 2 sub NR mul sub  4 mul def
						/b  NR 1 sub dup mul NC mul W mul H add -4 mul def
						/c  NR 1 sub W mul dup mul H dup mul add def
					} ProhibitHorizontalNudging {pop} if
					{
						/NudgeRows //false def
						W NC 1 sub //Sqrt3 mul 2 add div  H NR 2 mul div  % R may not exceed lesser of these
						/a  NC 1 sub NR mul dup mul  NC 2 sub NC mul sub  4 mul def
						/b  NC 1 sub dup mul NR mul H mul W add -4 mul def
						/c  NC 1 sub H mul dup mul W dup mul add def
					} ProhibitVerticalNudging {pop} if
				]
				{
					exec [ c b a ]  0  //true  H W lt {H} {W} ifelse 2 div  //false  //PrinterEpsilon  PolynomialRoots
					{2 copy gt {exch} if pop} forall  2 copy gt {exch} if pop   /R exch def
					R  PriorBestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
					R  PriorBestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and  R BestRadius gt and
					{
						mark (RectangularAlternateNudge improves radius by ) R PriorBestRadius sub dup (pt = ) exch 72 div dup (\" = ) exch 25.4 mul (mm )
						PriorBestRadius 0 gt {(= ) R PriorBestRadius div 1 sub 100 mul (\% )} if (to ) R (pt from ) PriorBestRadius (pt on SheetNum=) SheetNum (.) ConcatenateToMark OutputToLog
						/BestRadius R store
						BestParamsDict {pop BestParamsDict exch undef} forall
						BestParamsDict /PackingDescriptor dup load put
						BestParamsDict /BaseStyle dup load put
						BestParamsDict /NumRows NR put
						BestParamsDict /NumCols NC put
						BestParamsDict /NudgeRows  NudgeRows put
					} if  % R PriorBestRadius ... gt ...
				} forall  % Nudge rows or columns
			} for  % NR
			exit
		} if  % /RectangularAlternateNudge


		/Array BaseStyle eq
		{
			DeBugLevel 50 le {( ProcessOnePackingType, /Array) OutputToLog} if
			PackingDescriptor length PositionsStart sub  NG  ge
			PositionsStart 1 PackingDescriptor length 1 sub {PackingDescriptor exch GetEU dup type /arraytype eq {length 1 le {pop //false exit} if} {pop pop //false exit} ifelse} for
			{
				/MinXX //Infinity def  /MaxXX //InfinityNeg def
				/MinYY //Infinity def  /MaxYY //InfinityNeg def
				PositionsStart  1  PackingDescriptor length 1 sub
				{
					PackingDescriptor exch GetEU dup  0 GetEU /XX exch def  1 GetEU /YY exch def
					MinXX XX gt {/MinXX XX def} if  MaxXX XX lt {/MaxXX XX def} if
					MinYY YY gt {/MinYY YY def} if  MaxYY YY lt {/MaxYY YY def} if
				} for  % PackingDescriptor
				/R  W H  2 copy gt {exch} if pop  2 div  def
				PositionsStart 1 add  1  PackingDescriptor length 1 sub
				{
					/i exch def
					/XXi PackingDescriptor i GetEU 0 GetEU def
					/YYi PackingDescriptor i GetEU 1 GetEU def
					PositionsStart  1  i 1 sub
					{
						/j exch def
						/XXj PackingDescriptor j GetEU 0 GetEU def
						/YYj PackingDescriptor j GetEU 1 GetEU def
						XXi XXj eq  YYi YYj eq  and
						{
							mark  (Warning: ProcessOnePackingType: PackingStyles contains an array that contains two effectively identical sub-arrays, numbers )
							i  ( and )  j  (. Allowing overlap, which is likely to be messy.)  ConcatenateToMark OutputToLog
						}{
							MinXX MaxXX ge
							{
								MinYY MaxYY ge
								{} % PackingDescriptor of zero length, or all the same
								{
									YYi YYj sub abs dup 0 eq {pop} {2 div dup R ge {pop} {/R exch def} ifelse} ifelse
								} ifelse  % MinYY MaxYY ge
							}{
								MinYY MaxYY ge
								{
									XXi XXj sub abs dup 0 eq {pop} {2 div dup R ge {pop} {/R exch def} ifelse} ifelse
								}{
									/DiffX2  XXi XXj sub  MaxXX MinXX sub  div dup mul  def
									/DiffY2  YYi YYj sub  MaxYY MinYY sub  div dup mul  def
									/a  DiffX2 DiffY2 add 1 sub 4 mul  def
									/b  W DiffX2 mul  H DiffY2 mul  add -4 mul  def
									/c  W W mul DiffX2 mul  H H mul DiffY2 mul  add  def
									[ c b a ]  0  //true  H W lt {H} {W} ifelse 2 div  //false  //PrinterEpsilon  PolynomialRoots
									dup length [ {pop 0} {0 get} {Min (Warning: ProcessOnePackingType, arraytype, two seemingly good solutions.) OutputToLog} ] exch get exec
									dup R ge {pop} {/R exch def} ifelse
								} ifelse  % MinYY MaxYY ge
							} ifelse  % MinXX MaxXX ge
						} ifelse  % XXi XXj eq  YYi YYj eq  and
					} for % j
				} for  % i
				R  PriorBestRadius ImprovementPointsMin dup 0 gt {add} {pop} ifelse  gt
				R  PriorBestRadius ImprovementProportionMin dup 0 gt {1 add mul} {pop} ifelse  gt  and  R BestRadius gt and
				{
					/BestRadius R store
					BestParamsDict {pop BestParamsDict exch undef} forall
					BestParamsDict /PackingDescriptor dup load put
					BestParamsDict /BaseStyle /Array put
					BestParamsDict /PositionsStart dup load put
					BestParamsDict /PositionsEnd dup load put
					BestParamsDict /MinXX dup load put
					BestParamsDict /MaxXX dup load put
					BestParamsDict /MinYY dup load put
					BestParamsDict /MaxYY dup load put
				} if  % R PriorBestRadius ... gt ...
			} if  % ... NG ge ...
			exit  % 1 {...} repeat
		} if  % /Array

	} repeat
	end
	DeBugLevel 50 le {(-ProcessOnePackingType) OutputToLog} if
} bind def  % /ProcessOnePackingType


% LeftX BottomY Width Height NumGlasses MaxRadius Echo  CirclePacking  [[x1 y1] ...] Radius PackingDescriptor NamePlacementTopX NamePlacementBottomX
% This code has grown over the years from 2001, and has a lack of internal consistency. E.g., in some patters RowNum increases from top to bottom; in others from bottom to top.
/CirclePacking
{
	DeBugLevel 100 le {(+CirclePacking) OutputToLog} if
	77 dict begin
	/Echo exch def
	/MaxRadius exch def
	/NG exch def
	/H exch def
	/W exch def
	/Y exch def
	/X exch def

	/BestRadius 0 def
	/BestParamsDict 8 dict def

	NG 0 gt {PackingStyles {ProcessOnePackingType} forall} if

	% If PackingStyles effectively empty then try some sensible arrangements.
	BestRadius 0 le
	{
		mark (Warning: ProcessOnePackingType re-invoked with standard-ish layouts, because no valid layouts in PackingStyles on SheetNum=) SheetNum (.) ConcatenateToMark OutputToLog
		NG 1 gt
		{
			[ /RectangularDislocation /Diamonds /DiamondsAndRectangular [/Bespoke5 /OnlyIfOrientation /Landscape] [/Bespoke7 /OnlyIfOrientation /Landscape] [/DiamondsPlus /ImprovementPointsMin 2] ] {ProcessOnePackingType} forall
		} {/TopRow ProcessOnePackingType} ifelse  % NG 1 gt
	} if  % BestRadius 0 le

	/R  BestRadius MaxRadius 2 copy gt {exch} if pop  def
	/BaseStyle         BestParamsDict 1 index get def
	/PackingDescriptor BestParamsDict 1 index get def

	/Mirror //false def
	/ShoveLeft //false def
	/ShoveRight //false def
	/CentralGlasses 0 def
	/RectColsToLeftOrRowsBelow {BestParamsDict /AboveBelow get {NR NSR} {NC NSC} ifelse  2 mul 1 add sub  dup 2 mod 0 eq {2 idiv} {pop 0} ifelse} def  % Middle if possible, otherwise 0
	/TempleExtraColsToLeftOrRowsBelow {BestParamsDict /N get dup 2 mod 0 eq {2 idiv} {pop 0} ifelse} def  % Middle if possible, otherwise 0
	/HorizontalAlignment /Centre def  % Only in /SquareGrid
	/VerticalAlignment /Top def  % Only in /SquareGrid
	PackingDescriptor type /arraytype eq
	{
		/i 1 def
		{
			i PackingDescriptor length ge {exit} if
			PackingDescriptor i GetEU
			1 {
				dup  /Mirror                            eq {pop  /Mirror     //true store  /i i 1 add store  exit} if
				dup  /ShoveLeft                         eq {pop  /ShoveLeft  //true store  /i i 1 add store  exit} if
				dup  /ShoveRight                        eq {pop  /ShoveRight //true store  /i i 1 add store  exit} if
				dup  /CentralGlasses                    eq {pop  /CentralGlasses                    PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /VerticalAlignment                 eq {pop  /VerticalAlignment                 PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /HorizontalAlignment               eq {pop  /HorizontalAlignment               PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /RectColsToLeftOrRowsBelow         eq {pop  /RectColsToLeftOrRowsBelow         PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /PackingNestingColumnMajor         eq {pop  /PackingNestingColumnMajor         PackingDescriptor i 1 add GetEU def    /i i 2 add store  exit} if
				dup  /PackingDirectionTopToBottom       eq {pop  /PackingDirectionTopToBottom       PackingDescriptor i 1 add GetEU def    /i i 2 add store  exit} if
				dup  /PackingDirectionLeftToRight       eq {pop  /PackingDirectionLeftToRight       PackingDescriptor i 1 add GetEU def    /i i 2 add store  exit} if
				dup  /TempleExtraColsToLeftOrRowsBelow  eq {pop  /TempleExtraColsToLeftOrRowsBelow  PackingDescriptor i 1 add GetEU store  /i i 2 add store  exit} if
				dup  /Positions                         eq {pop  /i PackingDescriptor length store  exit} if
				dup  /ProhibitVerticalNudging           eq {pop  /i i 1 add store  exit} if
				dup  /ProhibitHorizontalNudging         eq {pop  /i i 1 add store  exit} if
				dup  /SuppressNonLeftOrnaments          eq {pop  /i i 1 add store  exit} if
				dup  /SuppressNonRightOrnaments         eq {pop  /i i 1 add store  exit} if
				dup  /RowsNumMin                        eq {pop  /i i 2 add store  exit} if
				dup  /RowsNumMax                        eq {pop  /i i 2 add store  exit} if
				dup  /GlassesNumMin                     eq {pop  /i i 2 add store  exit} if
				dup  /GlassesNumMax                     eq {pop  /i i 2 add store  exit} if
				dup  /OnlyIfOrientation                 eq {pop  /i i 2 add store  exit} if
				dup  /OnlyIfSheetNumMin                 eq {pop  /i i 2 add store  exit} if
				dup  /OnlyIfSheetNumMax                 eq {pop  /i i 2 add store  exit} if
				dup  /ImprovementPointsMin              eq {pop  /i i 2 add store  exit} if
				dup  /ImprovementProportionMin          eq {pop  /i i 2 add store  exit} if
				mark exch (Warning: an item of PackingStyles contains the non-recognised sub-parameter ) exch 256 string cvs ConcatenateToMark OutputToLog
				/i i 1 add store
			} repeat  % 1
		} loop
	} if  % PackingDescriptor type /arraytype eq

	ShoveLeft ShoveRight and {mark (Error: CirclePacking, chosen BaseStyle /) BaseStyle ( has both /ShoveLeft and /ShoveRight. Continuing regardless.) ConcatenateToMark OutputToLog} if
	NG 0 eq {/NamePlacementBottomX W 2 div X add dup /NamePlacementTopX exch def def} if

	/AreaText {
		( Of non-margin area ) R dup mul //Pi mul  SheetLengths SheetNum get  mul  PageWidth MgnL MgnR add sub  PageHeight MgnB MgnT add sub  mul
		div 100 mul dup exch (\% within circles = ) exch  2 mul //Sqrt3 mul //Pi div (\% of infinite-plane exact-hexagonal maximum.)
		R  43.2 360 mul 127 div  le
		{
			(\nWarning! Radius=) R (pt is )
			R  36 360 mul 127 div  lt
			{
				R  30 360 mul 127 div  lt
					{(less than the 30mm~=85pt radius of an INAO/ISO3591 tasting glass.)}
					{(a tight fit for the 30mm~=85pt radius of an INAO/ISO3591 tasting glass, and too small for the 36mm~=102pt radius of the foot of an IVDP glass.)}
				ifelse  % Radius < 30mm
			} {(a tight fit for the 36mm~=102pt radius of the foot of an IVDP glass.)} ifelse  % Radius < 36mm
		} if  % Radius <= 43.2mm
	} def  % /AreaText

	% Compute locations of glass centers
	{1 {
		% Debugging code for use within CirclePacking, with the array of positions on the top of the stack:
		% DeBugLevel 50 le {( CirclePacking: positions de-bug:) OutputToLog dup {mark exch aload pop exch exch (\t) exch ConcatenateToMark OutputToLog} forall} if

		/SquareGrid BaseStyle eq  /TopRow BaseStyle eq or  /MiddleRow BaseStyle eq or  /BottomRow BaseStyle eq or
		{
			DeBugLevel 50 le {( CirclePacking, /SquareGrid | /TopRow BaseStyle | /MiddleRow | /BottomRow) OutputToLog} if
			/NR BestParamsDict /NumRows get def
			/NC BestParamsDict /NumCols get def

			Echo {mark  (SheetNum=) SheetNum (, with ) NG ( glasses: best BaseStyle, with radius ) R (, is /)  BaseStyle ( with ) NR ( rows and ) NC ( columns.)  AreaText ConcatenateToMark OutputToLog} if
			/NamePlacementTopX W 4 div X add def /NamePlacementBottomX NamePlacementTopX def  % Relevant if only one column
			[
				PackingNestingColumnMajor
					{1 NC sub   1  NC 1 sub   PackingDirectionLeftToRight not {3 1 roll neg exch} if}
					{NR 1 sub  -2  1 NR sub   PackingDirectionTopToBottom not {3 1 roll neg exch} if}
				ifelse  % PackingNestingColumnMajor
				{
					PackingNestingColumnMajor
						{/ColNum exch def  NR 1 sub  -2  1 NR sub   PackingDirectionTopToBottom not {3 1 roll neg exch} if}
						{/RowNum exch def  1 NC sub   1  NC 1 sub   PackingDirectionLeftToRight not {3 1 roll neg exch} if}
					ifelse  % PackingNestingColumnMajor
					{
						PackingNestingColumnMajor {/RowNum} {/ColNum} ifelse exch def
						ColNum  NG RowNum NR 1 sub sub -2 div NC mul sub 1 sub 2 mul 1 NC sub add  le
						{
							1 {
								ShoveLeft HorizontalAlignment /Left eq or {ColNum NC add R mul  exit} if
								ShoveRight HorizontalAlignment /Right eq or {W NC ColNum sub R mul sub  exit} if
								HorizontalAlignment /Justify eq
									{W R 2 mul sub  NC 1 le {pop 0} {ColNum mul NC 1 sub 2 mul div} ifelse W 2 div add  exit}  % Justify
									{ColNum R mul  W 2 div add  exit}  % /Centre, being the default
								ifelse  % HorizontalAlignment /Justify eq
							} repeat  % 1
							X add  /XXX exch def
							1 {
								BaseStyle /SquareGrid eq
								{
									VerticalAlignment /Bottom eq {RowNum NR add R mul  exit} if
									VerticalAlignment /Middle eq {RowNum R mul  H 2 div add  exit} if
									VerticalAlignment /Justify eq {H R 2 mul sub  NR 1 le {pop 0} {RowNum mul NR 1 sub 2 mul div} ifelse H 2 div add  exit} if
									RowNum NR sub R mul H add  exit  % Top, being the default
								} if  % BaseStyle /SquareGrid eq
								BaseStyle /BottomRow  eq {R  exit} if
								BaseStyle /MiddleRow  eq {H 2 div  exit} if
								H R sub  % /TopRow
							} repeat  % 1
							Y add  /YYY exch def
							ColNum NC add 2 mod 1 eq {[XXX YYY]} if  % Appropriate modulo 2
							ColNum NC 2 mod neg eq {/NamePlacementTopX XXX def /NamePlacementBottomX XXX def} if  % ColNum NC 2 mod neg eq
						} if  % Within row, even if shortened
					} for  % NC or NR
				} for  % NR or NC
			]
			exit  % 1 {...} repeat
		} if  % /SquareGrid ... /TopRow ... /MiddleRow ... /BottomRow ...


		/Sides BaseStyle eq  /LeftSide BaseStyle eq  /RightSide BaseStyle eq  or or
		{
			DeBugLevel 50 le {( CirclePacking, /Sides) OutputToLog} if
			/NR BestParamsDict /NumRows get def
			/NC BestParamsDict /NumCols get def

			Echo {mark  (SheetNum=) SheetNum (, with ) NG ( glasses: best BaseStyle, with radius ) R (, is /)  BaseStyle ( with ) NR ( rows and, of course, ) NC ( columns.)  AreaText ConcatenateToMark OutputToLog} if

			[
				PackingNestingColumnMajor
					{0  1  NC 1 sub   PackingDirectionLeftToRight not {3 1 roll neg exch} if}
					{NR 1 sub  -1  0   PackingDirectionTopToBottom not {3 1 roll neg exch} if}
				ifelse  % PackingNestingColumnMajor
				{
					PackingNestingColumnMajor
						{/ColNum exch def  NR 1 sub  -1  0   PackingDirectionTopToBottom not {3 1 roll neg exch} if}
						{/RowNum exch def  0  1  NC 1 sub   PackingDirectionLeftToRight not {3 1 roll neg exch} if}
					ifelse  % PackingNestingColumnMajor
					{
						PackingNestingColumnMajor {/RowNum} {/ColNum} ifelse exch def
						ColNum 0 eq  RowNum 0 gt  NG 2 mod 0 eq  or or
						{[
							/LeftSide BaseStyle eq {X R add} {/RightSide BaseStyle eq {X R sub W add} {ColNum 0 eq  {ShoveRight {W R 3 mul sub} {R} ifelse}  {ShoveLeft  {R 3 mul} {W R sub} ifelse}  ifelse  X add} ifelse} ifelse
							NR 1 le {H 2 div} {H R 2 mul sub RowNum mul NR 1 sub div R add} ifelse Y add
						]} if  % Within row, even if shortened
					} for  % NC or NR
				} for  % NR or NC
			]
			/LeftSide BaseStyle eq {R //SqrtHalf 1 add mul} {/RightSide BaseStyle eq {W R //SqrtHalf 1 add mul sub}
				{ShoveLeft {R 2 mul} {ShoveRight {W R 2 mul sub} {W 2 div} ifelse} ifelse}
			ifelse} ifelse  X add  dup /NamePlacementTopX exch def /NamePlacementBottomX exch def
			exit  % 1 {...} repeat
		} if  % /Sides ... /LeftSide ... /RightSide ...


		/RectangularDislocation BaseStyle eq
		{
			DeBugLevel 50 le {( CirclePacking, /RectangularDislocation) OutputToLog} if
			/NR BestParamsDict /NumRows get def
			/NC BestParamsDict /NumCols get def
			Echo {mark  (SheetNum=) SheetNum (, with ) NG ( glasses: best BaseStyle, with radius ) R (, is /RectangularDislocation with ) NR ( rows and ) NC ( columns.)  AreaText ConcatenateToMark OutputToLog} if
			[
				NC NR mul NG eq
				{
					/Dist  NR 1 gt {H R 2 mul sub NR 1 sub div} {H 2 div R sub} ifelse def
					/NamePlacementTopX
						/ColNum NC 1 sub dup 2 mod 0 eq {1 sub} if def
						ColNum W R sub mul  NC 1 sub 2 mul ColNum sub R mul  add  NC 1 gt {NC 1 sub div} if 2 div  X add
					def
					/NamePlacementBottomX NamePlacementTopX def
					ShoveLeft ShoveRight or {/ShoveStepX R def} if
				}{
					/xx W R 2 mul sub NC 1 sub 2 mul div def
					/yy H R 2 mul sub def
					/a  NR 2 sub dup mul  1 sub  def
					/b  -2 NR 2 sub mul yy mul  def
					/c  yy dup mul  xx dup mul  add  def
					[ c b a ]  0  //false  H W add  //true  //PrinterEpsilon  PolynomialRoots
					dup length 0 eq {pop /Dist yy NR 1 sub div def (Warning: CirclePacking, RectangularDislocation: negative determinant.) OutputToLog} {Min /Dist exch def} ifelse
					ShoveLeft ShoveRight or NR 2 ge and {/ShoveStepX 4 R R mul mul  H NR 2 sub Dist mul 2 R mul add sub dup mul sub  dup 0 lt {pop 0} {sqrt} ifelse  NC 2 ge {dup R lt {pop R} if} if def} if
				} ifelse  % NC NR mul NG eq
				NC 1 eq {/NamePlacementTopX W 4 div X add def  /NamePlacementBottomX NamePlacementTopX def} if

				PackingNestingColumnMajor
					{0  1  NC 1 sub 2 mul  PackingDirectionLeftToRight not {3 1 roll neg exch} if}
					{NR 1 sub  -1  0       PackingDirectionTopToBottom not {3 1 roll neg exch} if}
				ifelse  % PackingNestingColumnMajor
				{
					PackingNestingColumnMajor
						{/ColNum exch def  NR 1 sub  -1  0       PackingDirectionTopToBottom not {3 1 roll neg exch} if}
						{/RowNum exch def  0  1  NC 1 sub 2 mul  PackingDirectionLeftToRight not {3 1 roll neg exch} if}
					ifelse  % PackingNestingColumnMajor
					{
						PackingNestingColumnMajor {/RowNum} {/ColNum} ifelse exch def
						/LongerRow  Mirror {RowNum NR NG NR mod sub ge} {RowNum NG NR mod lt} ifelse  NC NR mul NG eq or  def
						/XX  ShoveLeft {ColNum ShoveStepX mul R add} {ShoveRight {W R sub NC 1 sub 2 mul ColNum sub ShoveStepX mul sub} {NC 1 le {W 2 div} {ColNum W R sub mul  NC 1 sub 2 mul ColNum sub R mul  add  NC 1 sub 2 mul div} ifelse} ifelse} ifelse X add  def
						ColNum 2 mod 0 eq  LongerRow  eq
						{[ XX  Mirror  LongerRow  ne {Y R add  RowNum Dist mul add}  {Y H add R sub  NR 1 sub RowNum sub Dist mul sub}  ifelse ]}
						{
							NC 1 sub dup 1 sub ColNum eq exch ColNum eq or
							{
								RowNum 0        eq {/NamePlacementBottomX XX def} if
								RowNum NR 1 sub eq {/NamePlacementTopX    XX def} if
							} if  % Middle(ish)
						} ifelse  % ColNum 2 mod 0 eq  LongerRow  eq
					} for  % ColNum or RowNum
				} for  % RowNum or ColNum
			]
			exit
		} if  % /RectangularDislocation ...


		/Temple BaseStyle eq
		{
			DeBugLevel 50 le {( CirclePacking, /Temple) OutputToLog} if
			/O BestParamsDict /O get def
			/N BestParamsDict /N get def
			O 0 eq {/L W /S H} {/L H /S W} ifelse  def def
			Echo {mark  (SheetNum=) SheetNum (, with ) NG ( glasses: best BaseStyle, with radius ) R (, is /Temple with ) N  O 0 eq {( columns.)} {( rows.)} ifelse  AreaText ConcatenateToMark OutputToLog} if
			[
				% https://groups.google.com/forum/#!topic/comp.lang.postscript/5pJw5Gvf_YI
				% http://mathematica.stackexchange.com/questions/101954/looking-for-postscriptform-or-forthform-to-print-expressions-as-rpn-code
				% http://www.jdawiseman.com/papers/placemat/PackingStyles_formulae.nb and .pdf
				L 8 R mul sub L mul 4 2 R mul 4 S mul add R mul S dup mul sub mul add L mul 16 R mul 2 R mul 4 S mul sub R mul S dup mul add mul add L mul 16 13 R mul 28 S mul sub R mul 23 S dup mul
				mul add R mul 8 S dup dup mul mul mul sub R mul S dup mul dup mul add mul add 9 L mul 72 R mul sub L mul 12 22 R mul 4 S mul sub R mul S dup mul add mul add L mul 48 R mul 10 R mul 4
				S mul sub R mul S dup mul add mul sub L mul 16 37 R mul 44 S mul sub R mul 27 S dup mul mul add R mul 8 S dup dup mul mul mul sub R mul S dup mul dup mul add mul add mul  % Coeff 0
				-4 L R 2 mul sub mul 9 2 N mul 3 sub mul L mul 108 2 N mul 3 sub mul R mul sub L mul 12 78 N mul 107 sub R mul 4 3 N mul 7 sub mul S mul add R mul 3 N mul 7 sub S dup mul mul sub mul add L mul 96 R mul 18 N mul
				17 sub R mul 4 3 N mul 7 sub mul S mul add R mul 3 N mul 7 sub S dup mul mul sub mul sub L mul 16 166 N mul 45 sub R mul 8 27 N add mul S mul sub R mul 6 19 N mul 15 sub mul S dup mul mul add R mul 8 7 N mul 9
				sub mul S dup dup mul mul mul sub R mul 7 N mul 9 sub S dup mul dup mul mul add mul add L mul 64 R mul 94 N mul 57 sub R mul 8 19 N mul 15 sub mul S mul sub R mul 6 25 N mul 29 sub mul S dup mul mul add R mul 8
				7 N mul 9 sub mul S dup dup mul mul mul sub R mul 7 N mul 9 sub S dup mul dup mul mul add mul sub L mul 64 158 N mul 87 sub R mul 4 95 N mul 51 sub mul S mul sub R mul 3 133 N mul 65 sub mul S dup mul mul add R
				mul 72 3 N mul 1 sub mul S dup dup mul mul mul sub R mul 67 N mul 9 sub S dup mul dup mul mul add R mul 12 N mul S dup dup mul dup mul mul mul sub R mul N S dup mul dup dup mul mul mul add mul add mul  % Coeff 1
				2 3 42 N mul 126 sub N mul 85 add mul L mul 36 42 N mul 126 sub N mul 85 add mul R mul sub L mul 4 45 38 R mul 4 S mul add R mul S dup mul sub mul N mul 210 23 R mul 4 S mul add R mul S dup mul sub mul sub N mul 3013 R mul 812 S mul add R mul 203
				S dup mul mul sub add mul add L mul 32 R mul 45 10 R mul 4 S mul add R mul S dup mul sub mul N mul 210 5 R mul S sub mul R S add mul sub N mul 463 R mul 812 S mul add R mul 203 S dup mul mul sub add mul sub L mul 16 1146 N mul 1494 sub N mul 743
				sub R mul 8 51 N mul 414 sub N mul 533 add mul S mul add R mul 6 39 N mul 6 sub N mul 127 sub mul S dup mul mul add R mul 8 21 N mul 54 sub N mul 19 add mul S dup dup mul mul mul sub R mul 21 N mul 54 sub N mul 19 add S dup mul dup mul mul add
				mul add L mul 64 R mul 3 118 N mul 106 sub N mul 185 sub mul R mul 8 39 N mul 6 sub N mul 127 sub mul S mul sub R mul 2 207 N mul 438 sub N mul 25 add mul S dup mul mul add R mul 8 21 N mul 54 sub N mul 19 add mul S dup dup mul mul mul sub R mul
				21 N mul 54 sub N mul 19 add S dup mul dup mul mul add mul sub L mul 64 346 N mul 402 sub N mul 1021 sub R mul 12 57 N mul 74 sub N mul 209 sub mul S mul sub R mul 699 N mul 1086 sub N mul 2627 sub S dup mul mul add R mul 8 41 N mul 54 sub N mul
				221 sub mul S dup dup mul mul mul sub R mul 81 N mul 54 sub N mul 701 sub S dup mul dup mul mul add R mul 12 N dup mul 12 sub mul S dup dup mul dup mul mul mul sub R mul N dup mul 12 sub S dup mul dup dup mul mul mul add mul add mul  % Coeff 2
				-4 L R 2 mul sub mul 9 2 N mul 3 sub mul 7 N mul 21 sub N mul 11 add mul L mul 72 2 N mul 3 sub mul 7 N mul 21 sub N mul 11 add mul R mul sub L mul 8 3 106 R mul 20 S mul add R mul 5 S dup mul mul sub
				mul N mul 21 61 R mul 20 S mul add R mul 5 S dup mul mul sub mul sub N mul 1483 R mul 812 S mul add R mul 203 S dup mul mul sub add N mul 99 5 R mul S sub mul R S add mul sub mul add L mul 32 R mul 3
				22 R mul 20 S mul add R mul 5 S dup mul mul sub mul N mul 21 7 R mul 20 S mul add R mul 5 S dup mul mul sub mul sub N mul -47 R mul 812 S mul add R mul 203 S dup mul mul sub add N mul 99 R 4 S mul sub
				R mul S dup mul add mul add mul sub L mul 16 118 N mul 159 sub N mul 555 sub N mul 399 add R mul 8 13 N mul 3 sub N mul 127 sub N mul 75 add mul S mul sub R mul 2 69 N mul 219 sub N mul 25 add N mul
				27 add mul S dup mul mul add R mul 8 7 N mul 27 sub N mul 19 add N mul 6 sub mul S dup dup mul mul mul sub R mul 7 N mul 27 sub N mul 19 add N mul 6 sub S dup mul dup mul mul add mul add mul  % Coeff 3
				630 N mul 3780 sub N mul 7650 add N mul 5940 sub N mul 1393 add L mul 8 630 N mul 3780 sub N mul 7650 add N mul 5940 sub N mul 1393 add mul R mul sub L mul 24 15 38 R mul 4 S mul add R mul S dup mul sub mul N mul 140 23 R mul 4 S mul add R mul S
				dup mul sub mul sub N mul 2 3013 R mul 812 S mul add R mul 203 S dup mul mul sub mul add N mul 396 11 R mul 4 S mul add R mul S dup mul sub mul sub N mul 1121 R mul 272 S mul add R mul 68 S dup mul mul sub add mul add L mul 32 R mul 45 10 R mul
				4 S mul add R mul S dup mul sub mul N mul 420 5 R mul S sub mul R S add mul sub N mul 6 463 R mul 812 S mul add R mul 203 S dup mul mul sub mul add N mul 1188 R 4 S mul add R mul S dup mul sub mul sub N mul 577 R mul 816 S mul add R mul 204 S
				dup mul mul sub add mul sub L mul 16 382 R mul 136 S mul add R mul 78 S dup mul mul add R mul 56 S dup dup mul mul mul sub R mul 7 S dup mul dup mul mul add N mul 12 83 R mul 184 S mul add R mul 2 S dup mul mul add R mul 24 S dup dup mul mul mul
				sub R mul 3 S dup mul dup mul mul add mul sub N mul 2 743 R mul 4264 S mul sub R mul 762 S dup mul mul add R mul 152 S dup dup mul mul mul add R mul 19 S dup mul dup mul mul sub mul sub N mul 12 265 R mul 728 S mul sub R mul 150 S dup mul mul
				add R mul 16 S dup dup mul mul mul add R mul 2 S dup mul dup mul mul sub mul add N mul 2065 R mul 2976 S mul sub R mul 3048 S dup mul mul add R mul 1152 S dup dup mul mul mul sub R mul 144 S dup mul dup mul mul add add mul add  % Coeff 4
				-4 L R 2 mul sub mul 18 7 L mul 28 R mul sub L mul 2 10 R mul 4 S mul add R mul S dup mul sub mul add mul N mul 105 3 L mul R 2 mul sub S 2 mul sub mul 3 L mul R 10 mul sub S 2 mul add mul sub N mul 2 1275
				L mul 5100 R mul sub L mul 4 463 R mul 812 S mul add R mul 203 S dup mul mul sub mul add mul add N mul 594 5 L mul 20 R mul sub L mul 4 R 4 S mul add R mul S dup mul sub mul add mul sub N mul 1393 L mul
				5572 R mul sub L mul 4 577 R mul 816 S mul add R mul 204 S dup mul mul sub mul add add N mul 6 31 L mul 124 R mul sub L mul 4 79 R mul 48 S mul sub R mul 12 S dup mul mul add mul add mul sub mul  % Coeff 5
				2 6 21 L mul 84 R mul sub L mul 2 38 R mul 4 S mul add R mul S dup mul sub mul add mul N mul 42 27 L mul 108 R mul sub L mul 4 23 R mul 4 S mul add R mul S dup mul sub mul add mul sub N mul 3825 L mul 15300 R mul sub L
				mul 4 3013 R mul 812 S mul add R mul 203 S dup mul mul sub mul add add N mul 396 15 L mul 60 R mul sub L mul 4 11 R mul 4 S mul add R mul S dup mul sub mul add mul sub N mul 3 1393 L mul 5572 R mul sub L mul 4 1121 R
				mul 272 S mul add R mul 68 S dup mul mul sub mul add mul add N mul 36 31 L mul 124 R mul sub L mul 4 47 R mul 16 S mul sub R mul 4 S dup mul mul add mul add mul sub N mul 72 L R 2 mul sub dup mul mul add mul  % Coeff 6
				-4 N 3 sub mul N mul 2 N mul 3 sub mul 3 N mul 9 sub N mul 2 add mul 3 N mul 9 sub N mul 4 add mul L R 2 mul sub mul  % Coeff 7
				N 3 sub dup mul N dup mul mul 3 N mul 9 sub N mul 4 add dup mul mul  % Coeff 8
			]  R 1.999 mul //PrinterEpsilon sub  //false  S 2 div R sub dup mul R R mul add sqrt  L R 2 mul sub N 1 sub div 2 copy lt {exch} if pop //PrinterEpsilon add  //false  //PrinterEpsilon  PolynomialRoots
			% In this section (and in other part of ifelse) variable naming and comments as if O=0, so as if L=W
			dup length 0 gt
			{
				Min  R 2 mul 2 copy lt {exch} if pop  /Dist exch def
				/Row0X  L  N 1 sub Dist mul  sub 2 div def
				/Row1Y  S R sub  Dist dup mul Row0X R sub dup mul sub  dup 0 lt {pop 0} if sqrt  sub def
				/Row2Y  Row1Y  Dist dup mul  L 2 div N 2 sub 2 div Dist mul R add sub dup mul  sub dup 0 lt {pop 0} if sqrt  sub  def
				/Row3X  Dist dup mul  Row1Y R sub dup mul  sub dup 0 lt {pop 0} if sqrt  R add  def
				/OcticOK  Row2Y  R Row1Y add 2 div  gt  Row3X Row0X //PrinterEpsilon add le  and  def
			} {pop  /OcticOK //false def} ifelse
			OcticOK not
			{
				{/Row0X  [ Dist 2 div R add  L 2 div N 1 sub 2 div Dist mul sub ] Min  def}  % For exec'ing inside the next ifelse
				R N 1 add 2 mul mul  L  le
					{/Dist L R 2 mul sub N div def                     exec   /Row3X Row0X def   /Row1Y S 2 div def                                                                              /Row2Y Row1Y             def}
					{/Dist L R 2 mul sub N 2 sub //Sqrt3 add div def   exec   /Row3X R     def   /Row1Y 4 2 //Sqrt3 mul sub R mul S 2 mul sub R mul S S mul add  2 S mul 4 R mul sub  div  def   /Row2Y Row1Y R add 2 div def}
				ifelse  % R N 1 add 2 mul mul  L  le
			} if  % OcticOK not
			[
				/CentralCircleCol TempleExtraColsToLeftOrRowsBelow cvi  dup 1 lt {pop 1} if  dup N 1 sub gt {pop N 1 sub} if   def
				PackingNestingColumnMajor O 0 eq eq
					{0 1 N   O 0 eq {PackingDirectionLeftToRight not} {PackingDirectionTopToBottom} ifelse {3 1 roll neg exch} if}
					{0 1 3   O 0 eq {PackingDirectionTopToBottom not} {PackingDirectionLeftToRight} ifelse Mirror ne {3 1 roll neg exch} if}
				ifelse  % PackingNestingColumnMajor O 0 eq eq
				{
					PackingNestingColumnMajor O 0 eq eq {/ColNum} {/RowNum} ifelse exch def
					PackingNestingColumnMajor O 0 eq eq
						{0 1 3   O 0 eq {PackingDirectionTopToBottom not} {PackingDirectionLeftToRight} ifelse Mirror ne {3 1 roll neg exch} if}
						{0 1 N   O 0 eq {PackingDirectionLeftToRight not} {PackingDirectionTopToBottom} ifelse {3 1 roll neg exch} if}
					ifelse  % PackingNestingColumnMajor O 0 eq eq
					{
						PackingNestingColumnMajor O 0 eq eq {/RowNum} {/ColNum} ifelse exch def
						[
							ColNum CentralCircleCol eq RowNum 2 eq and {L 2 div N 2 div ColNum sub Dist mul sub   Row2Y  Mirror {S exch sub} if} if
							ColNum CentralCircleCol lt
							{
								RowNum 0 eq {Dist ColNum mul Row0X add   Mirror {R          } {S R sub} ifelse} if
								RowNum 1 eq {Dist ColNum mul R     add   Mirror {S Row1Y sub} {Row1Y  } ifelse} if
								RowNum 3 eq {Dist ColNum mul Row3X add   Mirror {S R     sub} {R      } ifelse} if
							} if  % ColNum CentralCircleCol lt
							ColNum CentralCircleCol gt
							{
								RowNum 0 eq {L Row0X sub ColNum N sub Dist mul add   Mirror {R          } {S R sub} ifelse} if
								RowNum 1 eq {L R sub     ColNum N sub Dist mul add   Mirror {S Row1Y sub} {Row1Y  } ifelse} if
								RowNum 3 eq {L Row3X sub ColNum N sub Dist mul add   Mirror {S R     sub} {R      } ifelse} if
							} if  % ColNum CentralCircleCol gt
							dup mark ne {O 0 eq {exch} if  X add exch Y add} if
						]  dup length 0 eq {pop} if
					} for  % RowNum or ColNum
				} for  % ColNum or RowNum
				L 2 div CentralCircleCol N 2 div sub Dist mul add X add  dup  /NamePlacementBottomX exch def /NamePlacementTopX exch def
			]
			exit
		} if  % /Temple ...


		/Diamonds BaseStyle eq
		{
			DeBugLevel 50 le {( CirclePacking, /Diamonds) OutputToLog} if
			/NR BestParamsDict /NumRows get def
			/NC BestParamsDict /NumCols get def
			/Capacity NR NC mul 1 add 2 idiv def
			/NamePlacementTopX W 4 div X add def  /NamePlacementBottomX W 4 div X add def
			ShoveLeft ShoveRight or {/ShoveStepX NR 1 le {R} {4 R R mul mul  H R 2 mul sub NR 1 sub div dup mul sub  dup 0 lt {pop 0} {sqrt} ifelse  NC 3 ge {dup R lt {pop R} if} if} ifelse def} if

			Echo
			{
				mark  (SheetNum=) SheetNum (, with ) NG ( glasses: best BaseStyle, with radius ) R (, is /Diamonds with ) NR ( rows and )
				NC ( columns; max. capacity of this arrangement being ) Capacity (.)  AreaText ConcatenateToMark OutputToLog
			} if  % Echo

			[
				PackingNestingColumnMajor
					{0  1  NC 1 sub    PackingDirectionLeftToRight not {3 1 roll neg exch} if}
					{NR 1 sub  -1  0   PackingDirectionTopToBottom not {3 1 roll neg exch} if}
				ifelse  % PackingNestingColumnMajor
				{
					PackingNestingColumnMajor
						{/ColNum exch def  NR 1 sub  -1  0   PackingDirectionTopToBottom not {3 1 roll neg exch} if}
						{/RowNum exch def  0  1  NC 1 sub    PackingDirectionLeftToRight not {3 1 roll neg exch} if}
					ifelse  % PackingNestingColumnMajor
					{
						PackingNestingColumnMajor {/RowNum} {/ColNum} ifelse exch def
						/XX ShoveLeft {ColNum ShoveStepX mul R add} {ShoveRight {W R sub NC 1 sub ColNum sub ShoveStepX mul sub} {NC 1 le {W 2 div} {W R 2 mul sub ColNum mul NC 1 sub div R add} ifelse} ifelse} ifelse  X add  def
						ColNum RowNum add 2 mod    NR NC mul 2 mod 0 eq {0 eq   Mirror ne  NR 2 eq NC 3 eq and {not} if} {1 eq NG Capacity eq {not} if} ifelse % Same (or opposite if Mirror) modulo as bottom-left corner
						{
							ColNum NC 1 sub lt {//true} {RowNum Capacity NC NR mul 2 mod sub NG sub 2 mul ge} ifelse
								{[ XX  NR 1 le {H 2 div} {H R 2 mul sub RowNum mul NR 1 sub div R add} ifelse  Y add ]}
							if  % Not off end of row
						}{
							NC 2 idiv dup 1 sub ColNum eq exch ColNum eq or
							{
								RowNum 0        eq {/NamePlacementBottomX XX def} if
								RowNum NR 1 sub eq {/NamePlacementTopX    XX def} if
							} if  % Middle(ish)
						} ifelse  % Correct modulo 2
					} for  % ColNum or RowNum
				} for  % RowNum or ColNum
			]
			exit  % 1 {...} repeat
		} if  % /Diamonds ...


		/PostsAndLintel BaseStyle eq
		{
			DeBugLevel 50 le {( CirclePacking, /PostsAndLintel) OutputToLog} if
			/NR BestParamsDict /NumRows get def
			/CentralGlasses BestParamsDict /CentralGlasses get def
			/NGaE NG CentralGlasses sub def  % Num Glasses at Edge
			Echo {mark  NGaE ( glasses: best BaseStyle, with radius ) R (, is /PostsAndLintel with ) NR ( rows and ) CentralGlasses ( extra circles.) AreaText ConcatenateToMark OutputToLog} if

			NGaE 1 eq
			{
				W 4 div X add dup  /NamePlacementBottomX exch def /NamePlacementTopX exch def
				[ [ W 2 div X add  Mirror {R} {H R sub} ifelse Y add ] ]
				exit  % 1 {...} repeat
			} if  % NGaE 1 eq

			% Solve for distance between adjacent centres
			NR 1 eq
			{
				/Dist  NGaE 1 gt {W  R 2 mul NGaE mul sub  NGaE 1 sub div  R 2 mul add} {R 2 mul} ifelse  def
			}{
				/a  NGaE 1 sub dup mul  NGaE 1 add NR 1 sub mul 4 mul sub  NR 1 sub dup mul 8 mul add  def
				/b  4 H mul  2 NGaE mul R mul add  4 NR 1 sub mul H R sub mul sub  NGaE 1 add NR 2 mul sub W mul sub  10 R mul sub  2 mul  def
				/c  H R 2 mul sub dup mul 4 mul  W R 2 mul sub dup mul add  def
				[ c b a ]  0  //false  H W add  //true  //PrinterEpsilon  PolynomialRoots
				/Dist exch  dup length 0 eq {pop 0} {Min} ifelse  def
			} ifelse  % NR 1 eq

			NR 2 sub Dist mul R 2 mul add H gt
			NGaE NR 2 mul sub 1 add Dist mul R 2 mul add W gt  or
			{
				/Dist 0 def
			} if

			[
				CentralGlasses 1 eq { [W 2 div X add  Mirror {H R sub} {R} ifelse Y add] } if
				CentralGlasses 2 ge { [W 2 div R add X add  Mirror {H R sub} {R} ifelse Y add] [W 2 div R sub X add  Mirror {H R sub} {R} ifelse Y add]  PackingDirectionLeftToRight {exch} if} if
				CentralGlasses 3 ge { [W 2 div X add  R //Sqrt3 1 add mul Mirror {H exch sub} if Y add] exch } if
				Dist 0 eq
				{
					/DistV  NR 1 gt  {H NR 2 mul R mul sub NR 1 sub div 2 R mul add} {W 4 div} ifelse def
					/HalfDistH  NGaE NR 1 sub 2 mul sub  dup 1 gt {dup R mul W 2 div exch sub exch 1 sub div R add} {pop W 4 div} ifelse def
					PackingDirectionLeftToRight
					{
						0  1  NR 2 sub {[ exch DistV mul R add Mirror {H exch sub} if Y add  X R add  exch]} for  % up left side
						NGaE NR 1 sub 2 mul sub 1 sub neg  2  1 index neg {[ exch  HalfDistH mul W 2 div add X add  Mirror {R} {H R sub} ifelse Y add ]} for  % across top
						NR 2 sub  -1  0 {[ exch DistV mul R add Mirror {H exch sub} if Y add  W X add R sub  exch]} for  % down right side
					}{
						0  1  NR 2 sub {[ exch DistV mul R add Mirror {H exch sub} if Y add  W X add R sub  exch]} for  % up right side
						NGaE NR 1 sub 2 mul sub 1 sub  -2  1 index neg {[ exch  HalfDistH mul W 2 div add X add  Mirror {R} {H R sub} ifelse Y add ]} for  % across top
						NR 2 sub  -1  0 {[ exch DistV mul R add Mirror {H exch sub} if Y add  X R add  exch]} for  % down left side
					} ifelse  % PackingDirectionLeftToRight
				}{
					PackingDirectionLeftToRight
					{
						0  1  NR 2 sub {Dist mul R add Mirror {H exch sub} if Y add  [ exch  X R add  exch ]} for  % up left side
						NR 2 mul 1 sub  NGaE sub   2   1 index neg {[ exch  2 div Dist mul W 2 div add X add  Mirror {R} {H R sub} ifelse Y add ]} for  % across top
						NR 2 sub  -1  0 {Dist mul R add Mirror {H exch sub} if Y add  [ exch  W X add R sub  exch ]} for  % down right side
					}{
						0  1  NR 2 sub {Dist mul R add Mirror {H exch sub} if Y add  [ exch  W X add R sub  exch ]} for  % up right side
						NGaE  1 NR 1 sub 2 mul add  sub   -2   1 index neg {[ exch  2 div Dist mul W 2 div add X add  Mirror {R} {H R sub} ifelse Y add ]} for  % across top
						NR 2 sub  -1  0 {Dist mul R add Mirror {H exch sub} if Y add  [ exch  X R add  exch ]} for  % down left side
					} ifelse  % PackingDirectionLeftToRight
				} ifelse  % Dist 0 eq
			]
			/NamePlacementTopX /NamePlacementBottomX Mirror {exch} if
			[ W 2 div  W 4 div R 2 div add  W 4 div  dup ] CentralGlasses get X add def
			W 2 div  NGaE 2 mod 1 eq {Dist 0 eq {HalfDistH} {Dist 2 div} ifelse sub} if X add def

			exit  % 1 {...} repeat
		} if  % /PostsAndLintel ...


		/Arch BaseStyle eq
		{
			DeBugLevel 50 le {( CirclePacking, /Arch) OutputToLog} if
			/PseudoAngles BestParamsDict 1 index get def
			/NGiA  NG CentralGlasses sub  def % Number Glasses in Arch
			12 dict begin

			/EllipseSemiX  W 2 div R sub  def
			/PositionsX [ PseudoAngles {sin EllipseSemiX mul} forall ] def
			/EllipseSemiY  H R 2 mul sub  NGiA 2 mod 0 eq {1 PositionsX 0 get EllipseSemiX div dup mul sub  sqrt div} if  def
			/PositionsY [ PseudoAngles {cos EllipseSemiY mul R add} forall ] def
			NGiA 2 mod 1 eq {PositionsX  0  0  put} if  % Extra precision
			PositionsY  0  H R sub  put  % Extra precision
			PositionsX  PositionsX length 1 sub  W 2 div R sub  put  % Extra precision
			PositionsY  PositionsY length 1 sub  R  put  % Extra precision

			NGiA 2 add dup mul  -1  0
			{
				0 le {/UpperR R def (Error: CirclePacking, Arch, extremely slow convergence. Please send PostScript file to the author. www.jdawiseman.com/author.html) OutputToLog exit} if
				/DistSquaredMax 0 def
				/DistSquaredMin H W add dup mul def
				% Test for exit of jiggling of PositionsX & PositionsY
				NGiA 1 add 2 mod neg  1  PositionsX length 2 sub
				{
					/i exch def
					i -1 eq {PositionsX 0 get 2 mul dup mul} {PositionsX i get PositionsX i 1 add get sub dup mul  PositionsY i get PositionsY i 1 add get sub dup mul add} ifelse
					dup dup dup   DistSquaredMin lt {/DistSquaredMin exch def} {pop} ifelse   DistSquaredMax gt {/DistSquaredMax exch def} {pop} ifelse
				} for  % i

				DistSquaredMax DistSquaredMin sub dup mul  //PrinterEpsilon 2 mul dup mul DistSquaredMin mul  le
				DistSquaredMax DistSquaredMin div  //Epsilon 2 mul 1 add lt   DistSquaredMax sqrt DistSquaredMin sqrt sub //PrinterEpsilon le
				or or {exit} if  % Done position optimisation

				% Update PositionsX and PositionsY
				0  1  PositionsX length 2 sub
				{
					/i exch def
					i 0 eq
					{
						NGiA 2 mod 0 eq
						{
							H R sub PositionsY 1 get sub dup mul 3 mul   PositionsX 1 get dup mul 4 mul  add sqrt   PositionsX 1 get sub 3 div
							W 2 div R sub  2 copy gt {exch} if pop   PositionsX 0  3 -1 roll  put
							/EllipseSemiY  H R 2 mul sub  1 PositionsX 0 get EllipseSemiX div dup mul sub  dup 0 gt {sqrt div} {pop pop //PrinterEpsilon} ifelse  store
						} if  % NGiA 2 mod 0 eq
					}{
						/X1 PositionsX i 1 sub get def
						/X3 PositionsX i 1 add get def
						/Y1 PositionsY i 1 sub get def
						/Y3 PositionsY i 1 add get def
						/X2  [
						X1 X1 mul X3 X3 mul sub  EllipseSemiY R sub 2 mul Y1 add Y3 add Y1 Y3 sub mul add
						X1 X1 mul X3 X3 mul sub  EllipseSemiY R add 2 mul Y1 sub Y3 sub Y1 Y3 sub mul sub  mul  EllipseSemiX dup mul mul

						X1 X1 mul X3 X3 mul sub Y1 Y1 mul add Y3 Y3 mul sub  Y3 Y1 sub 2 mul R mul add  X1 X3 sub mul  EllipseSemiX dup mul mul -4 mul
						X1 X3 sub EllipseSemiX mul dup mul  Y1 Y3 sub EllipseSemiY mul dup mul  add 4 mul ]
						0  //false  W R sub  //false  //PrinterEpsilon  PolynomialRoots  dup length 0 eq {(Error: ProcessOnePackingType, Arch, no solutions) OutputToLog stop} if  Max   R 2 copy lt {exch} if pop  def  % /X2
						PositionsX i X2 put
						PositionsY i   X1 X1 mul X3 X3 mul sub Y1 Y1 mul add Y3 Y3 mul sub  X3 X1 sub 2 mul X2 mul add  Y1 Y3 sub 2 mul div  put
					} ifelse  % i 0 eq
				} for  % i
			} for  % loop count to stop slow convergence, updating PositionsX, PositionsY, EllipseSemiY

			[
				CentralGlasses 1 eq { [W 2 div       X add Mirror {H R sub} {R} ifelse Y add] } if
				CentralGlasses 2 ge { [W 2 div R add X add Mirror {H R sub} {R} ifelse Y add] [W 2 div R sub X add  Mirror {H R sub} {R} ifelse Y add]  PackingDirectionLeftToRight {exch} if} if
				CentralGlasses 3 ge { [W 2 div X add  R //Sqrt3 1 add mul Mirror {H exch sub} if Y add] exch } if
				PositionsX length 1 sub  -1  0          {/i exch def  [ W 2 div PositionsX i get PackingDirectionLeftToRight {sub} {add} ifelse X add  PositionsY i get Mirror {H exch sub} if Y add ] } for
				NGiA 2 mod  1  PositionsX length 1 sub {/i exch def  [ W 2 div PositionsX i get PackingDirectionLeftToRight {add} {sub} ifelse X add  PositionsY i get Mirror {H exch sub} if Y add ] } for
			]
			end
			/NamePlacementTopX /NamePlacementBottomX Mirror {exch} if   [ W 2 div  W 4 div R 2 div add  W 4 div  dup ] CentralGlasses get X add def   R X add def
			exit  % 1 {...} repeat
		} if  % /Arch


		/DiamondsAndRectangular BaseStyle eq
		{
			DeBugLevel 50 le {( CirclePacking, /DiamondsAndRectangular) OutputToLog} if
			/NR BestParamsDict /NumRows get def
			/NC BestParamsDict /NumCols get def
			BestParamsDict /AboveBelow get
			{
				/NSR BestParamsDict /NumShorterRows get def
				/RectRowsBelow  RectColsToLeftOrRowsBelow cvi  NR NSR 2 mul 1 add sub  2 copy gt {exch} if pop  dup 0 lt {pop 0} if  def

				Echo
				{
					mark  (SheetNum=) SheetNum (, with ) NG ( glasses: best BaseStyle, with radius ) R (, is /DiamondsAndRectangular with )
					NC ( columns, ) NR NSR sub ( rows of ) BestParamsDict /NumInLongerRows get ( glasses, and ) NSR ( rows with one fewer glass.) AreaText ConcatenateToMark  OutputToLog
				} if  % Echo
				/DistX NC 1 ge {W 2 R mul sub NC 1 sub div} {0} ifelse def
				[
					NC 1 sub H mul W add 2 NC mul R mul sub NR 2 NSR mul sub W 2 R mul sub mul sub  NC 1 sub H mul NR 2 NSR mul sub 1 sub W mul add NR NC add 2 sub 2 NSR mul sub 2 mul R mul sub  mul
					NC 1 sub dup mul NSR mul -4 mul H 2 R mul sub mul
					NC 1 sub dup mul NR 1 sub  dup 4 NSR mul sub  mul mul neg
				]  0  //false  H 2 R mul sub //PrinterEpsilon add  //false  //PrinterEpsilon  PolynomialRoots
				dup length 0 eq
					{pop  H R 2 mul sub NR NSR 2 mul sub 1 sub 2 mul R mul sub NSR dup 1 ge {2 mul div} {pop} ifelse  R 2 mul}
					{Min dup R lt {pop R} if  dup NSR 2 mul mul H R 2 mul sub exch sub NR NSR 2 mul sub 1 sub dup 1 ge {div} {pop} ifelse}
				ifelse  /Dist exch def  /DistY exch def
				[
				0  1  NR 1 sub
				{
					/RowNum exch def
					/ThisRowShort //false def
					RowNum RectRowsBelow gt
					{
						RowNum  NSR 2 mul RectRowsBelow add  le
							{RectRowsBelow Dist mul  RowNum RectRowsBelow sub DistY mul add   /ThisRowShort RowNum RectRowsBelow sub 2 mod 1 eq def}
							{RowNum NSR 2 mul sub Dist mul  NSR 2 mul DistY mul add}
						ifelse  % In diamond block
					} {RowNum Dist mul} ifelse  R Y add add   /YY exch def
					ThisRowShort {1} {0} ifelse  2  NC 1 sub {[ exch DistX mul R add X add  YY ]} for
				} for  %  RowNum
				]
				NC 2 idiv dup 2 mod 0 eq {1 sub} if DistX mul R add X add dup /NamePlacementTopX exch def /NamePlacementBottomX exch def
			}{
				% AboveBelow is false, so rectangular beside diamonds
				/NSC BestParamsDict /NumShorterCols get def
				/RectColsToLeft  RectColsToLeftOrRowsBelow cvi  NC NSC 2 mul 1 add sub  2 copy gt {exch} if pop  dup 0 lt {pop 0} if  def

				Echo
				{
					mark  (SheetNum=) SheetNum (, with ) NG ( glasses: best BaseStyle, with radius ) R (, is /DiamondsAndRectangular with )
					NR ( rows, ) NC NSC sub ( columns of ) BestParamsDict /NumInLongerCols get ( glasses, and ) NSC ( columns with one fewer glass.) AreaText ConcatenateToMark  OutputToLog
				} if  % Echo
				/DistY NR 1 ge {H 2 R mul sub NR 1 sub div} {0} ifelse def
				[
					NR 1 sub W mul H add 2 NR mul R mul sub NC 2 NSC mul sub H 2 R mul sub mul sub  NR 1 sub W mul NC 2 NSC mul sub 1 sub H mul add NC NR add 2 sub 2 NSC mul sub 2 mul R mul sub  mul
					NR 1 sub dup mul NSC mul -4 mul W 2 R mul sub mul
					NR 1 sub dup mul NC 1 sub  dup 4 NSC mul sub  mul mul neg
				]  0  //true  W 2 R mul sub //PrinterEpsilon add  //false  //PrinterEpsilon  PolynomialRoots
				dup length 0 eq
					{pop  W R 2 mul sub NC NSC 2 mul sub 1 sub 2 mul R mul sub NSC dup 1 ge {2 mul div} {pop} ifelse  R 2 mul}
					{Min dup R lt {pop R} if  dup NSC 2 mul mul W R 2 mul sub exch sub NC NSC 2 mul sub 1 sub dup 1 ge {div} {pop} ifelse}
				ifelse  /Dist exch def  /DistX exch def
				/NamePlacementTopX R 2 div def
				[
				0  1  NC 1 sub
				{
					/ColNum exch def

					/ThisColShort //false def
					ColNum RectColsToLeft gt
					{
						ColNum  NSC 2 mul RectColsToLeft add  le
							{RectColsToLeft Dist mul  ColNum RectColsToLeft sub DistX mul add   /ThisColShort ColNum RectColsToLeft sub 2 mod 1 eq def}
							{ColNum NSC 2 mul sub Dist mul  NSC 2 mul DistX mul add}
						ifelse  % In diamond block
					} {ColNum Dist mul} ifelse  R X add add   /XX exch def
					ThisColShort {1} {0} ifelse  2  NR 1 sub {[ exch XX exch DistY mul R add Y add ]} for
					ThisColShort {NamePlacementTopX W 2 div X add sub abs XX W 2 div X add sub abs R 24 div add gt {/NamePlacementTopX XX def} if} if  % The fraction of R resolves the numerous ties.
					NSC 0 eq ColNum 0 gt and {NamePlacementTopX W 2 div sub abs XX PrevXX add 2 div W 2 div sub abs R 24 div add gt {/NamePlacementTopX XX PrevXX add 2 div def} if} if
					/PrevXX XX def
				} for  %  ColNum
				]
				/NamePlacementBottomX NamePlacementTopX def
			} ifelse  % /AboveBelow
			dup
			{
				4 dict begin aload pop /BY exch def /BX exch def aload pop /AY exch def /AX exch def
				PackingNestingColumnMajor dup {AX BX} {AY BY} ifelse sub abs //PrinterEpsilon le eq {AY BY lt PackingDirectionTopToBottom ne} {AX BX lt PackingDirectionLeftToRight eq} ifelse end
			} ShellSort
			exit
		} if  % /DiamondsAndRectangular


		/RectangularAlternateSplitNudge BaseStyle eq
		{
			DeBugLevel 50 le {( CirclePacking, /RectangularAlternateSplitNudge) OutputToLog} if
			/NR BestParamsDict /NumRows get def
			/NC BestParamsDict /NumCols get def
			/NudgeRows BestParamsDict /NudgeRows get def

			/dist
			[ NudgeRows
			{
				NR 2 sub NR mul 5 add R R mul mul  4 H R mul mul sub  H H mul add 4 mul  NR 1 sub dup mul W mul W 4 R mul sub mul add
				NR 1 sub dup mul  NC 1 sub mul  2 mul  R 2 mul W sub mul
				NR 1 sub dup mul  NC 1 add mul  NC 3 sub mul
			}{
				NC 2 sub NC mul 5 add R R mul mul  4 W R mul mul sub  W W mul add 4 mul  NC 1 sub dup mul H mul H 4 R mul sub mul add
				NC 1 sub dup mul  NR 1 sub mul  2 mul  R 2 mul H sub mul
				NC 1 sub dup mul  NR 1 add mul  NR 3 sub mul
			} ifelse ]  R 2 mul //PrinterEpsilon sub  //false  H W add R 4 mul sub  //false  //PrinterEpsilon  PolynomialRoots dup length [ {pop R 2 mul} {0 get} {Min} ] exch get exec  def  % /dist
			/NudgeAmount  NudgeRows {W NC} {H NR} ifelse 1 sub dist mul sub 2 div R sub  dup R gt {pop R} if  def
			Echo
			{
				mark  (SheetNum=) SheetNum (, with ) NG ( glasses: best BaseStyle, with radius ) R (, is ) BaseStyle ( with )
				NC ( columns, ) NR ( rows, and alternate )
				NudgeRows {(rows nudged, part left and part right)} {(columns nudged, part up and part down)} ifelse  (, by )  NudgeAmount (pt.) AreaText ConcatenateToMark  OutputToLog
			} if  % Echo

			/PrevXXb null def  /PrevXXt null def  R 3 div dup /NamePlacementTopX exch def /NamePlacementBottomX exch def
			[
				PackingNestingColumnMajor
					{PackingDirectionLeftToRight {0 1 NC 1 sub} {NC 1 sub -1 0} ifelse}
					{PackingDirectionTopToBottom {0 1 NR 1 sub} {NR 1 sub -1 0} ifelse}
				ifelse  % PackingNestingColumnMajor
				{
					PackingNestingColumnMajor
						{/ColNum exch def  PackingDirectionTopToBottom {0 1 NR 1 sub} {NR 1 sub -1 0} ifelse}
						{/RowNum exch def  PackingDirectionLeftToRight {0 1 NC 1 sub} {NC 1 sub -1 0} ifelse}
					ifelse  % PackingNestingColumnMajor
					{
						PackingNestingColumnMajor {/RowNum} {/ColNum} ifelse exch def
						% Bottom row or right column nudged split-nudged.
						NudgeRows
						{
							/XX ColNum NC 1 sub 2 div sub dist mul    RowNum 2 mod 0 eq Mirror ne {NudgeAmount ColNum NC 2 idiv lt {sub} {add} ifelse} if  W 2 div add X add  def
							/YY NR 1 le {R} {H R sub NR 1 sub RowNum sub mul  R RowNum mul  add NR 1 sub div} ifelse Y add  def
						}{
							/YY RowNum NR 1 sub 2 div sub dist mul    ColNum 2 mod 0 eq Mirror ne {NudgeAmount RowNum NR 2 idiv lt {sub} {add} ifelse} if  H 2 div add Y add  def
							/XX NC 1 le {R} {W R sub NC 1 sub ColNum sub mul  R ColNum mul  add NC 1 sub div} ifelse X add  def
						} ifelse  % NudgeRows
						[ XX YY ]
						RowNum 0 eq        {PrevXXt IsNumber {NamePlacementTopX    W 2 div X add sub abs  XX PrevXXt add W sub 2 div X sub abs R 24 div add  ge {/NamePlacementTopX    XX PrevXXt add 2 div def} if} if /PrevXXt XX def} if
						RowNum NR 1 sub eq {PrevXXb IsNumber {NamePlacementBottomX W 2 div X add sub abs  XX PrevXXb add W sub 2 div X sub abs R 24 div add  ge {/NamePlacementBottomX XX PrevXXb add 2 div def} if} if /PrevXXb XX def} if
					} for  % ColNum or RowNum
					PackingNestingColumnMajor not {/PrevXXb null def /PrevXXt null def} if
				} for  % RowNum or ColNum
			]
			exit
		} if  % /RectangularAlternateSplitNudge ...


		/RectangularAlternateNudge BaseStyle eq
		{
			DeBugLevel 50 le {( CirclePacking, /RectangularAlternateNudge) OutputToLog} if
			/NR BestParamsDict /NumRows get def
			/NC BestParamsDict /NumCols get def
			/NudgeRows BestParamsDict /NudgeRows get def

			/NudgeAmount
			NudgeRows
			{
				W R 2 mul sub  NC 2 mul 1 sub  div
				/a  NC 2 sub NC mul  NR 1 sub dup mul  mul def
				/b  NR 1 sub dup mul 2 mul  W R 2 mul sub mul  def
				/c  NC 1 sub H mul  NR NC sub 2 mul R mul add  NR 1 sub W mul sub   NC 1 sub H mul  NR 1 sub W mul add  NR NC add 2 sub 2 mul R mul sub   mul def
			}{
				H R 2 mul sub  NR 2 mul 1 sub  div
				/a  NR 2 sub NR mul  NC 1 sub dup mul  mul def
				/b  NC 1 sub dup mul 2 mul  H R 2 mul sub mul  def
				/c  NR 1 sub W mul  NC NR sub 2 mul R mul add  NC 1 sub H mul sub   NR 1 sub W mul  NC 1 sub H mul add  NC NR add 2 sub 2 mul R mul sub   mul def
			} ifelse  % NudgeRows
			[ c b a ]  0  //false  H W add  //true  //PrinterEpsilon  PolynomialRoots  {2 copy gt {exch} if pop} forall  def  % /NudgeAmount
			% NudgeAmount R //PrinterEpsilon add gt {mark (Warning: CirclePacking, RectangularAlternateNudge: in sheet ) SheetNum ( which has ) NG ( glasses, NudgeAmount = ) NudgeAmount ( > Radius = ) R ConcatenateToMark  OutputToLog} if
			Echo
			{
				mark  (SheetNum=) SheetNum (, with ) NG ( glasses: best BaseStyle, with radius ) R (, is ) BaseStyle ( with )
				NC ( columns, ) NR ( rows, and alternate )
				NudgeRows {(rows)} {(columns)} ifelse  ( nudged by )  NudgeAmount (pt.) AreaText ConcatenateToMark  OutputToLog
			} if  % Echo

			[
				PackingNestingColumnMajor
					{PackingDirectionLeftToRight {0 1 NC 1 sub} {NC 1 sub -1 0} ifelse}
					{PackingDirectionTopToBottom {0 1 NR 1 sub} {NR 1 sub -1 0} ifelse}
				ifelse  % PackingNestingColumnMajor
				{
					PackingNestingColumnMajor
						{/ColNum exch def  PackingDirectionTopToBottom {0 1 NR 1 sub} {NR 1 sub -1 0} ifelse}
						{/RowNum exch def  PackingDirectionLeftToRight {0 1 NC 1 sub} {NC 1 sub -1 0} ifelse}
					ifelse  % PackingNestingColumnMajor
					{
						PackingNestingColumnMajor {/RowNum} {/ColNum} ifelse exch def
						% Non-mirrored has spacious bottom-right corner: nudge the last column; or not nudge the last row
						NudgeRows
						{
							/XX NC 1 le {R} {R NC 1 sub ColNum sub mul  W R sub NudgeAmount sub ColNum mul  add NC 1 sub div} ifelse X add
							NR RowNum sub 2 mod 1 eq Mirror eq {NudgeAmount add} if  def
							/YY NR 1 le {R} {H R sub NR 1 sub RowNum sub mul  R RowNum mul  add NR 1 sub div} ifelse Y add  def
						}{
							/YY NR 1 le {R} {H R sub NudgeAmount sub NR 1 sub RowNum sub mul  R RowNum mul  add NR 1 sub div} ifelse Y add
							NC ColNum sub 2 mod 0 eq Mirror eq {NudgeAmount add} if  def
							/XX NC 1 le {R} {R NC 1 sub ColNum sub mul  W R sub ColNum mul  add NC 1 sub div} ifelse X add  def
						} ifelse  % NudgeRows
						[ XX YY ]
					} for  % ColNum
				} for  % RowNum
			]
			/NamePlacementTopX
			NC 1 le {W 4 div} {R NC 1.5 sub mul  W R sub NudgeRows {NudgeAmount sub} if 0.5 mul  add NC 1 sub div} ifelse X add
			NudgeRows {NR 2 mod 1 eq Mirror eq {NudgeAmount add} if} if
			def  % /NamePlacementTopX
			% NamePlacement. If nudging columns, then with the appropriate nudged column, which will be different top and bottom. If nudging rows, then 0.5 cols left of middle.
			NudgeRows not  NudgeAmount NamesFontSizeMax ge  and
			{
				NC 1 le {W 4 div dup} {W R 2 mul sub NC 1 sub div dup  NC 4 idiv 2 mul mul X R add add exch  NC 2 sub 4 idiv 2 mul 1 add mul X R add add} ifelse   NC 2 mod 0 eq Mirror eq {exch} if   /NamePlacementBottomX exch def  /NamePlacementTopX exch def
			}{
				NC 1 le
					{W Mirror {0.25} {0.75} ifelse mul}
					{R NC 1.5 sub mul  W R sub NudgeRows {NudgeAmount sub} if 0.5 mul  add NC 1 sub div  Mirror NudgeRows and {NudgeAmount add} if}
				ifelse  X add  /NamePlacementBottomX exch def
				NC 1 le
					{W Mirror NR 2 mod 1 eq eq {0.25} {0.75} ifelse mul}
					{R NC 1.5 sub mul  W R sub NudgeRows {NudgeAmount sub} if 0.5 mul  add NC 1 sub div  Mirror NR 2 mod 1 eq eq NudgeRows and {NudgeAmount add} if}
				ifelse  X add  /NamePlacementTopX exch def
			} ifelse  % NudgeRows not  NudgeAmount NamesFontSizeMax ge  and
			exit  % 1 {...} repeat
		} if  % /RectangularAlternateNudge ...


		/Bespoke5 BaseStyle eq
		{
			DeBugLevel 50 le {( CirclePacking, /Bespoke5) OutputToLog} if
			/NamePlacementTopX W 2 div X add def
			/NamePlacementBottomX NamePlacementTopX def

			Echo {mark (SheetNum=) SheetNum (, with ) NG ( glasses: best BaseStyle, with radius ) R (, is /Bespoke5.) AreaText ConcatenateToMark OutputToLog} if
			/c  W H 2 copy lt {exch} if //Sqrt3 mul sub R 2 mul //Sqrt3 1 sub mul add  dup 0 le {pop 0} if  def
			/d c //Sqrt3 mul 2 div def

			[
				W H gt
				{
					Mirror
					{
						[ R c add X add  H R sub Y add ]
						[ W R c add sub X add  H R sub Y add ]
						[ W 2 div X add  H 2 div d sub Y add ]
						[ R X add  R Y add ]
						[ W R sub X add  R Y add ]
					}{
						[ R X add  H R sub Y add ]
						[ W R sub X add  H R sub Y add ]
						[ W 2 div X add  H 2 div d add Y add ]
						[ R c add X add  R Y add ]
						[ W R c add sub X add  R Y add ]
					} ifelse  % /Mirror
				}{
					Mirror
					{
						[ R X add  H R c add sub Y add ]
						[ W R sub X add  H R sub Y add ]
						[ W 2 div d add X add  H 2 div Y add ]
						[ R X add  R c add Y add ]
						[ W R sub X add  R Y add ]
					}{
						[ R X add  H R sub Y add ]
						[ W R sub X add  H R c add sub Y add ]
						[ W 2 div d sub X add  H 2 div Y add ]
						[ R X add  R Y add ]
						[ W R sub X add  R c add Y add ]
					} ifelse  % /Mirror
				} ifelse  % W H gt
				PackingDirectionLeftToRight not {exch 5 3 roll exch 5 -3 roll} if
				PackingDirectionTopToBottom not {5 2 roll 3 1 roll} if
				PackingNestingColumnMajor {4 2 roll 3 1 roll exch} if
			]
			exit
		} if  % /Bespoke5


		/Bespoke7 BaseStyle eq
		{
			DeBugLevel 50 le {( CirclePacking, /Bespoke7) OutputToLog} if
			W H ge {W 2 div} {W 4 div Mirror not {3 mul} if} ifelse X add dup  /NamePlacementTopX exch def  /NamePlacementBottomX exch def

			Echo {mark (SheetNum=) SheetNum (, with ) NG ( glasses: best BaseStyle, with radius ) R (, is /Bespoke7.) AreaText ConcatenateToMark OutputToLog} if

			W H 2 copy lt {exch} if   /S exch def   /L exch def  % short side, long side
			/dist  4 S S mul mul 16 S R mul mul sub 20 R R mul mul add 4 R L mul mul sub L L mul add  S 2 R mul sub //Sqrt3 2 mul mul L sub 2 R mul add  mul
			24 S S mul mul 96 S R mul mul sub 88 R R mul mul add 8 R L mul mul add 2 L L mul mul sub  dup 0 eq {pop pop 2 R mul} {div} ifelse  def  % /dist
			% Construct assuming /Landscape. If not, then reverse.
			[
				[ L 2 div dist 2 div sub  R ]
				[ L 2 div dist 2 div add  R ]
				/Y1 //Sqrt3 2 div dist mul R add def
				[ L 2 div  Y1 ]
				/Y2  dist dup mul  L dist sub 2 div R sub dup mul sub  dup 0 gt {sqrt} {pop 0} ifelse  def
				[ R  Y2 R add ]
				[ L R sub  Y2 R add ]
				/X2  dist dup mul  S Y1 sub R sub dup mul sub  dup 0 gt {sqrt} {pop 0} ifelse  def
				[ L 2 div X2 sub  S R sub ]
				[ L 2 div X2 add  S R sub ]
			] dup dup
			Mirror {dup {dup 1 get S exch sub 1 exch put} forall} if
			{W H lt {dup aload exch X add 0 exch put Y add 1 exch put} {dup aload exch Y add 1 exch put X add 0 exch put} ifelse} forall
			{
				4 dict begin aload pop /BY exch def /BX exch def aload pop /AY exch def /AX exch def
				PackingNestingColumnMajor dup {AX BX} {AY BY} ifelse sub abs //PrinterEpsilon le eq {AY BY lt PackingDirectionTopToBottom ne} {AX BX lt PackingDirectionLeftToRight eq} ifelse end
			} ShellSort
			exit
		} if  % /Bespoke7


		/DiamondsPlus BaseStyle eq
		{
			DeBugLevel 50 le {( CirclePacking, /DiamondsPlus) OutputToLog} if
			/NC BestParamsDict /NumCols get def
			/DistHorizontal BestParamsDict /DistHorizontal get def
			Echo
			{
				mark (SheetNum=) SheetNum (, with ) NG ( glasses: best BaseStyle, with radius ) R (, is /DiamondsPlus with )
				NC 5 ( columns that would be full in the general case, and three rows, the only number of rows yet coded.) AreaText ConcatenateToMark OutputToLog
			} if  % Echo

			W H 2 copy lt {exch} if   /S exch def   /L exch def  % short side, long side

			DistHorizontal
			{
				[ 4 R mul S sub S mul NC 4 add NC mul 5 add 4 mul R R mul mul sub NC 2 add 8 mul R L mul mul add 4 L L mul mul sub  S 2 R mul sub 2 mul  3 ]
				2 R mul //PrinterEpsilon sub  //false   L R 2 mul sub //PrinterEpsilon add  //false  //PrinterEpsilon  PolynomialRoots
				dup length 0 eq {pop () (Error: CirclePacking, DiamondsPlus, failed to compute dist. Please send your code to the author: www.jdawiseman.com/author.html) () OutputToLog OutputToLog OutputToLog /dist R 2 mul def} {Min /dist exch def} ifelse
				/xstep R def
			}{
				/QuarticCoeffs
				[
					NC 1 sub S mul dup mul 4 L L mul mul add NC 1 add S mul dup mul 4 L L mul mul add mul
					NC dup mul 1 sub dup mul S S S mul mul mul NC dup mul 1 add 4 mul S L mul S L add mul mul add 16 L L L mul mul mul add -8 mul  R mul add
					NC dup mul dup dup mul 3 mul exch 2 mul sub 7 add S S mul mul NC dup mul 1 add 16 mul S L mul mul add NC dup mul 4 mul 52 add L L mul mul add 8 mul  R R mul mul add
					NC dup mul dup 5 add 4 mul L mul exch dup 2 mul exch dup mul add 5 add S mul add -32 mul  R R R mul mul mul add
					NC dup mul dup 6 mul exch dup mul add 25 add 16 mul  R R mul dup mul mul add

					NC dup mul 1 sub S S mul mul 4 L L mul mul sub S mul 4 mul
					L L mul 2 L S mul mul add 4 mul NC dup mul 1 sub 3 S S mul mul mul sub 8 mul  R mul add
					NC dup mul 3 mul 7 sub S mul 8 L mul sub 16 mul  R R mul mul add
					NC dup mul 5 sub -32 mul  R R R mul mul mul add

					NC dup mul dup dup dup mul 4 mul exch 7 mul sub 1 add -2 mul S S mul mul exch 4 mul 3 add 8 mul L L mul mul sub
					NC dup mul dup dup dup mul 4 mul exch 7 mul sub 1 add S mul exch 4 mul 3 add 4 mul L mul add 8 mul  R mul add
					NC dup mul dup dup mul 4 mul exch 9 mul add 13 add -8 mul  R R mul mul add

					NC dup mul 4 mul 3 sub dup dup
					-4 mul S mul exch
					8 mul  R mul add
					exch dup mul
				] def  % /QuarticCoeffs
				QuarticCoeffs  2 R mul //PrinterEpsilon sub  //false  S 2 R mul sub dup mul L 2 R mul sub dup mul add sqrt //PrinterEpsilon add  //false  //PrinterEpsilon  PolynomialRoots  dup length 0 eq {pop 0} {Min} ifelse  /dist exch def
				/xstep  dist dup mul  S 2 div R sub dup mul  sub dup 0 gt {sqrt} {/xstep 0 def pop 0} ifelse def
			} ifelse  % DistHorizontal
			/distS  dist  L NC 1 sub xstep mul sub dup 4 R mul sub mul neg  dup 0 lt {pop} {sqrt 2 mul  2 copy lt {exch} if pop} ifelse  S 2 R mul sub  2 copy gt {exch} if pop  def
			[
				NC 2 mod  2  NC {xstep mul R add dup [exch S R sub] exch [exch R]} for  % Top and bottom rows
				NC 1 add 2 mod  2  NC 1 sub {xstep mul R add [exch S 2 div]} for  % central row
				[L R sub S distS add 2 div] [L R sub S distS sub 2 div]  % The two extras
			] dup dup
			Mirror {dup {dup 0 get L exch sub 0 exch put} forall} if
			{W H lt {dup aload exch X add 0 exch put Y add 1 exch put} {dup aload exch Y add 1 exch put X add 0 exch put} ifelse} forall
			{
				4 dict begin aload pop /BY exch def /BX exch def aload pop /AY exch def /AX exch def
				PackingNestingColumnMajor dup {AX BX} {AY BY} ifelse sub abs //PrinterEpsilon le eq {AY BY lt PackingDirectionTopToBottom ne} {AX BX lt PackingDirectionLeftToRight eq} ifelse end
			} ShellSort
			/MidX W 2 div def
			/LeftOfMiddle X def  /RightOfMiddle W X add def
			dup
			{
				dup 1 get  H R Y NamesFontSizeMin //PrinterEpsilon add add add sub  ge
				{
					0 get dup dup dup dup dup
					MidX lt exch  LeftOfMiddle gt and {/LeftOfMiddle  exch store} {pop} ifelse
					MidX ge exch RightOfMiddle lt and {/RightOfMiddle exch store} {pop} ifelse
				} {pop} ifelse  % near top
			} forall
			/NamePlacementTopX LeftOfMiddle RightOfMiddle add 2 div def
			/LeftOfMiddle X def  /RightOfMiddle W X add def
			dup
			{
				dup 1 get  R Y NamesFontSizeMin //PrinterEpsilon add add add  le
				{
					0 get dup dup dup dup dup
					MidX lt exch  LeftOfMiddle gt and {/LeftOfMiddle  exch store} {pop} ifelse
					MidX ge exch RightOfMiddle lt and {/RightOfMiddle exch store} {pop} ifelse
				} {pop} ifelse  % near bottom
			} forall
			/NamePlacementBottomX LeftOfMiddle RightOfMiddle add 2 div def
			exit
		} if  % /DiamondsPlus


		/Array BaseStyle eq
		{
			DeBugLevel 50 le {( CirclePacking, /Array) OutputToLog} if
			[ /MinXX /MaxXX /MinYY /MaxYY /PositionsStart /PositionsEnd ] {dup BestParamsDict exch get def} forall
			/RngXX MaxXX MinXX sub def   /RngYY MaxYY MinYY sub def

			Echo {mark (SheetNum=) SheetNum (, with ) NG ( glasses: best BaseStyle, with radius ) R (, is custom array.) AreaText ConcatenateToMark OutputToLog} if

			RngXX 0 eq
			{
				/Coeff1X 0 def
				/Coeff0X  MinXX dup -1 le {pop -1} if dup 1 ge {pop 1} if 1 add 2 div  W 2 R mul sub  mul  X R add add  def
			}{
				/Coeff1X W 2 R mul sub RngXX div def
				/Coeff0X X R add MinXX Coeff1X mul sub def
			} ifelse  % RngXX 0 eq

			RngYY 0 eq
			{
				/Coeff1Y 0 def
				/Coeff0Y  MinYY dup -1 le {pop -1} if dup 1 ge {pop 1} if 1 add 2 div  H 2 R mul sub  mul  Y R add add  def
			}{
				/Coeff1Y H 2 R mul sub RngYY div def
				/Coeff0Y Y R add MinYY Coeff1Y mul sub def
			} ifelse  % RngYY 0 eq

			% Items of length four [x0 y0 x1 y1]. Radius determined as if at (x0, y0). Canvas and radius then fixed, and circle moved as far as possible to (x1, y1).
			/IsMoveable NG array def
			/Answer NG array def
			//false
			0  1  NG 1 sub
			{
				/WithinPage exch def
				Answer WithinPage 2 array put
				PackingDescriptor PositionsStart WithinPage add GetEU dup length 4 ge {0 4 getinterval aload pop 3 -1 roll ne 3 1 roll ne or} {pop //false} ifelse
				{
					pop //true
					IsMoveable WithinPage //true put
				}{
					IsMoveable WithinPage //false put
					Answer WithinPage get  PackingDescriptor PositionsStart WithinPage add GetEU  2 copy
					0 GetEU Coeff1X mul Coeff0X add  0 exch put
					1 GetEU Coeff1Y mul Coeff0Y add  1 exch put
				} ifelse  % is moveable?
			} for  % WithinPage, leaving a boolean on the stack
			{
				/BPDMsX {BPDM 0 GetEU} bind def
				/BPDMsY {BPDM 1 GetEU} bind def
				/BPDMdX {BPDM 2 GetEU BPDM 0 GetEU sub} bind def
				/BPDMdY {BPDM 3 GetEU BPDM 1 GetEU sub} bind def
				/BPDBsX {BPDB 0 GetEU} bind def
				/BPDBsY {BPDB 1 GetEU} bind def
				/BPDBdX {IsMoveable Blocker get {BPDB 2 GetEU BPDB 0 GetEU sub} {0} ifelse} bind def
				/BPDBdY {IsMoveable Blocker get {BPDB 3 GetEU BPDB 1 GetEU sub} {0} ifelse} bind def
				/MsX {                        BPDMsX Coeff1X mul Coeff0X add                                   } bind def  % start
				/MsY {                        BPDMsY Coeff1Y mul Coeff0Y add                                   } bind def  % start
				/BsX {IsMoveable Blocker get {BPDBsX Coeff1X mul Coeff0X add} {Answer Blocker get 0 get} ifelse} bind def  % start
				/BsY {IsMoveable Blocker get {BPDBsY Coeff1Y mul Coeff0Y add} {Answer Blocker get 1 get} ifelse} bind def  % start
				/MdX {BPDMdX Coeff1X mul} bind def  % direction
				/MdY {BPDMdY Coeff1Y mul} bind def  % direction
				/BdX {BPDBdX Coeff1X mul} bind def  % direction
				/BdY {BPDBdY Coeff1Y mul} bind def  % direction
				/PopulateCollisionP
				{
					/Blocker exch def
					/BPDB PackingDescriptor PositionsStart Blocker add GetEU def
					0 1 NG 1 sub {/Mover exch def IsMoveable Mover get  Blocker Mover ne  and {
						/BPDM PackingDescriptor PositionsStart Mover add GetEU def
						CollisionP Mover get  Blocker
						1 {
							% If circles start adjacent, then machine-precision could cause a misleading 'collision' at p=+epsilon.
							% So multiple tests of whether circles moving away from each other. First test in PackingDescriptor space.
							BPDMsX BPDBsX ge BPDMdX BPDBdX ge and  BPDMsX BPDBsX le BPDMdX BPDBdX le and  or
							BPDMsY BPDBsY ge BPDMdY BPDBdY ge and  BPDMsY BPDBsY le BPDMdY BPDBdY le and  or and {1 put exit} if
							% Second, in painting space, but again only if passes in both x and y space
							MsX BsX ge MdX BdX ge and  MsX BsX le MdX BdX le and  or
							MsY BsY ge MdY BdY ge and  MsY BsY le MdY BdY le and  or and {1 put exit} if
							% Third, again in painting space, but using sign of dot product
							MsX BsX sub MdX BdX sub mul   MsY BsY sub MdY BdY sub mul  add  0 ge {1 put exit} if
							[
								MsX dup mul MsY dup mul add BsX dup mul BsY dup mul add add  R R mul 4 mul sub  MsX BsX mul MsY BsY mul add 2 mul sub
								MsX BsX sub MdX mul  MsY BsY sub MdY mul add 2 mul  IsMoveable Blocker get {BsX MsX sub BdX mul BsY MsY sub BdY mul add 2 mul add} if
								MdX dup mul MdY dup mul add  IsMoveable Blocker get {BdX dup MdX 2 mul sub mul  BdY dup MdY 2 mul sub mul  add add} if
							]  0  //false  1  //true  //PrinterEpsilon  PolynomialRoots  % If there is an adjacent circle, must be moving towards.
							dup length 0 eq {pop 1 put exit} if
							dup length 1 eq {0 get dup 0 lt {pop 0} if put exit} if
							% Two solutions. If a double root, within appropriate precision, ignore. Otherwise lesser.
							aload pop  dup 0 lt {pop 0} if /p1 exch def  dup 0 lt {pop 0} if /p0 exch def
							p1 p0 sub dup mul Coeff1X dup mul Coeff1Y dup mul add mul  16 R //PrinterEpsilon mul mul  le {1} {p0 p1 lt {p0} {p1} ifelse} ifelse  put
						} repeat  % 1
					} if} for  % /Mover
				} bind def  % /PopulateCollisionP

				/MoverMaxP [  % Ensure not going off the page
					0 1 NG 1 sub
					{
						/Mover exch def  /BPDM PackingDescriptor PositionsStart Mover add GetEU def
						1
						IsMoveable Mover get
						{
							MsX MdX add  X       R add  2 copy //PrinterEpsilon sub lt {MsX dup 3 -1 roll sub 3 1 roll exch sub div  2 copy gt {exch} if pop} {pop pop} ifelse
							MsX MdX add  X W add R sub  2 copy //PrinterEpsilon add gt {MsX dup 3 -1 roll sub 3 1 roll exch sub div  2 copy gt {exch} if pop} {pop pop} ifelse
							MsY MdY add  Y       R add  2 copy //PrinterEpsilon sub lt {MsY dup 3 -1 roll sub 3 1 roll exch sub div  2 copy gt {exch} if pop} {pop pop} ifelse
							MsY MdY add  Y H add R sub  2 copy //PrinterEpsilon add gt {MsY dup 3 -1 roll sub 3 1 roll exch sub div  2 copy gt {exch} if pop} {pop pop} ifelse
						} if  % IsMoveable ...
					} for  % /Mover
				] def  % /MoverMaxP

				/CollisionP [ NG {[ NG {1} repeat ]} repeat ] def
				0 1 NG 1 sub {PopulateCollisionP} for

				{
					//true IsMoveable {{pop //false exit} if} forall {exit} if
					/MinP 1 def
					0 1 NG 1 sub {/Mover exch def IsMoveable Mover get {
						MoverMaxP Mover get dup MinP lt {/MinP exch def} {pop} ifelse
						0 1 NG 1 sub {/Blocker exch def Mover Blocker ne {
							CollisionP Mover get Blocker get dup MinP lt {/MinP exch def} {pop} ifelse
						} if} for  % /Blocker
					} if} for  % /Mover

					[
						0 1 NG 1 sub {/Mover exch def IsMoveable Mover get {
							/BPDM PackingDescriptor PositionsStart Mover add GetEU def
							MinP  MoverMaxP Mover get  eq
							{
								Answer Mover get  0  MdX MinP mul MsX add  put
								Answer Mover get  1  MdY MinP mul MsY add  put
								IsMoveable Mover //false put   Mover  % left on stack for later PopulateCollisionP'ing
							} if  % MinP  MoverMaxP Mover get  eq
							0 1 NG 1 sub {/Blocker exch def Mover Blocker ne {
								/BPDB PackingDescriptor PositionsStart Blocker add GetEU def
								MinP  CollisionP Mover get Blocker get  eq
								{
									Answer Mover get  0  MdX MinP mul MsX add  put
									Answer Mover get  1  MdY MinP mul MsY add  put
									CollisionP Mover get Blocker 1 put
									IsMoveable Mover //false put   Mover  % left on stack for later PopulateCollisionP'ing
									IsMoveable Blocker get
									{
										Answer Blocker get  0  BdX MinP mul BsX add  put
										Answer Blocker get  1  BdY MinP mul BsY add  put
										CollisionP Blocker get Mover 1 put
										IsMoveable Blocker //false put   Blocker  % left on stack for later PopulateCollisionP'ing
									} if
								} if  % MinP  CollisionP ... eq
							} if} for  % /Blocker
						} if} for  % /Mover
					] dup length 0 eq {( Error in CirclePacking's array special: possible infinite loop.) OutputToLog pop exit} {{PopulateCollisionP} forall} ifelse
				} loop
			} if  % any of IsMoveable
			% (Answer) = Answer {mark exch aload pop exch exch (\t) exch ConcatenateToMark =} forall () =

			/MinXX W X add def  /MaxXX X def
			Answer {0 get dup  dup MinXX lt {/MinXX exch def} {pop} ifelse  dup MaxXX gt {/MaxXX exch def} {pop} ifelse} forall
			{
				% For use twice, only a few lines down
				dup length 0 eq {pop  X W 2 div add  exit} if
				dup length 1 eq {0 get  dup MinXX MaxXX add 2 div ge {MinXX R sub} {MaxXX R add} ifelse  2 mul add 3 div  exit} if
				dup length 2 gt {dup {lt} ShellSort} if  dup 0 get exch 1 get add 2 div
			} dup
			/NamePlacementTopX
			[  Answer {aload pop   H Y add R NamesFontSizeMin //PrinterEpsilon add add  sub  lt {pop} if} forall  ]
			1  4 -1 roll  repeat  % 1
			def  % /NamePlacementTopX
			/NamePlacementBottomX
			[  Answer {aload pop         Y R NamesFontSizeMin //PrinterEpsilon add add add   gt {pop} if} forall  ]
			1  4 -1 roll  repeat  % 1
			def  % /NamePlacementBottomX

			Answer
			exit
		} if  % /Array ...

		mark  (Error! With ) NG ( glasses, BestParamsDict /BaseStyle get = ) BestParamsDict /BaseStyle get (, which is an unknown value.) ConcatenateToMark OutputToLog
		stop
	} repeat} Stopped {mark (Error: failure in CirclePacking with BaseStyle=) BaseStyle (. Perhaps an overflow error caused by a large page size. Stopping.) ConcatenateToMark OutputToLog stop} if

	R  % second part of answer, = Radius
	PackingDescriptor NamePlacementTopX NamePlacementBottomX % Final part of answer

	end
	DeBugLevel 100 le {(-CirclePacking) OutputToLog} if
} bind def  % /CirclePacking

/CircletextRecursive
{
	DeBugLevel 20 le {(+CircletextRecursive) OutputToLog} if
	/thing exch def
	/m matrix currentmatrix def
	1 {
		/thing load xcheck
		{
			% This is meant to cope with code that does any of several things.
			% But, of course, different code can do arbitrary things, good or bad.
			% 1. Change typeface. Requires no help.
			% 2. Kerning: horizontal rmoveto. This must be handled in the angle calculation, and must not be effected.
			% 3. Superscript or subscript. No effect on angle calculation; stored in CircleVerticalOffset and the current font.
			% 4. Leave something to be rendered on the stack. Wrap execution in [] (in case leaves nothing), and call CircletextRecursive.
			% 5. Render a picture, such as a small dingbat, of course finishing with a moveto to the logical place to continue.
			% 6. If there is underlining, apply separately to each character or character.
			GSave 0 0 moveto  %  NullDevice
			/UnderlineBegin {/CircletextUnderlining //true  store} def
			/UnderlinePaint {/CircletextUnderlining //false store} def
			mark /thing load ExecUExceptNotBindedPainting cleartomark currentpoint
			CircleVerticalOffset add /CircleVerticalOffset exch def  /CW exch def
			GRestore
			/CA CW R //TwoPi mul div 360 mul  def
			/Angle  SentenceAngle  CircletextAngleOffsets i get add  CharacterAngle add  CA 2 div add  def
			Angle neg sin R mul X add
			Angle neg cos R mul Y add moveto
			Angle 180 add rotate
			CW -2 div  CircleVerticalOffset  rmoveto
			[ /thing load execU ]
			currentdict /UnderlineBegin undef currentdict /UnderlinePaint undef
			m setmatrix
			/CharacterAngle CharacterAngle  CW R //TwoPi mul div 360 mul  add def
			CircletextRecursive  exit
		} if  % xcheck
		thing type /arraytype eq {thing {CircletextRecursive} forall exit} if
		thing type /nametype eq
		{
			/CW thing StringWidthRecursive def
			/CA CW R //TwoPi mul div 360 mul  def
			/Angle  SentenceAngle  CircletextAngleOffsets i get add  CharacterAngle add  CA 2 div add  def
			Angle neg sin R mul X add
			Angle neg cos R mul Y add moveto
			Angle 180 add rotate
			CW -2 div  CircleVerticalOffset  rmoveto
			CircletextUnderlining {UnderlineBegin thing glyphshow UnderlinePaint}  {thing glyphshow} ifelse
			m setmatrix
			/CharacterAngle CharacterAngle CA add def  exit
		} if  % /nametype
		thing type dup /integertype eq exch /realtype eq or {/thing thing ToString store} if  % no 'exit'.
		thing type /stringtype eq
		{
			0  1  thing length 1 sub
			{
				/C exch thing exch 1 getinterval def
				/CW C StringWidthRecursive def
				/CA CW R //TwoPi mul div 360 mul  def
				/Angle  SentenceAngle  CircletextAngleOffsets i get add  CharacterAngle add  CA 2 div add  def
				Angle neg sin R mul X add
				Angle neg cos R mul Y add moveto
				Angle 180 add rotate
				CW -2 div  CircleVerticalOffset  rmoveto
				CircletextUnderlining {UnderlineBegin C show UnderlinePaint}  {C show} ifelse
				m setmatrix
				/CharacterAngle CharacterAngle CA add def
			} for  % C
			exit
		} if  % /stringtype
		mark (Error: CircletextRecursive parameter ) /thing load 0 //true ThingToDebugText  ( is of type ) /thing load type  ( rather than executable, string, name, number or array.)  ConcatenateToMark OutputToLog stop
	} repeat
	DeBugLevel 20 le {(-CircletextRecursive) OutputToLog} if
} bind def  % /CircletextRecursive

% CircletextArray NumSpaces Radius FontSize NumCopies  Circletext  --
/Circletext
{
	DeBugLevel 50 le {(+Circletext) OutputToLog} if
	24 dict begin
	/NumCopies exch def
	/FontSize exch def
	/R exch def
	/NumSpaces exch def
	/CircletextArray exch def
	currentpoint /Y exch def /X exch def

	/CircletextUnderlining //false def
	GSave

	CircletextFont FontSize selectfont

	/CircletextArrayWidths [ CircletextArray {StringWidthRecursive} forall ] def
	/CircletextArraySumWidths  0 CircletextArrayWidths {add} forall  def

	CircletextArraySumWidths 0 gt  NumCopies 1 ge  and
	{
		/AngleGap  1 NumCopies div  CircletextArraySumWidths R //TwoPi mul div  sub  CircletextArray length div 360 mul  def
		/CircletextAngleOffsets [ CircletextArrayWidths 0 get  R //TwoPi mul  div  360 mul 2 div  neg
			1 1 CircletextArray length 1 sub {1 sub CircletextArrayWidths exch get R //TwoPi mul div 360 mul  AngleGap add  1 index add} for
		] def

		0  1  NumCopies 1 sub
		{
			CircletextFont FontSize  selectfont  % Not sure whether needed. Restarts each sentence at same typeface.
			360 NumCopies div mul 180 add /SentenceAngle exch def
			0  1  CircletextArray length 1 sub
			{
				/i exch def
				/CharacterAngle 0 def
				/CircleVerticalOffset 0 def
				X  Y R sub  moveto  % In case first non-array item of CircletextArray is code
				CircletextArray i get CircletextRecursive
			} for  % i
		} for  % SentenceAngle
	} if  % CircletextArraySumWidths 0 gt  NumCopies 1 ge  and
	GRestore
	end
	DeBugLevel 50 le {(-Circletext) OutputToLog} if
} bind def  % /Circletext

/Atan {2 copy abs //PrinterEpsilon lt exch abs //PrinterEpsilon lt and {pop pop /UndefinedAtan} {atan} ifelse} bind def

% GlassNum1 GlassNum2  MakePathConnectingGlasses  -
% For diagonals does a 90 degree curve, horizontally
% out of GlassNum1, and vertically into GlassNum2.
% Assumes existence of various things.
/MakePathConnectingGlasses
{
	DeBugLevel 50 le {(+MakePathConnectingGlasses) OutputToLog} if
	/GlassPositions where {pop //true} {//false} ifelse
	{
		7 dict begin
		GlassPositions SheetNum get exch get aload pop  /Y2 exch def  /X2 exch def
		GlassPositions SheetNum get exch get aload pop  /Y1 exch def  /X1 exch def
		X1 X2 sub abs Radii SheetNum get le
		{
			Y1 Y2 sub abs Radii SheetNum get gt
			{
				Y1 Y2 lt
					{X1 Y1 Radii SheetNum get add moveto X2 Y2 Radii SheetNum get sub lineto}
					{X1 Y1 Radii SheetNum get sub moveto X2 Y2 Radii SheetNum get add lineto}
				ifelse  % Y1 Y2 lt
			} if  % Y1 Y2 sub abs Radii SheetNum get gt
		}{
			Y1 Y2 sub abs Radii SheetNum get le
			{
				X1 X2 lt
					{X1 Radii SheetNum get add Y1 moveto X2 Radii SheetNum get sub Y2 lineto}
					{X1 Radii SheetNum get sub Y1 moveto X2 Radii SheetNum get add Y2 lineto}
				ifelse  % Y1 Y2 lt
			}{
				/XX1  X1 Radii SheetNum get  X1 X2 lt {add} {sub} ifelse  def
				/YY2  Y2 Radii SheetNum get  Y1 Y2 lt {sub} {add} ifelse  def
				/bezierquarter  //Sqrt2 1 sub 4 mul 3 div  def
				XX1 Y1 moveto
				1 bezierquarter sub XX1 mul bezierquarter X2 mul add  Y1
				X2  1 bezierquarter sub YY2 mul bezierquarter Y1 mul add
				X2 YY2  curveto
			} ifelse  % Y1 Y2 sub abs Radii SheetNum get le
		} ifelse   % X1 X2 sub abs Radii SheetNum get le
		end
	} {pop pop} ifelse  % /GlassPositions where {pop true} {false} ifelse
	DeBugLevel 50 le {(-MakePathConnectingGlasses) OutputToLog} if
} bind def  % /MakePathConnectingGlasses

/Mod {dup 0 le {pop pop 0} { {1 index 0 lt {dup 3 1 roll add exch} {mod exit} ifelse} loop} ifelse} bind def  % Always returns >= 0

% Circlearray {FontSettingCode} SeparationMinNumSpaces CurrentpointIsTop WidthOfAvailableSpace FillBackground StartItem  CirclearrayInStraightLine  StartItem NextItem DescenderMin AscenderMax
% If StartItem is -1 then computes the StartItem that has the smallest Separation between text pieces; currentpoint is top-left or bottom left of box.
/CirclearrayInStraightLine
{
	DeBugLevel 40 le {(+CirclearrayInStraightLine) OutputToLog} if
	24 dict begin
	/StartItemParam exch def
	/FillBackground exch def
	/WidthOfAvailableSpace exch def
	/CurrentpointIsTop exch def
	/SeparationMinNumSpaces exch def
	/FontSettingCode exch def
	/Circlearray exch def

	Circlearray length 0 gt
	{
		/AscenderMax //InfinityNeg def
		/DescenderMin //Infinity def
		/PieceW Circlearray length array def
		/PieceL Circlearray length array def
		/PieceR Circlearray length array def
		0  1  Circlearray length 1 sub
		{
			/i exch def
			FontSettingCode
			PieceW  i  Circlearray i get StringWidthRecursive  put
			GSave 16384 dup scale newpath 0 0 moveto  Circlearray i get //true CharPathRecursive PathBBox GRestore
			dup AscenderMax  gt {/AscenderMax  exch def} {pop} ifelse
			PieceR exch  i exch  put
			dup DescenderMin lt {/DescenderMin exch def} {pop} ifelse
			PieceL exch  i exch  put
		} for  % i
		/SeparationMin FontSettingCode ( ) stringwidth pop SeparationMinNumSpaces mul def

		/SeparationBest //Infinity def
		[ StartItemParam 0 ge {StartItemParam} {0  1  Circlearray length 1 sub {} for  dup 1 ge { {StartItemBest} } if} ifelse ]  % To re-compute Separation using StartItemBest
		{
			/StartItem exch exec def  % The exec for the {StartItemBest} item of array
			/ResidualSpace //null def
			/NumWholes  % Swash handling only at start and end. Within use font's widths.
				WidthOfAvailableSpace SeparationMin add  PieceL StartItem get add  StartItem 1 sub Circlearray length Mod dup PieceR exch get exch PieceW exch get sub sub
				0 PieceW {add} forall Circlearray length SeparationMin mul add  div cvi
			def  % /NumWholes
			0  1  Circlearray length 1 sub
			{
				/NumPieces exch def
				ResidualSpace  % Old, in case next ResidualSpace negative.
				/ResidualSpace
					WidthOfAvailableSpace
					NumWholes 0 gt {0 PieceW {add} forall NumWholes mul sub} if
					StartItem  1  StartItem 1 sub NumPieces add {Circlearray length Mod PieceW exch get sub} for
					Circlearray length NumWholes mul NumPieces add 1 sub SeparationMin mul sub
					PieceL StartItem get add  StartItem 1 sub NumPieces add Circlearray length Mod dup PieceR exch get exch PieceW exch get sub sub
				def  % /ResidualSpace
				ResidualSpace  //PrinterEpsilon neg  lt  % should be false with NumPieces equalling zero
					{/ResidualSpace exch def  /NumPieces NumPieces 1 sub def  exit}
					{pop}
				ifelse  % ResidualSpace PrinterEpsilon neg lt
			} for  % NumPieces
			/Separation  ResidualSpace  Circlearray length NumWholes mul NumPieces add 1 sub  dup 0 eq {pop pop 0} {div SeparationMin add} ifelse  def
			Separation SeparationBest 0.24 sub lt {/StartItemBest StartItem def  /SeparationBest Separation def} if  % Should happen at least once, hence no initialisation of StartItem. Embedded 0.24 constant because prefer smaller StartItem.
		} forall  % StartItem

		FillBackground {currentpoint WidthOfAvailableSpace AscenderMax DescenderMin sub CurrentpointIsTop {neg} if GSave 0.75 setgray rectfill GRestore} if
		PieceL StartItem get neg  CurrentpointIsTop {AscenderMax} {DescenderMin} ifelse neg rmoveto   currentpoint /Y exch def pop
		NumWholes neg  1  0
		{
			/WholeNum exch def
			0  1  Circlearray length 1 sub
			{
				/PieceNum exch def
				WholeNum 0 eq {PieceNum NumPieces ge {exit} if} if
				Circlearray  PieceNum StartItem add Circlearray length mod  get  FontSettingCode  ShowRecursive
				currentpoint pop Separation add  Y  moveto
			} for  % PieceNum
		} for  % WholeNum

		StartItem  NumPieces StartItem add Circlearray length mod  DescenderMin  AscenderMax
	} {StartItemParam dup 0 0} ifelse  % Circlearray length 0 gt
	end
	DeBugLevel 40 le {(-CirclearrayInStraightLine) OutputToLog} if
} bind def  % /CirclearrayInStraightLine


% X Y Width Height Circlearray {FontSettingCode} SeparationMinNumSpaces  CirclearrayInRectangle  DescenderMin AscenderMax
/CirclearrayInRectangle
{
	DeBugLevel 40 le {(+CirclearrayInRectangle) OutputToLog} if
	13 dict begin
	/SeparationMinNumSpaces exch def
	/FontSettingCode exch def
	/Circlearray exch def
	/H exch def  /W exch def  /Y exch def  /X exch def
	matrix currentmatrix dup
	X  Y H add translate  -90 rotate  0 0 moveto  % Left
	Circlearray  /FontSettingCode load  SeparationMinNumSpaces //false  H                  //false  -1          CirclearrayInStraightLine  /A exch def  /D exch def  /NextItem exch def /StartItemV exch def  setmatrix  % Left
	/LineH A D sub 0.72 add def   X LineH add  Y  moveto  % Bottom
	Circlearray  /FontSettingCode load  SeparationMinNumSpaces //false  W LineH 2 mul sub  //false  NextItem    CirclearrayInStraightLine  pop pop pop /StartItemH exch def  % Bottom
	X W add  Y  translate  90 rotate  0 0 moveto  % Right
	Circlearray  /FontSettingCode load  SeparationMinNumSpaces //false  H                  //false  StartItemV  CirclearrayInStraightLine  pop pop pop pop  setmatrix  % Right
	X LineH add  Y H add  moveto  % Top
	Circlearray  /FontSettingCode load  SeparationMinNumSpaces //true   W LineH 2 mul sub  //false  StartItemH  CirclearrayInStraightLine  pop pop pop pop  % Top
	D  A  end
	DeBugLevel 40 le {(-CirclearrayInRectangle) OutputToLog} if
} bind def  % /CirclearrayInRectangle

/CirclearrayInSemiRoundedRectangleRec
{
	6 dict begin
	/thing exch def
	1 {
		/thing load xcheck
		{
			% Mutatis mutandis, include xcheck comment from CircletextRecursive.
			GSave 0 0 moveto  % NullDevice
			/UnderlineBegin {/CircletextUnderlining //true  store} def
			/UnderlinePaint {/CircletextUnderlining //false store} def
			mark /thing load ExecUExceptNotBindedPainting cleartomark currentpoint
			VerticalOffset add /VerticalOffset exch store  /CW exch def
			1 1 Dists length 1 sub {/PartMiddle exch def   DistCurrent CW 2 div add Dists PartMiddle get lt {exit} if} for
			/Ang  DistCurrent CW 2 div add  Dists PartMiddle 1 sub get sub  Dists PartMiddle get Dists PartMiddle 1 sub get sub  div 90 mul  def
			GRestore  matrix currentmatrix
			[
				{(Error: CirclearrayInSemiRoundedRectangleRec, impossible PartMiddle. Please send .ps file to the author, www.jdawiseman.com/author.html) OutputToLog stop}
				{X W D add add  Y AD DistCurrent add add  moveto 90 rotate  0 VerticalOffset rmoveto}
				{W R sub X add Ang cos R D add mul add   H R sub Y add Ang sin R D add mul add moveto  90  Ang add rotate  CW -2 div VerticalOffset rmoveto}
				{X W R DistCurrent Dists 2 get sub add sub add   Y H D add add  moveto 180 rotate  0 VerticalOffset rmoveto}
				{X R add Ang sin R D add mul sub         H R sub Y add Ang cos R D add mul add moveto  180 Ang add rotate  CW -2 div VerticalOffset rmoveto}
				{X D sub  Y H R DistCurrent Dists 4 get sub add sub add  moveto -90 rotate  0 VerticalOffset rmoveto}
			] PartMiddle get exec
			[ /thing load execU ]
			exch setmatrix
			currentdict /UnderlineBegin undef currentdict /UnderlinePaint undef
			/DistCurrent dup load CW add store
			{CirclearrayInSemiRoundedRectangleRec} forall  exit
		} if % xcheck
		thing type /arraytype eq {thing {CirclearrayInSemiRoundedRectangleRec} forall exit} if
		thing type dup /integertype eq exch /realtype eq or {/thing thing ToString store} if  % no 'exit'.
		/ThingIsString thing type /stringtype eq def
		thing type /nametype eq  ThingIsString  or
		{
			ThingIsString {thing length 1 ge} {//true} ifelse
			{
				matrix currentmatrix
				/WidthChar0  thing ThingIsString {0 1 getinterval} if StringWidthRecursive  def
				1 1 Dists length 1 sub {/PartMiddleChar0 exch def   DistCurrent WidthChar0 2 div add Dists PartMiddleChar0 get lt {exit} if} for
				PartMiddleChar0 2 mod 1 eq  % On a straight
				{
					ThingIsString
					{
						thing length  -1  1
						{
							/CharsToShow exch def
							thing 0 CharsToShow 1 sub getinterval stringwidth pop  thing CharsToShow 1 sub 1 getinterval stringwidth pop 2 div add DistCurrent add   Dists PartMiddleChar0 get  le {exit} if
						} for  % CharsToShow
					} if  % ThingIsString
					PartMiddleChar0 1 eq {X W D add add  Y AD DistCurrent add add  moveto 90 rotate  0 VerticalOffset rmoveto} if
					PartMiddleChar0 3 eq {X W R DistCurrent Dists 2 get sub add sub add   Y H D add add  moveto 180 rotate  0 VerticalOffset rmoveto} if
					PartMiddleChar0 5 eq {X D sub  Y H R DistCurrent Dists 4 get sub add sub add  moveto -90 rotate  0 VerticalOffset rmoveto} if
				}{
					/CharsToShow 1 def
					/Ang  DistCurrent WidthChar0 2 div add  Dists PartMiddleChar0 1 sub get sub  Dists PartMiddleChar0 get Dists PartMiddleChar0 1 sub get sub  div 90 mul  def
					PartMiddleChar0 2 eq
						{W R sub X add Ang cos R D add mul add   H R sub Y add Ang sin R D add mul add moveto  90  Ang add rotate  WidthChar0 -2 div VerticalOffset rmoveto}
						{X R add Ang sin R D add mul sub         H R sub Y add Ang cos R D add mul add moveto  180 Ang add rotate  WidthChar0 -2 div VerticalOffset rmoveto}
					ifelse  % PartMiddleChar0 2 eq
				} ifelse  % PartMiddleChar0 2 mod 1 eq
				/DistCurrent dup load  thing ThingIsString {0 CharsToShow getinterval dup show} {dup glyphshow} ifelse StringWidthRecursive  add store
				setmatrix
				ThingIsString {CharsToShow thing length lt {thing CharsToShow thing length CharsToShow sub getinterval CirclearrayInSemiRoundedRectangleRec} if} if
			} if  % ... thing length 1 ge ...
			exit
		} if  % ... /nametype ... ThingIsString  or
	} repeat
	end
} bind def  % /CirclearrayInSemiRoundedRectangleRec

% X Y Width Height Radius Circlearray {FontSettingCode} SeparationMinNumSpaces  CirclearrayInSemiRoundedRectangle  DescenderMin AscenderMax
/CirclearrayInSemiRoundedRectangle
{
	DeBugLevel 40 le {(+CirclearrayInSemiRoundedRectangle) OutputToLog} if
	23 dict begin
	/SeparationMinNumSpaces exch def
	/FontSettingCode exch def
	/Circlearray exch def
	/R exch def  /H exch def  /W exch def  /Y exch def  /X exch def

	/SeparationMin FontSettingCode ( ) stringwidth pop SeparationMinNumSpaces mul def

	Circlearray length 0 gt
	{
		X Y moveto  Circlearray  /FontSettingCode load  SeparationMinNumSpaces  //false  W  //false  -1  CirclearrayInStraightLine
		/A exch def  /D exch def  /StartItem exch def  dup 0 eq {pop Circlearray length 1 sub} {1 sub} ifelse /EndItem exch def
		/AD A D sub 0.72 add FontSettingCode ( ) stringwidth pop add def  % Embedded constant

		/R  R  W 2 div  H AD sub  2 {2 copy gt {exch} if pop} repeat  AD 2 copy lt {exch} if pop  def
		/Dists
		[
			0                               % Start,        start 1st line;
			H  AD R add  sub                % End 1st line, start 1st arc;
			dup  R D add //HalfPi mul add   % End 1st arc,  start 2nd line;
			dup  W 2 R mul sub add          % End 2nd line, start 2nd arc;
			dup  R D add //HalfPi mul add   % End 2nd arc,  start 3rd line;
			dup  4 index add                % End 3rd line, end.
		] def  % /Dists

		/PieceW Circlearray length array def
		/PieceL Circlearray length array def
		/PieceR Circlearray length array def
		0  1  Circlearray length 1 sub
		{
			/i exch def
			FontSettingCode
			PieceW  i  Circlearray i get StringWidthRecursive  put
			GSave 16384 dup scale newpath 0 0 moveto  Circlearray i get //true CharPathRecursive PathBBox GRestore
			pop  PieceR exch  i exch  put
			pop  PieceL exch  i exch  put
		} for  % i

		Dists dup length 1 sub get
		PieceR EndItem get sub  PieceL StartItem get add  % Swash handling only at start and end. Within use font's widths.
		[ EndItem StartItem ge {StartItem  1  EndItem 1 sub {} for} {0 1 EndItem 1 sub {} for   StartItem  1  Circlearray length 1 sub {} for} ifelse ] {PieceW exch get SeparationMin add sub} forall  % EndItem removed in swash handling
		0 PieceW {add} forall  Circlearray length SeparationMin mul  add
		2 copy  exch SeparationMin add  //PrinterEpsilon add exch  div floor cvi  /NumWholes exch def

		NumWholes mul sub
		EndItem StartItem sub dup 0 lt {Circlearray length add} if  NumWholes Circlearray length mul  add  % Want gaps so one less than number text pieces
		dup 1 lt {pop} {div} ifelse SeparationMin add /Separation exch def

		/DistCurrent PieceL StartItem get neg def
		{Circlearray exch get /VerticalOffset 0 def 0 setgray FontSettingCode CirclearrayInSemiRoundedRectangleRec  /DistCurrent dup load Separation add store}
		StartItem  1  Circlearray length 1 sub  3 index  for
		NumWholes StartItem EndItem le {1 sub} if  dup 0 lt
		{
			pop 0
			mark (Error: in CirclearrayInSemiRoundedRectangle a negative value being overidden with zero. Nonetheless proceeding, but neck-tag pages might be faulty. Cause possibly a too long CirclearraysNeckTags )
			WithinTitles ( get = ) /Circlearray load  ConcatenateToMark OutputToLog
		} if  % ... 0 lt
			{0  1  Circlearray length 1 sub  3 index for}
		repeat
		0  1  EndItem  4 -1 roll  for
		A D
	} {0 0} ifelse  % Circlearray length 0 gt
	end
	DeBugLevel 40 le {(-CirclearrayInSemiRoundedRectangle) OutputToLog} if
} bind def  % /CirclearrayInSemiRoundedRectangle

% Do stuff: call the routines

% This open curly brace starts code passed to stopped
{
	AnyFillTextingAtAll DeBugLevel 100 le or {( Main: just before error checking, usertime = ) usertime ToString Concatenate OutputToLog} if
	% Elementary error checking
	/ErrorFlag //false def

	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		GlassesOnSheets SheetNum GetEU  dup type /arraytype eq
		{
			{
				/WithinTitles exch execU def
				WithinTitles type /integertype ne {(Error: non-integer element of GlassesOnSheets.) OutputToLog /ErrorFlag //true store} if
				WithinTitles 0 lt {(Error: negative element of GlassesOnSheets.) OutputToLog /ErrorFlag //true store} if
				WithinTitles  Titles length  ge
				{
					mark  (Error: With Titles of length )  Titles length
					( no element of GlassesOnSheets should exceed ) Titles length 1 sub
					(, yet on sheet ) SheetNum
					( (starting at zero of course) is a )  WithinTitles
					ConcatenateToMark OutputToLog /ErrorFlag //true store
				} if
			} forall
		}{
			pop   (Error: GlassesOnSheets contains a non-array.) OutputToLog /ErrorFlag //true store
		} ifelse  % GlassesOnSheets ... type /arraytype eq
	} bind for  % SheetNum
	currentdict /WithinTitles undef  currentdict /SheetNum undef
	ErrorFlag {stop} if  % If GlassesOnSheets borken, much untestable.

	% Each sub-array contains names of things that should be the same length
	/TypeOfPagesBeingRendered /Multiple store
	[
		[
			/Circlearrays /Titles /Abovetitles /Overtitles /Belowtitles  % Not using GlassesNumCopies as these pages might be computed for sticky-label or pre-pour purposes, then not rendered
			/FontSizesTitlesEquivalences /FontSizesAbovetitlesEquivalences /FontSizesBelowtitlesEquivalences /FontSizesOvertitlesEquivalences
			{GlassesOnTastingNotePages length 0 gt} MightBeTrue {TastingNotePagesNumCopies 1 ge} MightBeTrue and {/CirclearraysTastingNotes /TitlesTastingNotes /SubtitlesTastingNotes} if
			/VoteRecorders load MightBeTrue {/CirclearraysVoteRecorder /TitlesVoteRecorder /SubtitlesVoteRecorder} if
			{DecantingNotesNumCopies 1 ge} MightBeTrue {/CirclearraysDecantingNotes /TitlesDecantingNotes /SubtitlesDecantingNotes} if
			{CorkDisplayNumCopies 1 ge} MightBeTrue {/CirclearraysCorkDisplay /TitlesCorkDisplay /SubtitlesCorkDisplay} if
			{NeckTagsNumCopies 1 ge} MightBeTrue {/CirclearraysNeckTags} if
			{PrePourNumCopies 1 ge}        MightBeTrue {/CirclearraysPrePour} if
			{StickyLabelsNumCopies 1 ge} {StickyLabelsTypes length 0 gt} MightBeTrue exch MightBeTrue and {/CirclearraysStickyLabels} if
			AnyFillTextingAtAll {/FillTexts} if
		]
		[
			/GlassesOnSheets /NamesShowTop /NamesShowBottom /PageOrderingGlasses /MirrorPagesGlasses
			{DecanterLabelsNumCopies 1 ge} MightBeTrue {/PageOrderingDecanterLabels /MirrorPagesDecanterLabels} if
			{NeckTagsNumCopies 1 ge} MightBeTrue {/PageOrderingNeckTags /MirrorPagesNeckTags} if
			{PrePourNumCopies 1 ge} MightBeTrue {/PageOrderingPrePourPages /MirrorPagesPrePour} if
			{StickyLabelsNumCopies 1 ge} {StickyLabelsTypes length 0 gt} MightBeTrue exch MightBeTrue and {/PageOrderingStickyLabels /MirrorPagesStickyLabels} if
			ShrinkRadii type /arraytype eq {/ShrinkRadii} if
			{WaterBoxes dup /Glasses eq exch /Both eq or  WaterBoxesOverrideShowEverySheet not  and} MightBeTrue {/WaterBoxesShowRight /WaterBoxesShowLeft} if
			{BackgroundTextsGlasses PrePourShowBackgroundTexts or} MightBeTrue {/BackgroundTextsGlassesTexts} if
			/FlightSeparations load MightBeTrue {/FlightSeparationLines} if
		]
		[ /GlassesOnTastingNotePages /PageOrderingTastingNotePages /MirrorPagesTastingNotePages   /BackgroundTextsTastingNotes load MightBeTrue {/BackgroundTextsTNsTexts} if ]
		[ /TastingNotesColumnHeadings /TastingNotesColumnRelativeWidths ]
		/PlaceNames load MightBeTrue {[ /NamesPlaceNames /PageOrderingPlaceNames /MirrorPagesPlaceNames ]} if
		/VoteRecorders load MightBeTrue {[ /GlassesClusteredOnVoteRecorders /VoteRecorderTopTexts /VoteRecorderShowTotalRow /VoteRecorderShowTotalCol /PageOrderingVoteRecorder /MirrorPagesVoteRecorder ]} if
		{DecantingNotesNumCopies 1 ge} MightBeTrue {[ /GlassesClusteredOnDecantingNotes /PageOrderingDecantingNotes /MirrorPagesDecantingNotes ]} if
		{AccountsNumCopies 1 ge} MightBeTrue {[ /AccountsColumnGroupHeadings /AccountsSubColumnHeadings ]   [ /PageOrderingAccounts /MirrorPagesAccounts ]} if
		{CorkDisplayNumCopies 1 ge} MightBeTrue {[ /GlassesClusteredOnCorkDisplay /PageOrderingCorkDisplay /MirrorPagesCorkDisplay ]} if
		{NeckTagsNumCopies 1 ge} MightBeTrue {[ /PageOrderingNeckTags /MirrorPagesNeckTags ]} if
		/PagesToBeInserted load MightBeTrue {[ /PagesToBeInsertedNumPages /PagesToBeInsertedBeforeInstances /PagesToBeInsertedBeforeTypeOneOf /PagesToBeInsertedDests /PagesToBeInsertedDescriptions ]} if
	]
	{
		/ArraysWhichShouldBeSameLength exch def
		1  1  ArraysWhichShouldBeSameLength length 1 sub
		{
			/i exch def
			/i0 ArraysWhichShouldBeSameLength 0 get load execU dup type dup /arraytype eq {pop length} {/integertype ne {pop //null} if} ifelse def
			/ii ArraysWhichShouldBeSameLength i get load execU dup type dup /arraytype eq {pop length} {/integertype ne {pop //null} if} ifelse def
			i0 ii ne  i0 //null ne  ii //null ne  and and
			{
				[ (Error: ) ArraysWhichShouldBeSameLength 0 get ToString ( and ) ArraysWhichShouldBeSameLength i get ToString
				( should be the same length, but are actually of lengths ) i0 ToString ( and ) ii ToString (.) ] ASCIIfy OutputToLog
				/ErrorFlag //true store
			} if  % ... 'ne' ...
		} for  % i
	} bind forall  % ArraysWhichShouldBeSameLength

	/TypeOfPagesBeingRendered /TastingNotes store
	0  1  GlassesOnTastingNotePages length 1 sub
	{
		/TastingSheetNum exch def
		GlassesOnTastingNotePages TastingSheetNum GetEU
		{
			/WithinTitles exch execU def
			WithinTitles type /integertype ne {(Error: non-integer element of GlassesOnTastingNotePages.) OutputToLog /ErrorFlag //true store} if
			WithinTitles 0 lt {(Error: negative element of GlassesOnTastingNotePages.) OutputToLog /ErrorFlag //true store} if
			WithinTitles  Titles length  ge
			{
				mark  (Error: With Titles of length )  Titles length
				( no element of GlassesOnTastingNotePages should exceed )  Titles length 1 sub
				(, yet on tasting-note sheet )  TastingSheetNum
				( (starting at zero of course) is a )  WithinTitles
				ConcatenateToMark OutputToLog /ErrorFlag //true store
			} if
		} forall
	} bind for  % TastingSheetNum
	currentdict /WithinTitles undef  currentdict /TastingSheetNum undef
	/TastingNotesCirclesBehind load MightBeTrue
	{
		/product dup where
		{
			2 dict begin  exch get /p exch def
			/SearchString (Distiller) def
			//true  0  1  p length SearchString length sub {p exch SearchString length getinterval SearchString eq {pop //false exit} if} for
			{
				mark
				(\n!!! Error, possibly !!!)
				(\n!!! Ghostscript handles 'settransfer', used when TastingNotesCirclesBehind is true, in a manner ignored by Mac Preview !!!)
				(\n!!! Check with your preferred PDF reader that the circles on the tasting-note pages are faded rather than original darkness !!!)
				(\n!!! If not, then "/TastingNotesCirclesBehind false def" would be better !!!)
				(\n!!! And if printing from a Mac a file containing this warning, try printing from an Adobe product rather than Preview !!!)
				(\n) ConcatenateToMark OutputToLog
			} if  % Not Distiller
			end
		} {pop} ifelse  % /product where
		{TastingNotesCirclesBehindFadingFactorIfAllBlack 1 le} MightBeTrue not  {TastingNotesCirclesBehindFadingFactorIfAllBlack 0 gt} MightBeTrue not  or
			{(Error: TastingNotesCirclesBehindFadingFactorIfAllBlack <=0 or >1) OutputToLog /ErrorFlag //true store}
		if  % TastingNotesCirclesBehindFadingFactorIfAllBlack out of range
		{TastingNotesCirclesBehindFadingFactorIfAnyGrey 1 le} MightBeTrue not  {TastingNotesCirclesBehindFadingFactorIfAnyGrey 0 gt} MightBeTrue not  or
			{(Error: TastingNotesCirclesBehindFadingFactorIfAnyGrey <=0 or >1) OutputToLog /ErrorFlag //true store}
		if  % TastingNotesCirclesBehindFadingFactorIfAnyGrey out of range
		{TastingNotesCirclesBehindTopX 1 le} MightBeTrue not  {TastingNotesCirclesBehindTopX 0 ge} MightBeTrue not  or
			{(Error: TastingNotesCirclesBehindTopX <0 or >1) OutputToLog}
		if  % TastingNotesCirclesBehindTopX out of range
		{TastingNotesCirclesBehindBottomX 1 le} MightBeTrue not  {TastingNotesCirclesBehindBottomX 0 ge} MightBeTrue not  or
			{(Error: TastingNotesCirclesBehindBottomX <0 or >1) OutputToLog}
		if  % TastingNotesCirclesBehindBottomX out of range
	} if  % ... TastingNotesCirclesBehind ...

	TastingNotesStarsNameColsRowsArrangement length 4 mod 0 eq
	{
		0 4 TastingNotesStarsNameColsRowsArrangement length 1 sub
		{
			/i exch def
			{TastingNotesStarsNameColsRowsArrangement i 1 add GetEU type /integertype eq} MightBeTrue not {mark (Error: TastingNotesStarsNameColsRowsArrangement ) i 1 add ( get must be an integer.) ConcatenateToMark OutputToLog /ErrorFlag //true store} if
			{TastingNotesStarsNameColsRowsArrangement i 2 add GetEU type /integertype eq} MightBeTrue not {mark (Error: TastingNotesStarsNameColsRowsArrangement ) i 2 add ( get must be an integer.) ConcatenateToMark OutputToLog /ErrorFlag //true store} if
			{TastingNotesStarsNameColsRowsArrangement i 3 add GetEU dup dup /Alternating eq 3 1 roll /Sideways eq 3 1 roll /Upright eq or or} MightBeTrue not
				{mark (Error: TastingNotesStarsNameColsRowsArrangement ) i 3 add ( get is not one of /Alternating /Sideways /Upright.) ConcatenateToMark OutputToLog /ErrorFlag //true store}
			if  % None of /Alternating /Sideways /Upright
		} for  % i
	}{
		mark  (Error: TastingNotesStarsNameColsRowsArrangement of length ) TastingNotesStarsNameColsRowsArrangement length ( which is not a multiple of four.) ConcatenateToMark OutputToLog /ErrorFlag //true store
	} ifelse  % ... length 4 mod 0 eq


	/TypeOfPagesBeingRendered /Accounts store
	{AccountsNumCopies 1 ge} MightBeTrue
	{
		0 AccountsSubColumnHeadings {execU length add} forall   AccountsColumnRelativeWidths length  2 copy  ne
		{
			mark (Error: AccountsColumnRelativeWidths length = ) 3 -1 roll (, but lengths of AccountsSubColumnHeadings' sub-arrays total ) counttomark 2 add -1 roll (.) ConcatenateToMark OutputToLog   /ErrorFlag //true store
		} {pop pop} ifelse  % ... AccountsSubColumnHeadings ... AccountsColumnRelativeWidths length  ne
	} if  % ...AccountsNumCopies 1 ge...


	% Check that things at least might be a compound string
	/TypeOfPagesBeingRendered /Multiple store
	[
		/Names /Titles /Abovetitles /Overtitles /Belowtitles  % Not using GlassesNumCopies as these pages might be computed for sticky-label or pre-pour purposes, then not rendered
		{GlassesOnTastingNotePages length 0 gt} {TastingNotePagesNumCopies 1 ge} MightBeTrue exch MightBeTrue and {/NamesTastingNotes /TitlesTastingNotes /SubtitlesTastingNotes} if
		/VoteRecorders load MightBeTrue {/NamesVoteRecorder /TitlesVoteRecorder /SubtitlesVoteRecorder} if
		{DecantingNotesNumCopies 1 ge} MightBeTrue {/TitlesDecantingNotes /SubtitlesDecantingNotes} if
		{CorkDisplayNumCopies 1 ge} MightBeTrue {/TitlesCorkDisplay /SubtitlesCorkDisplay} if
		{BackgroundTextsGlasses PrePourShowBackgroundTexts BackgroundTextsTastingNotes or or} MightBeTrue {/BackgroundTextsGlassesTexts} if
		{AccountsNumCopies 1 ge} MightBeTrue {/NamesAccounts} if
		{StickyLabelsNumCopies 1 ge} MightBeTrue {/NamesStickyLabels} if
		AnyFillTextingAtAll {/FillTexts} if
	]
	{
		/thing exch def
		thing load xcheck not
		{
			thing load type /arraytype eq
			{
				0 1 thing load length 1 sub
				{
					/i exch def
					thing load i get MightBeCompoundString not
					{
						[ (Error: item ) i ToString ( of ) thing ToString ( should be a compound string, but isn't.) ] ASCIIfy OutputToLog /ErrorFlag //true store
					} if
				} for  % i
			}{
				[ (Error: ) thing ToString ( should be an array, but isn't.) ] ASCIIfy OutputToLog /ErrorFlag //true store
			} ifelse  % ... MightBeCompoundString not
		} if  % ... xcheck not
	} bind forall  % compound strings at depth 1
	[
		/Circlearrays
		{GlassesOnTastingNotePages length 0 gt} {TastingNotePagesNumCopies 1 ge} MightBeTrue exch MightBeTrue and {/CirclearraysTastingNotes} if
		{VoteRecorders} MightBeTrue {/CirclearraysVoteRecorder} if
		{DecantingNotesNumCopies 1 ge} MightBeTrue {/CirclearraysDecantingNotes} if
		{CorkDisplayNumCopies 1 ge} MightBeTrue {/CirclearraysCorkDisplay} if
		{NeckTagsNumCopies 1 ge} MightBeTrue {/CirclearraysNeckTags} if
		/PlaceNames load MightBeTrue {/NamesPlaceNames} if
	]
	{
		/thing exch def
		thing load xcheck not
		{
			thing load type /arraytype eq
			{
				0 1 thing load length 1 sub
				{
					/i exch def
					thing load i get type /arraytype eq
					{
						0 1 thing load i get length 1 sub
						{
							/j exch def
							thing load i get j get MightBeCompoundString not
							{
								mark  (Error: item ) j ( of item ) i ( of ) thing ( should be a compound string, but isn't.)  ConcatenateToMark OutputToLog /ErrorFlag //true store
							} if
						} for  % j
					}{
						[ (Error: item ) i ToString ( of ) thing ToString ( should be an array, but isn't.) ] ASCIIfy OutputToLog /ErrorFlag //true store
					} ifelse
				} for  % i
			}{
				[ (Error: ) thing ToString ( should be an array, but isn't.) ] ASCIIfy OutputToLog /ErrorFlag //true store
			} ifelse  % ... MightBeCompoundString not
		} if  % ... xcheck not
	} bind forall  % compound strings at depth 2
	currentdict /i undef  currentdict /j undef


	% Check for a lone /quoteright, which might be a failure to compound a string
	3 dict begin
	[
		/Names /Titles /Abovetitles /Overtitles /Belowtitles
		{TastingNotePagesNumCopies 0 gt GlassesOnTastingNotePages length 0 gt and} MightBeTrue {/NamesTastingNotes /TitlesTastingNotes /SubtitlesTastingNotes} if
		/VoteRecorders load MightBeTrue {/NamesVoteRecorder /TitlesVoteRecorder /SubtitlesVoteRecorder} if
		{DecantingNotesNumCopies 0 gt} MightBeTrue {/TitlesDecantingNotes /SubtitlesDecantingNotes} if
		{CorkDisplayNumCopies 1 ge} MightBeTrue {/TitlesCorkDisplay /SubtitlesCorkDisplay} if
		{AccountsNumCopies 0 gt} MightBeTrue {/NamesAccounts} if
		{StickyLabelsNumCopies 0 gt} MightBeTrue {/NamesStickyLabels} if
	]
	{
		/BeingChecked exch def
		0  1  BeingChecked load execU length 1 sub
		{
			/WithinTitles exch def
			BeingChecked load execU WithinTitles get /quoteright eq {mark (Warning: in ) BeingChecked (, near item ) WithinTitles (, there might be missing string-compounding square brackets, []. Continuing.) ConcatenateToMark OutputToLog} if
		} for % WithinTitles
	} forall  % BeingChecked
	[
		/Circlearrays
		{TastingNotePagesNumCopies 0 gt GlassesOnTastingNotePages length 0 gt and} MightBeTrue {/CirclearraysTastingNotes} if
		/VoteRecorders load MightBeTrue {/CirclearraysVoteRecorder} if
		{DecantingNotesNumCopies 0 gt} MightBeTrue {/CirclearraysDecantingNotes} if
		{CorkDisplayNumCopies 1 ge} MightBeTrue {/CirclearraysCorkDisplay} if
		{NeckTagsNumCopies 1 ge} MightBeTrue {/CirclearraysNeckTags} if
		/PlaceNames load  MightBeTrue {/NamesPlaceNames} if
	]
	{
		/BeingChecked exch def
		0  1  BeingChecked load execU length 1 sub
		{
			/WithinTitles exch def  % wrong parameter name for NamesPlaceNames
			0 1 BeingChecked load execU WithinTitles GetEU length 1 sub
			{
				/i exch def
				BeingChecked load execU WithinTitles GetEU i get /quoteright eq {mark (Warning: in ) BeingChecked ( ) WithinTitles
				( get, near item ) i (, there might be missing string-compounding square brackets, []. Continuing.) ConcatenateToMark OutputToLog} if
			} for  % i
		} for  % WithinTitles
	} bind forall  % BeingChecked
	end


	% Check headers and footers
	[ /HeadersLeft /HeadersCenter /HeadersRight /FootersLeft /FootersRight /FootersCenter ]
	{
		/HeaderFooterCheck exch def
		HeaderFooterCheck load xcheck not
		{
			HeaderFooterCheck load length 2 mod 0 ne {mark HeaderFooterCheck ( is not of even length.) OutputToLog /ErrorFlag //true store} if
			0 2 HeaderFooterCheck load length 1 sub {/i exch def HeaderFooterCheck load i get IsNumber not {mark (Error: ) HeaderFooterCheck ( ) i ( get should be a number.) ConcatenateToMark OutputToLog /ErrorFlag //true store} if} for
			1 2 HeaderFooterCheck load length 1 sub {/i exch def HeaderFooterCheck load i get MightBeCompoundString not {mark (Error: ) HeaderFooterCheck ( ) i ( get should be a compound string.) ConcatenateToMark OutputToLog /ErrorFlag //true store} if} for
		} if  % ... xcheck not
	} forall  % HeaderFooterCheck

	/TypeOfPagesBeingRendered /Glasses store
	{FontSizesRatioTitlesMin 1 lt not} MightBeTrue not
	{
		mark  (Warning: FontSizesRatioTitlesMin = ) FontSizesRatioTitlesMin ( < 1. This is odd. Continuing with execution.) ConcatenateToMark OutputToLog
	} if  % FontSizesRatioTitlesMin 1 lt
	{FontSizesRatioAboveBelowOverMin 1 lt not} MightBeTrue not
	{
		mark  (Warning: FontSizesRatioAboveBelowOverMin = ) FontSizesRatioAboveBelowOverMin ( < 1. This is odd. Continuing with execution.) ConcatenateToMark OutputToLog
	} if  % FontSizesRatioAboveBelowOverMin 1 lt
	{3  FontSizesSetsAboveBelowOver length  eq} MightBeTrue not
	{
		mark  (Error: FontSizesSetsAboveBelowOver has length ) FontSizesSetsAboveBelowOver length (; this should be exactly 3.) ConcatenateToMark OutputToLog /ErrorFlag //true store
	} if  % NumSheets  FontSizesSetsGlassesPages length  ne
	{NumSheets  FontSizesSetsGlassesPages length  ne not} MightBeTrue not
	{
		mark  (Error: FontSizesSetsGlassesPages has length ) FontSizesSetsGlassesPages length (; GlassesOnSheets has length )  NumSheets ConcatenateToMark OutputToLog /ErrorFlag //true store
	} if  % NumSheets  FontSizesSetsGlassesPages length  ne
	{RotationTitlesAboveBelowOverCirclearray abs //ArcTanOneQuarter gt} MightBeTrue {PrePourNumCopies 1 ge} MightBeTrue and
	{
		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			0  1  SheetLengths SheetNum get 1 sub
			{
				WithinPage-WithinTitles-def
				{RotationTitlesAboveBelowOverCirclearray abs //ArcTanOneQuarter gt} MightBeTrue  PrePourNumCopies 1 ge  and  % RotationTitlesAboveBelowOverCirclearray might reference other variables such as MgnB
				{
					(Warning: RotationTitlesAboveBelowOverCirclearray non-small => pre-pour sheets can look too different to glasses sheets.) OutputToLog exit
				} if  % pre-pours not quite matching
			} for  % WithinPage, WithinTitles
		} for  % SheetNum
	} if  % might be pre-pours not quite matching
	currentdict /WithinTitles undef  currentdict /WithinPage undef  currentdict /SheetNum undef
	{ExclusionAnnulusProportionInnerRadiusTitlesAboveBelow 1 lt} MightBeTrue not {(Error: ExclusionAnnulusProportionInnerRadiusTitlesAboveBelow >= 1.)  OutputToLog /ErrorFlag //true store} if
	{ExclusionAnnulusProportionInnerRadiusOvertitles       1 lt} MightBeTrue not {(Error: ExclusionAnnulusProportionInnerRadiusOvertitles >= 1.)        OutputToLog /ErrorFlag //true store} if
	{ExclusionAnnulusProportionInnerRadiusTitlesAboveBelow 0 ge} MightBeTrue not {(Warning: ExclusionAnnulusProportionInnerRadiusTitlesAboveBelow < 0.) OutputToLog} if
	{ExclusionAnnulusProportionInnerRadiusOvertitles       0 ge} MightBeTrue not {(Warning: ExclusionAnnulusProportionInnerRadiusOvertitles < 0.)       OutputToLog} if

	{SideBySideGlassesTastingNotes not} MightBeTrue not
	{
		GlassesOnSheets length GlassesOnTastingNotePages length ne {(Warning: SideBySideGlassesTastingNotes is true, but the lengths of GlassesOnSheets and GlassesOnTastingNotePages differ. This is probably an error.) OutputToLog} if
		Orientation /Landscape ne {(Warning: SideBySideGlassesTastingNotes is true, but Orientation is not /Landscape.) OutputToLog} if
		TastingNotesCirclesBehind {(Warning: SideBySideGlassesTastingNotes and TastingNotesCirclesBehind are both true, which might be inelegant.) OutputToLog} if
	} if  % ... SideBySideGlassesTastingNotes ...

	/TypeOfPagesBeingRendered /Multiple store
	[
		/VoteRecorders load            MightBeTrue {/GlassesClusteredOnVoteRecorders } if
		{DecantingNotesNumCopies 0 gt} MightBeTrue {/GlassesClusteredOnDecantingNotes} if
		{CorkDisplayNumCopies 1 ge}    MightBeTrue {/GlassesClusteredOnCorkDisplay   } if
	]{
		4 dict begin
		/ClusterCheck exch def
		ClusterCheck load xcheck not
		{
			ClusterCheck load type /arraytype eq
			{
				0  1  ClusterCheck load length 1 sub
				{
					/i exch def
					ClusterCheck load i get xcheck not
					{
						ClusterCheck load i get type /arraytype eq
						{
							ClusterCheck /GlassesClusteredOnVoteRecorders eq  ClusterCheck /GlassesClusteredOnDecantingNotes eq  or
							{
								/j 0 ClusterCheck load i get {length add} forall def  % in next for loop j has a different meaning
								j 36 gt
								{
									j 60 gt
										{mark   (Error re ) ClusterCheck ( ) i ( get, which has sum lengths = ) j (, anything >60 being ludicrous. Nonetheless, continuing.) ConcatenateToMark OutputToLog}
										{mark (Warning re ) ClusterCheck ( ) i ( get, which has sum lengths = ) j (, anything >36 being tight. Nonetheless, continuing.)     ConcatenateToMark OutputToLog}
									ifelse  % j 60 gt
								} if  % j 36 gt
							} if  % ... /GlassesClusteredOnVoteRecorders ... /GlassesClusteredOnDecantingNotes ... or
							0  1  ClusterCheck load i get length 1 sub
							{
								/j exch def
								ClusterCheck load i get j get xcheck not
								{
									ClusterCheck load i get j get type /arraytype eq
									{
										0  1  ClusterCheck load i get j get length 1 sub
										{
											/k exch def
											ClusterCheck load i get j get k get xcheck not
											{
												ClusterCheck load i get j get k get type /integertype eq
												{
													ClusterCheck load i get j get k get dup
													dup 0             lt {mark (Error: ) ClusterCheck ( ) i ( get ) j ( get ) k ( get  = ) counttomark 2 add -1 roll ( is negative.)                     ConcatenateToMark OutputToLog /ErrorFlag //true store} {pop} ifelse
													dup Titles length ge {mark (Error: ) ClusterCheck ( ) i ( get ) j ( get ) k ( get  = ) counttomark 2 add -1 roll ( exceeds ) Titles length 1 sub (.) ConcatenateToMark OutputToLog /ErrorFlag //true store} {pop} ifelse
												} {mark (Error: ) ClusterCheck ( ) i ( get ) j ( get ) k ( get  should be an integer, but isn't.) ConcatenateToMark OutputToLog /ErrorFlag //true store} ifelse  % ... type /integertype
											} if  % ClusterCheck load i get j get k get dup xcheck not
										} for  % k
									} {mark (Error: ) ClusterCheck ( ) i ( get ) j ( get  should be an array, but isn't.) ConcatenateToMark OutputToLog /ErrorFlag //true store} ifelse  % ... type /arraytype
								} if  % ClusterCheck load i get j get dup xcheck not
							} for  % j
						} {mark (Error: ) ClusterCheck ( ) i ( get  should be an array, but isn't.) ConcatenateToMark OutputToLog /ErrorFlag //true store} ifelse  % ... type /arraytype
					} if  % ClusterCheck load i get dup xcheck not
				} for  % i
			} {mark (Error: ) ClusterCheck (  should be an array, but isn't.)  ConcatenateToMark OutputToLog /ErrorFlag //true store} ifelse  % ... type /arraytype
		} if  % ClusterCheck load xcheck not
		end
	} bind forall  % GlassesClustered...

	/TypeOfPagesBeingRendered /Multiple store
	ExternalLinks length 3 mod 0 eq
	dup {0 3 ExternalLinks length 1 sub {ExternalLinks exch get type /booleantype ne      {pop //false exit} if} for} if
	dup {1 3 ExternalLinks length 1 sub {ExternalLinks exch get MightBeCompoundString not {pop //false exit} if} for} if
	dup {2 3 ExternalLinks length 1 sub {ExternalLinks exch get type /stringtype  ne      {pop //false exit} if} for} if  not
	{
		(Error: ExternalLinks should be an array of length a multiple of 3, containing: indented-boolean0, Descriptor0, http://URL0,  indented-boolean1, Descriptor1, http://URL1,  .... The URLs must be strings, not compound strings.)
		OutputToLog /ErrorFlag //true store
	} if  % Wrong length or contains non-strings
	ExternalLinks length 0 gt {ExternalLinks 0 GetEU //false ne {mark (Warning: first item of ExternalLinks deemed to be false, even though it is ) ExternalLinks 0 get ConcatenateToMark OutputToLog} if} if

	{BackgroundTextsGlasses PrePourShowBackgroundTexts BackgroundTextsTastingNotes or or} MightBeTrue
	{
		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			BackgroundTextsSquooshMin BackgroundTextsSquooshMax gt
			{
				mark  (Error: ) BackgroundTextsSquooshMin ( = BackgroundTextsSquooshMin > BackgroundTextsSquooshMax = )  BackgroundTextsSquooshMax ConcatenateToMark OutputToLog /ErrorFlag //true store
			} if  % BackgroundTextsSquooshMin BackgroundTextsSquooshMax gt
		} for  % SheetNum
		currentdict /SheetNum undef
	} if  % /BackgroundTextsGlasses ... PrePourShowBackgroundTexts ... BackgroundTextsTastingNotes ... or or

	0  1  NumSheets 1 sub
	{
		/SheetNum exch def   //false //false //false //false PaperType Orientation SetPaperSize   //true DefStoreMgns
		FlightSeparations
		{
			3 dict begin
			0 1 FlightSeparationLines SheetNum GetEU length 1 sub
			{
				/FlightSeparationLineNum exch def
				/fsl FlightSeparationLines SheetNum GetEU FlightSeparationLineNum GetEU def
				0 1 fsl length 1 sub
				{
					/fsl_i exch def
					fsl fsl_i get dup dup  xcheck not
					{
						type /arraytype eq
						{
							{
								dup dup type /integertype eq
								{
									0 lt {mark (Error: FlightSeparationLines ) SheetNum ( get ) FlightSeparationLineNum ( get ) fsl_i ( get  contains a negative integer.) ConcatenateToMark OutputToLog /ErrorFlag //true store} if
									GlassesOnSheets SheetNum GetEU length ge
									{
										mark (Error: FlightSeparationLines ) SheetNum ( get ) FlightSeparationLineNum ( get ) fsl_i ( get  contains an integer exceeding )
										GlassesOnSheets SheetNum GetEU length 1 sub (: too large for the number of glasses on the page.) ConcatenateToMark OutputToLog /ErrorFlag //true store
									} if  % Integer too big
								} {pop pop} ifelse  % /integertype
							} forall
						} {pop} ifelse  % type /arraytype
					} {pop pop} ifelse  % ... xcheck not
				} for  % fsl_i
			} for  % FlightSeparationLineNum
			end
		} if  % FlightSeparations
	} for  % SheetNum

	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def
			/VoteRecorderSubtitleFontSizeProportionTitles load dup IsNumber {0 le} {pop //false} ifelse
			{
				mark (VoteRecorderSubtitleFontSizeProportionTitles=) VoteRecorderSubtitleFontSizeProportionTitles ( with SheetNum=) SheetNum ( WithinPage=) WithinPage ( WithinTitles=) WithinTitles (, but must be strictly positive.)
				ConcatenateToMark OutputToLog  /ErrorFlag //true store
			} if  % ... VoteRecorderSubtitleFontSizeProportionTitles ...
			/DecantingNotesSubtitleFontSizeProportionTitles load dup IsNumber {0 le} {pop //false} ifelse
			{
				mark (DecantingNotesSubtitleFontSizeProportionTitles=) DecantingNotesSubtitleFontSizeProportionTitles ( with SheetNum=) SheetNum ( WithinPage=) WithinPage ( WithinTitles=) WithinTitles (, but must be strictly positive.)
				ConcatenateToMark OutputToLog  /ErrorFlag //true store
			} if  % ... DecantingNotesSubtitleFontSizeProportionTitles ...
		} for  % WithinPage, WithinTitles
	} for  % SheetNum

	ErrorFlag {stop} if   currentdict /ErrorFlag undef

	% End of elementary error-checking


	DeBugLevel 100 le {( Main: some pre-computations) OutputToLog} if

	/CircleNonEmpty [ SheetLengths {array} forall ] def
	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def
			CircleNonEmpty SheetNum get  WithinPage   //false  [ Circlearrays Titles Overtitles Abovetitles Belowtitles ] {WithinTitles get NonEmptyCompoundObject {pop //true exit} if} forall   put
		} for  % WithinPage, WithinTitles
	} bind for  % SheetNum, within which CircleNonEmpty populated

	DeBugLevel 100 le {( Main: calling routines to pack circles) OutputToLog} if
	/PackingDescriptors   NumSheets array def
	/NamePlacementBottomX NumSheets array def
	/NamePlacementTopX    NumSheets array def
	/Radii                NumSheets array def
	/GlassPositions       NumSheets array def

	% WithinPage0 WithinPage1  HalfDistanceBetweenCentresProportionRadius  real
	/HalfDistanceBetweenCentresProportionRadius
	{
		GlassPositions SheetNum get dup
		4 -1 roll get aload pop
		4 2 roll exch get aload pop
		3 -1 roll sub dup mul  3 1 roll sub dup mul  add sqrt
		2 div  Radii SheetNum get div
	} bind def  % /HalfDistanceBetweenCentresProportionRadius

	/CodeCallCirclePacking
	{
		9 dict begin
		/Echo exch def
		/MaxRadius exch def
		//false //false //false //false PaperType Orientation SetPaperSize
		//true DefStoreMgns

		% Call  CirclePacking
		% LeftX BottomY Width Height NumGlasses MaxRadius  CirclePacking  [[x1 y1] ...] Radius NamePlacementTopX NamePlacementBottomX
		MgnL   MgnB   PageWidth MgnL MgnR add sub  PageHeight MgnB MgnT add sub
		SheetLengths SheetNum get   /MaxRadius load  Echo
		CirclePacking
		NamePlacementBottomX SheetNum  3 -1 roll  put
		NamePlacementTopX    SheetNum  3 -1 roll  put
		PackingDescriptors   SheetNum  3 -1 roll  put
		Radii                SheetNum  3 -1 roll  put
		GlassPositions       SheetNum  3 -1 roll  put

		% Check GlassPositions. There shouldn't be errors, but there might be uncaught special cases.
		/GlassPositionsBug //false def
		0  1  SheetLengths SheetNum get 1 sub
		{
			/WithinPage exch def
			GlassPositions SheetNum get WithinPage get aload pop 2 copy
			PageHeight MgnT sub Radii SheetNum get sub //PrinterEpsilon add gt {mark (Error: GlassPositions ) SheetNum ( get ) WithinPage ( get, being above top margin.)     ConcatenateToMark OutputToLog /GlassPositionsBug //true def} if
			PageWidth  MgnR sub Radii SheetNum get sub //PrinterEpsilon add gt {mark (Error: GlassPositions ) SheetNum ( get ) WithinPage ( get, being outside right margin.) ConcatenateToMark OutputToLog /GlassPositionsBug //true def} if
			           MgnB     Radii SheetNum get add //PrinterEpsilon sub lt {mark (Error: GlassPositions ) SheetNum ( get ) WithinPage ( get, being below bottom margin.)  ConcatenateToMark OutputToLog /GlassPositionsBug //true def} if
			           MgnL     Radii SheetNum get add //PrinterEpsilon sub lt {mark (Error: GlassPositions ) SheetNum ( get ) WithinPage ( get, being outside left margin.)  ConcatenateToMark OutputToLog /GlassPositionsBug //true def} if
			0 1 WithinPage 1 sub
			{
				/WP exch def
				GlassPositions SheetNum get dup WithinPage get aload pop 3 -1 roll WP get aload pop  3 -1 roll sub dup mul 3 1 roll sub dup mul add  dup  Radii SheetNum get //PrinterEpsilon sub dup mul  lt
				{
					mark (Error: GlassPositions too close by ) counttomark 2 add -1 roll sqrt Radii SheetNum get sub (pt, on SheetNum = ) SheetNum (WithinPage = ) WP ( and ) WithinPage (, )
					SheetLengths SheetNum get ( glasses as ) PackingDescriptors SheetNum get ( on ) PaperType (.) ConcatenateToMark OutputToLog /GlassPositionsBug //true def
				} {pop} ifelse  % too close
			} for  % WP
		} for  % WithinPage
		GlassPositionsBug {mark (Error in the computation of GlassPositions ) SheetNum ( get. Please send code and log file to the programmer: www.jdawiseman.com/author.html. Execution continuing.) ConcatenateToMark OutputToLog} if
		UndefMgns
		end
	} bind def  % CodeCallCirclePacking

	/TypeOfPagesBeingRendered /Glasses store
	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		/MaxRadius load  {GlassesNumCopies 1 ge} MightBeTrue  CodeCallCirclePacking  % MaxRadius might contain code that refers to SheetNum
	} for  % SheetNum
	currentdict /SheetNum undef

	/ShrinkRadiiSquareArray
	[
		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			[
				0  1  NumSheets 1 sub
				{
					/SN exch def
					SheetNum SN eq {//true}
					{
						ShrinkRadii /ToSmallestSamePageOrdering eq
							{PageOrderingGlasses SheetNum GetEU  PageOrderingGlasses SN GetEU  eq}
							{ShrinkRadii type /arraytype eq {ShrinkRadii SheetNum GetEU ShrinkRadii SN GetEU eq} {ShrinkRadii /ToSmallest eq} ifelse}
						ifelse  % ShrinkRadii /ToSmallestSamePageOrdering eq
					} ifelse  % SheetNum SN eq
					<< /SheetNum SN >> begin {GlassesNumCopies} ValueIfAscertainable end not {1} if 0 gt  {GlassesNumCopies} ValueIfAscertainable not {1} if 0 le  and  {pop //false} if
				} for  % SN
			]
		} bind for  % SheetNum
	] def  % /ShrinkRadiiSquareArray
	/ExtraLogLineNeedsDoing //true def
	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		/RedoCirclePacking //false def
		0  1  NumSheets 1 sub
		{
			/SN exch def
			SheetNum SN ne
			{
				ShrinkRadiiSquareArray SN get SheetNum get
				{
					ExtraLogLineNeedsDoing {() OutputToLog  /ExtraLogLineNeedsDoing //false def} if
					Radii SheetNum get  Radii SN get  gt
					{
						Radii  SheetNum  Radii SN get  put
						/RedoCirclePacking //true def
					} if  % Radii SheetNum get  Radii SN get  gt
				} if  % ShrinkRadiiSquareArray SN get SheetNum get
			} if  % SheetNum SN ne
		} for  % SN
		RedoCirclePacking {Radii SheetNum get //false CodeCallCirclePacking} if
	} bind for  % SheetNum
	currentdict /SN undef
	currentdict /RedoCirclePacking undef
	currentdict /SheetNum undef
	currentdict /ExtraLogLineDone undef
	currentdict /CodeCallCirclePacking undef

	% Thing0 Thing1  TwoArraysEqual  boolean
	/TwoArraysEqual
	{
		2 dict begin  /Thing1 execU exch def  /Thing0 exch execU def
		Thing0 type /arraytype eq dup  Thing1 type /arraytype eq  eq
		{
			{
				Thing0 length Thing1 length eq {true  0 1 Thing0 length 1 sub {dup Thing0 exch GetEU exch Thing1 exch GetEU TwoArraysEqual not {pop //false exit} if} for} {false} ifelse
			} {Thing0 Thing1 eq} ifelse  % both or neither array
		} {pop //false} ifelse
		end
	} bind def  % /TwoArraysEqual

	mark (Radii = ) Radii SizeArrayOutput TrimSpaces ( => diameters ~= )
	() [ Radii {mark exch dup 127 mul 180 div 1 FormatDecimalPlaces exch 36 div 2 FormatDecimalPlaces (mm~=) exch (\") ConcatenateToMark} forall ] SizeArrayOutput TrimSpaces (.) ConcatenateToMark OutputToLog

	/GlassesOnSheetsAndTastingNotePagesEqual GlassesOnSheets GlassesOnTastingNotePages TwoArraysEqual def
	/ByRearrangementArrayString
	{
		11 dict begin  /ShowStringBrackets exch def  /Suffix exch def  /DataArray exch def  /RearrangementArray exch def  /DescriptionString exch def
		/NameNum Names length def
		[  0  1  RearrangementArray length 1 sub
		{
			dup  /SheetNum exch def  /TastingSheetNum exch def
			[
				0  1  RearrangementArray SheetNum GetEU length 1 sub
				{
					/WithinPage exch def
					/WithinTitles RearrangementArray SheetNum GetEU WithinPage GetEU def
					DataArray WithinTitles get ASCIIfy  Suffix Concatenate
				} for  % WithinPage, WithinTitles
			] 0 ShowStringBrackets ThingToDebugText
		} for  ]
		RearrangementArray length 1 le
		{
			DescriptionString ( = \[  )  3 -1 roll aload pop ( \])
		}{
			DescriptionString ( =\n\[)  3 -1 roll {(\n\t) exch} forall   (\n\])
		} ifelse  % RearrangementArray length 1 le
		end
	} bind def  % /ByRearrangementArrayString
	mark  % Matching 'ConcatenateToMark OutputToLog' about 14 lines down
		(GlassesOnSheets = ) GlassesOnSheets 0 {pop exec} //true TwoArraysFunction 0 //true ThingToDebugText
		% To help with multi-page tastings, OutputToLog the Titles by page, and like tasks
		GlassesOnSheets length 0 gt
		{
			(\nTitles, ASCIIfied and re-arranged by GlassesOnSheets)  GlassesOnSheets  Titles  ()  //true  ByRearrangementArrayString
			/GlassesNumCopies load dup 1 eq {pop} {(\nGlassesNumCopies = ) exch 0 //true ThingToDebugText} ifelse
		} if  % GlassesOnSheets length 0 gt
		{VoteRecorders  CorkDisplayNumCopies 0 gt or  DecantingNotesNumCopies 0 gt or  TastingNotePagesNumCopies 0 gt GlassesOnTastingNotePages length 0 gt and or} MightBeTrue
		{
			GlassesOnSheetsAndTastingNotePagesEqual {(\nGlassesOnTastingNotePages = GlassesOnSheets)} {(\nGlassesOnTastingNotePages = ) GlassesOnTastingNotePages 0 {pop exec} //true TwoArraysFunction 0 //true ThingToDebugText} ifelse
			GlassesOnSheetsAndTastingNotePagesEqual not {(\nTitlesTastingNotes, ASCIIfied and re-arranged by GlassesOnTastingNotePages)  GlassesOnTastingNotePages  TitlesTastingNotes  ()  //true  ByRearrangementArrayString} if
			/TastingNotePagesNumCopies load dup 1 eq {pop} {(\nTastingNotePagesNumCopies = ) exch 0 //true ThingToDebugText} ifelse
		} if  % {... TastingNotePagesNumCopies 0 gt ...} MightBeTrue
	ConcatenateToMark OutputToLog  % Matching 'mark' about 14 lines up

	DeBugLevel 100 le {( Main: computing RadiiCirclearrayBaseline, CirclearraysFontSizes, RadiiCirclearrayInside, CirclearraysN) OutputToLog} if
	/CirclearraysFontSizes [ SheetLengths {array} forall ] def
	/CirclearraysN [ SheetLengths {array} forall ] def
	/CirclearraysUnroundedN [ SheetLengths {array} forall ] def
	/CircletextsMinCopiesIndividually [ SheetLengths {array} forall ] def
	/RadiiCirclearrayBaseline NumSheets array def
	/RadiiCirclearrayInside NumSheets array def
	/RadiiCirclearrayInsideUsableTAB NumSheets array def
	/RadiiCirclearrayInsideUsableO NumSheets array def
	/CircletextMaxFontSizes [ NumSheets {//Infinity} repeat ] def
	/CirclearraysB [ SheetLengths {array} forall ] def
	/CirclearraysT [ SheetLengths {array} forall ] def
	/CirclearraysDescenderMin [ NumSheets {0} repeat ] def
	/CircletextsTweakSizeScores null def
	18 dict begin
	/CirclearraysW [ SheetLengths {array} forall ] def
	/CirclearraysPaddedW [ SheetLengths {array} forall ] def
	/CirclearraysBMin [ NumSheets {0} repeat ] def

	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def
			CircletextsMinCopiesIndividually SheetNum get WithinPage CircletextsMinCopies put
			CircletextFont 1000 selectfont
			0  Circlearrays WithinTitles get {StringWidthRecursive add} forall 1000 div  % if an item of the array is a user path then joining the paths would fail
			dup CirclearraysW SheetNum get exch WithinPage exch put
			( ) stringwidth pop  CircletextsMinNumSpacesBetween mul  Circlearrays WithinTitles get length mul  1000 div
			add  CirclearraysPaddedW SheetNum get exch WithinPage exch put

			CircletextFont 1000 selectfont   CirclearraysT SheetNum get WithinPage //InfinityNeg put   CirclearraysB SheetNum get WithinPage //Infinity put
			Circlearrays WithinTitles get
			{
				GSave NullDevice newpath 0 0 moveto  //true CharPathRecursive PathBBox GRestore
				1000 div  CirclearraysT SheetNum get WithinPage 3 copy get gt {3 -1 roll put} {pop pop pop} ifelse pop
				1000 div  CirclearraysB SheetNum get WithinPage 3 copy get lt {3 -1 roll put} {pop pop pop} ifelse pop
			} forall  % Circlearrays WithinTitles get
			CirclearraysB SheetNum get WithinPage get  CirclearraysBMin SheetNum 3 copy get lt {3 -1 roll put} {pop pop pop} ifelse
		} for  % WithinPage, WithinTitles
	} bind for  % SheetNum

	% -  CirclearraysNScore  Score
	% Score = Avg of CirclearraysN * CirclearraysW * CirclearraysFontSizes^2 / (Radii*TwoPi)  ~=  average area of painted Circlearrays / (Radius*TwoPi)
	% We maximise this 'area', or ink usage. So if shrinking the font size adds enough to N to increase ink, it is done.
	% Consider extreme case. Reducing font size by 30% will reduce area per instance by 51%. Going from 1.999 copies to 2 would almost offset that.
	% But the multiplication by 1/0.7 won't get it above 2.85 instances, so the _maximum_ reduction in font size is less than 30%. Hence optimisation will always terminate.
	/CirclearraysNScore
	{
		6 dict begin

		% Minima and maxima over all sheets with radii compelled to match
		0 1 NumSheets 1 sub {/SN0 exch def  0 1 NumSheets 1 sub {/SN1 exch def ShrinkRadiiSquareArray SN0 get SN1 get {
			CirclearraysBMin dup SN0 get exch SN1 3 copy get lt {3 -1 roll put} {pop pop pop} ifelse
		} if} for} for
		0  1  NumSheets 1 sub  % Font sizes. If CircletextsSameFontSizeIfRadiiShrunkToBeSame then answer final; otherwise preliminary.
		{
			/SheetNum exch def
			CircletextsSameFontSizeIfRadiiShrunkToBeSame
			{
				//Infinity
				0  1  SheetLengths SheetNum get 1 sub
				{
					4 dict begin   WithinPage-WithinTitles-def
					/CircletextsBasicFS CircletextMaxFontSizeProportionRadius Radii SheetNum get mul  CircletextMaxFontSizeAbsolute  2 copy gt {exch} if pop def
					% NumCopies * WidthUnitFont * FontSize = TwoPi * (CirclearraysBMin * FontSize + Radius)
					% <==>  NumCopies = TwoPi * (CirclearraysBMin + Radius/FontSize) / WidthUnitFont
					% <==>  FontSize  =  TwoPi * Radius / (NumCopies * WidthUnitFont - TwoPi * CirclearraysBMin)
					/CircletextsBasicNC CircletextsBasicFS 0 gt {Radii SheetNum get CircletextsBasicFS div CirclearraysBMin SheetNum get add //TwoPi mul //PrinterEpsilon sub
					CirclearraysPaddedW SheetNum get WithinPage get dup 0 gt {div} {pop pop //Infinity} ifelse} {//Infinity} ifelse def
					CircletextsBasicNC  CircletextsMinCopiesIndividually SheetNum get WithinPage get floor  lt
					{
						//TwoPi Radii SheetNum get mul  CircletextsMinCopiesIndividually SheetNum get WithinPage get floor CirclearraysPaddedW SheetNum get WithinPage get mul CirclearraysBMin SheetNum get //TwoPi mul sub  div
					}{
						CircletextMaxFontSizeMayBeSlightlyExceeded   CirclearraysPaddedW SheetNum get WithinPage get 0 gt  and
						{
							//TwoPi Radii SheetNum get mul  CircletextsBasicNC floor CirclearraysPaddedW SheetNum get WithinPage get mul CirclearraysBMin SheetNum get //TwoPi mul sub  div
						} {CircletextsBasicFS} ifelse  % CircletextMaxFontSizeMayBeSlightlyExceeded ...
					} ifelse  % CircletextsBasicNC ... lt
					CircletextsBasicFS //SqrtSqrt2 mul  2 {2 copy gt {exch} if pop} repeat   end  % Embedded constant: 'Slightly' is a factor of not more than the fourth root of two.
				} for  % WithinPage, WithinTitles
				CircletextMaxFontSizes exch SheetNum exch put
				0  1  SheetNum 1 sub  % Non-standard upper limit
				{
					/SN1 exch def
					ShrinkRadiiSquareArray SheetNum get SN1 get {CircletextMaxFontSizes SN1 get  CircletextMaxFontSizes SheetNum  3 copy get lt {3 -1 roll put} {pop pop pop} ifelse} if
				} for  % SN1
				RadiiCirclearrayBaseline  SheetNum  CircletextMaxFontSizes SheetNum get CirclearraysBMin SheetNum get mul  Radii SheetNum get  add  put
				0  1  SheetLengths SheetNum get 1 sub {CirclearraysFontSizes SheetNum get exch CircletextMaxFontSizes SheetNum get put} for
				0  1  NumSheets 1 sub
				{
					/SN1 exch def
					ShrinkRadiiSquareArray SheetNum get SN1 get {CircletextMaxFontSizes SheetNum get  CircletextMaxFontSizes SN1  3 copy get lt
					{
						3 -1 roll put
						RadiiCirclearrayBaseline  SN1  CircletextMaxFontSizes SN1 get CirclearraysBMin SN1 get mul  Radii SN1 get  add  put
						0  1  SheetLengths SN1 get 1 sub {CirclearraysFontSizes SN1 get exch CircletextMaxFontSizes SN1 get put} for
					} {pop pop pop} ifelse} if  % ShrinkRadiiSquareArray ...
				} for  % SN1
			}{
				0  1  SheetLengths SheetNum get 1 sub
				{
					WithinPage-WithinTitles-def
					CirclearraysPaddedW SheetNum get WithinPage get CircletextsMinCopiesIndividually SheetNum get WithinPage get mul //TwoPi div  CirclearraysB SheetNum get WithinPage get sub
					dup 0 gt
					{
						Radii SheetNum get exch div
						CircletextMaxFontSizeProportionRadius Radii SheetNum get mul  CircletextMaxFontSizeAbsolute  2 {2 copy gt {exch} if pop} repeat
						dup CircletextMaxFontSizes SheetNum  3 copy get gt {3 -1 roll put} {pop pop pop} ifelse
						dup CirclearraysB SheetNum get WithinPage get mul  CirclearraysDescenderMin SheetNum  3 copy get lt {3 -1 roll put} {pop pop pop} ifelse
					} {pop //PrinterEpsilon} ifelse  % ... 0 gt
					CirclearraysFontSizes SheetNum get exch WithinPage exch put
				} for  % WithinPage, WithinTitles
			} ifelse  % CircletextsSameFontSizeIfRadiiShrunkToBeSame
		} for  % SheetNum

		{CircletextsSameFontSizeIfRadiiShrunkToBeSame not} MightBeTrue
		{
			0 1 NumSheets 1 sub {/SN0 exch def  0 1 NumSheets 1 sub {/SN1 exch def ShrinkRadiiSquareArray SN0 get SN1 get {
				CirclearraysDescenderMin dup SN0 get exch SN1 3 copy get lt {3 -1 roll put} {pop pop pop} ifelse
			} if} for} for
		} if  % ... CircletextsSameFontSizeIfRadiiShrunkToBeSame not ...

		% CircletextsSameFontSizeIfRadiiShrunkToBeSame not => Common inner radii, different font sizes. So use deepest descender.
		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			CircletextsSameFontSizeIfRadiiShrunkToBeSame not
			{
				RadiiCirclearrayBaseline  SheetNum  Radii SheetNum get CirclearraysDescenderMin SheetNum get add  put
				0  1  SheetLengths SheetNum get 1 sub
				{
					WithinPage-WithinTitles-def
					CirclearraysPaddedW SheetNum get WithinPage get CircletextsMinCopiesIndividually SheetNum get WithinPage get mul  dup 0 gt
					{
						RadiiCirclearrayBaseline SheetNum get //TwoPi mul exch div
						CircletextMaxFontSizeProportionRadius Radii SheetNum get mul  CircletextMaxFontSizeAbsolute  2 {2 copy gt {exch} if pop} repeat
					} {pop //PrinterEpsilon} ifelse
					CirclearraysFontSizes SheetNum get exch WithinPage exch put
				} for  % WithinPage, WithinTitles
			} if  % CircletextsSameFontSizeIfRadiiShrunkToBeSame not
		} for  % SheetNum

		% RadiiCirclearrayInside, RadiiCirclearrayInsideUsableTAB, RadiiCirclearrayInsideUsableO
		RadiiCirclearrayInside 0 RadiiCirclearrayBaseline putinterval
		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			0  1  SheetLengths SheetNum get 1 sub
			{
				/WithinPage exch def
				RadiiCirclearrayBaseline SheetNum get  CirclearraysT SheetNum get WithinPage get  CirclearraysFontSizes SheetNum get WithinPage get  mul sub
				RadiiCirclearrayInside SheetNum 3 copy get lt {3 -1 roll put} {pop pop pop} ifelse
			} for  % WithinPage
			RadiiCirclearrayInsideUsableTAB SheetNum  RadiiCirclearrayInside SheetNum get 1 ExclusionAnnulusProportionInnerRadiusTitlesAboveBelow sub mul  put
			RadiiCirclearrayInsideUsableO   SheetNum  RadiiCirclearrayInside SheetNum get 1 ExclusionAnnulusProportionInnerRadiusOvertitles       sub mul  put
			0  1  SheetNum 1 sub  % Non-standard upper limit
			{
				/SN1 exch def
				ShrinkRadiiSquareArray SheetNum get SN1 get
				{
					RadiiCirclearrayBaseline SN1      get  RadiiCirclearrayBaseline SheetNum  3 copy get lt {3 -1 roll put} {pop pop pop} ifelse
					RadiiCirclearrayBaseline SheetNum get  RadiiCirclearrayBaseline SN1       3 copy get lt {3 -1 roll put} {pop pop pop} ifelse
					RadiiCirclearrayInside   SN1      get  RadiiCirclearrayInside   SheetNum  3 copy get lt {3 -1 roll put} {pop pop pop} ifelse
					RadiiCirclearrayInside   SheetNum get  RadiiCirclearrayInside   SN1       3 copy get lt {3 -1 roll put} {pop pop pop} ifelse
				} if  % ShrinkRadiiSquareArray ...
			} for  % SN1
		} for  % SheetNum

		% CirclearraysUnroundedN
		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			0  1  SheetLengths SheetNum get 1 sub
			{
				WithinPage-WithinTitles-def
				CirclearraysPaddedW SheetNum get WithinPage get  CirclearraysFontSizes SheetNum get WithinPage get  mul
				dup 0 gt
				{
					RadiiCirclearrayBaseline SheetNum get //TwoPi mul //PrinterEpsilon add exch div   /n exch def
					n CircletextsMinCopies lt {mark (Error: CirclearraysUnroundedN ) SheetNum ( get ) WithinPage ( get = ) n ( less than CircletextsMinCopies=) CircletextsMinCopies  ConcatenateToMark OutputToLog} if
				}  {pop /n 0 def} ifelse  % ... 0 gt
				CirclearraysUnroundedN SheetNum get  WithinPage  n  put
			} for  % WithinPage, WithinTitles
		} for  % SheetNum

		% CirclearraysN, and Score
		0
		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			0  1  SheetLengths SheetNum get 1 sub
			{
				/WithinPage exch def
				CirclearraysN SheetNum get WithinPage  CirclearraysUnroundedN SheetNum get WithinPage get  floor cvi
				CircletextsMaxCopies floor cvi  2 copy gt {exch} if pop  % Capped
				dup 4 1 roll  put
				CirclearraysW SheetNum get WithinPage get  mul  CirclearraysFontSizes SheetNum get WithinPage get dup mul  mul  Radii SheetNum get div add
			} for  % WithinPage
		} for  % SheetNum
		//TwoPi div  0 SheetLengths {add} forall dup 0 le {pop 1} if  div
		end
	} bind def  % /CirclearraysNScore

	CirclearraysNScore /CirclearraysBestScore exch def
	/CirclearraysUnroundedNBest [ CirclearraysUnroundedN {[ exch {} forall ]} forall ] def
	CircletextsTweakSize {/CircletextsTweakSizeScores mark (CircletextMaxFontSizeAbsolute = ) /CircletextMaxFontSizeAbsolute load (; CircletextMaxFontSizeProportionRadius = ) /CircletextMaxFontSizeProportionRadius load
	(; CircletextMaxFontSizeMayBeSlightlyExceeded = ) CircletextMaxFontSizeMayBeSlightlyExceeded (.\nCircletextsTweakSizeScores: Score=) CirclearraysBestScore ( and FontSizes=) ConcatenateToMark CirclearraysFontSizes SizeArrayOutput store} if
	64  CircletextsTweakSize {-1} {1} ifelse  0
	{
		/CirclearraysAnyImprovement //false def
		/CirclearraysProtoBestFontSize 0 def
		/CirclearraysProtoBestScore null def
		/CirclearraysProtoBestSheetNum null def
		/CirclearraysProtoBestWithinPage null def
		/CirclearraysProtoBestMinCopies null def
		0 eq {(Warning: CirclearraysNScore not converging. Please send PostScript file to author, www.jdawiseman.com/author.html. Execution continuing.) OutputToLog} if
		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			0  1  SheetLengths SheetNum get 1 sub
			{
				WithinPage-WithinTitles-def
				/CircletextsOriginal CircletextsMinCopiesIndividually SheetNum get WithinPage get  def
				CirclearraysUnroundedNBest SheetNum get WithinPage get floor cvi 1 add dup  CircletextsMaxCopies cvi  le
				{
					CircletextsMinCopiesIndividually SheetNum get exch WithinPage exch put
					/CirclearraysNewScore CirclearraysNScore def
					CirclearraysNewScore CirclearraysBestScore gt
					CirclearraysFontSizes SheetNum get WithinPage get  CirclearraysProtoBestFontSize  gt and  % Doing smallest possible steps prevents jumping past best score
					{
						/CirclearraysAnyImprovement //true def
						/CirclearraysProtoBestFontSize CirclearraysFontSizes SheetNum get WithinPage get store
						/CirclearraysProtoBestScore CirclearraysNewScore store
						/CirclearraysProtoBestSheetNum SheetNum store
						/CirclearraysProtoBestWithinPage WithinPage store
						/CirclearraysProtoBestMinCopies CircletextsMinCopiesIndividually SheetNum get WithinPage get store
					} if  % CirclearraysNewScore CirclearraysBestScore gt  CirclearraysFontSizes ...  CirclearraysProtoBestFontSize gt and
					CircletextsMinCopiesIndividually SheetNum get WithinPage CircletextsOriginal put
				} {pop} ifelse  % ... CircletextsMaxCopies ... lt
			} for  % WithinPage, WithinTitles
		} for  % SheetNum

		CirclearraysAnyImprovement
		{
			/CircletextsTweakSizeScores mark CircletextsTweakSizeScores (; Score=) CirclearraysProtoBestScore ( \() CirclearraysProtoBestSheetNum (,) CirclearraysProtoBestWithinPage (,)
			GlassesOnSheets CirclearraysProtoBestSheetNum GetEU CirclearraysProtoBestWithinPage GetEU (,) Titles 2 index get ASCIIfy (: )
			CirclearraysUnroundedNBest CirclearraysProtoBestSheetNum get CirclearraysProtoBestWithinPage get ( to ) CirclearraysProtoBestMinCopies
			( so +) 1 index 4 index div ln 100 mul (\% and FontSize=) CirclearraysProtoBestFontSize (\)) ConcatenateToMark store
			/CirclearraysBestScore CirclearraysProtoBestScore store
			CircletextsMinCopiesIndividually CirclearraysProtoBestSheetNum get CirclearraysProtoBestWithinPage CirclearraysProtoBestMinCopies put
			CirclearraysNScore pop   0 1 NumSheets 1 sub {dup CirclearraysUnroundedN exch get exch CirclearraysUnroundedNBest exch get copy pop} for
		} {CirclearraysNScore pop exit} ifelse  % CirclearraysAnyImprovement
	} bind for  % Effectively forever

	end
	{GlassesNumCopies 1 ge PrePourNumCopies 1 ge or NumSheets 1 ge and} MightBeTrue  {GlassesOnTastingNotePages length 1 ge TastingNotePagesNumCopies 1 ge TastingNotesCirclesBehind and and} MightBeTrue  or
	{
		mark  CircletextsTweakSize {CircletextsTweakSizeScores (\n)} if
		(CirclearraysFontSizes = ) CirclearraysFontSizes SizeArrayOutput TrimSpaces (.  CirclearraysFontSizes/Radii = ) CirclearraysFontSizes Radii {TwoArraysFunctionDiv} //false TwoArraysFunction SizeArrayOutput TrimSpaces
		(.\nCirclearraysUnroundedN = ) CirclearraysUnroundedN SizeArrayOutput TrimSpaces (.\nCirclearraysN = ) CirclearraysN SizeArrayOutput TrimSpaces (.) ConcatenateToMark OutputToLog
		mark (RadiiCirclearrayBaseline = ) RadiiCirclearrayBaseline SizeArrayOutput TrimSpaces (. RadiiCirclearrayInside = ) RadiiCirclearrayInside SizeArrayOutput TrimSpaces (.) ConcatenateToMark OutputToLog
	} if  % ... GlassesNumCopies 1 ge PrePourNumCopies 1 ge or NumSheets 1 ge and ...
	/MinCircletextMaxFontSizes //Infinity       CircletextMaxFontSizes {2 copy gt {exch} if pop} forall def
	/MaxCircletextMaxFontSizes //PrinterEpsilon CircletextMaxFontSizes {2 copy lt {exch} if pop} forall def

	5 dict begin  % Output the ...Equivalences arrays
	/EquivalencesEquivalencesToTest
	[
		Titles      NonEmptyCompoundObject {/FontSizesTitlesEquivalences      dup load AnyMatches not {pop} if} if
		Abovetitles NonEmptyCompoundObject {/FontSizesAbovetitlesEquivalences dup load AnyMatches not {pop} if} if
		Belowtitles NonEmptyCompoundObject {/FontSizesBelowtitlesEquivalences dup load AnyMatches not {pop} if} if
		Overtitles  NonEmptyCompoundObject {/FontSizesOvertitlesEquivalences  dup load AnyMatches not {pop} if} if
	] def  % /EquivalencesEquivalencesToTest
	/EquivalencesEquivalences [ 0 1 EquivalencesEquivalencesToTest length 1 sub {} for ] def
	1  1  EquivalencesEquivalencesToTest length 1 sub
	{
		/i exch def
		0  1  i 1 sub
		{
			/j exch def
			[i j] {EquivalencesEquivalencesToTest exch get load} forall  eq {EquivalencesEquivalences dup i exch j get put exit} if
		} for  % j
	} bind for  % i
	% Different meanings of i and j
	0  1  EquivalencesEquivalencesToTest length 1 sub
	{
		/i exch def
		/Count  0  EquivalencesEquivalences {i eq {1 add} if} forall  def
		Count 0 gt
		{
			mark
			0  1  EquivalencesEquivalencesToTest length 1 sub
			{
				/j exch def
				i  EquivalencesEquivalences j get  eq
				{
					EquivalencesEquivalencesToTest j get 64 string cvs  (, )
					Count 1 le {exit} if   /Count Count 1 sub def
				} if  % i  EquivalencesEquivalences j get  eq
			} for
			(ASCIIfied and re-arranged by GlassesOnSheets)  GlassesOnSheets  EquivalencesEquivalencesToTest j get load  ()  //false  ByRearrangementArrayString ConcatenateToMark OutputToLog
		} if  % Count 0 gt
	} bind for  % i
	end

	/TypeOfPagesBeingRendered /Glasses store
	/NamesFontSize {NamesFontSizeMax NamesFontSizeMin MaxCircletextMaxFontSizes  2 copy lt {exch} if pop 2 copy gt {exch} if pop} bind def
	/NamesFontSizeIndividuallyT [ Names length {NamesFontSize} repeat ] def  % If NamesShowTop
	/NamesFontSizeIndividuallyB [ Names length {NamesFontSize} repeat ] def  % If NamesShowBottom
	19 dict begin
	0  1  Names length 1 sub
	{
		/NameNum exch def
		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			//false //false //false //false PaperType Orientation SetPaperSize
			//true DefStoreMgns
			NamesFont 1 selectfont  % Inside SheetNum loop as, if only page type is /Glasses, NamesFont could depend on SheetNum.
			GSave nulldevice 1000 dup scale 0 0 moveto Names NameNum get //false CharPathRecursive PathBBox GRestore  3 -1 roll sub /NameH exch def exch sub /NameW exch def
			NameH 0 gt
			{
				[ NamesShowTop SheetNum GetEU {//true} if  NamesShowBottom SheetNum GetEU {//false} if  ]
				{
					/Top exch def
					/NameY Top {PageHeight MgnT sub} {MgnB} ifelse def
					/NameX Top {NamePlacementTopX} {NamePlacementBottomX} ifelse SheetNum get def
					0  1  SheetLengths SheetNum get 1 sub
					{
						/WithinPage exch def
						CircleNonEmpty SheetNum get WithinPage get
						{
							GlassPositions SheetNum get WithinPage get aload pop /CircleY exch def /CircleX exch def
							/c0 CircleX NameX sub dup mul CircleY NameY sub dup mul add Radii SheetNum get dup mul sub def
							/c2 NameH dup mul NameW dup mul 4 div add def
							/c1  NameY CircleY sub 2 mul NameH mul Top {neg} if  NameX CircleX sub NameW mul  3 copy  3 copy
							-1  1  1
							{
								mul add def  % c1
								[ c0 c1 c2 ]  0  //false  Top {NamesFontSizeIndividuallyT} {NamesFontSizeIndividuallyB} ifelse NameNum get  //false  //PrinterEpsilon  PolynomialRoots
								dup length 1 ge {Min Top {NamesFontSizeIndividuallyT} {NamesFontSizeIndividuallyB} ifelse exch NameNum exch put} {pop} ifelse
							} for  % right, middle, left of name
						} if  % CircleNonEmpty ...
					} for  % WithinPage
				} forall  % name at top|bottom
			} if  % NameH 0 gt
		} for  % SheetNum
	} bind for  % NameNum
	end


	DeBugLevel 100 le {( Main: computing TitleProportionFontSize...) OutputToLog} if
	/TitlesAnyGrey //false def
	/TitleProportionFontSizeT /TitleProportionFontSizeB /TitleOffsetsProportionFontSizeVertical
	/TitleProportionFontSizeL /TitleProportionFontSizeR /TitleOffsetsProportionFontSizeHorizontal
	6 {NumSheets array def} repeat
	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		//false //false //false //false PaperType Orientation SetPaperSize
		//true DefStoreMgns
		TitleProportionFontSizeT TitleProportionFontSizeB TitleOffsetsProportionFontSizeVertical
		TitleProportionFontSizeL TitleProportionFontSizeR TitleOffsetsProportionFontSizeHorizontal
		6 {SheetNum  SheetLengths SheetNum get array  put} repeat

		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def
			ColourSchemeTitles /MidGrey eq {/TitlesAnyGrey //true store} if
			GSave   NullDevice  newpath
			TitlesFont 16384 selectfont  0 0 moveto  Titles WithinTitles get  //true  CharPathRecursive
			PathBBox  GRestore
			16384 div  VerticalMiddlingIncludeBaselineTitles {dup 0 lt {pop 0} if} if   TitleProportionFontSizeT SheetNum get  WithinPage  3 -1 roll  put
			16384 div                                                                   TitleProportionFontSizeR SheetNum get  WithinPage  3 -1 roll  put
			16384 div  VerticalMiddlingIncludeBaselineTitles {dup 0 gt {pop 0} if} if   TitleProportionFontSizeB SheetNum get  WithinPage  3 -1 roll  put
			16384 div                                                                   TitleProportionFontSizeL SheetNum get  WithinPage  3 -1 roll  put
			TitleOffsetsProportionFontSizeHorizontal SheetNum get   WithinPage
			TitleProportionFontSizeR SheetNum get WithinPage get
			TitleProportionFontSizeL SheetNum get WithinPage get  add 2 div neg   put
		} for  % WithinPage, WithinTitles
		currentdict /WithinTitles undef
		currentdict /WithinPage undef
	} bind for  % SheetNum
	UndefMgns
	currentdict /SheetNum undef

	DeBugLevel 100 le {( Main: computing TitleOffsetsProportionFontSizeVertical) OutputToLog} if
	/TitlesFont load XcheckRecursive not
	/VerticalMiddlingStringTitles load XcheckRecursive not
	/VerticalMiddlingIncludeBaselineTitles load XcheckRecursive not  and and
	{
		TitlesFont 16384 selectfont
		GSave   NullDevice  0 0 moveto
		VerticalMiddlingStringTitles  //true  CharPathRecursive  PathBBox
		16384 div  VerticalMiddlingIncludeBaselineTitles {dup 0 lt {pop 0} if}  if /VMSTT exch def  pop
		16384 div  VerticalMiddlingIncludeBaselineTitles {dup 0 gt {pop 0} if}  if /VMSTB exch def  pop
		GRestore
	} {/VMSTT /Null def /VMSTB /Null def} ifelse  % ... XcheckRecursive not ...
	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		//false //false //false //false PaperType Orientation SetPaperSize
		//true DefStoreMgns
		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def
			/MinBottoms TitleProportionFontSizeB SheetNum get WithinPage get  def
			/MaxTops    TitleProportionFontSizeT SheetNum get WithinPage get  def
			% /MatchNone /MatchRow /MatchPage /MatchAll /MatchString
			1 {
				/VMT VerticalMiddlingTitles def   Titles WithinTitles get  VerticalMiddlingTitlesAlwaysMatchNone {1 index TwoArraysEqual {/VMT /MatchNone def exit} if} forall pop
				VMT /MatchRow eq  VMT /MatchPage eq  VMT /MatchAll eq  or or
				{
					VMT /MatchAll eq {0  1  NumSheets 1 sub} {SheetNum 1 SheetNum} ifelse
					{
						/SheetNumComparator exch def
						0  1  GlassesOnSheets SheetNumComparator GetEU length 1 sub
						{
							/WithinPageComparator exch def
							VMT /MatchRow eq
							{
								GlassPositions SheetNum get WithinPage get 1 get
								GlassPositions SheetNumComparator get WithinPageComparator get 1 get
								sub abs  RadiiCirclearrayInsideUsableTAB SheetNum get 12 div  le  % embedded constant, and a bit messy as not quite an equivalence relation. Shouldn't matter though.
							} {//true} ifelse
							{
								TitleProportionFontSizeB SheetNumComparator get WithinPageComparator get dup  MinBottoms  lt {/MinBottoms exch def} {pop} ifelse
								TitleProportionFontSizeT SheetNumComparator get WithinPageComparator get dup  MaxTops     gt {/MaxTops    exch def} {pop} ifelse
							} if  % vertical postion within a twelth of a radius
						} for  % WithinPageComparator
					} for  % SheetNumComparator
					exit
				} if  % /MatchRow, or /MatchPage, or /MatchAll
				VMT /MatchString eq
				{
					VMSTT /Null eq  VMSTB /Null eq  or
					{
						TitlesFont 16384 selectfont
						GSave   NullDevice  0 0 moveto
						/VerticalMiddlingStringTitles load  //true  CharPathRecursive  PathBBox
						16384 div  VerticalMiddlingIncludeBaselineTitles {dup 0 lt {pop 0} if} if   /MaxTops    exch def  pop
						16384 div  VerticalMiddlingIncludeBaselineTitles {dup 0 gt {pop 0} if} if   /MinBottoms exch def  pop
						GRestore
					}{
						/MaxTops VMSTT def
						/MinBottoms VMSTB def
					} ifelse  % /VMSTT /Null eq ...
					exit
				} if  % /MatchString
			} repeat  % 1
			TitleOffsetsProportionFontSizeVertical SheetNum get  WithinPage  MinBottoms MaxTops add 2 div neg  put
		} for  % WithinPage, WithinTitles
		currentdict /WithinTitles undef
		currentdict /WithinPage undef
	} bind for  % SheetNum
	UndefMgns
	currentdict /SheetNum undef

	DeBugLevel 100 le {( Main: computing TitleFontSizes) OutputToLog} if
	/TypeOfPagesBeingRendered /Glasses store
	/TitleFontSizes NumSheets array def
	/TitleMaxHeightProportionInnerRadiusRelevantNum 0 def
	/TitleMaxHeightProportionInnerRadiusRelevantSheetNumWithinPage  0 SheetLengths {add} forall 2 mul  array  def
	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		//false //false //false //false PaperType Orientation SetPaperSize
		//true DefStoreMgns
		TitleFontSizes  SheetNum  SheetLengths SheetNum get array  put

		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def
			TitleFontSizes SheetNum get  WithinPage
			PageHeight 5 mul  % Initial upper estimate, to be shrunk

			/TitlesTBsub  TitleProportionFontSizeT SheetNum get WithinPage get  TitleProportionFontSizeB SheetNum get WithinPage get  sub  def
			TitlesTBsub 0 gt
			{
				Abovetitles WithinTitles get NonEmptyCompoundObject
				{
					1 TitleMinHeightForAbovetitleProportionInnerRadius sub RadiiCirclearrayInsideUsableTAB SheetNum get mul
					TitleProportionFontSizeT SheetNum get WithinPage get  TitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get  add
					dup 0 gt {div  2 copy  gt {exch} if pop} {pop pop} ifelse
				} if  % Belowtitles WithinTitles get NonEmptyCompoundObject
				Belowtitles WithinTitles get NonEmptyCompoundObject
				{
					TitleMinHeightForBelowtitleProportionInnerRadius 1 sub RadiiCirclearrayInsideUsableTAB SheetNum get mul  % negative
					TitleProportionFontSizeB SheetNum get WithinPage get  TitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get  add
					dup 0 lt {div  2 copy  gt {exch} if pop} {pop pop} ifelse
				} if  % Belowtitles WithinTitles get NonEmptyCompoundObject
			} if  % TitlesTBsub 0 gt
			/TitlesRLsub
				TitleProportionFontSizeR SheetNum get WithinPage get
				TitleProportionFontSizeL SheetNum get WithinPage get
			sub def  % /TitlesRLsub
			TitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get  16384 mul neg
			TitleOffsetsProportionFontSizeVertical   SheetNum get WithinPage get  16384 mul neg
			GSave  NullDevice  newpath
			TitlesFont 16384 selectfont  0 0 moveto  Titles WithinTitles get  //true  CharPathRecursive
			0  0.12  PathBRadiusSquared  % sub-1pt tolerance probably much tighter than needed, but underestimation of radius could be bad.
			GRestore
			dup 0 gt
			{
				sqrt  RadiiCirclearrayInsideUsableTAB SheetNum get exch div 16384 mul
				2 copy  gt {exch} if pop
			} {pop} ifelse  % ... PathBRadiusSquared ... 0 gt
			TitlesTBsub 0 gt
			{
				TitleMaxHeightProportionInnerRadius RadiiCirclearrayInsideUsableTAB SheetNum get mul TitlesTBsub div  2 copy gt
				{
					exch
					TitleMaxHeightProportionInnerRadiusRelevantSheetNumWithinPage TitleMaxHeightProportionInnerRadiusRelevantNum 2 mul 2 copy  1 add WithinPage put  SheetNum put
					/TitleMaxHeightProportionInnerRadiusRelevantNum dup load 1 add store
				} if pop
			} if  % TitlesTBsub 0 gt
			put  % TitleFontSizes SheetNum get  WithinPage  ...  put
		} for  % WithinPage, WithinTitles
		currentdict /TitlesRLsub undef
		currentdict /TitlesTBsub undef
		currentdict /WithinTitles undef
		currentdict /WithinPage undef
	} bind for  % SheetNum
	UndefMgns
	currentdict /SheetNum undef

	% ArraysStrings ArraysToAlter ArrayMatches SheetMatches FontSizesRatioMin NotSmallerIfTitlesNotLonger Equivalences  FewerDifferentFontSizes  -
	/FewerDifferentFontSizes
	{
		DeBugLevel 50 le {(+FewerDifferentFontSizes) OutputToLog} if
		20 dict begin
		/Equivalences exch def  /NotSmallerIfTitlesNotLonger exch def  /FontSizesRatioMin exch def  /SheetMatches exch def  /ArrayMatches exch def  /ArraysToAlter exch def  /ArraysStrings exch def

		{
			/NoChanges //true def
			0  1  NumSheets 1 sub
			{
				/SheetNum exch def
				0  1  NumSheets 1 sub
				{
					/SheetNum0 exch def
					SheetMatches SheetNum get  SheetMatches SheetNum0 get  eq
					{
						0  1  SheetLengths SheetNum get 1 sub
						{
							WithinPage-WithinTitles-def
							0  1  GlassesOnSheets SheetNum0 GetEU length 1 sub
							{
								/WithinPage0 exch def
								SheetNum SheetNum0 ne  WithinPage WithinPage0 ne  or
								{
									/WithinTitles0 << /SheetNum SheetNum0  /WithinPage WithinPage0 >> begin GlassesOnSheets SheetNum GetEU WithinPage GetEU end def
									NotSmallerIfTitlesNotLonger
									{
										Titles WithinTitles get LengthCompoundObject
										<< /SheetNum SheetNum0  /WithinPage WithinPage0  /WithinTitles WithinTitles0 >> begin Titles WithinTitles get LengthCompoundObject end  ge
										{
											ArraysToAlter {dup SheetNum0 get WithinPage0 get  exch SheetNum get  WithinPage   3 copy get lt {/NoChanges //false def  3 -1 roll put} {pop pop pop} ifelse} forall
										} if  % Titles WithinTitles get LengthCompoundObject  ...0 ...  ge
									} if  % NotSmallerIfTitlesNotLonger
									0  1  ArraysToAlter length 1 sub
									{
										/NumArrayToAlter exch def
										Equivalences NumArrayToAlter get WithinTitles GetEU  << /WithinTitles WithinTitles0 >> begin Equivalences NumArrayToAlter get WithinTitles GetEU end  eq
										{
											ArraysToAlter NumArrayToAlter get  dup dup dup
											SheetNum0 get WithinPage0 get  exch SheetNum  get  WithinPage    3 copy get lt {/NoChanges //false def  3 -1 roll put} {pop pop pop} ifelse
											SheetNum  get WithinPage  get  exch SheetNum0 get  WithinPage0   3 copy get lt {/NoChanges //false def  3 -1 roll put} {pop pop pop} ifelse
										} if  % Equivalences ... eq
									} for  % NumArrayToAlter
								} if  % Not same
							} for  % WithinPage0
						} for  % WithinTitles, WithinPage
					} if  % SheetMatches ... SheetMatches ... eq
				} for  % SheetNum0
			} for  % SheetNum
			NoChanges {exit} if
		} loop  % until NoChanges

		/FontSizesSetsDone [ GlassesOnSheets length {[ ArraysToAlter length {//false} repeat ]} repeat ] def
		0  1  NumSheets 1 sub
		{
			/SheetNum0 exch def
			0  1  ArraysToAlter length 1 sub
			{
				/NumArrayToAlter0 exch def
				FontSizesSetsDone SheetNum0 get NumArrayToAlter0 get not
				{
					/SortedCircles
					[
					SheetNum0  1  NumSheets 1 sub
					{
						/SheetNum exch def
						SheetMatches SheetNum0 get  SheetMatches SheetNum get  eq
						{
							SheetNum0 SheetNum eq {NumArrayToAlter0} {0} ifelse  1  ArraysToAlter length 1 sub
							{
								/NumArrayToAlter exch def
								ArrayMatches NumArrayToAlter0 get  ArrayMatches NumArrayToAlter get  eq
								{
									0  1  SheetLengths SheetNum get 1 sub
									{
										WithinPage-WithinTitles-def
										ArraysStrings NumArrayToAlter get WithinTitles get NonEmptyCompoundObject
										{
											[ ArraysToAlter NumArrayToAlter get  SheetNum  WithinPage  2 index SheetNum get WithinPage get ]
										}{
											ArraysToAlter NumArrayToAlter get SheetNum get  WithinPage  //PrinterEpsilon  put
										} ifelse  % ... NonEmptyCompoundObject
									} for  % WithinPage, WithinTitles
									FontSizesSetsDone SheetNum get NumArrayToAlter get {(Error: element of FontSizesSetsDone done twice. Continuing.) OutputToLog} if
									FontSizesSetsDone SheetNum get  NumArrayToAlter  //true  put
								} if  % ... NumArrayToAlter0 ... NumArrayToAlter ... eq
							} for  % NumArrayToAlter
						} if  % ... SheetNum0 ... SheetNum ... eq
					} for  % SheetNum
					]  dup {3 get exch 3 get ge} ShellSort  def  % /SortedCircles
					% SortedCircles {4 array dup 3 -1 roll 2 copy 1 3 getinterval 1 exch putinterval 0 get dup TitleFontSizes eq {pop (TitleFontSizes)} {dup AbovetitleFontSizes eq {pop (Above...)}
					% {dup BelowtitleFontSizes eq {pop (Below...)} {OvertitleFontSizes eq {(Over...)} {(Other)} ifelse} ifelse} ifelse} ifelse 0 exch put ==} forall
					/i -1 def  0  1  SortedCircles length 1 sub {/i exch def  SortedCircles i get 3 get  //PrinterEpsilon 2 mul  gt {exit} if} for
					{
						i SortedCircles length 1 sub ge {exit} if
						i 1 add  1  SortedCircles length 1 sub
						{
							/j exch def
							SortedCircles j get 3 get SortedCircles i get 3 get 2 copy eq {pop pop //false} {FontSizesRatioMin mul lt} ifelse
							{
								SortedCircles j get  3  SortedCircles i get 3 get  put
								SortedCircles j get 0 get  SortedCircles j get 1 get  get  SortedCircles j get 2 get  SortedCircles i get 3 get  put
							} {exit} ifelse
						} for  % j
						/i j def
					} loop  % i
				} if  % FontSizesSetsDone SheetNum0 get NumArrayToAlter0 get not
			} for  % NumArrayToAlter0
		} for  % SheetNum0
		end
		DeBugLevel 50 le {(-FewerDifferentFontSizes) OutputToLog} if
	} bind def  % /FewerDifferentFontSizes

	/SoloTitleFontSizes [ TitleFontSizes {[ exch aload pop ]} forall ] def
	[Titles]  [TitleFontSizes]  [0]  FontSizesSetsGlassesPages  /FontSizesRatioTitlesMin load  /FontSizesTitlesNotSmallerIfTitlesNotLonger load  [FontSizesTitlesEquivalences]  FewerDifferentFontSizes
	mark  (Binding constraints on TitleFontSizes as SheetNum,WithinPage,WithinTitles,Title: )
	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def
			SoloTitleFontSizes SheetNum get WithinPage get  TitleFontSizes SheetNum get WithinPage get  le {SheetNum (,) WithinPage 1 index WithinTitles 1 index Titles WithinTitles get (; )} if
		} for  % WithinPage, WithinTitles
	} bind for  % SheetNum
	dup length 2 eq {pop (.)} if ConcatenateToMark OutputToLog  currentdict /SoloTitleFontSizes undef

	DeBugLevel 100 le {( Main: computing [Above|Below|Over]titleProportionFontSize...) OutputToLog} if
	/TypeOfPagesBeingRendered /Glasses store
	/AbovetitleProportionFontSizeT /AbovetitleProportionFontSizeB
	/AbovetitleProportionFontSizeL /AbovetitleProportionFontSizeR /AbovetitleOffsetsProportionFontSizeHorizontal
	/BelowtitleProportionFontSizeT /BelowtitleProportionFontSizeB
	/BelowtitleProportionFontSizeL /BelowtitleProportionFontSizeR /BelowtitleOffsetsProportionFontSizeHorizontal
	/OvertitleProportionFontSizeT /OvertitleProportionFontSizeB
	/OvertitleProportionFontSizeL /OvertitleProportionFontSizeR /OvertitleOffsetsProportionFontSizeHorizontal
	15 {NumSheets array def} repeat
	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		//false //false //false //false PaperType Orientation SetPaperSize
		//true DefStoreMgns
		AbovetitleProportionFontSizeT AbovetitleProportionFontSizeB
		AbovetitleProportionFontSizeL AbovetitleProportionFontSizeR AbovetitleOffsetsProportionFontSizeHorizontal
		BelowtitleProportionFontSizeT BelowtitleProportionFontSizeB
		BelowtitleProportionFontSizeL BelowtitleProportionFontSizeR BelowtitleOffsetsProportionFontSizeHorizontal
		OvertitleProportionFontSizeT OvertitleProportionFontSizeB
		OvertitleProportionFontSizeL OvertitleProportionFontSizeR OvertitleOffsetsProportionFontSizeHorizontal
		15 {SheetNum  SheetLengths SheetNum get array  put} repeat

		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def
			GSave NullDevice
			AbovetitlesFont 16384 selectfont  0 0 moveto  Abovetitles WithinTitles get  //true  CharPathRecursive
			PathBBox   4 {16384 div 4 1 roll} repeat
			GRestore
			AbovetitleProportionFontSizeT SheetNum get  WithinPage  3 -1 roll  put
			AbovetitleProportionFontSizeR SheetNum get WithinPage  3 -1 roll  put
			AbovetitleProportionFontSizeB SheetNum get  WithinPage  3 -1 roll  put
			AbovetitleProportionFontSizeL SheetNum get WithinPage  3 -1 roll  put

			AbovetitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage
			AbovetitleProportionFontSizeL SheetNum get WithinPage get
			AbovetitleProportionFontSizeR SheetNum get WithinPage get
			add 2 div neg put

			GSave NullDevice
			BelowtitlesFont 16384 selectfont  0 0 moveto  Belowtitles WithinTitles get  //true  CharPathRecursive
			PathBBox   4 {16384 div 4 1 roll} repeat
			GRestore
			BelowtitleProportionFontSizeT SheetNum get  WithinPage  3 -1 roll  put
			BelowtitleProportionFontSizeR SheetNum get WithinPage  3 -1 roll  put
			BelowtitleProportionFontSizeB SheetNum get  WithinPage  3 -1 roll  put
			BelowtitleProportionFontSizeL SheetNum get WithinPage  3 -1 roll  put

			BelowtitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage
			BelowtitleProportionFontSizeL SheetNum get WithinPage get
			BelowtitleProportionFontSizeR SheetNum get WithinPage get
			add 2 div neg put

			GSave NullDevice
			OvertitlesFont 16384 selectfont  0 0 moveto  Overtitles WithinTitles get  //true  CharPathRecursive
			PathBBox   4 {16384 div 4 1 roll} repeat
			GRestore
			VerticalMiddlingIncludeBaselineOvertitles {dup 0 lt {pop 0} if} if
			OvertitleProportionFontSizeT SheetNum get  WithinPage  3 -1 roll  put
			OvertitleProportionFontSizeR SheetNum get WithinPage  3 -1 roll  put
			VerticalMiddlingIncludeBaselineOvertitles {dup 0 gt {pop 0} if} if
			OvertitleProportionFontSizeB SheetNum get  WithinPage  3 -1 roll  put
			OvertitleProportionFontSizeL SheetNum get WithinPage  3 -1 roll  put

			OvertitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage
			OvertitleProportionFontSizeL SheetNum get WithinPage get
			OvertitleProportionFontSizeR SheetNum get WithinPage get
			add 2 div neg put
		} for  % WithinPage, WithinTitles
		currentdict /WithinPage undef
		currentdict /WithinTitles undef
	} bind for  % SheetNum
	UndefMgns
	currentdict /SheetNum undef

	% For Titles and Overtitles, can compute offset first, and then size.
	% Abovetitles (and Belowtitles) are more complicated. First compute the bottom (top) of bounding box, storing that, pre tem, in ...titleOffsetsAbsoluteVertical.
	% From that compute size using PathMaxScalingFitCircle. Apply contraints. Then adjust ...titleOffsetsAbsoluteVertical to point to baseline.
	DeBugLevel 100 le {( Main: computing [Above|Below|Over]titleFontSizes, OvertitleOffsetsProportionFontSizeVertical, [Above|Below]titleOffsetsAbsoluteVertical) OutputToLog} if
	/TypeOfPagesBeingRendered /Glasses store
	/AbovetitleFontSizes [ 0  1  NumSheets 1 sub {/SheetNum exch def  [ SheetLengths SheetNum get {//PrinterEpsilon} repeat ]} for ] def
	/BelowtitleFontSizes [ 0  1  NumSheets 1 sub {/SheetNum exch def  [ SheetLengths SheetNum get {//PrinterEpsilon} repeat ]} for ] def
	/OvertitleFontSizes  [ 0  1  NumSheets 1 sub {/SheetNum exch def  [ SheetLengths SheetNum get {//PrinterEpsilon} repeat ]} for ] def
	/OvertitleOffsetsProportionFontSizeVertical [ 0  1  NumSheets 1 sub  {/SheetNum exch def  SheetLengths SheetNum get array} for ] def
	/AbovetitleOffsetsAbsoluteVertical [ 0  1  NumSheets 1 sub  {/SheetNum exch def  SheetLengths SheetNum get array} for ] def
	/BelowtitleOffsetsAbsoluteVertical [ 0  1  NumSheets 1 sub  {/SheetNum exch def  SheetLengths SheetNum get array} for ] def
	currentdict /SheetNum undef
	/FirstError //true def
	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		//false //false //false //false PaperType Orientation SetPaperSize
		//true DefStoreMgns
		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def

			% Over
			/VMO VerticalMiddlingOvertitles def   Titles WithinTitles get ASCIIfy  VerticalMiddlingOvertitlesAlwaysMatchNone {1 index TwoArraysEqual {/VMO /MatchNone def exit} if} forall pop
			/VMO load /MatchString eq
			/OvertitlesFont load XcheckRecursive not
			/VerticalMiddlingStringOvertitles load XcheckRecursive not
			/VerticalMiddlingIncludeBaselineOvertitles load XcheckRecursive not  and and and
			{
				OvertitlesFont 16384 selectfont
				GSave   NullDevice  0 0 moveto
				VerticalMiddlingStringOvertitles  //true  CharPathRecursive  PathBBox
				GRestore
				16384 div  VerticalMiddlingIncludeBaselineOvertitles {dup 0 lt {pop 0} if}  if /VMSST exch def  pop
				16384 div  VerticalMiddlingIncludeBaselineOvertitles {dup 0 gt {pop 0} if}  if /VMSSB exch def  pop
			} {/VMSST /Null def /VMSSB /Null def} ifelse  % ... XcheckRecursive not ...
			% Calculate offset so as to know the location of the centre of the circle, then compute the size, then call SizeConstraints.
			/MinBottoms OvertitleProportionFontSizeB SheetNum get WithinPage get  def
			/MaxTops    OvertitleProportionFontSizeT SheetNum get WithinPage get  def
			% /MatchNone /MatchRow /MatchPage /MatchAll /MatchString
			1 {
			VMO /MatchRow eq  VMO /MatchPage eq  VMO /MatchAll eq  or or
			{
				VMO /MatchAll eq {0  1  NumSheets 1 sub} {SheetNum 1 SheetNum} ifelse
					{
						/SheetNumComparator exch def
						0  1  GlassesOnSheets SheetNumComparator GetEU length 1 sub
						{
							/WithinPageComparator exch def
							VMO /MatchRow eq
							{
								GlassPositions SheetNum get WithinPage get 1 get
								GlassPositions SheetNumComparator get WithinPageComparator get 1 get
								sub abs  RadiiCirclearrayInsideUsableO SheetNum get  12 div  le  % embedded constant, and a bit messy as not quite an equivalence relation. Shouldn't matter though.
							} {//true} ifelse
							{
								OvertitleProportionFontSizeB SheetNum get WithinPageComparator get dup  MinBottoms  lt {/MinBottoms exch def} {pop} ifelse
								OvertitleProportionFontSizeT SheetNum get WithinPageComparator get dup  MaxTops     gt {/MaxTops    exch def} {pop} ifelse
							} if  % vertical postion within a twelth of a radius
						} for  % WithinPageComparator
					} for  % SheetNumComparator
					exit
				} if  % /MatchRow, or /MatchPage, or /MatchAll
				VMO /MatchString eq
				{
					VMSST /Null eq  VMSSB /Null eq  or
					{
						OvertitlesFont 16384 selectfont
						GSave   NullDevice  0 0 moveto
						/VerticalMiddlingStringOvertitles load  //true  CharPathRecursive  PathBBox
						GRestore
						16384 div  VerticalMiddlingIncludeBaselineTitles {dup 0 lt {pop 0} if} if   /MaxTops    exch def  pop
						16384 div  VerticalMiddlingIncludeBaselineTitles {dup 0 gt {pop 0} if} if   /MinBottoms exch def  pop
						exit
					}{
						/MaxTops VMSST def
						/MinBottoms VMSSB def
					} ifelse  % /VMSST /Null eq ...
					exit
				} if  % /MatchAll
			} repeat  % 1

			OvertitleOffsetsProportionFontSizeVertical SheetNum get  WithinPage  MinBottoms MaxTops add 2 div neg  put

			% This holds part of the computation of [Above|Below]titleOffsetsAbsoluteVertical. The remainder follows the computation of [Above|Below]titleFontSizes.

			/AbovetitlesTBsub  AbovetitleProportionFontSizeT SheetNum get WithinPage get  AbovetitleProportionFontSizeB SheetNum get WithinPage get  sub  def
			/AbovetitlesRLsub
			AbovetitleProportionFontSizeR SheetNum get WithinPage get
			AbovetitleProportionFontSizeL SheetNum get WithinPage get
			sub  def  % /AbovetitlesRLsub
			/BelowtitlesTBsub  BelowtitleProportionFontSizeT SheetNum get WithinPage get  BelowtitleProportionFontSizeB SheetNum get WithinPage get  sub  def
			/BelowtitlesRLsub
			BelowtitleProportionFontSizeR SheetNum get WithinPage get
			BelowtitleProportionFontSizeL SheetNum get WithinPage get
			sub  def  % /BelowtitlesRLsub
			/OvertitlesTBsub  OvertitleProportionFontSizeT SheetNum get WithinPage get  OvertitleProportionFontSizeB SheetNum get WithinPage get  sub  def
			/OvertitlesRLsub
			OvertitleProportionFontSizeR SheetNum get WithinPage get
			OvertitleProportionFontSizeL SheetNum get WithinPage get
			sub  def  % /OvertitlesRLsub

			0.0625  dup RadiiCirclearrayInside SheetNum get mul exch  TitleFontSizes SheetNum get WithinPage get  TitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get  4 copy
			TitleProportionFontSizeT SheetNum get WithinPage get  add  mul  exch 1 exch sub mul add      AbovetitleOffsetsAbsoluteVertical SheetNum get exch WithinPage exch put
			TitleProportionFontSizeB SheetNum get WithinPage get  add  mul  exch 1 exch sub mul sub neg  BelowtitleOffsetsAbsoluteVertical SheetNum get exch WithinPage exch put

			% CentreX CentreY MinMaxRadiusSquared Tolerance   PathBRadiusSquared   MaxRadiusSquared
			OvertitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get  16384 mul neg
			OvertitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get  16384 mul neg
			GSave  NullDevice  newpath
			OvertitlesFont 16384 selectfont  0 0 moveto  Overtitles WithinTitles get  //true  CharPathRecursive
			0  0.12  PathBRadiusSquared  % sub-1pt tolerance probably much tighter than needed, but underestimation of radius could be bad.
			GRestore
			dup 0 gt {sqrt RadiiCirclearrayInsideUsableO SheetNum get exch div 16384 mul} {pop //Infinity} ifelse
			TitleFontSizes SheetNum get WithinPage get dup //PrinterEpsilon le {pop} {OvertitleMaxFontSizeProportionTitles mul 2 copy gt {exch} if pop} ifelse
			OvertitleFontSizes SheetNum get exch WithinPage exch put

			GSave  NullDevice  newpath
			AbovetitlesFont 16384 selectfont
			GlassPositions SheetNum get WithinPage get aload pop  % circle centre
			2 copy  AbovetitleOffsetsAbsoluteVertical SheetNum get WithinPage get  add  % Expansion centre
			2 copy  exch
			AbovetitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get
			16384 mul add  exch  AbovetitleProportionFontSizeB SheetNum get WithinPage get  16384 mul  sub
			moveto  Abovetitles WithinTitles get  //true  CharPathRecursive
			4 2 roll  RadiiCirclearrayInsideUsableTAB SheetNum get   PathMaxScalingFitCircle   16384 mul
			GRestore
			TitleFontSizes SheetNum get WithinPage get dup //PrinterEpsilon le {pop} {AbovetitleMaxFontSizeProportionTitles mul 2 copy gt {exch} if pop} ifelse
			AbovetitleFontSizes SheetNum get exch WithinPage exch put

			GSave  NullDevice  newpath
			BelowtitlesFont 16384 selectfont
			GlassPositions SheetNum get WithinPage get aload pop  % circle centre
			2 copy  BelowtitleOffsetsAbsoluteVertical SheetNum get WithinPage get  add  % Expansion centre
			2 copy  exch
			BelowtitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get
			16384 mul add  exch  BelowtitleProportionFontSizeT SheetNum get WithinPage get  16384 mul  sub
			moveto  Belowtitles WithinTitles get  //true  CharPathRecursive
			4 2 roll  RadiiCirclearrayInsideUsableTAB SheetNum get   PathMaxScalingFitCircle   16384 mul
			GRestore
			TitleFontSizes SheetNum get WithinPage get dup //PrinterEpsilon le {pop} {BelowtitleMaxFontSizeProportionTitles mul 2 copy gt {exch} if pop} ifelse
			BelowtitleFontSizes SheetNum get exch WithinPage exch put

			/a AbovetitleFontSizes SheetNum get WithinPage get //PrinterEpsilon le {Abovetitles WithinTitles get NonEmptyCompoundObject} {//false} ifelse def
			/b BelowtitleFontSizes SheetNum get WithinPage get //PrinterEpsilon le {Belowtitles WithinTitles get NonEmptyCompoundObject} {//false} ifelse def
			a b or
			{
				mark FirstError {(\n)} if   (Error. With SheetNum=) SheetNum (, WithinPage=) WithinPage (, WithinTitles=) WithinTitles (, title=) Titles WithinTitles get ASCIIfy (: )
				/FirstError //false def
				a {(insufficient room for Abovetitles, which is weird. Please send PostScript to author, www.jdawiseman.com/author.html) (; )} if
				b {(insufficient room for Belowtitles, which is weird. Please send PostScript to author, www.jdawiseman.com/author.html) (; )} if
				pop (.) ConcatenateToMark OutputToLog
			} if  % a b or

		} for  % WithinPage, WithinTitles
		currentdict /WithinTitles undef
		currentdict /WithinPage undef
	} bind for  % SheetNum
	FirstError not {(\n) OutputToLog} if
	UndefMgns  [ /FirstError /a /b ] {currentdict exch undef} forall

	[Abovetitles Belowtitles Overtitles]  [AbovetitleFontSizes BelowtitleFontSizes OvertitleFontSizes]  FontSizesSetsAboveBelowOver  FontSizesSetsGlassesPages  /FontSizesRatioAboveBelowOverMin load
	/FontSizesAboveBelowOverNotSmallerIfTitlesNotLonger load  [FontSizesAbovetitlesEquivalences FontSizesBelowtitlesEquivalences FontSizesOvertitlesEquivalences] FewerDifferentFontSizes

	% Above here BelowtitleOffsetsAbsoluteVertical is the offset to the top of the Belowtitles
	% (and AbovetitleOffsetsAbsoluteVertical to the bottom). Now adjust to point to baseline.
	DeBugLevel 100 le {( Main: further computation of BelowtitleOffsetsAbsoluteVertical and AbovetitleOffsetsAbsoluteVertical) OutputToLog} if
	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		//false //false //false //false PaperType Orientation SetPaperSize
		//true DefStoreMgns
		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def
			% AbovetitleOffsetsAbsoluteVertical needs adjusting, to point to baseline rather than bottom
			AbovetitleOffsetsAbsoluteVertical SheetNum get  WithinPage
			2 copy get
			dup IsNumber
			{
				AbovetitleProportionFontSizeB SheetNum get WithinPage get  AbovetitleFontSizes SheetNum get WithinPage get  mul dup 0 gt {pop 0} if
				sub  put
			}{
				pop pop pop
				Abovetitles WithinTitles get NonEmptyCompoundObject
					{mark  (Error: non-numeric AbovetitleOffsetsAbsoluteVertical ) SheetNum ( get )  WithinPage ( get) ConcatenateToMark OutputToLog}
				if  % Abovetitles WithinTitles get NonEmptyCompoundObject
			} ifelse  % AbovetitleOffsetsAbsoluteVertical ... IsNumber

			% BelowtitleOffsetsAbsoluteVertical needs adjusting, to point to baseline rather than top
			BelowtitleOffsetsAbsoluteVertical SheetNum get  WithinPage
			2 copy get
			dup IsNumber
			{
				BelowtitleProportionFontSizeT SheetNum get WithinPage get  BelowtitleFontSizes SheetNum get WithinPage get  mul dup 0 lt {pop 0} if
				sub  put
			}{
				pop pop pop
				Belowtitles WithinTitles get NonEmptyCompoundObject
					{mark  (Error: non-numeric BelowtitleOffsetsAbsoluteVertical ) SheetNum ( get ) WithinPage ( get) ConcatenateToMark OutputToLog}
				if  % Abovetitles WithinTitles get NonEmptyCompoundObject
			} ifelse  % BelowtitleOffsetsAbsoluteVertical ... IsNumber
		} for  % WithinPage, WithinTitles
		currentdict /WithinTitles undef
		currentdict /WithinPage undef
	} bind for  % SheetNum
	UndefMgns
	currentdict /SheetNum undef

	/TypeOfPagesBeingRendered /Glasses store
	% Font size information
	mark ()
	{GlassesNumCopies 1 ge} MightBeTrue
	{
		Titles NonEmptyCompoundObject
		{
			(TitleFontSizes = ) TitleFontSizes 1 {TwoArraysFunctionDiv} //false TwoArraysFunction SizeArrayOutput TrimSpaces (.) (\n)
			/TitleFontSizesUnique [ TitleFontSizes { {counttomark 1 sub -1 1 {index 1 index sub abs //PrinterEpsilon le {pop exit} if} for} forall} forall ] dup {le} ShellSort def  % Unique font sizes
			TitleFontSizesUnique length 1 gt
			{
				(TitleFontSizes, equality classes: )
					[ TitleFontSizes { [ exch {0 1 TitleFontSizesUnique length 1 sub {2 copy TitleFontSizesUnique exch get sub abs //PrinterEpsilon le {exch pop exit} {pop} ifelse} for} forall ] } forall ]
				TrimSpaces (.) (\n)
			} if  % At least two different values in TitleFontSizes
			TitleMaxHeightProportionInnerRadiusRelevantNum 0 gt
			{
				(TitleMaxHeightProportionInnerRadius directly relevant for these WithinTitles and Titles: )
				0  2  TitleMaxHeightProportionInnerRadiusRelevantNum 2 mul 1 sub
				{
					TitleMaxHeightProportionInnerRadiusRelevantSheetNumWithinPage exch 2 copy  get /SheetNum exch def  1 add get  WithinPage-WithinTitles-def
					WithinTitles ( = ) Titles WithinTitles get ASCIIfy dup length 0 eq {pop pop} if  (; )
				} for
				pop (.) (\n)
			} if  % TitleMaxHeightProportionInnerRadiusRelevantNum 0 gt
			(Title heights / RadiiCirclearrayInsideUsableTAB = )
			TitleProportionFontSizeT TitleProportionFontSizeB {sub} //false TwoArraysFunction   TitleFontSizes {mul} //false TwoArraysFunction   RadiiCirclearrayInsideUsableTAB {TwoArraysFunctionDiv} //false TwoArraysFunction
			SizeArrayOutput TrimSpaces (.) (\n)
		} if  % Titles NonEmptyCompoundObject
		Abovetitles NonEmptyCompoundObject {(AbovetitleFontSizes = ) AbovetitleFontSizes 1 {TwoArraysFunctionDiv} //false TwoArraysFunction SizeArrayOutput TrimSpaces (.) (\n)} if
		Belowtitles NonEmptyCompoundObject {(BelowtitleFontSizes = ) BelowtitleFontSizes 1 {TwoArraysFunctionDiv} //false TwoArraysFunction SizeArrayOutput TrimSpaces (.) (\n)} if
		Overtitles NonEmptyCompoundObject {(OvertitleFontSizes = ) OvertitleFontSizes 1 {TwoArraysFunctionDiv} //false TwoArraysFunction SizeArrayOutput TrimSpaces (.) (\n)} if
	} if  % ... GlassesNumCopies 1 ge ...
	{GlassesNumCopies 1 ge  DecanterLabelsNumCopies 1 ge  PrePourNumCopies 1 ge  StickyLabelsNumCopies 1 ge  or or or} MightBeTrue
	{
		Abovetitles NonEmptyCompoundObject {(AbovetitleFontSizes/TitleFontSizes = ) AbovetitleFontSizes TitleFontSizes {TwoArraysFunctionDiv} //false TwoArraysFunction SizeArrayOutput TrimSpaces (.) (\n)} if
		Belowtitles NonEmptyCompoundObject {(BelowtitleFontSizes/TitleFontSizes = ) BelowtitleFontSizes TitleFontSizes {TwoArraysFunctionDiv} //false TwoArraysFunction SizeArrayOutput TrimSpaces (.) (\n)} if
		Overtitles NonEmptyCompoundObject {(OvertitleFontSizes/TitleFontSizes = ) OvertitleFontSizes TitleFontSizes {TwoArraysFunctionDiv} //false TwoArraysFunction SizeArrayOutput TrimSpaces (.) (\n)} if
	} if  % ... GlassesNumCopies 1 ge ... StickyLabelsNumCopies 1 ge ...
	pop ConcatenateToMark OutputToLog

	/TitleFontSizesMaxByPage [ TitleFontSizes {0 exch {2 copy lt {exch} if pop} forall} forall ] def
	/AbovetitleFontSizesMaxByPage [ AbovetitleFontSizes {0 exch {2 copy lt {exch} if pop} forall} forall ] def
	/BelowtitleFontSizesMaxByPage [ BelowtitleFontSizes {0 exch {2 copy lt {exch} if pop} forall} forall ] def
	/OvertitleFontSizesMaxByPage [ OvertitleFontSizes {0 exch {2 copy lt {exch} if pop} forall} forall ] def

	/TitleAboveBelowOverL [ SheetLengths {[ exch {0} repeat ]} forall ] def
	/TitleAboveBelowOverR [ SheetLengths {[ exch {0} repeat ]} forall ] def
	/TitleAboveBelowOverB [ SheetLengths {[ exch {0} repeat ]} forall ] def
	/TitleAboveBelowOverT [ SheetLengths {[ exch {0} repeat ]} forall ] def
	DeBugLevel 100 le {( Main: Computation of TitleAboveBelowOverL, ...R, ...B, ...T.) OutputToLog} if
	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def

			TitleAboveBelowOverB SheetNum get  WithinPage  2 copy get
			Titles WithinTitles get NonEmptyCompoundObject
			{
				TitleProportionFontSizeB SheetNum get WithinPage get  TitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get  add   TitleFontSizes SheetNum get WithinPage get  mul  2 copy gt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			Abovetitles WithinTitles get NonEmptyCompoundObject
			{
				AbovetitleProportionFontSizeB SheetNum get WithinPage get  AbovetitleFontSizes SheetNum get WithinPage get  mul  AbovetitleOffsetsAbsoluteVertical SheetNum get WithinPage get  add  2 copy gt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			Belowtitles WithinTitles get NonEmptyCompoundObject
			{
				BelowtitleProportionFontSizeB SheetNum get WithinPage get  BelowtitleFontSizes SheetNum get WithinPage get  mul  BelowtitleOffsetsAbsoluteVertical SheetNum get WithinPage get  add  2 copy gt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			Overtitles WithinTitles get NonEmptyCompoundObject
			{
				OvertitleProportionFontSizeB SheetNum get WithinPage get  OvertitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get  add  OvertitleFontSizes SheetNum get WithinPage get  mul  2 copy gt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			put  % TitleAboveBelowOverB ...

			TitleAboveBelowOverT SheetNum get  WithinPage  2 copy get
			Titles WithinTitles get NonEmptyCompoundObject
			{
				TitleProportionFontSizeT SheetNum get WithinPage get  TitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get  add  TitleFontSizes SheetNum get WithinPage get  mul  2 copy lt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			Abovetitles WithinTitles get NonEmptyCompoundObject
			{
				AbovetitleProportionFontSizeT SheetNum get WithinPage get  AbovetitleFontSizes SheetNum get WithinPage get  mul  AbovetitleOffsetsAbsoluteVertical SheetNum get WithinPage get  add  2 copy lt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			Belowtitles WithinTitles get NonEmptyCompoundObject
			{
				BelowtitleProportionFontSizeT SheetNum get WithinPage get  BelowtitleFontSizes SheetNum get WithinPage get  mul  BelowtitleOffsetsAbsoluteVertical SheetNum get WithinPage get  add  2 copy lt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			Overtitles WithinTitles get NonEmptyCompoundObject
			{
				OvertitleProportionFontSizeT SheetNum get WithinPage get  OvertitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get  add  OvertitleFontSizes SheetNum get WithinPage get  mul  2 copy lt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			put  % TitleAboveBelowOverT ...

			TitleAboveBelowOverL SheetNum get  WithinPage  2 copy get
			Titles WithinTitles get NonEmptyCompoundObject
			{
				TitleProportionFontSizeL SheetNum get WithinPage get  TitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get add  TitleFontSizes SheetNum get WithinPage get  mul  2 copy gt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			Abovetitles WithinTitles get NonEmptyCompoundObject
			{
				AbovetitleProportionFontSizeL SheetNum get WithinPage get  AbovetitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get add  AbovetitleFontSizes SheetNum get WithinPage get  mul   2 copy gt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			Belowtitles WithinTitles get NonEmptyCompoundObject
			{
				BelowtitleProportionFontSizeL SheetNum get WithinPage get  BelowtitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get add  BelowtitleFontSizes SheetNum get WithinPage get  mul  2 copy gt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			Overtitles WithinTitles get NonEmptyCompoundObject
			{
				OvertitleProportionFontSizeL SheetNum get WithinPage get  OvertitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get add  OvertitleFontSizes SheetNum get WithinPage get  mul  2 copy gt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			put  % TitleAboveBelowOverL ...

			TitleAboveBelowOverR SheetNum get  WithinPage  2 copy get
			Titles WithinTitles get NonEmptyCompoundObject
			{
				TitleProportionFontSizeR SheetNum get WithinPage get  TitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get add  TitleFontSizes SheetNum get WithinPage get  mul  2 copy lt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			Abovetitles WithinTitles get NonEmptyCompoundObject
			{
				AbovetitleProportionFontSizeR SheetNum get WithinPage get  AbovetitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get add  AbovetitleFontSizes SheetNum get WithinPage get  mul  2 copy lt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			Belowtitles WithinTitles get NonEmptyCompoundObject
			{
				BelowtitleProportionFontSizeR SheetNum get WithinPage get  BelowtitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get add  BelowtitleFontSizes SheetNum get WithinPage get  mul  2 copy lt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			Overtitles WithinTitles get NonEmptyCompoundObject
			{
				OvertitleProportionFontSizeR SheetNum get WithinPage get  OvertitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get add  OvertitleFontSizes SheetNum get WithinPage get  mul  2 copy lt {exch} if pop
			} if  % ... NonEmptyCompoundObject
			put  % TitleAboveBelowOverR ...
		} for  % WithinPage, WithinTitles
		currentdict /WithinTitles undef
		currentdict /WithinPage undef
	} bind for  % SheetNum
	currentdict /SheetNum undef
	currentdict /NameNum undef
	currentdict /ThisName undef

	{PrePourNumCopies 1 ge} MightBeTrue
	{
		DeBugLevel 100 le {( Main: PrePourScalingFactors) OutputToLog} if
		/TypeOfPagesBeingRendered /PrePour store
		/PrePourScalingFactors [ NumSheets {//Infinity} repeat ] def
		12 dict begin
		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			0  1  SheetLengths SheetNum get 1 sub
			{
				WithinPage-WithinTitles-def
				{PrePourNumCopies 1 ge} MightBeTrue
				{
					//false //false //false //false PrePourPaperType PrePourOrientation SetPaperSize
					//true DefStoreMgns
					/AD CirclearraysT SheetNum get WithinPage get CirclearraysB SheetNum get WithinPage get sub CirclearraysFontSizes SheetNum get WithinPage get mul def
					PageHeight MgnB MgnT add sub 2 div AD sub  dup   PageWidth  MgnL MgnR add sub 2 div AD sub  dup
					[ TitleAboveBelowOverL TitleAboveBelowOverR TitleAboveBelowOverB TitleAboveBelowOverT ] {SheetNum get WithinPage get abs 0.48 add div  4 1 roll} forall  % Half maximum linewidth of /MidGrey edging
					3 {2 copy gt {exch} if pop} repeat   PrePourScalingFactors SheetNum 3 copy get lt {3 -1 roll put} {pop pop pop} ifelse
				} if  % ... PrePourNumCopies 1 ge ...
			} for  % WithinPage, WithinTitles
		} bind for  % SheetNum
		0 1 NumSheets 1 sub {/SN0 exch def  0 1 NumSheets 1 sub {/SN1 exch def ShrinkRadiiSquareArray SN0 get SN1 get {
			PrePourScalingFactors dup SN0 get exch SN1 3 copy get lt {3 -1 roll put} {pop pop pop} ifelse
		} if} for} bind for
		end
	} if  % ... PrePourNumCopies 1 ge ...

	{PlaceNames} MightBeTrue {/PlaceNamesFontSizes [ NamesPlaceNames {execU length array} forall ] def} if

	% WithinTitles  FindWithinGlassesOnSheets  SheetNum WithinPage true | false
	/FindWithinGlassesOnSheets
	{
		6 dict begin
		/param exch def
		/AnsFound //false def
		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			0  1  SheetLengths SheetNum get 1 sub
			{
				WithinPage-WithinTitles-def
				WithinTitles param eq {/AnsFound //true def  exit} if
			} for  % WithinPage, WithinTitles
			AnsFound {exit} if
		} for  % SheetNum
		AnsFound {SheetNum WithinPage //true} {//false} ifelse
		end
	} bind def  % /FindWithinGlassesOnSheets

	% FlightSeparationPath takes a single array parameter and appends a segment to the current path.
	% The range of permitted parameters is described at www.jdawiseman.com/papers/placemat/placemat.html#flightseparations
	/FlightSeparationPath
	{
		DeBugLevel 50 le {(+FlightSeparationPath) OutputToLog} if
		42 dict begin
		/fsl exch execU def  % Flight Separation Line

		/Connections_fsl fsl length array def
		/Connections_X fsl length array def
		/Connections_Y fsl length array def
		/Connections_dX [ fsl length {0} repeat ] def
		/Connections_dY [ fsl length {0} repeat ] def
		/Connections_dLength2 [ fsl length {0} repeat ] def
		/Connections_dAi fsl length array def  % ingress angle
		/Connections_dAe fsl length array def  % egress angle
		/Connections_Type [ fsl length {/Straight} repeat ] def  % /Point, /Straight, /Curve, /Clockwise, /Widdershins. Note that /Straight /Curve are from previous.
		/Connections_Radius [ /FlightSeparationArcRadius cvx  fsl length {dup} repeat  pop ] def
		/Connections_linetoXY [ fsl length {//true} repeat ] def  % Is a line to or from _X,_Y permitted?
		/Connections_num 0 def
		/Connections_Done_First //false def

		DeBugLevel 49 le {( FlightSeparationPath: Connections_ arrays) OutputToLog} if
		0  1  fsl length 1 sub
		{
			/fsl_i exch def
			/ThisFSPiece fsl fsl_i GetEU def

			ThisFSPiece /Curve eq {Connections_Type Connections_num ThisFSPiece put  Connections_fsl Connections_num ThisFSPiece put} if

			ThisFSPiece type /arraytype eq {ThisFSPiece length 0 gt} {//false} ifelse
			{
				ThisFSPiece length 2 eq dup  {ThisFSPiece {execU dup type /integertype eq {pop} {dup type /arraytype eq {length 2 eq and} {pop pop //false} ifelse} ifelse} forall}  if
				{
					% So [i j] or [[xi, yi], j] or [i, [xj, yj]] or [[xi, yi], [xj, yj]]
					ThisFSPiece {execU dup type /integertype eq {GlassPositions SheetNum get exch get} if  {execU} forall} forall
					4 copy 3 -1 roll add 2 div  Connections_Y exch Connections_num exch put  add 2 div Connections_X exch Connections_num exch put
					3 -1 roll sub Connections_dX exch Connections_num exch put  sub Connections_dY exch Connections_num exch put % Y-positions switched which does negation of dX
					Connections_dLength2  Connections_num  Connections_dX Connections_num get dup mul Connections_dY Connections_num get dup mul add  put
					Connections_dLength2 Connections_num get  Radii SheetNum get dup mul 12 mul gt  Radii SheetNum get MaxRadius lt   and
					{
						mark  (Warning in FlightSeparationPath: with SheetNum = )  SheetNum
						(, position ) fsl_i
						( in the parameter to FlightSeparationPath, references two circles, ) ThisFSPiece 0 GetEU
						( and ) ThisFSPiece 1 GetEU
						(, that are apart by more than  Radii SheetNum get 2 mul //Sqrt3 mul.) ConcatenateToMark OutputToLog
					} if  % More than Radii SheetNum get*2*Sqrt[3] apart
					/Connections_num Connections_num 1 add def
				}{
					% So not [i j] nor [[xi, yi], j] nor [i, [xj, yj]] nor [[xi, yi], [xj, yj]]
					Connections_fsl  Connections_num  ThisFSPiece 0 get  put
					1 {
						//false [/Left /Right /HorizontalLeftwards /HorizontalRightwards] {ThisFSPiece 0 get eq {pop //true exit} if} forall
						{
							/SumReals 0 def  /SumPointeds 0 def  /CountPointeds 0 def
							1  1  ThisFSPiece length 1 sub
							{
								ThisFSPiece exch GetEU /SubPiece exch def
								SubPiece /Bottom eq {/SumPointeds MgnB                SumPointeds add def  /CountPointeds CountPointeds 1 add def} if
								SubPiece /Top    eq {/SumPointeds PageHeight MgnT sub SumPointeds add def  /CountPointeds CountPointeds 1 add def} if
								SubPiece type /integertype eq {/SumPointeds GlassPositions SheetNum get SubPiece get 1 get SumPointeds add def  /CountPointeds CountPointeds 1 add def} if
								SubPiece type /realtype eq {/SumReals SubPiece SumReals add def} if
							} for  % ThisFSPiece
							Connections_X  Connections_num  ThisFSPiece 0 get /Right eq {PageWidth MgnR sub} {MgnL} ifelse put  % HorizontalRightwards on far left
							CountPointeds 0 gt
							{
								Connections_Y  Connections_num  SumReals FlightSeparationArcRadius mul  SumPointeds CountPointeds div add  put
								Connections_dX Connections_num 1 put
								Connections_dY Connections_num 0 put
							}{
								Connections_linetoXY Connections_num //false put
								Connections_Y  Connections_num  PageHeight MgnT MgnB sub add 2 div  put
								Connections_dX Connections_num 0 put
								Connections_dY Connections_num 1 put
								ThisFSPiece 0 GetEU dup /HorizontalLeftwards eq exch /HorizontalRightwards eq or
								{
									mark  (Error in FlightSeparationPath: with SheetNum = ) SheetNum
									(, position ) fsl_i
									( in the parameter to FlightSeparationPath, references /Horizontal... without specifying a y position.) ConcatenateToMark OutputToLog
								} if  % /Horizontal...
							} ifelse  % CountPointeds 0 gt
							Connections_dLength2  Connections_num  Connections_dX Connections_num get dup mul Connections_dY Connections_num get dup mul add  put
							ThisFSPiece 0 GetEU dup /HorizontalLeftwards eq exch /HorizontalRightwards eq or {Connections_linetoXY Connections_num //false put} if
							currentdict /CountPointeds undef  currentdict /SumPointeds undef  currentdict /SumReals undef
							/Connections_num Connections_num 1 add def
							exit
						} if  % /Left or /Right or /Horizontal...

						//false [/Bottom /Top /VerticalDown /VerticalUp] {ThisFSPiece 0 get eq {pop //true exit} if} forall
						{
							/SumReals 0 def  /SumPointeds 0 def  /CountPointeds 0 def
							1  1  ThisFSPiece length 1 sub
							{
								ThisFSPiece exch GetEU /SubPiece exch def
								SubPiece /Left  eq {/SumPointeds MgnL               SumPointeds add def  /CountPointeds CountPointeds 1 add def} if
								SubPiece /Right eq {/SumPointeds PageWidth MgnR sub SumPointeds add def  /CountPointeds CountPointeds 1 add def} if
								SubPiece type /integertype eq {/SumPointeds GlassPositions SheetNum get SubPiece get 0 get SumPointeds add def  /CountPointeds CountPointeds 1 add def} if
								SubPiece type /realtype eq {/SumReals SubPiece SumReals add def} if
							} for  % ThisFSPiece
							Connections_Y  Connections_num  ThisFSPiece 0 get /Top eq {PageHeight MgnT sub} {MgnB} ifelse put  % /VerticalUp has Y at bottom
							CountPointeds 0 gt
							{
								Connections_X  Connections_num  SumReals FlightSeparationArcRadius mul  SumPointeds CountPointeds div add  put
								Connections_dX Connections_num 0 put
								Connections_dY Connections_num 1 put
							}{
								Connections_linetoXY Connections_num //false put
								Connections_X  Connections_num  PageWidth MgnR MgnL sub add 2 div  put
								Connections_dX Connections_num 1 put
								Connections_dY Connections_num 0 put
								ThisFSPiece 0 GetEU dup /VerticalDown eq exch /VerticalUp eq or
								{
									mark  (Error in FlightSeparationPath: with SheetNum = ) SheetNum  (, position ) fsl_i
									( in the parameter to FlightSeparationPath, references /Vertical... without specifying an x position.) ConcatenateToMark OutputToLog
								} if  % /Horizontal...
							} ifelse  % CountPointeds 0 gt
							Connections_dLength2  Connections_num  Connections_dX Connections_num get dup mul Connections_dY Connections_num get dup mul add  put
							ThisFSPiece 0 GetEU dup /VerticalDown eq exch /VerticalUp eq or {Connections_linetoXY Connections_num //false put} if
							currentdict /CountPointeds undef  currentdict /SumPointeds undef  currentdict /SumReals undef
							/Connections_num Connections_num 1 add def
							exit
						} if  % /Top or /Bottom

						ThisFSPiece 0 get dup /Clockwise eq exch /Widdershins eq  or
						{
							Connections_Type  Connections_num  ThisFSPiece 0 get  put
							ThisFSPiece 1 get execU dup type /integertype eq {GlassPositions SheetNum get exch get} if  {execU} forall  % integer WithinPage, or array [x y]
							Connections_Y exch Connections_num exch put
							Connections_X exch Connections_num exch put
							ThisFSPiece length 4 eq
							{
								Connections_Radius  Connections_num   GlassPositions SheetNum get  ThisFSPiece  2 copy  2 GetEU GetEU aload pop  4 2 roll  3 GetEU GetEU aload pop  3 -1 roll  sub dup mul  3 1 roll sub dup mul add sqrt 2 div  put
							} if  % ThisFSPiece length 4 eq
							/Connections_Done_First //true def
							/Connections_num Connections_num 1 add def
							exit
						} if  % ... /Clockwise ... /Widdershins ... or

						(Error in FlightSeparationPath: invalid item ) ThisFSPiece 0 //true ThingToDebugText Concatenate OutputToLog
					} repeat  % 1
				} ifelse  % tangent?
			} if  % ThisFSPiece type /arraytype eq
		} for  % fsl_i, ThisFSPiece

		fsl length 0 gt {fsl 0 get /Closed eq  Connections_Done_First  and} {//false} ifelse
		{
			DeBugLevel 49 le {( FlightSeparationPath: Connections_ arrays since /Closed) OutputToLog} if
			Connections_fsl  Connections_num  Connections_fsl 0 get      put
			Connections_X    Connections_num  Connections_X   0 get      put
			Connections_Y    Connections_num  Connections_Y   0 get      put
			Connections_dX   Connections_num  Connections_dX  0 get neg  put
			Connections_dY   Connections_num  Connections_dY  0 get neg  put
			Connections_dLength2  Connections_num  Connections_dLength2 0 get  put
			Connections_Type 0 get /Curve eq {Connections_Type Connections_num /Curve put} if
			/Connections_num Connections_num 1 add def
		} if  % ... /Closed ... Connections_Done_First  and

		% Populate Connections_dAi and Connections_dAe
		DeBugLevel 49 le {( FlightSeparationPath: Connections_dAi (ingress), Connections_dAe (egress)) OutputToLog} if
		0  1  Connections_num 1 sub
		{
			/Connections0 exch def
			/X0  Connections_X  Connections0 get def  /Y0  Connections_Y  Connections0 get def
			/dX0 Connections_dX Connections0 get def  /dY0 Connections_dY Connections0 get def
			/dL0 Connections_dLength2 Connections0 get def

			Connections_Type Connections0 get dup /Clockwise eq exch /Widdershins eq or
			{
				-1  2  1
				{
					/j exch def
					/Connections1 Connections0 j add def  % So Connections1 is Connections0 plus or minus 1
					/X1  Connections_X  Connections1 get def  /Y1  Connections_Y  Connections1 get def
					/dX1 Connections_dX Connections1 get def  /dY1 Connections_dY Connections1 get def
					/dL1 Connections_dLength2 Connections1 get def
					j 0 lt {Connections_dAi} {Connections_dAe} ifelse  Connections0  Y1 Y0 sub  X1 X0 sub  atan  put  % default
					1 {
						Connections_Type Connections1 get dup /Straight eq exch /Curve eq or
						{
							j 0 lt {Connections_dAi} {Connections_dAe} ifelse  Connections0  % to match with following 'put'
							Connections_X Connections1 get abs //PrinterEpsilon lt
							{
								Connections_fsl Connections1 get /Right eq {0 put exit} if
								Connections_fsl Connections1 get /Left eq {180 put exit} if
							} if  % Connections_X approx 0
							Connections_Y Connections1 get abs //PrinterEpsilon lt
							{
								Connections_fsl Connections1 get /Top eq {90 put exit} if
								Connections_fsl Connections1 get /Bottom eq {270 put exit} if
							} if  % Connections_Y approx 0
							/a  dX1 dup mul  dY1 dup mul  add  def
							/b  X1 X0 sub dX1 mul  Y1 Y0 sub dY1 mul  add 2 mul  def
							/c  X1 X0 sub dup mul  Y1 Y0 sub dup mul  add  Connections_Radius Connections0 GetEU dup mul  sub  def
							% Needs to be reworked to use PolynomialRoots
							/d  b b mul 4 a mul c mul sub  def  % determinant
							d 0 gt
							{
								d sqrt dup
								b neg add 2 div a div   exch b add neg 2 div a div
								2 copy abs exch abs   j 0 lt {lt} {//false [/HorizontalLeftwards /HorizontalRightwards /VerticalUp /VerticalDown] {Connections_fsl Connections1 get eq {pop //true exit} if} forall {gt} {lt} ifelse} ifelse   {exch} if pop
							} {b neg 2 div a div} ifelse  % d 0 gt
							dup dX1 mul X1 add exch dY1 mul Y1 add  Y0 sub exch X0 sub atan   put
							Connections_dX  Connections1  dX1 neg  put
							Connections_dY  Connections1  dY1 neg  put
						} if  % ... Connections1 ... /Straight ... /Curve ...
					} repeat  % 1
				} for  % back one, forward one: j
			} if  % ... Connections0 ... /Clockwise ... /Widdershins ...
		} for  % Connections0

		DeBugLevel 49 le {( FlightSeparationPath: path construction) OutputToLog} if
		0  1  Connections_num 1 sub
		{
			/Connections0 exch def

			/X0 Connections_X Connections0 get def  /Y0 Connections_Y Connections0 get def

			Connections_Type Connections0 get /Point eq  Connections0 0 le  or
			{
				Connections_X Connections0 get  Connections_Y Connections0 get  moveto
			}{
				/Connections1 Connections0 1 sub def
				/dX0 Connections_dX Connections0 get def  /dY0 Connections_dY Connections0 get def
				/dL0 Connections_dLength2 Connections0 get def
				/X1  Connections_X Connections1 get def  /Y1  Connections_Y Connections1 get def
				/dX1 Connections_dX Connections1 get def  /dY1 Connections_dY Connections1 get def
				/dL1 Connections_dLength2 Connections1 get def

				/DirectionsBothNonZero  dL0 1E-8 ge  dL1 1E-8 ge  and  def
				/DirectionsParallel  dX0 dX1 mul  dY0 dY1 mul  add dup mul  dL0 dL1 mul 0.999 mul  gt  def  % Cos()^2 = 0.999 implies angle of about 1.812 degrees
				% GSave newpath Connections_X Connections0 get Connections_Y Connections0 get 2 copy 10 0 360 arc Connections0 23 mul Connections_num mod Connections_num div 1 0.75 sethsbcolor stroke 5 sub moveto /Times-Bold 24 selectfont Connections0 show GRestore
				DirectionsParallel not  DirectionsBothNonZero  and
				{
					X0 X1 sub dY0 mul  Y1 Y0 sub dX0 mul  add
					dX1 dY0 mul dX0 dY1 mul sub  div  dup
					dX1 mul X1 add /Xj exch def
					dY1 mul Y1 add /Yj exch def
					Xj MgnL 1.0 sub lt  Xj PageWidth  MgnR sub 1.0 add gt  or
					Yj MgnB 1.0 sub lt  Yj PageHeight MgnT sub 1.0 add gt  or or {/DirectionsParallel //true def} if
				} if  % DirectionsParallel not  DirectionsBothNonZero  and
				dL0 //PrinterEpsilon dup mul gt {X1 X0 sub dX0 mul  Y1 Y0 sub dY0 mul  add  dX0 dup mul dY0 dup mul add  div  2 div} {0} ifelse dup
				dX0 mul X0 add  /Xh0 exch def
				dY0 mul Y0 add  /Yh0 exch def
				dL1 //PrinterEpsilon dup mul gt {X0 X1 sub dX1 mul  Y0 Y1 sub dY1 mul  add  dX1 dup mul dY1 dup mul add  div  2 div} {0} ifelse dup
				dX1 mul X1 add  /Xh1 exch def
				dY1 mul Y1 add  /Yh1 exch def

				Connections_Type Connections0 get /Curve eq
				{

					DirectionsParallel not DirectionsBothNonZero and
					Connections_linetoXY Connections0 get
						{{Xj Yj Xj Yj} {Xh1 Yh1 Xh0 Yh0} ifelse X0 Y0 curveto}
						{{Xj Yj lineto} if}
					ifelse  % DirectionsParallel not DirectionsBothNonZero and
				} if  % /Curve
				Connections_Type Connections0 get /Straight eq
				{
					DirectionsParallel not DirectionsBothNonZero and {Xj Yj lineto} if
					Connections_linetoXY Connections0 get {X0 Y0 lineto} if
				} if  % ... /Straight ...
				Connections_Type Connections0 get dup /Clockwise eq exch /Widdershins eq or
				{
					X0 Y0  Connections_Radius Connections0 GetEU
					Connections_dAi Connections0 get  Connections_dAe Connections0 get
					Connections_Type Connections0 get /Clockwise eq {arcn} {arc} ifelse
				} if  % ... /Clockwise ... /Widdershins ...
			} ifelse  % ... /Point ...
		} for  % Connections0
		fsl length 1 ge {fsl 0 get /Closed eq {closepath} if} if

		end
		DeBugLevel 50 le {(-FlightSeparationPath) OutputToLog} if
	} bind def  % /FlightSeparationPath


	% Paint the pages
	0 setgray   1 currentlinecap ne {1 setlinecap} if   1 currentlinejoin ne {1 setlinejoin} if   currentdash pop length 0 ne {[] 0 setdash} if
	PrologueCode
	0 setgray   1 currentlinecap ne {1 setlinecap} if   1 currentlinejoin ne {1 setlinejoin} if   currentdash pop length 0 ne {[] 0 setdash} if

	{BackgroundTextsGlasses PrePourShowBackgroundTexts BackgroundTextsTastingNotes or or} MightBeTrue
	{
		/BackgroundTextsTNsRotated   GlassesOnTastingNotePages length array def   /BackgroundTextsGlassesRotated   NumSheets array def
		/BackgroundTextsTNsFontSizeX GlassesOnTastingNotePages length array def   /BackgroundTextsGlassesFontSizeX NumSheets array def
		/BackgroundTextsTNsFontSizeY GlassesOnTastingNotePages length array def   /BackgroundTextsGlassesFontSizeY NumSheets array def
		/BackgroundTextsTNsL         GlassesOnTastingNotePages length array def   /BackgroundTextsGlassesL         NumSheets array def
		/BackgroundTextsTNsR         GlassesOnTastingNotePages length array def   /BackgroundTextsGlassesR         NumSheets array def
		/BackgroundTextsTNsB         GlassesOnTastingNotePages length array def   /BackgroundTextsGlassesB         NumSheets array def
		/BackgroundTextsTNsT         GlassesOnTastingNotePages length array def   /BackgroundTextsGlassesT         NumSheets array def
		/BackgroundTextsTNsMinB      GlassesOnTastingNotePages length array def   /BackgroundTextsGlassesMinB      NumSheets array def
		/BackgroundTextsTNsMaxT      GlassesOnTastingNotePages length array def   /BackgroundTextsGlassesMaxT      NumSheets array def
		/BackgroundTextsTNsOffsetY   GlassesOnTastingNotePages length array def   /BackgroundTextsGlassesOffsetY   NumSheets array def
		/BackgroundUsedFontSizesX  NumSheets  GlassesOnTastingNotePages length add  Titles length add  array  def  % Way too many should be enough
		[ /BackgroundUsedFontSizesY /BackgroundUsedFontSizesOrigX /BackgroundUsedFontSizesOrigY ] {BackgroundUsedFontSizesX length array def} forall
		/BackgroundUsedFontSizesNum 0 def
		21 dict begin
		0 1 1
		{
			/PageType exch def
			/TypeOfPagesBeingRendered  PageType 0 eq {/Glasses} {/TastingNotes} ifelse  store
			0  1  PageType 0 eq {NumSheets} {GlassesOnTastingNotePages length} ifelse 1 sub
			{
				PageType 0 eq {/SheetNum} {/TastingSheetNum} ifelse exch def
				/BackgroundTextThis  PageType 0 eq {BackgroundTextsGlassesTexts SheetNum} {BackgroundTextsTNsTexts TastingSheetNum} ifelse  get def

				/BackgroundTextThis load length 0 gt
				{
					//false //false //false //false PageType 0 eq {PaperType Orientation} {TastingNotesPaperType TastingNotesOrientation} ifelse SetPaperSize   //true DefStoreMgns
					PageType 0 eq {BackgroundTextsGlassesRotated SheetNum} {BackgroundTextsTNsRotated TastingSheetNum} ifelse
					BackgroundTextsOrientation dup /Rotated eq exch  PageType 0 eq {Orientation} {TastingNotesOrientation} ifelse  2 copy  /Landscape eq exch /Portrait eq and  3 1 roll  /Portrait eq exch /Landscape eq and  or or  put
					BackgroundTextsFont 16384 selectfont  GSave nulldevice 0 0 moveto /BackgroundTextThis load //true CharPathRecursive PathBBox GRestore [ /BgT /BgR /BgB /BgL ] {exch 16384 div def} forall

					TypeOfPagesBeingRendered /Glasses eq {PackingDescriptors SheetNum get dup dup type /arraytype eq
					{
						//false exch {/SuppressNonRightOrnaments eq {pop //true exit} if} forall  {mark (Warning: SheetNum=) SheetNum ( has BackgroundText, but its PackingStyle contains /SuppressNonRightOrnaments.) ConcatenateToMark OutputToLog} if
						//false exch {/SuppressNonLeftOrnaments  eq {pop //true exit} if} forall  {mark (Warning: SheetNum=) SheetNum ( has BackgroundText, but its PackingStyle contains /SuppressNonLeftOrnaments.)  ConcatenateToMark OutputToLog} if
					} {pop pop} ifelse} if  % /arraytype, /Glasses
				} {/BgT 0 def /BgR 0 def /BgB 0 def /BgL 0 def} ifelse % /BackgroundTextThis load length 0 gt
				PageType 0 eq
					{BackgroundTextsGlassesL SheetNum        BackgroundTextsGlassesR BackgroundTextsGlassesB BackgroundTextsGlassesT BackgroundTextsGlassesMinB BackgroundTextsGlassesMaxT}
					{BackgroundTextsTNsL     TastingSheetNum BackgroundTextsTNsR     BackgroundTextsTNsB     BackgroundTextsTNsT     BackgroundTextsTNsMinB     BackgroundTextsTNsMaxT}
				ifelse   5 index BgT put 4 index BgB put 3 index BgT put 2 index BgB put 1 index BgR put BgL put
			} for  % SheetNum|TastingSheetNum

		//true BackgroundTextsGlassesSameSizeIfAllOf {dup //false eq exch /False eq or {pop //false exit} if} forall
			{
				0  1   PageType 0 eq {NumSheets} {GlassesOnTastingNotePages length} ifelse 1 sub
				{
					/SNum0 exch def
					0  1   SNum0 1 sub
					{
						/SNum1 exch def
						//true  BackgroundTextsGlassesSameSizeIfAllOf
						PageType 0 eq
						{ {
							dup /SamePageOrdering eq {PageOrderingGlasses dup SNum0 GetEU exch SNum1 GetEU ne {pop pop //false exit} if} if
							dup /OnSheetWithSameNumberGlasses eq {GlassesOnSheets SNum0 GetEU length GlassesOnSheets SNum1 GetEU length ne {pop pop //false exit} if} if
							dup /OnSheetWithSameRadius eq {Radii SNum0 GetEU Radii SNum1 GetEU RadiiEffectivelyEqual not {pop pop //false exit} if} if
							dup /SamePaperSize eq {PaperTypes SNum0 GetEU PaperTypes SNum1 GetEU ne {pop pop //false exit} if} if
							dup /TextSameLength eq {BackgroundTextsGlassesTexts SNum0 get LengthCompoundObject BackgroundTextsGlassesTexts SNum1 get LengthCompoundObject ne {pop pop //false exit} if} if
							dup /RadiiShrunkToBeSame eq {ShrinkRadiiSquareArray SNum0 GetEU SNum1 GetEU not {pop pop //false exit} if} if
							pop
						} }
						{ {
							dup /SamePageOrdering eq {PageOrderingTastingNotePages dup SNum0 GetEU exch SNum1 GetEU ne {pop pop //false exit} if} if
							dup /OnSheetWithSameNumberGlasses eq {GlassesOnTastingNotePages SNum0 GetEU length GlassesOnTastingNotePages SNum1 GetEU length ne {pop pop //false exit} if} if
							dup /SamePaperSize eq {<< /TastingSheetNum SNum0 /SheetNum SNum0 >> begin TastingNotesPaperType end  << /TastingSheetNum SNum1 /SheetNum SNum1 >> begin TastingNotesPaperType end ne {pop pop //false exit} if} if
							dup /TextSameLength eq {BackgroundTextsTNsTexts SNum0 get LengthCompoundObject BackgroundTextsTNsTexts SNum1 get LengthCompoundObject ne {pop pop //false exit} if} if
							pop
						} } ifelse forall  % BackgroundTextsGlassesSameSizeIfAllOf
						{
							PageType 0 eq {BackgroundTextsGlassesMinB dup BackgroundTextsGlassesMaxT dup} {BackgroundTextsTNsMinB dup BackgroundTextsTNsMaxT dup} ifelse
							SNum1 2 copy get  2 index SNum0 get dup 3 1 roll  lt {put} {pop pop pop} ifelse
							SNum0 2 copy get  2 index SNum1 get dup 3 1 roll  lt {put} {pop pop pop} ifelse
							SNum1 2 copy get  2 index SNum0 get dup 3 1 roll  gt {put} {pop pop pop} ifelse
							SNum0 2 copy get  2 index SNum1 get dup 3 1 roll  gt {put} {pop pop pop} ifelse
						} if  % passes all possible tests
					} for  % SNum1
				} for  % SNum0
			} if  % not /False

			0  1  PageType 0 eq {NumSheets} {GlassesOnTastingNotePages length} ifelse 1 sub
			{
			  dup  /SheetNum exch def  /TastingSheetNum exch def  % In case BackgroundTextsSquooshMin/...Max depend on SheetNum|TastingNotes
				PageType 0 eq {BackgroundTextsGlassesL BackgroundTextsGlassesR BackgroundTextsGlassesMinB BackgroundTextsGlassesMaxT} {BackgroundTextsTNsL BackgroundTextsTNsR BackgroundTextsTNsMinB BackgroundTextsTNsMaxT} ifelse  % Note MinB, MaxT
				4 {SheetNum get 4 1 roll} repeat   /BgT exch def  /BgB exch def  /BgR exch def  /BgL exch def
				BgR BgL gt  BgT BgB gt  and
				{
					//false //false //false //false PageType 0 eq {PaperType Orientation} {TastingNotesPaperType TastingNotesOrientation} ifelse SetPaperSize   //true DefStoreMgns
					PageHeight MgnB MgnT add sub  PageWidth MgnL MgnR add sub  PageType 0 eq {BackgroundTextsGlassesRotated} {BackgroundTextsTNsRotated} ifelse SheetNum get {exch} if
					/FontSizeOrigX  exch  BgR BgL sub  dup //Epsilon le {pop pop 1} {div} ifelse  def
					/FontSizeOrigY  exch  BgT BgB sub  dup //Epsilon le {pop pop 1} {div} ifelse  def
					/FontSizeX  FontSizeOrigX FontSizeOrigY BackgroundTextsSquooshMin div gt {FontSizeOrigY BackgroundTextsSquooshMin div} {FontSizeOrigX} ifelse  BackgroundTextsFontSizeMax 2 copy gt {exch} if pop  def
					/FontSizeY  FontSizeOrigY FontSizeOrigX BackgroundTextsSquooshMax mul gt {FontSizeOrigX BackgroundTextsSquooshMax mul} {FontSizeOrigY} ifelse  BackgroundTextsFontSizeMax 2 copy gt {exch} if pop  def
					PageType 0 eq {BackgroundTextsGlassesFontSizeX} {BackgroundTextsTNsFontSizeX} ifelse  SheetNum  FontSizeX put
					PageType 0 eq {BackgroundTextsGlassesFontSizeY} {BackgroundTextsTNsFontSizeY} ifelse  SheetNum  FontSizeY put
					//true  0 1 BackgroundUsedFontSizesNum 1 sub
					{
						/i exch def
						BackgroundUsedFontSizesOrigX i get FontSizeOrigX sub abs //PrinterEpsilon le
						BackgroundUsedFontSizesOrigY i get FontSizeOrigY sub abs //PrinterEpsilon le  and
						BackgroundUsedFontSizesX     i get FontSizeX     sub abs //PrinterEpsilon le  and
						BackgroundUsedFontSizesY     i get FontSizeY     sub abs //PrinterEpsilon le  and {pop //false exit} if
					} for  % ... BackgroundUsedFontSizesNum ...
					{
						BackgroundUsedFontSizesOrigX BackgroundUsedFontSizesNum FontSizeOrigX put
						BackgroundUsedFontSizesOrigY BackgroundUsedFontSizesNum FontSizeOrigY put
						BackgroundUsedFontSizesX     BackgroundUsedFontSizesNum FontSizeX     put
						BackgroundUsedFontSizesY     BackgroundUsedFontSizesNum FontSizeY     put
						/BackgroundUsedFontSizesNum dup load 1 add store
						mark   (BackgroundTexts: FontSizeX=)  FontSizeX   (; FontSizeY=)  FontSizeY
						(, on )  TypeOfPagesBeingRendered  TypeOfPagesBeingRendered  /TastingNotes eq {( TastingSheetNum=) TastingSheetNum} {( SheetNum=) SheetNum} ifelse  ( and perhaps others)
						PageType 0 eq {BackgroundTextsGlassesTexts SheetNum} {BackgroundTextsTNsTexts TastingSheetNum} ifelse  get  LengthCompoundObject 2 ge
						{
							PageWidth MgnL MgnR add sub PageHeight MgnB MgnT add sub   PageType 0 eq {BackgroundTextsGlassesRotated SheetNum} {BackgroundTextsTNsRotated TastingSheetNum} ifelse get {exch} if div  BgT BgB sub mul BgR BgL sub sub
							dup abs 0.0001 ge  {( \(for snug fit insert \"\{)  exch  dup 0 gt {(+) exch} if  ( Kern\}\"\))}  {pop ( \(which fits snugly\))}  ifelse  % If so small that would be shown in scientific notation, don't show. And on A3 1E-4 ~= 0.1pt
						} if  % at least two characters
						(.)  ConcatenateToMark OutputToLog
					}  if  % Not previous logged
				} if   % Non-zero bounding box
			} for  % SheetNum|TastingSheetNum

		} bind for  % PageType
		end

		/BackgroundTextsPaint
		{
			DeBugLevel 50 le {(+BackgroundTextsPaint) OutputToLog} if
			9 dict begin
			/BackgroundTextThis TypeOfPagesBeingRendered /Glasses eq {BackgroundTextsGlassesTexts SheetNum} {BackgroundTextsTNsTexts TastingSheetNum} ifelse get def
			/BackgroundTextThis load length 0 gt
			{
				/BTAH  BackgroundTextsAlignmentHorizontal  dup /Left   eq {pop 0} if  dup /Centre eq {pop 0.5} if  dup /Right eq {pop 1} if  def
				/BTAV  BackgroundTextsAlignmentVertical    dup /Bottom eq {pop 0} if  dup /Middle eq {pop 0.5} if  dup /Top   eq {pop 1} if  def
				matrix currentmatrix
				TypeOfPagesBeingRendered /Glasses eq {BackgroundTextsGlassesRotated SheetNum} {BackgroundTextsTNsRotated TastingSheetNum} ifelse get
				{
					PageWidth 0 translate 90 rotate  /MgnL MgnB /MgnB MgnR /MgnR MgnT /MgnT MgnL  /PageHeight PageWidth /PageWidth PageHeight  6 {def} repeat
				} if  % rotated

				PageWidth MgnL MgnR add sub BTAH mul MgnL add  PageHeight MgnB MgnT add sub BTAV mul MgnB add  moveto
				TypeOfPagesBeingRendered /Glasses eq
				{
					matrix currentmatrix   BackgroundTextsGlassesFontSizeX SheetNum get BackgroundTextsGlassesFontSizeY SheetNum get scale
					BackgroundTextsGlassesL SheetNum get neg  1 BTAH sub mul  BackgroundTextsGlassesR SheetNum get neg BTAH mul add
					BackgroundTextsGlassesB SheetNum get neg  1 BTAV sub mul  BackgroundTextsGlassesT SheetNum get neg BTAV mul add  rmoveto
				}{
					matrix currentmatrix   BackgroundTextsTNsFontSizeX TastingSheetNum get BackgroundTextsTNsFontSizeY TastingSheetNum get scale
					BackgroundTextsTNsL TastingSheetNum get neg  1 BTAH sub mul  BackgroundTextsTNsR TastingSheetNum get neg BTAH mul add
					BackgroundTextsTNsB TastingSheetNum get neg  1 BTAV sub mul  BackgroundTextsTNsT TastingSheetNum get neg BTAV mul add  rmoveto
				} ifelse  % ... /Glasses
				BackgroundTextsFont 1 selectfont   /BackgroundTextThis load //true CharPathRecursive
				setmatrix  0.9375 setgray  4.32 dup currentlinewidth ne {setlinewidth} {pop} ifelse  1 currentlinecap ne {1 setlinecap} if
				1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if  ClipSave BackgroundTextsGlassesPaintCode ClipRestore
				setmatrix
			} if  % /BackgroundTextThis load length 0 gt
			end
			DeBugLevel 50 le {(-BackgroundTextsPaint) OutputToLog} if
		} bind def  % /BackgroundTextsPaint

		{BackgroundTextsGlasses PrePourShowBackgroundTexts or} MightBeTrue
		{
			DeBugLevel 100 le {( Main: BackgroundTextsGlassesForms) OutputToLog} if
			/BackgroundTextsGlassesForms  [ GlassesOnSheets length {5 dict} repeat ] def
			0  1  NumSheets 1 sub
			{
				/SheetNum exch def
				//false //false //false //false PaperType Orientation SetPaperSize   //true DefStoreMgns
				BackgroundTextsGlassesForms SheetNum get begin
				/SheetNum SheetNum def
				/FormType 1 def
				/BBox [ MgnL 0.6 mul 1 sub  MgnB 0.6 mul 1 sub  PageWidth MgnR 0.6 mul 1 sub sub  PageHeight MgnB 0.6 mul 1 sub sub ] def
				/Matrix matrix identmatrix def
				/PaintProc
				{
					DeBugLevel 100 le {(+BackgroundTextsGlassesForms: PaintProc) OutputToLog} if
					pop  BackgroundTextsPaint
					DeBugLevel 100 le {(-BackgroundTextsGlassesForms: PaintProc) OutputToLog} if
				} def  % /PaintProc
				end  % BackgroundTextsGlassesForms SheetNum get
			} bind for  % SheetNum
			UndefMgns
			currentdict /SheetNum undef
		} if  % ... BackgroundTextsGlasses PrePourShowBackgroundTexts or ...

		/BackgroundTextsTastingNotes load MightBeTrue
		{
			DeBugLevel 100 le {( Main: BackgroundTextsTNsForms) OutputToLog} if
			/BackgroundTextsTNsForms  [ GlassesOnTastingNotePages length {5 dict} repeat ] def
			0  1  GlassesOnTastingNotePages length 1 sub
			{
				/TastingSheetNum exch def
				//false //false //false //false TastingNotesPaperType TastingNotesOrientation SetPaperSize   //true DefStoreMgns
				BackgroundTextsTNsForms TastingSheetNum get begin
				/TastingSheetNum TastingSheetNum def
				/FormType 1 def
				/BBox [ MgnL 0.6 mul 1 sub  MgnB 0.6 mul 1 sub  PageWidth MgnR 0.6 mul 1 sub sub  PageHeight MgnB 0.6 mul 1 sub sub ] def
				/Matrix matrix identmatrix def
				/PaintProc
				{
					DeBugLevel 100 le {(+BackgroundTextsTNsForms: PaintProc) OutputToLog} if
					pop  << /SheetNum TastingSheetNum >> begin BackgroundTextsPaint end
					DeBugLevel 100 le {(-BackgroundTextsTNsForms: PaintProc) OutputToLog} if
				} def  % /PaintProc
				end  % BackgroundTextsTNsForms TastingSheetNum get
			} bind for  % TastingSheetNum
			UndefMgns
			currentdict /TastingSheetNum undef
		} if  % ... BackgroundTextsTastingNotes ...
	} if  % ... BackgroundTextsGlasses PrePourShowBackgroundTexts BackgroundTextsTastingNotes or or ...

	/WaterSizesReported [ NumSheets {//false} repeat ] def
	% NameHorizontalLeft NameHorizontalRight ShowRight ShowLeft FillWhite  WaterBoxesPaintProc -
	/WaterBoxesPaintProc
	{
		DeBugLevel 100 le {(+WaterBoxesPaintProc) OutputToLog} if
		20 dict begin
		/FillWhite exch def  /ShowLeft exch def  /ShowRight exch def /NameHorizontalRight exch def  /NameHorizontalLeft exch def

		% This converts the new parameterisation into the old.
		/R Radii SheetNum get def
		/WaterBoxesNumSideTriangle WaterBoxesNum 8 mul 1 add sqrt 1.00001 sub 2 div ceiling cvi def
		/i WaterBoxesNumSideTriangle cvi 1 add 2 idiv def
		/WaterBoxesSize
		[
			R R mul
			WaterBoxesGapProportionSize 1 add WaterBoxesNumSideTriangle cvi mul 1 add R mul  -2 mul
			WaterBoxesGapProportionSize 1 add dup  WaterBoxesNumSideTriangle cvi mul 1 add dup mul   exch dup mul i mul i 1 WaterBoxesNumSideTriangle cvi add sub 2 mul mul   add
		] 0 //true R //true //PrinterEpsilon PolynomialRoots Min WaterBoxesSizeMax 2 copy gt {exch} if pop def  % /WaterBoxesSize

		/WaterBoxesGap WaterBoxesSize WaterBoxesGapProportionSize mul def
		/WaterBoxesMaxRowLengths [ WaterBoxesNumSideTriangle cvi -1 0 {0 counttomark 1 sub -1 1 {index add} for WaterBoxesNum 2 copy ge {sub sub exit} {pop pop} ifelse} for ] def

		WaterSizesReported SheetNum get not
		{
			//true   0 1 NumSheets 1 sub {dup  WaterSizesReported exch get exch  Radii exch get Radii SheetNum get eq  and {pop //false exit} if} for
			{
				mark (WaterBoxes on SheetNum ) SheetNum ( with radius ) Radii SheetNum get (: WaterBoxesSize = ) WaterBoxesSize (; WaterBoxesGap = ) WaterBoxesGap (; WaterBoxesNum = ) WaterBoxesNum ConcatenateToMark OutputToLog
				WaterSizesReported SheetNum //true put
			} if  % Unique radius
		} if  % WaterSizesReported SheetNum get not

		newpath
		[
			ShowLeft {//false TypeOfPagesBeingRendered /Glasses eq {PackingDescriptors SheetNum get dup type /arraytype eq { {/SuppressNonRightOrnaments eq {pop exit} if} forall} {pop} ifelse} if} if
			ShowRight {//true TypeOfPagesBeingRendered /Glasses eq {PackingDescriptors SheetNum get dup type /arraytype eq { {/SuppressNonLeftOrnaments  eq {pop exit} if} forall} {pop} ifelse} if} if
		]{
			/IsRight exch def
			/WBtoPaint 0 def
			/WBb MgnB def
			/WaterBoxPositions
			[
				0  1  WaterBoxesNum 1 sub  % rows
				{
					/WaterBoxRow exch def
					/WBb WaterBoxesSize WaterBoxesGap add WaterBoxRow mul MgnB add def
					/WBt WBb WaterBoxesSize add def

					WBt  PageHeight MgnT sub  gt {exit} if
					0  1  WaterBoxesNum 1 sub  % columns
					{
						/WaterBoxCol exch def
						IsRight
							{/WBr PageWidth MgnR sub WaterBoxesSize WaterBoxesGap add WaterBoxCol mul sub def   /WBl WBr WaterBoxesSize sub def}
							{/WBl MgnL               WaterBoxesSize WaterBoxesGap add WaterBoxCol mul add def   /WBr WBl WaterBoxesSize add def}
						ifelse  % IsRight
						SideBySideGlassesTastingNotes not {IsRight {WBl NameHorizontalRight WaterBoxesGap add lt} {WBr NameHorizontalLeft  WaterBoxesGap sub gt} ifelse  {/WBok //false def exit} if} if
						WaterBoxesMaxRowLengths length dup 0 gt {1 sub WaterBoxRow 2 copy gt {exch} if pop WaterBoxesMaxRowLengths exch GetEU WaterBoxCol le {/WBok //false def exit} if} {pop} ifelse

						/WBok //true def
						0  1  SheetLengths SheetNum get 1 sub
						{
							/WithinPage exch def
							CircleNonEmpty SheetNum get WithinPage get
							{
								R WaterBoxesGap add //PrinterEpsilon sub dup mul   GlassPositions SheetNum get WithinPage get aload pop  3 copy 6 copy
								WBb sub dup mul exch WBl sub dup mul add gt  10 1 roll
								WBb sub dup mul exch WBr sub dup mul add gt   7 1 roll
								WBt sub dup mul exch WBl sub dup mul add gt   4 1 roll
								WBt sub dup mul exch WBr sub dup mul add gt  or or or {/WBok //false def  exit} if
							} if  % CircleNonEmpty ...
						} for  % WithinPage
						currentdict /WithinPage undef

						WBok {WBl WBb /WBtoPaint WBtoPaint 1 add def} {exit} ifelse
					} for  % WaterBoxCol
					WaterBoxCol 0 eq  WBok not  and    currentdict /WaterBoxCol undef    {exit} if  % blank row
					WBtoPaint WaterBoxesNum ge {exit} if
				} for  % WaterBoxRow
				currentdict /WaterBoxRow undef
			] def  % /WaterBoxPositions
			0  2  WaterBoxPositions length 1 sub
			{
				WaterBoxPositions exch 2 getinterval aload pop /WBb exch def /WBl exch def
				WBl WBb WaterBoxesSize add moveto  WBl WBb lineto  WBl WaterBoxesSize add dup WBb lineto  WBb WaterBoxesSize add lineto
			} for
			FillWhite {GSave 1 setgray fill GRestore} if
			0 setgray   0.24 dup currentlinewidth ne {setlinewidth} {pop} ifelse  0 currentlinecap ne {0 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if  WaterBoxesFormatStroke newpath
		} forall  % sides
		end
		DeBugLevel 100 le {(-WaterBoxesPaintProc) OutputToLog} if
	} bind def  % /WaterBoxesPaintProc

	/DropletLocalField  % For speed takes no parameters; output put dictionary of calling routine. Assumes existence of X, Y, ChargesData
	{
		11 dict begin  % Local variables: i, XX, YY, Ch, Sp, DistSqrd
		/i ChargesData length 4 idiv def
		/P00_array  i array  def   % Num derivatives of P wrt X; num derivs wrt Y
		/P10_array  i array  def   % dP/dX
		/P01_array  i array  def   % dP/dY
		/P20_array  i array  def   % d2P/dX2
		/P02_array  i array  def   % d2P/dY2
		/P11_array  i array  def   % d2P/dXdY
		0  4  ChargesData length 4 sub
		{
			/i exch def
			/XX ChargesData i       get  X sub def
			/YY ChargesData i 1 add get  Y sub def
			/Ch ChargesData i 2 add get def
			/Sp ChargesData i 3 add get 2 mul def  % At a distance of Sp, the angle is 45 degrees.
			/DistSqrd XX dup mul YY dup mul add def
			/i i 4 idiv def
			DistSqrd 0.01 gt  % I.e., at least 0.1pt
			{
				P00_array  i                                                                                                        Ch      DistSqrd                 div  put
				P10_array  i  XX  -2 mul                              Sp       YY mul                        DistSqrd sqrt div add  Ch mul  DistSqrd dup     mul     div  put
				P01_array  i  YY  -2 mul                              Sp       XX mul                        DistSqrd sqrt div sub  Ch mul  DistSqrd dup     mul     div  put
				P20_array  i  XX dup mul 6 mul  YY dup mul 2 mul sub  Sp 5 mul XX mul YY mul                 DistSqrd sqrt div sub  Ch mul  DistSqrd dup dup mul mul div  put
				P02_array  i  YY dup mul 6 mul  XX dup mul 2 mul sub  Sp 5 mul XX mul YY mul                 DistSqrd sqrt div add  Ch mul  DistSqrd dup dup mul mul div  put
				P11_array  i  XX YY mul 8 mul                         Sp 2.5 mul XX YY sub XX YY add mul mul DistSqrd sqrt div add  Ch mul  DistSqrd dup dup mul mul div  put
			}{
				P00_array  i  C 0 ne {1e+19 C 0 lt {neg} if} {0} ifelse  put
				P10_array  i  0  put
				P01_array  i  0  put
				P20_array  i  0  put
				P02_array  i  0  put
				P11_array  i  0  put
			} ifelse  % DistSqrd 0.01 gt.  Constant 'Infinity' is a distance, hence this manual infinity.
		} for  % i
		/P00 P00_array   /P10 P10_array   /P01 P01_array   /P20 P20_array   /P02 P02_array   /P11 P11_array
		end   6 {//KleinSum exec def} repeat
	} bind def  % /DropletLocalField

	% [ X0 Y0 Charge0 X1 Y1 Charge1 ... ]  StartX StartY PathDistance StepSizeMax  DropletPath   [ X0 Y0 0 Pot0  X1 Y1 Dist1 Pot1  X2 Y2 Dist2 Pot2 ... ]
	/DropletPath
	{
		DeBugLevel 25 le {(+DropletPath) OutputToLog} if
		22 dict begin
		/StepSizeMax exch def   /PathDistance exch def   /Y exch def   /X exch def   /ChrgData exch def

		% mark (P00) (\t) (P10) 1 index (P01) 1 index (P20) 1 index (P02) 1 index (P11) ConcatenateToMark =
		/DistanceTraversed 0 def
		[  % Start this one droplet
			{ % loop until have travelled enough distance
				//false   0 3 ChrgData length 3 sub {/i exch def  ChrgData i get X sub dup mul  ChrgData i 1 add get Y sub dup mul add  StepSizeMax dup mul  le {pop //true exit} if} for   {counttomark {pop} repeat exit} if  % Close to any of the charges

				DropletLocalField
				% mark P00 (\t) P10 1 index P01 1 index P20 1 index P02 1 index P11 ConcatenateToMark =
				X  Y  DistanceTraversed  P00  % Output (P00 is 'new'; others are old).
				PathDistance DistanceTraversed sub //PrinterEpsilon le {exit} if

				/SpeedSqrd  P10 dup mul  P01 dup mul  add  def
				SpeedSqrd 0 gt
				{
					/ThisStep
						PathDistance DistanceTraversed sub  dup StepSizeMax div ceiling dup 1 gt {div} {pop} ifelse abs
						0.03  2 copy lt {exch} if pop  % So that always move a non-trivial distance
					def  % /ThisStep
					ThisStep SpeedSqrd sqrt  div neg dup
					P10 mul X add /X exch def
					P01 mul Y add /Y exch def
					/DistanceTraversed DistanceTraversed ThisStep add def
				} {counttomark {pop} repeat  exit} ifelse  % SpeedSqrd 0 gt
			} loop  % Until  PathDistance DistanceTraversed sub //PrinterEpsilon le, or some bad conditions
		]  % End this one droplet
		end
		DeBugLevel 25 le {(-DropletPath) OutputToLog} if
	} bind def  % /DropletPath

	% Discussion: http://www.theportforum.com/viewtopic.php?t=175&start=1136
	{Droplets} MightBeTrue
	{
		DeBugLevel 50 le {(+DropletPaths computation) OutputToLog} if
		/DropletsWhichReversed NumSheets array def  % Can be used in mischievous PaintBackgroundCode to highlight reversed droplets.
		/DropletsChargesText [ NumSheets {()} repeat ] def
		/DropletPaths
		[
			% DropletPaths has one array element for each SheetNum. Within which, one per droplet, each of which is an array.
			% Most of these droplets are of length a multiple of four, being: X; Y; DistanceTravelled; Potential.
			% A small number of droplets are of length precisely five, the fifth being an array [x' y'], an eigenvector of the Hessian.
			42 dict begin
			0  1  NumSheets 1 sub
			{
				/SheetNum exch def
				//false //false //false //false PaperType Orientation SetPaperSize   true DefStoreMgns

				/ChargesData  % length a multiple of 4: X0 Y0 Charge0 Spin0 X1 Y1 Charge1 Spin1 ...
				[
					DropletsCharges length 4 mod 0 eq
					{
						% The parameter has length a multiple of 4: SheetNum (/All ==> all); position being either a WithinPage integer, or array [x y]; charge being numeric; spin being numeric.
						0  4  DropletsCharges length 4 sub
						{
							/IT exch def
							/This DropletsCharges IT GetEU def
							This /All eq  This type /integertype eq  or
							{
								This /All eq  This SheetNum eq  or
								{
									/This DropletsCharges IT 1 add GetEU def
									/ThisGood //false def
									This type dup /arraytype eq exch /integertype eq or
									{
										This type /arraytype eq
										{
											This length 2 eq
											{
												This 0 GetEU This 1 GetEU  2 copy IsNumber exch IsNumber and
													{/ThisGood //true def}
													{pop pop mark (Error: DropletsCharges ) IT 1 add ( is an array of length 2, but contains non-numbers. Ignoring and continuing.) ConcatenateToMark OutputToLog}
												ifelse  % Both numbers
											} {mark (Error: DropletsCharges ) IT 1 add ( is an array, but not of length 2. Ignoring and continuing.) ConcatenateToMark OutputToLog} ifelse  % This length 2 eq
										}{
											This 0 ge
											{
												This  SheetLengths SheetNum get  lt
												{
													GlassPositions SheetNum get This get aload pop	 /ThisGood //true def
												} {mark (Error: DropletsCharges ) IT 1 add ( is integer but too large. Ignoring and continuing.) ConcatenateToMark OutputToLog} ifelse
											} {mark (Error: DropletsCharges ) IT 1 add ( is integer but negative. Ignoring and continuing.) ConcatenateToMark OutputToLog} ifelse
										} ifelse  % ... /arraytype ...
									} {mark (Error: DropletsCharges ) IT 1 add ( get neither an integer \(for a WithinPage\) nor an array \([x y]\).)} ifelse
									ThisGood
									{
										DropletsCharges IT 2 add GetEU   DropletsCharges IT 3 add GetEU
										2 copy IsNumber exch IsNumber and
											{1 index 0 eq {pop pop pop pop} if}
											{pop pop pop pop mark (Error: DropletsCharges ) IT 2 add ( or ) IT 3 add ( non-numeric. Ignoring and continuing.) ConcatenateToMark OutputToLog}
										ifelse  % ... IsNumber ... IsNumber and
									} if  % ThisGood
								} if  % If charge used on this SheetNum
							} {mark (Error: DropletsCharges ) IT ( get neither an integer \(for a specific SheetNum\) nor /All.) ConcatenateToMark OutputToLog stop} ifelse
						} for  % IT
					} {mark (Error: DropletsCharges length = ) DropletsCharges length ( which is not a multiple of 4.) ConcatenateToMark OutputToLog stop} ifelse
				] def  % /ChargesData
				DropletsChargesText  SheetNum  mark
				0  4  ChargesData length 4 sub
				{
					/IT exch def
					(\n)            SheetNum      5 string cvs dup length  5 exch sub {( ) exch} repeat (    [)
					ChargesData IT       get cvr 10 string cvs dup length 10 exch sub {( ) exch} repeat (  )
					ChargesData IT 1 add get cvr 10 string cvs dup length 10 exch sub {( ) exch} repeat (]  )
					ChargesData IT 2 add get     10 string cvs dup length 10 exch sub {( ) exch} repeat
					ChargesData IT 3 add get     10 string cvs dup length 10 exch sub {( ) exch} repeat
				} for   ConcatenateToMark put  % DropletsChargesText
				rrand
				/i  DropletsShowSaddlePoints {ChargesData length 4 div 4 add} {-1} ifelse  def  % How many starting points to find saddle? This an estimate.
				srand
				/DropMinProximitySqd  0
					0 1 15  % This a kludge. Copes if width dependent on DropletNum mod something modest.
					{
						<< exch /DropletNum exch >> begin [ DropletsInnerWidthStart DropletsInnerWidthEnd DropletsInnerGrayStart DropletsInnerGrayEnd DropletsOuterWidthStart DropletsOuterWidthEnd DropletsOuterGrayStart DropletsOuterGrayEnd ] end
							{1.2 mul 2 copy lt {exch} if pop}
						forall  % the various widths
					} for  % various kludged modulos
				dup mul  def  % /DropMinProximitySqd

				[
					Droplets
					{
						PageHeight MgnB MgnT add sub
						PageWidth  MgnL MgnR add sub add //SqrtSixth mul DropletsAverageMaxTweakPlusMinus abs add DropletsAverageSeparation abs div floor cvi neg
						1  1 index abs
						{
							/Dim1 exch def
							PageHeight MgnB MgnT add sub 3 //Sqrt3 add mul
							PageWidth  MgnL MgnR add sub 3 //Sqrt3 sub mul add 6 div //SqrtHalf mul DropletsAverageMaxTweakPlusMinus abs add DropletsAverageSeparation abs div floor cvi neg
							1  1 index abs
							{
								/Dim2 exch def
								/RandAng rand 360 mod def
								/RandRadii DropletsAverageMaxTweakPlusMinus rand mul RandMax div def

								/X PageWidth  MgnL MgnR sub add 2 div  Dim2 //SqrtHalf mul Dim1 //Cos15 mul add DropletsAverageSeparation mul add  RandAng sin RandRadii mul add def
								/Y PageHeight MgnB MgnT sub add 2 div  Dim2 //SqrtHalf mul Dim1 //Sin15 mul sub DropletsAverageSeparation mul add  RandAng cos RandRadii mul add def
								X MgnL DropletsPathLength sub gt  X PageWidth  MgnR sub DropletsPathLength add lt  and
								Y MgnB DropletsPathLength sub gt  Y PageHeight MgnT sub DropletsPathLength add lt  and and
								{
									/Drplt ChargesData  X  Y  DropletsPathLength  0.36  DropletPath def  % Embedded constant.
									Drplt length 8 ge
									{
										/OnPageStart //Infinity def  /OnPageEnd //InfinityNeg def
										0  4  Drplt length 4 sub  % Is any part of droplet inside paintable page?
										{
											/i exch def
											Drplt dup i get /X exch def i 1 add get /Y exch def
											X MgnL ge  X PageWidth  MgnR sub le  and
											Y MgnB ge  Y PageHeight MgnT sub le  and and
											{
												Drplt i 2 add get dup dup dup
												OnPageStart lt {/OnPageStart exch def} {pop} ifelse
												OnPageEnd   gt {/OnPageEnd   exch def} {pop} ifelse
											} if  % inside paintable page
										} for  % length of this droplet
										OnPageEnd OnPageStart sub  DropletsPathLength //GoldenRatio div  gt  % Next loop might pop false.
										0  4  Drplt length 4 sub  % Is any part of droplet too near a charge, or too near a stationary point?
										{
											dup 1 add Drplt exch get /Y exch def Drplt exch get /X exch def
											dup //false eq {exit} if
											0  4  ChargesData length 4 sub
											{
												/i exch def
												ChargesData i get X sub dup mul  ChargesData i 1 add get Y sub dup mul  add
												DropMinProximitySqd    dup ChargesData i 3 add get dup mul 4 div lt {4 div} if  % Allow closer for faster spins
												lt {pop //false exit} if  % Too close to a charge
											} for  % i
										} for  % length of this droplet
										{
											% There's a max step size = 0.36, giving a min number of points, spread evenly.
											% Then prunes to remove redundant points.  Consider point Previous, and much later point This. If all points Between have offset from
											% Previous-This line of no more than 0.18 points, and an angle of less than 3 degrees, bin Between. Keep last this of which this so.
											[
												/IP 0 def  % Herein P=Previous; T=This; B=Between
												Drplt IP 4 getinterval aload pop
												{
													/XP Drplt IP       get def
													/YP Drplt IP 1 add get def
													Drplt length dup 4 mod sub 4 sub  -4  IP 4 add  % Going backwards finds good long stretches quicker
													{
														/IT exch def
														/XT Drplt IT       get def
														/YT Drplt IT 1 add get def
														//true  % Prev and This good, in that no Between yet fails tests
														IP 4 add  4  IT 4 sub
														{
															/IB exch def
															/XB Drplt IB       get def
															/YB Drplt IB 1 add get def

															XB XP sub dup mul  YB YP sub dup mul  add
															XT XB sub dup mul  YT YB sub dup mul  add  mul  dup abs 1E-16 gt  % Units of pt^4
															{
																XB XP sub  XT XB sub  mul  % Equal-deepest indentation of code in whole program.
																YB YP sub  YT YB sub  mul add dup mul  exch div
																//Cos01Sqd lt {pop //false exit} if
															} {pop} ifelse  % ... abs 1E-16 gt

															YT YP sub dup mul  XT XP sub dup mul  add  dup abs 1E-08 gt  % Units of pt^2
															{
																% http://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points
																YT YP sub XB mul  XT XP sub YB mul sub  XT YP mul add  XP YT mul sub  dup mul  exch div  0.0324 ge {pop //false exit} if  % dist^2 >= 0.18pt^2
															} {pop} ifelse  % ... abs 1E-08 gt
														} //ForReverseBinary exec  % IB. 'shuffled' order finds failures quicker.
														{
															Drplt IT 4 getinterval aload pop
															/IP IT def   exit
														} if  % This is good
													} for  % IT
													IP  Drplt length 4 sub  ge {exit} if
												} loop  % effectively over IP
											]  % droplet re-construction; removal of redundant points
										} if  % Droplet on page and not too close to something
									} if  % Drplt length 8 ge
								} if  % Start not far from paintable part of page
							} for  % Dim2
						} for  % Dim1
					} if  % Droplets (so if not, empty array)
				] dup {dup length dup 4 mod sub 1 sub get exch dup length dup 4 mod sub 1 sub get lt} ShellSort  % First paint those ending nearest charges, so that heads overlay tails.
				dup length DropletsProportionBackwards dup 0 gt {dup 1 gt {pop} {mul ceiling cvi} ifelse} {pop pop 0} ifelse array  DropletsWhichReversed exch  SheetNum exch  put
				DropletsProportionBackwards 0 gt
				{
					/protoThisSheet exch def
					/DrpltReversedCount 0 def
					/DrpltNonShortCount 0 def
					[
						0  1  protoThisSheet length 1 sub
						{
							/DrpltNum exch def
							protoThisSheet DrpltNum get length  8  ge {/DrpltNonShortCount  DrpltNonShortCount 1 add  store} if
							DropletsProportionBackwards DrpltNonShortCount mul  DrpltReversedCount 0.5 add  gt   protoThisSheet DrpltNum get length 8 ge  and
							{
								DropletsWhichReversed SheetNum get  DrpltReversedCount  DrpltNum  put
								/DrpltReversedCount  DrpltReversedCount 1 add  store
								[
									protoThisSheet DrpltNum get length dup 4 mod sub 4 sub  -4  0
									{
										/IT exch def
										protoThisSheet DrpltNum get IT       get  % X
										protoThisSheet DrpltNum get IT 1 add get  % Y
										protoThisSheet DrpltNum get IT 2 add get  protoThisSheet DrpltNum get dup length 2 sub get exch sub  dup 0 lt {pop 0} if  % distance along
										protoThisSheet DrpltNum get IT 3 add get  % Potential
									} for  % IT
								]
							} {protoThisSheet DrpltNum get} ifelse  % Reversing
							readonly
						} for  % /DrpltNum
					] readonly  % all droplets for this SheetNum
				}  {dup {readonly pop} forall  readonly}  ifelse  % DropletsProportionBackwards 0 gt
			} bind for  % SheetNum
			end
		] readonly def  % /DropletPaths
		DeBugLevel 50 le {(-DropletPaths computation) OutputToLog} if
		DeBugLevel 50 le {(+DropletPaths logging) OutputToLog} if
		mark
		{
			(Droplets will cover approximately )  % Calculations in file .../Port_PS/Old/Old_2019/20191019_area_droplets.nb
			2 //Sqrt3 div DropletsAverageSeparation dup mul div 0.0625 1 DropletsPathLength dup mul div neg DropletsOuterWidthEnd mul 2 DropletsOuterWidthStart mul DropletsPathLength dup mul div add DropletsOuterWidthEnd mul
			DropletsOuterWidthStart DropletsPathLength 2 mul sub DropletsPathLength dup mul div DropletsOuterWidthStart DropletsPathLength 2 mul add mul sub sqrt mul DropletsPathLength div DropletsOuterWidthEnd mul 0.0625
			DropletsPathLength div 1 DropletsPathLength dup mul div neg DropletsOuterWidthEnd mul 2 DropletsOuterWidthStart mul DropletsPathLength dup mul div add DropletsOuterWidthEnd mul DropletsOuterWidthStart DropletsPathLength
			2 mul sub DropletsPathLength dup mul div DropletsOuterWidthStart DropletsPathLength 2 mul add mul sub sqrt neg DropletsOuterWidthStart mul 2 DropletsPathLength mul 2 DropletsOuterWidthEnd DropletsOuterWidthStart sub
			DropletsOuterWidthEnd neg 2 DropletsOuterWidthStart mul add DropletsOuterWidthEnd mul DropletsOuterWidthStart DropletsPathLength 2 mul sub DropletsOuterWidthStart DropletsPathLength 2 mul add mul sub sqrt atan
			//DegreeInRadians mul mul //Pi add mul add mul add DropletsOuterWidthEnd mul 0.0625 DropletsPathLength dup mul div DropletsOuterWidthEnd neg 2 DropletsOuterWidthStart mul add DropletsOuterWidthEnd mul DropletsOuterWidthStart
			DropletsPathLength 2 mul sub DropletsOuterWidthStart DropletsPathLength 2 mul add mul sub dup sqrt mul mul add DropletsOuterWidthEnd mul 0.0625 DropletsOuterWidthStart mul DropletsPathLength dup mul div DropletsOuterWidthEnd
			neg 2 DropletsOuterWidthStart mul add DropletsOuterWidthEnd mul DropletsOuterWidthStart DropletsPathLength 2 mul sub DropletsOuterWidthStart DropletsPathLength 2 mul add mul sub dup sqrt mul mul add mul
			100 mul  dup 1 gt {1} {dup 0.2 gt {2} {4} ifelse} ifelse FormatDecimalPlaces
			(% of non-margin bare page \(ignoring overlaps and hollow inners, assuming no sharp turns, etc\).\n)
		} Stopped pop  % Stopped in case any of these parameters are code referring to something presently undefined.
		(DropletsCharges is equivalent to [) DropletsChargesText aload pop (  ]  % Reminder: SheetNum [X Y] Charge Spin ...\n)
		(DropletsProportionBackwards = )  /DropletsProportionBackwards load (.)
		(\nDropletPaths, number on each SheetNum = ) [ DropletPaths {length} forall ] ToString TrimSpaces
		(. Frequencies of the number of points in individual droplets: )
		11 dict begin  /FrequencyDict << >> def
		/LengthsNum 0 def  /LengthsSum 0 def
		DropletPaths { {
			length dup 4 mod sub 4 idiv  dup LengthsSum add /LengthsSum exch def /LengthsNum LengthsNum 1 add def
			dup FrequencyDict exch known {dup FrequencyDict exch get 1 add} {1} ifelse FrequencyDict 3 1 roll put
		} forall} forall
		LengthsNum 0 gt
		{
			[ FrequencyDict { [ 3 1 roll ] } forall ] dup {0 get exch 0 get gt} ShellSort   dup dup length 1 sub get 0 get /LengthsMax exch def
			{aload pop (*) exch dup 100 mul LengthsNum div dup 0.15 gt {dup 1 FormatDecimalPlaces dup cvr 3 -1 roll sub abs 0.001 le {(=)} {(~=)} ifelse exch (%)} {pop} ifelse (; )} forall pop
			(. Total = ) LengthsSum (; avg length ) LengthsSum LengthsNum div  dup 2 FormatDecimalPlaces dup cvr 3 -1 roll sub abs 0.00001 le {(= )} {(~= )} ifelse exch (.)
			LengthsMax 4 gt
			{
				(\nE.g. of length ) LengthsMax (:)
				0  1  NumSheets 1 sub
				{
					/SheetNum exch def
					/RemainingMaxToShow 4 def
					DropletPaths SheetNum get
					{
						dup length LengthsMax 4 mul eq
						{
							dup length 4 sub 2 getinterval aload pop /Y exch def /X exch def
							/DistsSqrdBest //Infinity dup mul def
							0  1  GlassPositions SheetNum get length 1 sub
							{
								/WithinPage exch def
								GlassPositions SheetNum get WithinPage get aload pop Y sub dup mul exch X sub dup mul add
								dup DistsSqrdBest lt {/DistsSqrdBest exch def  /WithinPageBest WithinPage def} {pop} ifelse
							} for  % WithinPage
							( on SheetNum=) SheetNum ( head is )
							GlassPositions SheetNum get WithinPageBest get aload pop Y sub dup mul exch X sub dup mul add sqrt Radii SheetNum get div  2 FormatDecimalPlaces ( radii )
							GlassPositions SheetNum get WithinPageBest get aload pop Y exch sub exch X exch sub exch atan  CompassPointText
							( of centre of circle with Title=") Titles GlassesOnSheets SheetNum GetEU WithinPageBest GetEU get ASCIIfy (") (;)
							/RemainingMaxToShow RemainingMaxToShow 1 sub def   RemainingMaxToShow 0 le {pop exit} if
						} {pop} ifelse  % longest
					} forall % Droplets in DropletPaths SheetNum get
				} for pop (.)  % SheetNum
			} if  % LengthsMax 4 get
		} if  % LengthsNum 0 gt
		ConcatenateToMark OutputToLog
		end
		DeBugLevel 50 le {(-DropletPaths logging) OutputToLog} if

		% SheetNum Llx Lly Urx Ury WithinPage DropletsPaint  -
		/DropletsPaint
		{
			DeBugLevel 75 le {(+DropletsPaint) OutputToLog} if
			31 dict begin
			/WithinPage exch def /Ury exch def  /Urx exch def  /Lly exch def  /Llx exch def  /SheetNum exch def
			newpath  1 currentlinecap ne {1 setlinecap} if  currentdash pop length 0 ne {[] 0 setdash} if
			0  1  1
			{
				1 eq /DropletShowReversed exch def
				0  1  DropletPaths SheetNum get length 1 sub
				{
					/DropletNum exch def
					DropletShowReversed   //false DropletsWhichReversed SheetNum get {DropletNum eq {pop //true exit} if} forall  eq  % Is this reversed, and does that match DropletShowReversed
					{
						/ThisDroplet DropletPaths SheetNum get DropletNum get def
						ThisDroplet length dup  5 eq  exch dup 4 ge exch 4 mod 0 eq and  or
						{
							ThisDroplet length 8 ge
							{
								/DistStart  ThisDroplet 2 get  def
								/DistTotal  ThisDroplet dup length 2 sub get  DistStart sub  def
								DistTotal //PrinterEpsilon gt  % I.e., can draw a line.
								{
									0  1  1
									{
										1 eq /IsInner exch def
										IsInner
										{
											/DpWS DropletsInnerWidthStart def  % These might be code doing randomisation. Even if so, fixed per droplet, so independent of i.
											/DpWE DropletsInnerWidthEnd   def
											/DpGS DropletsInnerGrayStart  def
											/DpGE DropletsInnerGrayEnd    def
										}{
											/DpWS DropletsOuterWidthStart def  % These might be code doing randomisation. Even if so, fixed per droplet, so independent of i.
											/DpWE DropletsOuterWidthEnd   def
											/DpGS DropletsOuterGrayStart  def
											/DpGE DropletsOuterGrayEnd    def
										} ifelse  % IsInner
										DpWS 0 gt  DpWE 0 gt  or
										{
											% Testing whether droplet is paintable. Testing it in this inner loop after assignment of (the likes of) DpGS, in case (ditto) DropletsInnerGrayStart invoke rand.
											4  4  ThisDroplet length 1 sub  % The third of these for parameters replaced by sensible value if any line crosses the inside. Used 38 lines below; perhaps modified before.
											//true  % All points outside box
											4 copy pop
											{
												/i exch def
												/X0  ThisDroplet i 4 sub get  def
												/Y0  ThisDroplet i 3 sub get  def
												/X1  ThisDroplet i       get  def
												/Y1  ThisDroplet i 1 add get  def
												X0 Llx gt  X1 Urx lt  and   X1 Llx gt  X0 Urx lt  and  or
												Y0 Lly gt  Y1 Ury lt  and   Y1 Lly gt  Y0 Ury lt  and  or  and  {pop //false exit} if
											} for  % i, to determine whether doing next i loop
											{pop -1} if  % If all points outside box
											dup 4 ge  WithinPage 0 ge  and  % If already not this droplet, then not this droplet; if WithinPage negative, ignored.
											{
												//true  % Further from circle WithinPage than from all others
												0  4  ThisDroplet length 1 sub
												{
													/i exch def
													//true  % Point i closest to WithinPage
													0  1  GlassPositions SheetNum get length 1 sub
													{
														/WP exch def
														WithinPage WP ne
														{
															% Double test on points: at most Radius+DropletsPathLength from centre; closer to WithinPage than WP.
															GlassPositions SheetNum get WithinPage get aload pop
															ThisDroplet i 1 add get sub dup mul exch  ThisDroplet i get sub dup mul  add
															dup Radii SheetNum get DropletsPathLength add dup mul gt exch
															GlassPositions SheetNum get WP         get aload pop
															ThisDroplet i 1 add get sub dup mul exch  ThisDroplet i get sub dup mul  add
															gt or {pop //false exit} if  % Point i further from WithinPage than from WP
														} if  % WithinPage WP ne
													} for  % WP
													{pop //false exit} if  % Not further from WithinPage than all others
												} for  % i
												{pop -1} if  % Further from circle WithinPage than from all others
											} if  % dup 4 ge  WithinPage 0 ge  and
											% Three integer loop parameters from 38 lines above, perhaps modified since
											{
												% Some effort not to add to size of PDF. E.g.: don't setgray to currentgray; don't setlinewidth to currentlinewidth.
												/i exch def
												/X0  ThisDroplet i 4 sub get  def
												/Y0  ThisDroplet i 3 sub get  def
												/F0  ThisDroplet i 2 sub get  DistStart sub  DistTotal div def
												/X1  ThisDroplet i       get  def
												/Y1  ThisDroplet i 1 add get  def
												/F1  ThisDroplet i 2 add get  DistStart sub  DistTotal div def
												/LW0  1 F0 sub DpWS mul  F0 DpWE mul  add  def  % /LW0
												/LW1  1 F1 sub DpWS mul  F1 DpWE mul  add  def  % /LW1
												LW0 LW1 mul 0 le
												{
													F0 LW1 mul F1 LW0 mul sub  LW1 LW0 sub div
													X0 LW1 mul X1 LW0 mul sub  LW1 LW0 sub div
													Y0 LW1 mul Y1 LW0 mul sub  LW1 LW0 sub div
													LW0 0 le
														{/Y0 exch def  /X0 exch def  /F0 exch def  /LW0 0 def  /EndAtStart //true  def}
														{/Y1 exch def  /X1 exch def  /F1 exch def  /LW1 0 def  /EndAtStart //false def}
													ifelse  % LW0 0 lt
												} {/EndAtStart //false def} ifelse  % Different sides of zero
												LW0 0 gt LW1 0 ge and  LW1 0 gt LW0 0 ge and  or
												{
													/Gr0  1 F0 sub DpGS mul  F0 DpGE mul  add  def  % /Gr0
													/Gr1  1 F1 sub DpGS mul  F1 DpGE mul  add  def  % /Gr1
													/Dist X0 X1 sub dup mul Y0 Y1 sub dup mul add sqrt def
													LW1 LW0 sub abs //PrinterEpsilon le  Gr1 Gr0 sub abs 0.017 lt  and  % The 0.017 is a judgement. Too large and there can be apparent jumps in grey level. Too small overburdens PDF and printer with many shfill's.
													{
														/DeviceGray currentcolorspace 0 get ne  Gr1 currentgray sub abs 0.017 ge  or {Gr1 setgray} if
														LW1 currentlinewidth sub abs //PrinterEpsilon gt {LW1 setlinewidth} if
														1 currentlinecap ne {1 setlinecap} if
														X0 Y0 moveto X1 Y1 lineto stroke
													}{
														1 {
															/AngMain Y1 Y0 sub X1 X0 sub atan def  % /AngMain
															/AngSub  LW1 LW0 sub abs //PrinterEpsilon gt
															{
																LW1 2 div   Dist LW1 mul LW1 LW0 sub div dup mul  LW1 2 div dup mul sub
																	dup 0 lt {mark (Error in DropletsPaint) 0 4 ThisDroplet length 1 sub {(\n) exch ThisDroplet exch 4 getinterval {(\t)} forall} for  ConcatenateToMark OutputToLog pop pop pop exit} if
																2 copy 0 ne exch 0 ne or {sqrt atan} {pop pop 0} ifelse  LW1 LW0 lt {neg} if
															} {0} ifelse def  % /AngSub
															LW0 2 div  AngMain  90 AngSub add sub  2 copy cos mul X0 add  3 1 roll sin mul Y0 add moveto
															X1  Y1  LW1 2 div  AngMain -90 AngSub sub add  AngMain  90 AngSub add add  arc
															EndAtStart {closepath} {LW0 2 div  AngMain  90 AngSub add add  2 copy cos mul X0 add  3 1 roll sin mul Y0 add lineto} ifelse  % closepath done implicitly by fill; but fewer PDF bytes than lineto
															Gr1 Gr0 sub abs 0.017 lt
															{
																% i IsInner {2 mod 0.75 mul setgray} {3 mod 3 div 1 1 sethsbcolor} ifelse 0.017 setlinewidth stroke
																% X1 Y1 0.12 IsInner {2 div} if 0 360 arc  fill
																/DeviceGray currentcolorspace 0 get ne  Gr1 currentgray sub abs 0.017 ge  or {Gr1 setgray} if  fill
															}{
																clipsave clip
																<<
																	/ShadingType 2  % Axial shading
																	/ColorSpace /DeviceGray
																	/Coords [ X0 Y0 X1 Y1 ]
																	/Domain [ 0 1 ]
																	/Function <<
																		/FunctionType 2  % C0 + t ** N * (C1 - C0)
																		/Domain [ 0 1 ]
																		/C0 Gr0
																		/C1 Gr1
																		/N 1
																	>>  % /Function
																	/Extend [ true true ]
																>> shfill cliprestore newpath
															} ifelse  % Greys close
														} repeat  % 1
													} ifelse  % Greys close and widths the same
												} if  % Widths non-negative and at least 1 positive
											} for  % i, loop not happening unless any point of droplet inside Llx Lly Urx Ury
											/DropletsPaintAtEnd load dup length 0 gt {X1 Y1 moveto  exec} {pop} ifelse
										} if  % DpWS 0 gt  DpWE 0 gt  or
									} for  % IsInner
								} if  % DistTotal //PrinterEpsilon gt
							}{
								/X0  ThisDroplet 0 get  def   /Y0  ThisDroplet 1 get  def
								X0 Llx ge  X0 Urx le and  Y0 Lly ge and  Y0 Ury le and
								{
									ThisDroplet length 5 eq  % So 5th element is one of the two eigenvectors of the Hessian
									{
										DropletsOuterWidthEnd dup 0 gt
										{
											dup  DropletsInnerWidthEnd dup 0 gt {sub} {pop} ifelse 2 div dup currentlinewidth sub //PrinterEpsilon gt {setlinewidth} {pop} ifelse
											dup ThisDroplet 4 get aload pop 3 1 roll mul 3 1 roll mul  2 copy 2 copy exch neg 2 copy
											2 {Y0 add exch X0 add exch moveto  Y0 exch sub exch X0 exch sub exch lineto} repeat
											1 currentlinecap ne {1 setlinecap} if
											DropletsOuterGrayEnd dup  /DeviceGray currentcolorspace 0 get ne  exch currentgray sub abs 0.017 ge  or {setgray} {pop} ifelse
											stroke
										} {pop} ifelse  % DropletsOuterWidthEnd ... 0 gt
									} if  % ThisDroplet length 5 eq
									DropletsOuterWidthEnd 0 gt
									{
										DropletsOuterGrayEnd dup  /DeviceGray currentcolorspace 0 get ne  exch currentgray sub abs 0.017 ge  or {setgray} {pop} ifelse
										X0  Y0  DropletsOuterWidthEnd 2 div  0  360  arc   fill
									} if  % DropletsOuterWidthEnd 0 gt
									DropletsInnerWidthEnd 0 gt
									{
										DropletsInnerGrayEnd dup  /DeviceGray currentcolorspace 0 get ne  exch currentgray sub abs 0.017 ge  or {setgray} {pop} ifelse
										X0  Y0  DropletsInnerWidthEnd 2 div  0  360  arc   fill
									} if  % DropletsInnerWidthEnd 0 gt
								} if  % On page
							} ifelse  % ThisDroplet length 8 ge
						} if  % ThisDroplet length dup  5 eq  exch dup 4 ge exch 4 mod 0 eq and  or
					} if  % matches DropletShowReversed
				} for  % DropletNum, ThisDroplet
			} for  % DropletShowReversed
			end
			DeBugLevel 75 le {(-DropletsPaint) OutputToLog} if
		} bind def  % /DropletsPaint

		DeBugLevel 100 le {( Main: DropletsForms) OutputToLog} if
		/DropletsForms  [ NumSheets {5 dict} repeat ] def
		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			//false //false //false //false PaperType Orientation SetPaperSize   //true DefStoreMgns
			DropletsForms SheetNum get begin
			/SheetNum SheetNum def
			/FormType 1 def
			/BBox [ MgnL 0.5 sub  MgnB 0.5 sub  PageWidth MgnR 0.5 sub sub  PageHeight MgnB 0.5 sub sub ] def
			/Matrix matrix identmatrix def
			/PaintProc
			{
				DeBugLevel 100 le {(+DropletsForms: PaintProc) OutputToLog} if
				7 dict begin
				/SheetNum get /SheetNum exch def
				newpath  1 currentlinecap ne {1 setlinecap} if  currentdash pop length 0 ne {[] 0 setdash} if
				//false //false //false //false PaperType Orientation SetPaperSize   //true DefStoreMgns
				ClipSave  MgnL  MgnB  PageWidth MgnL MgnR add sub  PageHeight MgnB MgnT add sub  rectclip
				SheetNum  MgnL  MgnB  PageWidth MgnR sub  PageHeight MgnT sub  -1  DropletsPaint  ClipRestore
				end
				DeBugLevel 100 le {(-DropletsForms: PaintProc) OutputToLog} if
			} def  % /PaintProc
			end  % DropletsForms SheetNum get
		} bind for  % SheetNum
		UndefMgns
		currentdict /SheetNum undef

	} if  % ...Droplets...


	/FlightSeparations load MightBeTrue
	{
		DeBugLevel 100 le {( Main: FlightSeparationForms) OutputToLog} if
		/TypeOfPagesBeingRendered /Glasses store
		/FlightSeparationForms [ GlassesOnSheets length {6 dict} repeat ] def

		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			//false //false //false //false PaperType Orientation SetPaperSize
			//true DefStoreMgns
			FlightSeparationForms SheetNum get begin
			/SheetNum SheetNum def
			/FormType 1 def
			/BBox [ MgnL 2 div  MgnB 2 div  PageWidth MgnR 2 div sub  PageHeight MgnT 2 div sub ] def
			/Matrix matrix identmatrix def

			/PaintProc  % Paints flight separation lines
			{
				pop
				DeBugLevel 100 le {(+FlightSeparationForms: PaintProc) OutputToLog} if
				5 dict begin
				FlightSeparations {FlightSeparationLines SheetNum GetEU length 0 gt} {//false} ifelse
				{
					/MinCentreSeparation2  PageHeight MgnB MgnT add sub Radii SheetNum get 2 mul sub dup mul  PageWidth MgnL MgnR add sub Radii SheetNum get 2 mul sub dup mul  add def
					1  1  SheetLengths SheetNum get 1 sub
					{
						/WithinPageA exch def
						/WithinTitlesA GlassesOnSheets SheetNum GetEU WithinPageA GetEU def
						//false
						1 {
							Titles       WithinTitlesA get NonEmptyCompoundObject {pop //true exit} if
							Abovetitles  WithinTitlesA get NonEmptyCompoundObject {pop //true exit} if
							Belowtitles  WithinTitlesA get NonEmptyCompoundObject {pop //true exit} if
							Overtitles   WithinTitlesA get NonEmptyCompoundObject {pop //true exit} if
							Circlearrays WithinTitlesA get NonEmptyCompoundObject {pop //true exit} if
						} repeat  % 1
						{
							0  1  WithinPageA 1 sub
							{
								/WithinPageB exch def
								/WithinTitlesB GlassesOnSheets SheetNum GetEU WithinPageB GetEU def
								//false
								1 {
									Titles       WithinTitlesB get NonEmptyCompoundObject {pop //true exit} if
									Abovetitles  WithinTitlesB get NonEmptyCompoundObject {pop //true exit} if
									Belowtitles  WithinTitlesB get NonEmptyCompoundObject {pop //true exit} if
									Overtitles   WithinTitlesB get NonEmptyCompoundObject {pop //true exit} if
									Circlearrays WithinTitlesB get NonEmptyCompoundObject {pop //true exit} if
								} repeat  % 1
								{
									GlassPositions SheetNum get WithinPageA get aload pop
									GlassPositions SheetNum get WithinPageB get aload pop
									3 -1 roll sub dup mul 3 1 roll sub dup mul add
									dup MinCentreSeparation2 lt {/MinCentreSeparation2 exch def} {pop} ifelse
								} if  % B non-empty
							} for  % WithinPageB, WithinTitlesB
						} if  % A non-empty
					} for  % WithinPageA, WithinTitlesA
					currentdict /WithinPageB undef
					currentdict /WithinTitlesB undef
					currentdict /WithinPageA undef
					currentdict /WithinTitlesA undef
					/MaxPossibleArcRadius MinCentreSeparation2 sqrt 2 div Radii SheetNum get 2 copy lt {exch} if pop def  % Precision errors in sqrt
					currentdict /MinCentreSeparation2 undef
					GSave newpath
					0  1  FlightSeparationLines SheetNum GetEU length 1 sub
					{
						/FlightSeparationLineNum exch def
						/FlightSeparationArcRadius 1 FlightSeparationArcRadiusControl sub Radii SheetNum get mul FlightSeparationArcRadiusControl MaxPossibleArcRadius mul add def
						FlightSeparationLines SheetNum GetEU FlightSeparationLineNum GetEU FlightSeparationPath
						currentdash pop length 0 ne {[] 0 setdash} if  1 currentlinejoin ne {1 setlinejoin} if  0 currentlinecap ne {0 setlinecap} if  0.96 dup currentlinewidth ne {setlinewidth} {pop} ifelse  0.6 setgray  % sensible defaults
						FlightSeparationPaintSeparately {/FlightSeparationPaintCode load execU} if
					} for  % FlightSeparationLineNum
					currentdict /FlightSeparationLineNum undef
					FlightSeparationPaintSeparately not {/FlightSeparationPaintCode load execU} if
					GRestore
				} if  % FlightSeparations ... FlightSeparationLines SheetNum GetEU length 0 gt ...
				end
				DeBugLevel 100 le {(-FlightSeparationForms: PaintProc) OutputToLog} if
			} bind def  % /PaintProc
			end  % FlightSeparationForms
		} bind for  % SheetNum
		UndefMgns
		currentdict /SheetNum undef
	} if  % ... FlightSeparations ...


	DeBugLevel 100 le {( Main: TitleAboveBelowOverForms) OutputToLog} if
	/TypeOfPagesBeingRendered /Glasses store
	/TitleAboveBelowOverForms [ GlassesOnSheets {[ exch execU length {6 dict} repeat ]} forall ] def
	/TitleAboveBelowOverRandomSeeds [ Titles length {//null} repeat ] def

	/TitlesAboveBelowOverFillTextsInnerColour dup where {pop pop} {{ColourSchemeCurrent /MidGrey eq {0.6} {0} ifelse setgray} bind def} ifelse
	/TitlesAboveBelowOverFillTextsOuterColour dup where {pop pop} {{1 setgray} bind def} ifelse
	/TitlesStrokeCode      dup where {pop pop} {{1.44 dup currentlinewidth ne {setlinewidth} {pop} ifelse ColourSchemeCurrent /MidGrey eq {0.25 setgray stroke} {FillTextsCurrent {0 setgray stroke} if} ifelse} bind def} ifelse
	/AbovetitlesStrokeCode dup where {pop pop} {{0.72 dup currentlinewidth ne {setlinewidth} {pop} ifelse ColourSchemeCurrent /MidGrey eq {0.25 setgray stroke} {FillTextsCurrent {0 setgray stroke} if} ifelse} bind def} ifelse
	/BelowtitlesStrokeCode dup where {pop pop} {{0.72 dup currentlinewidth ne {setlinewidth} {pop} ifelse ColourSchemeCurrent /MidGrey eq {0.25 setgray stroke} {FillTextsCurrent {0 setgray stroke} if} ifelse} bind def} ifelse
	/OvertitlesStrokeCode
	{
		0.96 dup currentlinewidth ne {setlinewidth} {pop} ifelse
		ColourSchemeCurrent /MidGrey eq
		{
			ColourSchemeTitles /MidGrey eq {0} {0.25} ifelse setgray stroke
		}{
			ColourSchemeTitles /MidGrey eq
				{FillTitles {0.25 setgray stroke} {newpath} ifelse}
				{FillTitles not {1 setgray} if stroke}
			ifelse  % ColourSchemeTitles /MidGrey eq
		} ifelse  % ColourSchemeCurrent /MidGrey eq
	} bind def  % /OvertitlesStrokeCode
	/TitlesAboveBelowOverFillCode {ColourSchemeCurrent /MidGrey eq {0.75} {0} ifelse setgray fill} bind def
	/TitlesAboveBelowOverInlinePaleStrokeCode {1 currentlinejoin ne {1 setlinejoin} if  1 setgray stroke} bind def
	/TitlesAboveBelowOverInlineDarkStrokeCode {1 currentlinejoin ne {1 setlinejoin} if  ColourSchemeCurrent /MidGrey eq {0.4} {0} ifelse setgray stroke} bind def

	/AnnotateGlass
	{
		3 dict begin
		/AnnotationCount 0 def
		0  2  GlassesAnnotations length 2 sub  dup 0 ge {//false PageSuppressed {pop -1} if} if
		{
			dup GlassesAnnotations exch GetEU WithinTitles eq
			{
				[ TitleAboveBelowOverR SheetNum get WithinPage get  TitleAboveBelowOverL SheetNum get WithinPage get  2 copy add 2 div ] AnnotationCount 3 idiv get
				[ TitleProportionFontSizeT SheetNum get WithinPage get  TitleProportionFontSizeB SheetNum get WithinPage get  2 copy add 2 div exch ] AnnotationCount 3 mod get
				TitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get add TitleFontSizes SheetNum get WithinPage get mul
				moveto matrix currentmatrix exch InitialMatrix setmatrix currentpoint newpath /Y exch def /X exch def
				mark exch
					1 add GlassesAnnotations exch GetEU PDFDocEncodingify /Contents exch
					/Title [Titles WithinTitles get (: annotation)] PDFDocEncodingify
					/Rect [ X Y 2 copy ]  % pdfmark Reference, June 2008, says this is in user space. But Adobe XI has it in device space. Bug. Avoiding bug and its subsequent repair by working in device space.
					/Subtype /Text   /Open //true   /F 64 128 add  % ReadOnly + Locked. PDFReference16.pdf page 574
				/ANN pdfmark
				setmatrix  /AnnotationCount AnnotationCount 1 add store   AnnotationCount 9 ge {exit} if
			} {pop} ifelse  % ... WithinTitles eq
		} for  % 'GlassesAnnotations'
		end
	} bind def  % AnnotateGlass
	/InlineTitlesNumberContours      [ SheetLengths {array} forall ] def
	/InlineAbovetitlesNumberContours [ SheetLengths {array} forall ] def
	/InlineBelowtitlesNumberContours [ SheetLengths {array} forall ] def
	/InlineOvertitlesNumberContours  [ SheetLengths {array} forall ] def
	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		//false //false //false //false PaperType Orientation SetPaperSize
		//true DefStoreMgns
		0  1  SheetLengths SheetNum get 1 sub
		{
			dup TitleAboveBelowOverForms SheetNum get exch get begin
			WithinPage-WithinTitles-def

			/FormType 1 def
			/BBox [ RadiiCirclearrayInside SheetNum get 1.2 add dup dup neg dup 4 2 roll ] def  % Slightly outside minimal box
			/Matrix matrix identmatrix def
			/PaintProc  % Paints Title and Abovetitle and Belowtitle and Overtitle
			{
				DeBugLevel 100 le {(+TitleAboveBelowOverForms: PaintProc) OutputToLog} if
				dup % dictionary parameter of execform containing WithinTitles and WithinPage
				/TypeOfPagesBeingRendered /Glasses store
				/WithinTitles get /WithinTitles exch def
				/WithinPage get /WithinPage exch def

				TitleAboveBelowOverRandomSeeds WithinTitles 2 copy get //null eq {rrand put} {get srand} ifelse
				/NextRand rrand def

				0 0 moveto

				FillTitles FillAbovetitles FillBelowtitles FillOvertitles or or or
				{
					/ThisFillTextAngle
					FillTextAngle IsNumber {FillTextAngle}
					{
						FillTextAngle /Name eq
						{
							NamesShowTop SheetNum get {PageHeight MgnT sub} {MgnB} ifelse   GlassPositions SheetNum get WithinPage get 1 get sub
							NamesShowTop SheetNum get {NamePlacementTopX} {NamePlacementBottomX} ifelse SheetNum get   GlassPositions SheetNum get WithinPage get 0 get sub   Atan
						} {-90} ifelse  % /Name
						FillTextAngle dup dup  /LowerLeft eq exch  /LowerCenter eq or exch  /LowerRight eq or {pop                  GlassPositions SheetNum get WithinPage get 1 get neg} if
						FillTextAngle dup dup /MiddleLeft eq exch /MiddleCenter eq or exch /MiddleRight eq or {pop PageHeight 2 div GlassPositions SheetNum get WithinPage get 1 get sub} if
						FillTextAngle dup dup  /UpperLeft eq exch  /UpperCenter eq or exch  /UpperRight eq or {pop PageHeight       GlassPositions SheetNum get WithinPage get 1 get sub} if
						FillTextAngle dup dup /LowerLeft   eq exch /MiddleLeft   eq or exch /UpperLeft   eq or {                GlassPositions SheetNum get WithinPage get 0 get neg  Atan} if
						FillTextAngle dup dup /LowerCenter eq exch /MiddleCenter eq or exch /UpperCenter eq or {PageWidth 2 div GlassPositions SheetNum get WithinPage get 0 get sub  Atan} if
						FillTextAngle dup dup /LowerRight  eq exch /MiddleRight  eq or exch /UpperRight  eq or {PageWidth       GlassPositions SheetNum get WithinPage get 0 get sub  Atan} if
						dup /UndefinedAtan eq {pop 0} {90 add} ifelse
						{dup  90 gt {180 sub} {exit} ifelse} loop   {dup -90 lt {180 add} {exit} ifelse} loop
						dup abs 89.9 gt
						{
							FillTextAngle /MiddleLeft   eq {pop -90} if
							FillTextAngle /MiddleCenter eq {pop GlassPositions SheetNum get WithinPage get 0 get  PageWidth 2 div 1 add gt {-90} {GlassPositions SheetNum get WithinPage get 0 get  PageWidth 2 div 1 sub lt {90} {0} ifelse} ifelse} if
							FillTextAngle /MiddleRight  eq {pop 90} if
						} if  % abs 89.9 gt
					} ifelse  % FillTextAngle IsNumber
					RotationTitlesAboveBelowOverCirclearray sub   def  % /ThisFillTextAngle

					/ThisFillFontSize  FillTextMinFontSizeAbsolute
					FillTitles      Titles      WithinTitles get NonEmptyCompoundObject and {TitleFontSizes    SheetNum get WithinPage get FillTextMinFontSizeProportionLargestTitleAboveBelowOver mul} {0} ifelse
					FillAbovetitles Abovetitles WithinTitles get NonEmptyCompoundObject and {AbovetitleFontSizes SheetNum get WithinPage get FillTextMinFontSizeProportionLargestTitleAboveBelowOver mul} {0} ifelse
					FillBelowtitles Belowtitles WithinTitles get NonEmptyCompoundObject and {BelowtitleFontSizes SheetNum get WithinPage get FillTextMinFontSizeProportionLargestTitleAboveBelowOver mul} {0} ifelse
					FillOvertitles  Overtitles WithinTitles get NonEmptyCompoundObject and { OvertitleFontSizes SheetNum get WithinPage get FillTextMinFontSizeProportionLargestTitleAboveBelowOver mul} {0} ifelse
					4 {2 copy lt {exch} if pop} repeat   def  % /ThisFillFontSize
				} if  % FillTitles FillAbovetitles FillBelowtitles FillOvertitles or or or

				CrossHatchingTitles CrossHatchingAbovetitles CrossHatchingBelowtitles CrossHatchingOvertitles or or or
				{
					matrix currentmatrix

					NamesShowTop SheetNum get {NamePlacementTopX} {NamePlacementBottomX} ifelse SheetNum get  % default CentreX for CrossHatching
					CrossHatchingCentreX IsNumber {pop CrossHatchingCentreX} if
					/Left   CrossHatchingCentreX eq {pop 0} if
					/Center CrossHatchingCentreX eq {pop PageWidth MgnL MgnR sub add 2 div} if
					/Right  CrossHatchingCentreX eq {pop PageWidth} if
					/CenterSheetsSamePageOrdering CrossHatchingCentreX eq  SideBySideGlassesTastingNotes not  and
					{
						pop 0
						0  1  GlassesOnSheets length 1 sub
						{
							/SheetNum0 exch def
							PageOrderingGlasses dup SheetNum0 GetEU exch SheetNum GetEU eq
							{
								//false //false //false //false  << /SheetNum SheetNum0 >> begin PaperType Orientation end  SetPaperSize   PageWidth  SheetNum0 SheetNum lt {sub} {add} ifelse
							} if  % PageOrderingGlasses ... eq
						} for  % SheetNum0
						2 div   currentdict /SheetNum0 undef   //false //false //false //false PaperType Orientation SetPaperSize
					} if  % /CrossHatchingCentreX /CenterSheetsSamePageOrdering eq  SideBySideGlassesTastingNotes not  and

					NamesShowTop SheetNum get {PageHeight MgnT sub} {MgnB} ifelse  % cross hatching center y
					CrossHatchingCentreY IsNumber {pop CrossHatchingCentreY} if
					/Bottom CrossHatchingCentreY eq {pop 0} if
					/Middle CrossHatchingCentreY eq {pop PageHeight MgnB MgnT sub add 2 div} if
					/Top    CrossHatchingCentreY eq {pop PageHeight} if

					RotationTitlesAboveBelowOverCirclearray dup 0 ne {neg rotate} {pop} ifelse  GlassPositions SheetNum get WithinPage get aload pop neg exch neg exch translate
					moveto setmatrix currentpoint newpath  /CHCY exch def /CHCX exch def
				} if  % CrossHatchingTitles CrossHatchingAbovetitles CrossHatchingBelowtitles CrossHatchingOvertitles or or or

				TitleFontSizes SheetNum get WithinPage get  0  gt
				{
					TitleAboveBelowOverRandomSeeds WithinTitles get srand
					/ColourSchemeCurrent ColourSchemeTitles def
					/FillTextsCurrent FillTitles def

					TitleFontSizesMaxByPage SheetNum get  ColourSchemeCurrent /MidGrey eq {60 div 0.96} {120 div 0.48} ifelse  % Embedded constants
					2 copy gt {exch} if pop   FillTextsCurrent {1.25 mul} if   dup currentlinewidth ne {setlinewidth} {pop} ifelse
					1 currentlinecap ne {1 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if
					InlineTitles
					{
						/InlinePath % https://groups.google.com/forum/#!topic/comp.lang.postscript/ewwOV_qN4JQ    https://acrobat.uservoice.com/forums/590923-acrobat-for-windows-and-mac/suggestions/19193479-distiller-charpath-clip-stroke-does-not-honou
						{
							TitlesFont  TitleFontSizes SheetNum get WithinPage get  selectfont
							TitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get
							TitleFontSizes SheetNum get WithinPage get  mul
							TitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get
							TitleFontSizes SheetNum get WithinPage get  mul
							moveto
							Titles WithinTitles get  //true  CharPathRecursive
						} def  % /InlinePath
						InlinePath GSave clip InlinePrefillWhite {1 setgray fill} {newpath} ifelse newpath InlinePath  % https://groups.google.com/forum/#!topic/comp.lang.postscript/ewwOV_qN4JQ
						/InlineBlackPlusWhite  InlineTitlesBlackWidth InlineTitlesWhiteWidth add abs 2 mul  def  % 2 mul because half of the linewidth clip'ped away
						InlineTitlesAttemptMinimiseNumContours
						{
							InlineTitlesNumberContours SheetNum get WithinPage 2 copy get IsNumber
								{get}
								{InlineBlackPlusWhite LineWidthThatCoversPath pop InlineBlackPlusWhite div ceiling cvi  dup 4 1 roll put}
							ifelse  % ... IsNumber
						} {//IntegerMax} ifelse  % InlineTitlesAttemptMinimiseNumContours
						/InlineFirst //true def
						TitleFontSizes SheetNum get WithinPage get InlineBlackPlusWhite div ceiling cvi  InlineTitlesMaxNumberContours
						2 {2 copy gt {exch} if pop} repeat   -1   1
						{
							/i exch def
							InlineFirst
								{/InlineFirst //false store}
								{InlineBlackPlusWhite i mul GSave dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlinePaleStrokeCode GRestore}
							ifelse  % InlineFirst
							i 1 gt {InlineTitlesBlackWidth i mul InlineTitlesWhiteWidth i 1 sub mul add 2 mul GSave dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlineDarkStrokeCode GRestore} if
						} for  % i
						GRestore
					} if  % InlineTitles
					FillTextsCurrent
					{
						TitlesFont  TitleFontSizes SheetNum get WithinPage get  selectfont
						TitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get
						TitleFontSizes SheetNum get WithinPage get  mul
						TitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get
						TitleFontSizes SheetNum get WithinPage get  mul
						moveto
						Titles WithinTitles get  //true  CharPathRecursive
						GSave FillTextNumOutlines 2 mod 0 eq {TitlesAboveBelowOverFillTextsOuterColour} {TitlesAboveBelowOverFillTextsInnerColour} ifelse fill GRestore
						GSave
						FillTextFont ThisFillFontSize  selectfont
						% X Y  Filltitle  FillTextNumSpaces  FilltitleLineStep  Angle  NumOutlines  InnerMostColor OtherColor  RepeatClippedWithin  -
						0  0  FillTexts WithinTitles get  FillTextNumSpaces  ThisFillFontSize 1.125 mul  ThisFillTextAngle  FillTextNumOutlines
						/TitlesAboveBelowOverFillTextsInnerColour load  /TitlesAboveBelowOverFillTextsOuterColour load
						1 dict begin
						FillPrioritiseSmallFileSizeOverPortability {/DeFontPath {} def} if
						RepeatClippedWithin
						end
						GRestore
						1 currentlinecap ne {1 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if  GSave  TitlesStrokeCode  GRestore
					} if  % FillTextsCurrent
					FillTextsCurrent not  InlineTitles not  and
					{
						TitlesFont  TitleFontSizes SheetNum get WithinPage get  selectfont
						TitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get
						TitleFontSizes SheetNum get WithinPage get  mul
						TitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get
						TitleFontSizes SheetNum get WithinPage get  mul
						moveto   0 setgray
						1 currentlinecap ne {1 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if
						Titles WithinTitles get  //false  CharPathRecursive
						GSave TitlesStrokeCode GRestore GSave TitlesAboveBelowOverFillCode GRestore
					} if  % FillTextsCurrent not  InlineTitles not  and
					CrossHatchingTitles
					{
						0.5 setgray  0 currentlinecap ne {0 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if
						CHCX CHCY /CrossHatchingTitlesStrokeCode load RadialCrossHatching
					} if  % CrossHatchingTitles
					ShapesInTitles
					{
						0.5 setgray  0 currentlinecap ne {0 setlinecap} if  0 setlinejoin  currentdash pop length 0 ne {[] 0 setdash} if
						0.36  TypeOfPagesBeingRendered /PlaceName eq {PlaceNamesDetailsScalingFactor mul} if  dup currentlinewidth ne {setlinewidth} {pop} ifelse
						RadiiCirclearrayInsideUsableTAB SheetNum get dup dup neg dup 4 2 roll
						/ShapesTitlesFill load /ShapesTitlesStroke load  ShapesTitlesClip  ShapesClippedToPath
					} if  % ShapesInTitles
					InlineTitles  % Doing the terminal '1' from the loop 50ish lines above here
					{
						GSave newpath InlinePath clip newpath InlinePath  % https://groups.google.com/forum/#!topic/comp.lang.postscript/ewwOV_qN4JQ
						InlineTitlesBlackWidth 2 mul dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlineDarkStrokeCode GRestore
					} if  % InlineTitles
					newpath
					TitleAboveBelowOverRandomSeeds WithinTitles get  rrand  ne {/NextRand rrand def} if
				} if  % TitleFontSizes of non-zero size

				OvertitleFontSizes SheetNum get WithinPage get  //PrinterEpsilon  gt
				{
					TitleAboveBelowOverRandomSeeds WithinTitles get srand
					/ColourSchemeCurrent ColourSchemeOvertitles def
					/FillTextsCurrent FillOvertitles def
					0 setgray
					OvertitleFontSizesMaxByPage SheetNum get  ColourSchemeCurrent /MidGrey eq {60 div 0.96} {120 div 0.48} ifelse
					2 copy gt {exch} if pop   FillOvertitles {1.25 mul} if   dup currentlinewidth ne {setlinewidth} {pop} ifelse
					InlineOvertitles
					{
						/InlinePath % https://groups.google.com/forum/#!topic/comp.lang.postscript/ewwOV_qN4JQ     https://acrobat.uservoice.com/forums/590923-acrobat-for-windows-and-mac/suggestions/19193479-distiller-charpath-clip-stroke-does-not-honou
						{
							OvertitlesFont  OvertitleFontSizes SheetNum get WithinPage get  selectfont
							OvertitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get
							OvertitleFontSizes SheetNum get WithinPage get  mul
							OvertitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get  OvertitleFontSizes SheetNum get WithinPage get  mul
							moveto   Overtitles WithinTitles get  //true  CharPathRecursive
						} def  % InlinePath
						InlinePath GSave clip InlinePrefillWhite {1 setgray fill} {newpath} ifelse newpath InlinePath  % https://groups.google.com/forum/#!topic/comp.lang.postscript/ewwOV_qN4JQ
						/InlineBlackPlusWhite  InlineOvertitlesBlackWidth InlineOvertitlesWhiteWidth add abs 2 mul  def  % 2 mul because half of the linewidth clip'ped away
						InlineAboveBelowOverAttemptMinimiseNumContours
						{
							InlineOvertitlesNumberContours SheetNum get WithinPage 2 copy get IsNumber
								{get}
								{InlineBlackPlusWhite LineWidthThatCoversPath pop InlineBlackPlusWhite div ceiling cvi  dup 4 1 roll put}
							ifelse  % ... IsNumber
						} {//IntegerMax} ifelse  % InlineAboveBelowOverAttemptMinimiseNumContours
						/InlineFirst //true def
						OvertitleFontSizes SheetNum get WithinPage get InlineBlackPlusWhite div ceiling cvi  InlineOvertitlesMaxNumberContours
						2 {2 copy gt {exch} if pop} repeat   -1   2  % Down to 2, as '1' is handled after ShapesInOvertitles etc
						{
							/i exch def
							InlineFirst
								{/InlineFirst //false store}
								{InlineBlackPlusWhite i mul GSave dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlinePaleStrokeCode GRestore}
							ifelse  % InlineFirst
							i 1 gt {InlineOvertitlesBlackWidth i mul InlineOvertitlesWhiteWidth i 1 sub mul add 2 mul GSave dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlineDarkStrokeCode GRestore} if
						} for  % i
						GRestore
					} if  % InlineOvertitles
					FillTextsCurrent
					{
						OvertitlesFont  OvertitleFontSizes SheetNum get WithinPage get  selectfont
						OvertitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get
						OvertitleFontSizes SheetNum get WithinPage get  mul
						OvertitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get  OvertitleFontSizes SheetNum get WithinPage get  mul
						moveto   Overtitles WithinTitles get  //true  CharPathRecursive
						GSave FillTextNumOutlines 2 mod 0 eq {TitlesAboveBelowOverFillTextsOuterColour} {TitlesAboveBelowOverFillTextsInnerColour} ifelse fill GRestore
						GSave
						FillTextFont ThisFillFontSize  selectfont
						% X Y  Fulltitle  FillTextNumSpaces  FulltitleLineStep  Angle  NumOutlines  InnerMostColor OtherColor  RepeatClippedWithin  -
						0  0  FillTexts WithinTitles get  FillTextNumSpaces  ThisFillFontSize 1.125 mul  ThisFillTextAngle  FillTextNumOutlines
						/TitlesAboveBelowOverFillTextsInnerColour load  /TitlesAboveBelowOverFillTextsOuterColour load
						1 dict begin
						FillPrioritiseSmallFileSizeOverPortability {/DeFontPath {} def} if
						RepeatClippedWithin
						end
						GRestore
						1 currentlinecap ne {1 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if  GSave  OvertitlesStrokeCode GRestore
					} if  % FillOvertitles
					FillTextsCurrent not  InlineOvertitles not  and
					{
						OvertitlesFont  OvertitleFontSizes SheetNum get WithinPage get  selectfont
						OvertitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get
						OvertitleFontSizes SheetNum get WithinPage get  mul
						OvertitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get  OvertitleFontSizes SheetNum get WithinPage get  mul
						moveto
						Overtitles WithinTitles get //true CharPathRecursive
						GSave OvertitlesStrokeCode GRestore GSave TitlesAboveBelowOverFillCode GRestore
					}  if  % FillOvertitles not  InlineOvertitles not  and
					CrossHatchingOvertitles
					{
						0.5 setgray  0 currentlinecap ne {0 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if
						CHCX CHCY /CrossHatchingOvertitlesStrokeCode load RadialCrossHatching
					} if  % CrossHatchingOvertitles
					ShapesInOvertitles
					{
						0.5 setgray  0 currentlinecap ne {0 setlinecap} if  0 setlinejoin  currentdash pop length 0 ne {[] 0 setdash} if
						0.36  TypeOfPagesBeingRendered /PlaceName eq {PlaceNamesDetailsScalingFactor mul} if  dup currentlinewidth ne {setlinewidth} {pop} ifelse
						RadiiCirclearrayInsideUsableO SheetNum get dup dup neg dup 4 2 roll
						/ShapesOvertitlesFill load /ShapesOvertitlesStroke load  ShapesOvertitlesClip  ShapesClippedToPath
					} if  % ShapesInOvertitles
					InlineOvertitles  % Doing the terminal '1' from the loop 47ish lines above here
					{
						GSave newpath InlinePath clip newpath InlinePath  % https://groups.google.com/forum/#!topic/comp.lang.postscript/ewwOV_qN4JQ
						InlineOvertitlesBlackWidth 2 mul dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlineDarkStrokeCode GRestore
					} if  % InlineOvertitles
					newpath
					TitleAboveBelowOverRandomSeeds WithinTitles get  rrand  ne {/NextRand rrand def} if
				} if  % OvertitleFontSizes of non-zero size

				BelowtitleFontSizes SheetNum get WithinPage get  //PrinterEpsilon  gt
				{
					TitleAboveBelowOverRandomSeeds WithinTitles get srand
					/ColourSchemeCurrent ColourSchemeBelowtitles def
					/FillTextsCurrent FillBelowtitles def
					0 setgray
					BelowtitleFontSizesMaxByPage SheetNum get  ColourSchemeCurrent /MidGrey eq {60 div 0.96} {120 div 0.48} ifelse
					2 copy gt {exch} if pop   FillBelowtitles {1.25 mul} if   dup currentlinewidth ne {setlinewidth} {pop} ifelse
					InlineBelowtitles
					{
						/InlinePath % https://groups.google.com/forum/#!topic/comp.lang.postscript/ewwOV_qN4JQ     https://acrobat.uservoice.com/forums/590923-acrobat-for-windows-and-mac/suggestions/19193479-distiller-charpath-clip-stroke-does-not-honou
						{
							BelowtitlesFont  BelowtitleFontSizes SheetNum get WithinPage get  selectfont
							BelowtitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get
							BelowtitleFontSizes SheetNum get WithinPage get  mul
							BelowtitleOffsetsAbsoluteVertical SheetNum get WithinPage get
							moveto   Belowtitles WithinTitles get  //true  CharPathRecursive
						} def  % InlinePath
						InlinePath GSave clip InlinePrefillWhite {1 setgray fill} {newpath} ifelse newpath InlinePath  % https://groups.google.com/forum/#!topic/comp.lang.postscript/ewwOV_qN4JQ
						/InlineBlackPlusWhite  InlineBelowtitlesBlackWidth InlineBelowtitlesWhiteWidth add abs 2 mul  def  % 2 mul because half of the linewidth clip'ped away
						InlineAboveBelowOverAttemptMinimiseNumContours
						{
							InlineBelowtitlesNumberContours SheetNum get WithinPage 2 copy get IsNumber
								{get}
								{InlineBlackPlusWhite LineWidthThatCoversPath pop InlineBlackPlusWhite div ceiling cvi  dup 4 1 roll put}
							ifelse  % ... IsNumber
						} {//IntegerMax} ifelse  % InlineAboveBelowOverAttemptMinimiseNumContours
						/InlineFirst //true def
						BelowtitleFontSizes SheetNum get WithinPage get InlineBlackPlusWhite div ceiling cvi  InlineBelowtitlesMaxNumberContours
						2 {2 copy gt {exch} if pop} repeat   -1   2  % Down to 2, as '1' is handled after ShapesInBelowtitles etc
						{
							/i exch def
							InlineFirst
								{/InlineFirst //false store}
								{InlineBlackPlusWhite i mul GSave dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlinePaleStrokeCode GRestore}
							ifelse  % InlineFirst
							i 1 gt {InlineBelowtitlesBlackWidth i mul InlineBelowtitlesWhiteWidth i 1 sub mul add 2 mul GSave dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlineDarkStrokeCode GRestore} if
						} for  % i
						GRestore
					} if  % InlineBelowtitles
					FillTextsCurrent
					{
						BelowtitlesFont  BelowtitleFontSizes SheetNum get WithinPage get  selectfont
						BelowtitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get
						BelowtitleFontSizes SheetNum get WithinPage get  mul
						BelowtitleOffsetsAbsoluteVertical SheetNum get WithinPage get
						moveto   Belowtitles WithinTitles get  //true  CharPathRecursive
						GSave FillTextNumOutlines 2 mod 0 eq {TitlesAboveBelowOverFillTextsOuterColour} {TitlesAboveBelowOverFillTextsInnerColour} ifelse fill GRestore
						GSave
						FillTextFont ThisFillFontSize  selectfont
						% X Y  Fulltitle  FillTextNumSpaces  FulltitleLineStep  Angle  NumOutlines  InnerMostColor OtherColor  RepeatClippedWithin  -
						0  0  FillTexts WithinTitles get  FillTextNumSpaces  ThisFillFontSize 1.125 mul  ThisFillTextAngle  FillTextNumOutlines
						/TitlesAboveBelowOverFillTextsInnerColour load  /TitlesAboveBelowOverFillTextsOuterColour load
						1 dict begin
						FillPrioritiseSmallFileSizeOverPortability {/DeFontPath {} def} if
						RepeatClippedWithin
						end
						GRestore
						1 currentlinecap ne {1 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if  GSave  BelowtitlesStrokeCode GRestore
					} if  % FillBelowtitles
					FillTextsCurrent not  InlineBelowtitles not  and
					{
						BelowtitlesFont  BelowtitleFontSizes SheetNum get WithinPage get  selectfont
						BelowtitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get
						BelowtitleFontSizes SheetNum get WithinPage get  mul
						BelowtitleOffsetsAbsoluteVertical SheetNum get WithinPage get
						moveto
						Belowtitles WithinTitles get //true CharPathRecursive
						GSave BelowtitlesStrokeCode GRestore GSave TitlesAboveBelowOverFillCode GRestore
					}  if  % FillBelowtitles not  InlineBelowtitles not  and
					CrossHatchingBelowtitles
					{
						0.5 setgray  0 currentlinecap ne {0 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if
						CHCX CHCY /CrossHatchingBelowtitlesStrokeCode load RadialCrossHatching
					} if  % CrossHatchingBelowtitles
					ShapesInBelowtitles
					{
						0.5 setgray  0 currentlinecap ne {0 setlinecap} if  0 setlinejoin  currentdash pop length 0 ne {[] 0 setdash} if
						0.36  TypeOfPagesBeingRendered /PlaceName eq {PlaceNamesDetailsScalingFactor mul} if  dup currentlinewidth ne {setlinewidth} {pop} ifelse
						RadiiCirclearrayInsideUsableTAB SheetNum get dup dup neg dup 4 2 roll
						/ShapesBelowtitlesFill load /ShapesBelowtitlesStroke load  ShapesBelowtitlesClip  ShapesClippedToPath
					} if  % ShapesInBelowtitles
					InlineBelowtitles  % Doing the terminal '1' from the loop 47ish lines above here
					{
						GSave newpath InlinePath clip newpath InlinePath  % https://groups.google.com/forum/#!topic/comp.lang.postscript/ewwOV_qN4JQ
						InlineBelowtitlesBlackWidth 2 mul dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlineDarkStrokeCode GRestore
					} if  % InlineBelowtitles
					newpath
					TitleAboveBelowOverRandomSeeds WithinTitles get  rrand  ne {/NextRand rrand def} if
				} if  % BelowtitleFontSizes of non-zero size

				AbovetitleFontSizes SheetNum get WithinPage get  //PrinterEpsilon  gt
				{
					TitleAboveBelowOverRandomSeeds WithinTitles get srand
					/ColourSchemeCurrent ColourSchemeAbovetitles def
					/FillTextsCurrent FillAbovetitles def
					0 setgray
					AbovetitleFontSizesMaxByPage SheetNum get  ColourSchemeCurrent /MidGrey eq {60 div 0.96} {120 div 0.48} ifelse
					2 copy gt {exch} if pop   FillAbovetitles {1.25 mul} if   dup currentlinewidth ne {setlinewidth} {pop} ifelse
					InlineAbovetitles
					{
						/InlinePath % https://groups.google.com/forum/#!topic/comp.lang.postscript/ewwOV_qN4JQ     https://acrobat.uservoice.com/forums/590923-acrobat-for-windows-and-mac/suggestions/19193479-distiller-charpath-clip-stroke-does-not-honou
						{
							AbovetitlesFont  AbovetitleFontSizes SheetNum get WithinPage get  selectfont
							AbovetitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get
							AbovetitleFontSizes SheetNum get WithinPage get  mul
							AbovetitleOffsetsAbsoluteVertical SheetNum get WithinPage get
							moveto   Abovetitles WithinTitles get  //true  CharPathRecursive
						} def  % InlinePath
						InlinePath GSave clip InlinePrefillWhite {1 setgray fill} {newpath} ifelse newpath InlinePath  % https://groups.google.com/forum/#!topic/comp.lang.postscript/ewwOV_qN4JQ
						/InlineBlackPlusWhite  InlineAbovetitlesBlackWidth InlineAbovetitlesWhiteWidth add abs 2 mul  def  % 2 mul because half of the linewidth clip'ped away
						InlineAboveBelowOverAttemptMinimiseNumContours
						{
							InlineAbovetitlesNumberContours SheetNum get WithinPage 2 copy get IsNumber
								{get}
								{InlineBlackPlusWhite LineWidthThatCoversPath pop InlineBlackPlusWhite div ceiling cvi  dup 4 1 roll put}
							ifelse  % ... IsNumber
						} {//IntegerMax} ifelse  % InlineAboveBelowOverAttemptMinimiseNumContours
						/InlineFirst //true def
						AbovetitleFontSizes SheetNum get WithinPage get InlineBlackPlusWhite div ceiling cvi  InlineAbovetitlesMaxNumberContours
						2 {2 copy gt {exch} if pop} repeat   -1   2  % Down to 2, as '1' is handled after ShapesInAbovetitles etc
						{
							/i exch def
							InlineFirst
								{/InlineFirst //false store}
								{InlineBlackPlusWhite i mul GSave dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlinePaleStrokeCode GRestore}
							ifelse  % InlineFirst
							i 1 gt {InlineAbovetitlesBlackWidth i mul InlineAbovetitlesWhiteWidth i 1 sub mul add 2 mul GSave dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlineDarkStrokeCode GRestore} if
						} for  % i
						GRestore
					} if  % InlineAbovetitles
					FillTextsCurrent
					{
						AbovetitlesFont  AbovetitleFontSizes SheetNum get WithinPage get  selectfont
						AbovetitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get
						AbovetitleFontSizes SheetNum get WithinPage get  mul
						AbovetitleOffsetsAbsoluteVertical SheetNum get WithinPage get
						moveto   Abovetitles WithinTitles get  //true  CharPathRecursive
						GSave FillTextNumOutlines 2 mod 0 eq {TitlesAboveBelowOverFillTextsOuterColour} {TitlesAboveBelowOverFillTextsInnerColour} ifelse fill GRestore
						GSave
						FillTextFont ThisFillFontSize  selectfont
						% X Y  Fulltitle  FillTextNumSpaces  FulltitleLineStep  Angle  NumOutlines  InnerMostColor OtherColor  RepeatClippedWithin  -
						0  0  FillTexts WithinTitles get  FillTextNumSpaces  ThisFillFontSize 1.125 mul  ThisFillTextAngle  FillTextNumOutlines
						/TitlesAboveBelowOverFillTextsInnerColour load  /TitlesAboveBelowOverFillTextsOuterColour load
						1 dict begin
						FillPrioritiseSmallFileSizeOverPortability {/DeFontPath {} def} if
						RepeatClippedWithin
						end
						GRestore
						1 currentlinecap ne {1 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if  GSave  AbovetitlesStrokeCode GRestore
					} if  % FillAbovetitles
					FillTextsCurrent not  InlineAbovetitles not  and
					{
						AbovetitlesFont  AbovetitleFontSizes SheetNum get WithinPage get  selectfont
						AbovetitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get
						AbovetitleFontSizes SheetNum get WithinPage get  mul
						AbovetitleOffsetsAbsoluteVertical SheetNum get WithinPage get
						moveto
						Abovetitles WithinTitles get //true CharPathRecursive
						GSave AbovetitlesStrokeCode GRestore GSave TitlesAboveBelowOverFillCode GRestore
					}  if  % FillAbovetitles not  InlineAbovetitles not  and
					CrossHatchingAbovetitles
					{
						0.5 setgray  0 currentlinecap ne {0 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if
						CHCX CHCY /CrossHatchingAbovetitlesStrokeCode load RadialCrossHatching
					} if  % CrossHatchingAbovetitles
					ShapesInAbovetitles
					{
						0.5 setgray  0 currentlinecap ne {0 setlinecap} if  0 setlinejoin  currentdash pop length 0 ne {[] 0 setdash} if
						0.36  TypeOfPagesBeingRendered /PlaceName eq {PlaceNamesDetailsScalingFactor mul} if  dup currentlinewidth ne {setlinewidth} {pop} ifelse
						RadiiCirclearrayInsideUsableTAB SheetNum get dup dup neg dup 4 2 roll
						/ShapesAbovetitlesFill load /ShapesAbovetitlesStroke load  ShapesAbovetitlesClip  ShapesClippedToPath
					} if  % ShapesInAbovetitles
					InlineAbovetitles  % Doing the terminal '1' from the loop 47ish lines above here
					{
						GSave newpath InlinePath clip newpath InlinePath  % https://groups.google.com/forum/#!topic/comp.lang.postscript/ewwOV_qN4JQ
						InlineAbovetitlesBlackWidth 2 mul dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlineDarkStrokeCode GRestore
					} if  % InlineAbovetitles
					newpath
					TitleAboveBelowOverRandomSeeds WithinTitles get  rrand  ne {/NextRand rrand def} if
				} if  % AbovetitleFontSizes of non-zero size
				NextRand srand
				DeBugLevel 100 le {(-TitleAboveBelowOverForms: PaintProc) OutputToLog} if
			} bind def  % /PaintProc
			end  % dictionary TitleAboveBelowOverForms
		} for  % WithinPage, WithinTitles
		currentdict /WithinPage undef
		currentdict /WithinTitles undef
	} bind for  % SheetNum
	UndefMgns
	currentdict /SheetNum undef

	DeBugLevel 100 le {( Main: define PaintPlaceName) OutputToLog} if
	/PaintPlaceName
	{
		DeBugLevel 100 le {(+PaintPlaceName) OutputToLog} if
		17 dict begin
		/SheetNum 0 def  /WithinPage 0 def  /WithinTitles 0 def  % If formatting settings of Titles uses these, then formatting of PlaceNames will attempt to use them. Of course, the formatting _should_ check TypeOfPagesBeingRendered, but, you know.
		/TypeOfPagesBeingRendered /PlaceName def
		/FooterExtraOffset PlaceNamesFirstAndThirdFoldsFromEdge  FooterFontSize 2 mul add  MgnB sub dup 0 lt {pop 0} if def

		/X PageWidth MgnL MgnR sub add 2 div def
		/Y PageHeight 4 div MgnB FooterExtraOffset add MgnT sub 2 div add def

		newpath
		PlaceNamesFont 16384 selectfont
		0 0 moveto  /ThisName load //true CharPathRecursive  PathBBox
		newpath
		/URY exch def  /URX exch def  /LLY exch def  /LLX exch def
		URY LLY sub  dup 0 gt {PageHeight 2 div MgnB MgnT add sub 2.4 sub FooterExtraOffset sub  exch div 16384 mul} {pop PageHeight 2 div} ifelse  % embedded constant
		URX LLX sub  dup 0 gt {PageWidth MgnL MgnR add sub 4.8 sub  exch div 16384 mul} {pop PageHeight 2 div} ifelse  % embedded constant
		PlaceNamesMaxFontSizeAbsolute   2 {2 copy gt {exch} if pop} repeat /PlaceNamesFontSize exch store

		PlaceNamesFont  PlaceNamesFontSize  selectfont
		% http://groups.google.com/group/comp.lang.postscript/browse_thread/thread/b6f1e9ec3da9cc87/
		/XX  X  URX LLX add 16384 div PlaceNamesFontSize mul 2 div  sub  def
		/YY  Y  URY LLY add 16384 div PlaceNamesFontSize mul 2 div  sub  def

		PlaceNamesFontSize  0  gt
		{
			/ColourSchemeCurrent ColourSchemePlaceNames def
			/FillTextsCurrent FillPlaceNames def

			FillTextsCurrent
			{
				/ThisFillTextAngle  /FillTextAnglePlaceNames load  def

				/ThisFillFontSize   FillTextMinFontSizeAbsolute
				/ThisName load NonEmptyCompoundObject {PlaceNamesFontSize FillTextMinFontSizeProportionLargestTitleAboveBelowOver mul} {0} ifelse
				2 copy lt {exch} if pop  def  % /ThisFillFontSize
			} if  % FillTextsCurrent

			CrossHatchingPlaceNames
			{
				/CHCX  X  def  % Cross Hatching Center X
				CrossHatchingCentreX /Left   eq {/CHCX 0 def} if
				CrossHatchingCentreX /Right  eq {/CHCX PageWidth def} if
				/CHCY  0  def  % Cross Hatching Center Y
				CrossHatchingCentreY /Middle eq {/CHCY Y def} if
				CrossHatchingCentreY /Top    eq {/CHCY PageHeight 2 div def} if
			} if  % CrossHatchingPlaceNames

			PlaceNamesFontSize  ColourSchemeCurrent /MidGrey eq {60 div 0.96} {120 div 0.48} ifelse
			2 copy gt {exch} if pop   FillTextsCurrent {1.25 mul} if   PlaceNamesDetailsScalingFactor mul dup currentlinewidth ne {setlinewidth} {pop} ifelse
			1 currentlinecap ne {1 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if
			InlinePlaceNames
			{
				{
					PlaceNamesFont  PlaceNamesFontSize  selectfont
					XX YY moveto
					/ThisName load  //true  CharPathRecursive
				} dup exec ClipSave clip newpath exec  % https://groups.google.com/forum/#!topic/comp.lang.postscript/ewwOV_qN4JQ
				/InlineBlackPlusWhite  InlineTitlesBlackWidth InlineTitlesWhiteWidth add abs 2 mul  def  % 2 mul because half of the linewidth clip'ped away
				% Discussion: http://www.theportforum.com/viewtopic.php?t=175&start=913
				InlinePlaceNamesAttemptMinimiseNumContours {InlineBlackPlusWhite LineWidthThatCoversPath pop InlineBlackPlusWhite div ceiling cvi} {//IntegerMax} ifelse
				PlaceNamesFontSize InlineBlackPlusWhite div PlaceNamesDetailsScalingFactor div ceiling cvi  InlineTitlesMaxNumberContours  2 {2 copy gt {exch} if pop} repeat
				-1  1
				{
					/i exch def
					        GSave i InlineBlackPlusWhite mul                                  dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlinePaleStrokeCode GRestore
					i 1 gt {GSave i InlineBlackPlusWhite mul InlineTitlesWhiteWidth 2 mul sub dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlineDarkStrokeCode GRestore} if
				} for  % i
				ClipRestore
			} if  % InlinePlaceNames
			FillTextsCurrent
			{
				PlaceNamesFont  PlaceNamesFontSize  selectfont
				XX YY moveto
				/ThisName load  //true  CharPathRecursive
				GSave FillTextNumOutlines 2 mod 0 eq {TitlesAboveBelowOverFillTextsOuterColour} {TitlesAboveBelowOverFillTextsInnerColour} ifelse fill GRestore
				GSave
				FillTextFont ThisFillFontSize  selectfont
				% X Y  Filltitle  FillTextNumSpaces  FilltitleLineStep  Angle  NumOutlines  InnerMostColor OtherColor  RepeatClippedWithin  -
				X Y  {FillTextPlaceNames}  FillTextNumSpaces  ThisFillFontSize 1.125 mul  ThisFillTextAngle  FillTextNumOutlines
				/TitlesAboveBelowOverFillTextsInnerColour load  /TitlesAboveBelowOverFillTextsOuterColour load
				1 dict begin
				FillPrioritiseSmallFileSizeOverPortability {/DeFontPath {} def} if
				RepeatClippedWithin
				end
				GRestore
				1 currentlinecap ne {1 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if  GSave  TitlesStrokeCode  GRestore
			} if  % FillTextsCurrent
			FillTextsCurrent not  InlinePlaceNames not  and
			{
				PlaceNamesFont  PlaceNamesFontSize  selectfont
				XX YY moveto
				0 setgray  1 currentlinecap ne {1 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if
				/ThisName load  //false  CharPathRecursive
				GSave TitlesStrokeCode GRestore GSave TitlesAboveBelowOverFillCode GRestore
			} if  % FillTextsCurrent not  InlinePlaceNames not  and
			CrossHatchingPlaceNames
			{
				0.5 setgray  0 currentlinecap ne {0 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if
				CHCX CHCY /CrossHatchingTitlesStrokeCode load RadialCrossHatching
			} if  % CrossHatchingPlaceNames
			ShapesInPlaceNames
			{
				0.5 setgray  0 currentlinecap ne {0 setlinecap} if  0 setlinejoin  currentdash pop length 0 ne {[] 0 setdash} if
				0.36  TypeOfPagesBeingRendered /PlaceName eq {PlaceNamesDetailsScalingFactor mul} if  dup currentlinewidth ne {setlinewidth} {pop} ifelse
				MgnL  MgnB  PageWidth MgnR sub  PageHeight 2 div MgnT sub
				/ShapesTitlesFill load /ShapesTitlesStroke load  ShapesPlaceNamesClip  ShapesClippedToPath
			} if  % ShapesInPlaceNames
			InlinePlaceNames
			{
				{
					PlaceNamesFont  PlaceNamesFontSize  selectfont
					XX YY moveto
					/ThisName load  //true  CharPathRecursive
				} dup exec ClipSave clip newpath exec  % https://groups.google.com/forum/#!topic/comp.lang.postscript/ewwOV_qN4JQ
				GSave InlineTitlesBlackWidth 2 mul dup currentlinewidth ne {setlinewidth} {pop} ifelse TitlesAboveBelowOverInlineDarkStrokeCode GRestore  % 2 mul because half of the linewidth clip'ped away
				ClipRestore
			} if  % InlinePlaceNames
			newpath
		} if  % PlaceNamesFontSize  0  gt
		end
		DeBugLevel 100 le {(-PaintPlaceName) OutputToLog} if
	} bind def  % /PaintPlaceName

	{PrePourNumCopies 1 ge} MightBeTrue
	{
		DeBugLevel 100 le {( Main: PrePourForms) OutputToLog} if
		/TypeOfPagesBeingRendered /PrePour store
		/PrePourForms [ GlassesOnSheets {[ exch execU length {12 dict} repeat]} forall ] def
		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			0  1  SheetLengths SheetNum get 1 sub
			{
				dup PrePourForms SheetNum get exch get begin
				WithinPage-WithinTitles-def
				//false //false //false //false PrePourPaperType PrePourOrientation SetPaperSize   //true DefStoreMgns

				/FormType 1 def
				/BBox [ MgnL 1.92 sub  MgnB 1.92 sub  PageWidth MgnR sub 1.92 add  PageHeight MgnT sub 1.92 add ] def  % embedded constant, should be positive
				/Matrix matrix identmatrix def
				/PaintProc  % Paints Title and Subtitle very big, and CirclearraysPrePour in a box
				{
					DeBugLevel 100 le {(+PrePourForms: PaintProc) OutputToLog} if
					pop 22 dict begin  % dictionary parameter of execform containing WithinTitles and WithinPage
					/TypeOfPagesBeingRendered /PrePour store

					/MatrixPrePour matrix currentmatrix def
					PageWidth MgnL MgnR sub add 2 div  PageHeight MgnB MgnT sub add 2 div  translate   PrePourScalingFactors SheetNum get dup scale
					/MatrixGlasses matrix currentmatrix def

					% Show Circlearrays only if centre-to-corner >= scaled[ Radii + Radii-RadiiCirclearrayInside ]
					/PPShowCirclearrays PageWidth MgnL MgnR add sub dup mul PageHeight MgnB MgnT add sub dup mul add sqrt 2 div  Radii SheetNum get 2 mul RadiiCirclearrayInside SheetNum get sub PrePourScalingFactors SheetNum get mul  ge def
					/PPCirclearraysV  CircletextFont  CirclearraysFontSizes SheetNum get WithinPage get  selectfont  CirclearraysPrePour WithinTitles get  StringHeight  def

					PrePourShowBackgroundTexts   Droplets {PrePourShowDroplets or} if
					{
						MatrixPrePour setmatrix   //false //false //false //false PrePourPaperType PrePourOrientation SetPaperSize  //true DefStoreMgns
						ClipSave  newpath  MgnL  MgnB  PageWidth MgnL MgnR add sub  PageHeight MgnB MgnT add sub  rectclip newpath  % Perhaps two clips here, first to margins
						PPShowCirclearrays
						{
							/PPCaVPE PPCirclearraysV 0.48 add def  % PPCirclearraysV Plus Extra
							MgnL PPCaVPE add MgnB PPCaVPE add moveto  PageWidth MgnR PPCaVPE add sub dup MgnB PPCaVPE add lineto  PageHeight MgnT PPCaVPE add sub lineto  MgnL PPCaVPE add PageHeight MgnT PPCaVPE add sub lineto  closepath
							MatrixGlasses setmatrix  0 0 Radii SheetNum get 3 copy add moveto 90 450 arc closepath  clip newpath  % Second clip to union of rectangle inside Circlearrays and circle of radius Radii...
						} if  % PPShowCirclearrays
						/TypeOfPagesBeingRendered /Glasses store  //false //false //false //false PaperType Orientation SetPaperSize  //true DefStoreMgns
						MatrixGlasses setmatrix   RotationTitlesAboveBelowOverCirclearray dup 0 ne {neg rotate} {pop} ifelse   GlassPositions SheetNum get WithinPage get {neg} forall translate
						BackgroundTextsGlasses PrePourShowBackgroundTexts and {BackgroundTextsGlassesForms SheetNum get execform} if
						Droplets PrePourShowDroplets and
						{
							//false //false //false //false PrePourPaperType PrePourOrientation SetPaperSize  //true DefStoreMgns
							SheetNum
							RotationTitlesAboveBelowOverCirclearray 0 eq
							{
								GSave  MatrixPrePour setmatrix newpath
								MgnL MgnB moveto  PageWidth MgnR sub MgnB lineto  PageWidth MgnR sub PageHeight MgnT sub lineto  MgnL PageHeight MgnT sub lineto
								MatrixGlasses setmatrix  GlassPositions SheetNum get WithinPage get {neg} forall translate  pathbbox	GRestore
							} {//InfinityNeg  //InfinityNeg  //Infinity  //Infinity} ifelse  % RotationTitlesAboveBelowOverCirclearray 0 eq
							WithinPage  DropletsPaint  % If rotating too complicated to rotate box; the WithinPage must suffice.
						} if  % Droplets PrePourShowDroplets and
						ClipRestore
						/TypeOfPagesBeingRendered /PrePour store  //false //false //false //false PrePourPaperType PrePourOrientation SetPaperSize  //true DefStoreMgns
					} if  % PrePourShowBackgroundTexts ... Droplets ...PrePourShowDroplets or
					MatrixGlasses setmatrix

					OutlineTitles CrossHatchingInside Spirals or or
					CircleNonEmpty SheetNum get WithinPage get  and
					{
						MatrixPrePour setmatrix   //false //false //false //false PrePourPaperType PrePourOrientation SetPaperSize  //true DefStoreMgns
						MgnL PPCirclearraysV 0.12 add add  MgnB PPCirclearraysV 0.12 add add  PageWidth MgnL MgnR add 0.24 add PPCirclearraysV 2 mul add sub
						PageHeight MgnB MgnT add 0.24 add PPCirclearraysV 2 mul add sub   4 copy ClipSave  newpath rectclip newpath
						MatrixGlasses setmatrix   //false //false //false //false PaperType Orientation SetPaperSize  //true DefStoreMgns
						//false //false //false //false PaperType Orientation SetPaperSize  //true DefStoreMgns  % Perhaps accessed by CrossHatchingInside
						OutlineTitles       {            OutlineForms SheetNum get WithinPage get  execform} if
						Spirals {SpiralForms SheetNum get WithinPage get execform} if
						CrossHatchingInside {CrossHatchingInsideForms SheetNum get WithinPage get  execform} if
						ClipRestore
						MatrixPrePour setmatrix
						1 setgray 0.24 dup currentlinewidth ne {setlinewidth} {pop} ifelse currentdash pop length 0 ne {[] 0 setdash} if  0 setlinejoin  rectstroke  % Erase black leakage
					} if  % OutlineTitles CrossHatchingInside Spirals or or CircleNonEmpty ... and
					MatrixGlasses setmatrix   //false //false //false //false PaperType Orientation SetPaperSize  //true DefStoreMgns
					/PaintBackgroundInsideGlassCircles load dup length 0 gt
						{/TypeOfPagesBeingRendered /PrePour store GSave newpath 0 0 Radii SheetNum get 0 360 arc closepath clip newpath execU GRestore /TypeOfPagesBeingRendered /Glasses store}
						{pop}
					ifelse  % PaintBackgroundInsideGlassCircles ... length 0 gt
					TitleAboveBelowOverForms SheetNum get WithinPage get  execform  AnnotateGlass
					MatrixPrePour setmatrix   /TypeOfPagesBeingRendered /PrePour store   //false //false //false //false PrePourPaperType PrePourOrientation SetPaperSize  //true DefStoreMgns

					PPShowCirclearrays
					{
						/PPCaHB  PPCirclearraysV  0.72 add  def  % embedded constant
						/PPCaHG  PPCaHB 0.12 add def  % This grey, other black. Slight overlap to prevent white showing between.
						IsDistiller
						{
							MatrixPrePour setmatrix   //false //false //false //false PrePourPaperType PrePourOrientation SetPaperSize  //true DefStoreMgns
							GSave newpath  % GSave saving currenttransfer and clippath
							MgnL PPCaHG add MgnB PPCaHG add moveto   MgnL PPCaHG add PageHeight MgnT PPCaHG add sub lineto  PageWidth MgnR PPCaHG add sub PageHeight MgnT PPCaHG add sub lineto   PageWidth MgnR PPCaHG add sub MgnB PPCaHG add lineto  closepath
							MgnL MgnB moveto  PageWidth MgnR sub MgnB lineto  PageWidth MgnR sub PageHeight MgnT sub lineto  MgnL PageHeight MgnT sub lineto  closepath  clip newpath
							[ currenttransfer   /exec cvx   1   /exch cvx   /sub cvx  0.25  /mul cvx   1   /exch cvx   /sub cvx ] cvx bind settransfer  % embedded constant
							MatrixGlasses setmatrix   //false //false //false //false PaperType Orientation SetPaperSize  //true DefStoreMgns
							CirclearrayForms SheetNum get WithinPage get   execform
							GRestore
						} if  % IsDistiller
						ClipSave
						MatrixPrePour setmatrix   //false //false //false //false PrePourPaperType PrePourOrientation SetPaperSize  //true DefStoreMgns
						MgnL PPCaHB add  MgnB PPCaHB add  PageWidth MgnL MgnR add PPCaHB 2 mul add sub  PageHeight MgnB MgnT add PPCaHB 2 mul add sub rectclip newpath
						MatrixGlasses setmatrix   //false //false //false //false PaperType Orientation SetPaperSize  //true DefStoreMgns
						CirclearrayForms SheetNum get WithinPage get   execform
						ClipRestore
					} if  % PPShowCirclearrays

					MatrixPrePour setmatrix   //false //false //false //false PrePourPaperType PrePourOrientation SetPaperSize  //true DefStoreMgns
					ThePortForumIconPlacement /None ne {/All PlaceThePortForumIcon} if

					matrix currentmatrix  RotationTitlesAboveBelowOverCirclearray  {dup -45 ge {exit} if 360 add} loop  {dup 315 lt {exit} if 360 sub} loop
					1 {
						dup 225 ge {pop  PageWidth 0          translate  90 rotate  MgnB  MgnR  PageHeight MgnB MgnT add sub  PageWidth  MgnL MgnR add sub  exit} if
						dup 135 gt {pop  PageWidth PageHeight translate 180 rotate  MgnR  MgnT  PageWidth  MgnL MgnR add sub  PageHeight MgnB MgnT add sub  exit} if
						     45 gt {     0         PageHeight translate -90 rotate  MgnT  MgnL  PageHeight MgnB MgnT add sub  PageWidth  MgnL MgnR add sub  exit} if
						MgnL  MgnB  PageWidth MgnL MgnR add sub  PageHeight MgnB MgnT add sub
					} repeat  % 1
					CirclearraysPrePour WithinTitles get  {0 setgray  CircletextFont  CirclearraysFontSizes SheetNum get WithinPage get  selectfont}  CircletextsMinNumSpacesBetween  CirclearrayInRectangle  pop pop  setmatrix

					/RotationTitlesAboveBelowOverCirclearray load 0 ne
					{
						RotationTitlesAboveBelowOverCirclearray dup sin /dX exch def cos /dY exch def
						/ArrowScaling 2.88 def  % embedded constant
						{0 0 moveto  3 -3 lineto  1 -3 lineto  1 -6 lineto  -1 -6 lineto  -1 -3 lineto  -3 -3 lineto  closepath}  % Arrow in 6x6 box, tip of arrow at 0,0
						CirclearraysT SheetNum get WithinPage get  CirclearraysB SheetNum get WithinPage get sub  CirclearraysFontSizes SheetNum get WithinPage get mul  0.83 ArrowScaling mul add  dup  % embedded constant, approximately correct
						dY 0 eq {pop //Infinity} {PageHeight MgnB MgnT add sub 2 div exch sub  dY div abs exch} ifelse   dX 0 eq {pop //Infinity} {PageWidth MgnL MgnR add sub 2 div exch sub  dX div abs} ifelse   2 copy gt {exch} if pop
						0 exch RotationTitlesAboveBelowOverCirclearray neg  PageWidth MgnL MgnR sub add 2 div  PageHeight MgnB MgnT sub add 2 div  6 copy
						translate rotate translate ArrowScaling dup scale exec   MatrixPrePour setmatrix  translate rotate neg translate ArrowScaling dup scale 0 6 translate exec
						MatrixPrePour setmatrix  GSave 0.8 setgray fill GRestore 0 setgray  ClipSave clip 1.92 dup currentlinewidth ne {setlinewidth} {pop} ifelse 0 setlinejoin stroke ClipRestore
					} if  % Angle perhaps non-zero for any glasses

					end
					DeBugLevel 100 le {(-PrePourForms: PaintProc) OutputToLog} if
				} bind def  % /PaintProc
				end  % dictionary PrePourForms
			} for  % WithinPage, WithinTitles
			currentdict /WithinPage undef
			currentdict /WithinTitles undef
		} bind for  % SheetNum
		UndefMgns
		currentdict /SheetNum undef
	} if  % ... PrePourNumCopies 1 ge ...

	/VoteRecorders load MightBeTrue
	{
		DeBugLevel 100 le {( Main: VoteRecorderForms) OutputToLog} if
		/TypeOfPagesBeingRendered /VoteRecorder store
		/VoteRecorderForms [ GlassesClusteredOnVoteRecorders length {6 dict} repeat ] def
		0  1  GlassesClusteredOnVoteRecorders length 1 sub
		{
			/VoteRecorderSheetNum exch def
			//false //false //false //false VoteRecorderPaperType VoteRecorderOrientation SetPaperSize
			//true DefStoreMgns

			VoteRecorderForms VoteRecorderSheetNum get begin
			/FormType 1 def
			/BBox [ MgnL 2 div  MgnB 2 div  PageWidth MgnR 2 div sub  PageHeight MgnT 2 div sub ] def
			/Matrix matrix identmatrix def
			/PaintProc
			{
				DeBugLevel 100 le {(+VoteRecorderForms: PaintProc) OutputToLog} if
				pop  % dictionary parameter of execform
				49 dict begin
				/VoteRecorderSheetNum VoteRecorderSheetNum def
				/TypeOfPagesBeingRendered /VoteRecorder store

				/TypeOfPagesBeingRendered /TastingNotes store  % only those elements of names with non-zero TN pages
				/VoteRecorderNames [
					NamesVoteRecorder aload pop
					VoteRecorderShowTotalRow VoteRecorderSheetNum GetEU  VoteRecorderMonkeyWhenShowTotalRow  and {/VoteRecorderMonkeyName load} if
					/VoteRecorderNumNames counttomark def
					VoteRecorderShowTotalCol VoteRecorderSheetNum GetEU {/VoteRecorderTotalColTitle load} if
				] def  % /VoteRecorderNames
				/TypeOfPagesBeingRendered /VoteRecorder store

				HeadersAndFooters PaintHeadersFooters

				% Columns:
				% First column names the wines.
				% Subsequent columns headed with elements of VoteRecorderNames.
				% Last column might hold Totals.
				% Thick line separate sections; thin lines within sections.

				% Rows:
				% First row is potentially higher, and contains VoteRecorderNames.
				% Subsequent rows contain wines.

				/VoteRecorderTitlesFontSize
					PageHeight MgnB MgnT add sub  VoteRecorderThisSheetLength 6 add div  1.8 div  % embedded constant
					VoteRecorderTitlesFontSizeMax  2 copy gt {exch} if pop   //PrinterEpsilon 2 copy lt {exch} if pop
				def  % /VoteRecorderTitlesFontSize
				VoteRecorderTitlesFontSize 8 lt
				{
					mark  VoteRecorderTitlesFontSize 5 lt
						{  (Error: VoteRecorderTitlesFontSize \(with VoteRecorderSheetNum=) VoteRecorderSheetNum (\) computed to be ) VoteRecorderTitlesFontSize ( which is <) 5 (, so tiny)}
						{(Warning: VoteRecorderTitlesFontSize \(with VoteRecorderSheetNum=) VoteRecorderSheetNum (\) computed to be ) VoteRecorderTitlesFontSize ( which is <) 8 (, so small)}
					ifelse  (. Continuing, but consider changing GlassesClusteredOnVoteRecorders.)  ConcatenateToMark OutputToLog
				} if  % VoteRecorderTitlesFontSize 6 lt
				/VoteRecorderNamesFontSize
					PageWidth MgnL MgnR add sub  VoteRecorderNumNames 6 add div  1.25 div
					NamesFontSizeMax   2 copy gt {exch} if pop   //PrinterEpsilon 2 copy lt {exch} if pop
				def  % /VoteRecorderNamesFontSize
				VoteRecorderNamesFontSize 8 lt
				{
					mark  VoteRecorderNamesFontSize 5 lt
						{  (Error: VoteRecorderNamesFontSize \(with VoteRecorderSheetNum=) VoteRecorderSheetNum (\) computed to be ) VoteRecorderNamesFontSize ( which is <) 5 (, so tiny)}
						{(Warning: VoteRecorderNamesFontSize \(with VoteRecorderSheetNum=) VoteRecorderSheetNum (\) computed to be ) VoteRecorderNamesFontSize ( which is <) 8 (, so small)}
					ifelse  (. Continuing, but consider changing NamesVoteRecorder or GlassesClusteredOnVoteRecorders.)  ConcatenateToMark OutputToLog
				} if  % VoteRecorderTitlesFontSize 6 lt

				/VoteRecorderTitleWidths VoteRecorderThisSheetLength array def
				/VoteRecorderSubtitleWidths VoteRecorderThisSheetLength array def
				/VoteRecorderSubtitleFSPT [ VoteRecorderThisSheetLength {/VoteRecorderSubtitleFontSizeProportionTitles load} repeat  VoteRecorderShowTotalRow VoteRecorderSheetNum GetEU {pop //Epsilon} if ] def
				/VoteRecorderTitleWidthsMax 0 def
				/VoteRecorderSubtitleWidthsMax 0 def
				/WithinPage 0 def
				0  1  VoteRecorderThisSheet length 1 sub
				{
					/ClusterNum exch def
					0  1  VoteRecorderThisSheet ClusterNum GetEU length 1 sub  VoteRecorderShowTotalRow VoteRecorderSheetNum GetEU ClusterNum VoteRecorderThisSheet length 1 sub eq and {1 add} if
					{
						/WithinCluster exch def
						/ThisRowTotalRow  VoteRecorderShowTotalRow VoteRecorderSheetNum GetEU  WithinPage VoteRecorderThisSheetLength 1 sub eq  and  def
						/WithinTitles ThisRowTotalRow {//null} {VoteRecorderThisSheet ClusterNum GetEU WithinCluster GetEU} ifelse def
						/ThisVoteRecorderTitle ThisRowTotalRow {()} {TitlesVoteRecorder WithinTitles get} ifelse  def
						/ThisVoteRecorderSubtitle ThisRowTotalRow {()} {SubtitlesVoteRecorder WithinTitles get} ifelse  def
						TitlesFont VoteRecorderTitlesFontSize selectfont
						VoteRecorderTitleWidths  WithinPage  /ThisVoteRecorderTitle load StringWidthRecursive
						/VoteRecorderTitleWidthsMax dup load 2 index lt {1 index store} {pop} ifelse   put
						SubtitlesFont  VoteRecorderTitlesFontSize  selectfont
						VoteRecorderSubtitleWidths  WithinPage  /ThisVoteRecorderSubtitle load StringWidthRecursive
						/VoteRecorderSubtitleWidthsMax dup load 2 index lt {1 index store} {pop} ifelse   put
						/WithinPage WithinPage 1 add def
					} for  % WithinCluster, WithinTitles
				} for  % ClusterNum
				/WithinPage 0 def
				/VoteRecorderProportionToBeLogged //true def
				/VoteRecorderSubtitleWidthsMax 0 def
				0  1  VoteRecorderThisSheet length 1 sub
				{
					/ClusterNum exch def
					0  1  VoteRecorderThisSheet ClusterNum GetEU length 1 sub  % Non-standard upper bound
					{
						/WithinCluster exch def
						/WithinTitles VoteRecorderThisSheet ClusterNum GetEU WithinCluster GetEU def
						VoteRecorderSubtitleWidths  WithinPage  2 copy get
						VoteRecorderSubtitleFontSizeProportionTitles dup IsNumber not
						{
							pop VoteRecorderTitleWidthsMax VoteRecorderSubtitleWidthsMax dup 0 gt {div} {pop pop 0.5} ifelse
							0.5  2 copy gt {exch} if pop  % embedded constant
							5  VoteRecorderTitlesFontSize div  2 copy lt {exch} if pop  % embedded constant
							//Epsilon  2 copy lt {exch} if pop   //SqrtHalf  2 copy gt {exch} if pop  % embedded constant
							VoteRecorderProportionToBeLogged  VoteRecorderSubtitleWidthsMax 0 gt  and
							{
								dup mark exch (VoteRecorderSheetNum=) exch VoteRecorderSheetNum exch (: VoteRecorderSubtitleFontSizeProportionTitles at least once replaced with ) exch
								(, a font size of ) 1 index VoteRecorderTitlesFontSize mul (pt.) ConcatenateToMark OutputToLog
								/VoteRecorderProportionToBeLogged //false store
							} if  % VoteRecorderProportionToBeLogged  VoteRecorderSubtitleWidthsMax 0 gt  and
							dup VoteRecorderSubtitleFSPT exch WithinPage exch put
						} if  % VoteRecorderSubtitleFontSizeProportionTitles dup IsNumber not
						mul put
						/WithinPage WithinPage 1 add def
					} for  % WithinCluster, WithinTitles
					/VoteRecorderSubtitleWidthsMax dup load  0 1 VoteRecorderThisSheet ClusterNum GetEU length 1 sub {dup VoteRecorderSubtitleFSPT exch GetEU exch VoteRecorderSubtitleWidths exch get mul 2 copy lt {exch} if pop} for  store
				} for  % ClusterNum
				currentdict /WithinTitles undef
				currentdict /WithinCluster undef
				currentdict /ClusterNum undef

				/VoteRecorderNamesMaxT 0 def
				/VoteRecorderNamesMinB 0 def
				/VoteRecorderNameL VoteRecorderNumNames array def
				/VoteRecorderNameB VoteRecorderNumNames array def
				/VoteRecorderNameR VoteRecorderNumNames array def
				0  1  VoteRecorderNumNames 1 sub
				{
					/NameNum exch def
					/ThisName VoteRecorderNames NameNum get def  % Non-standard line
					NamesFont VoteRecorderNamesFontSize selectfont
					GSave  NullDevice  16384 dup scale  newpath 0 0 moveto  /ThisName load  //false CharPathRecursive PathBBox  GRestore
					dup VoteRecorderNamesMaxT gt {/VoteRecorderNamesMaxT exch def} {pop} ifelse  exch dup
					dup VoteRecorderNamesMinB lt {/VoteRecorderNamesMinB exch def} {pop} ifelse
					VoteRecorderNameB exch   NameNum exch  put
					VoteRecorderNameR exch   NameNum exch  put
					VoteRecorderNameL exch   NameNum exch  put
				} for  % NameNum
				currentdict /NameNum undef

				/VoteRecorderHeightFirstRow  0
					0  1  VoteRecorderNumNames 1 sub  {dup VoteRecorderNameR exch get exch VoteRecorderNameL exch get sub   2 copy lt {exch} if pop} for
					PageHeight MgnB MgnT add sub dup 5 div exch  6 mul VoteRecorderThisSheetLength 7 add div  2 {2 copy gt {exch} if pop} repeat  % Not to exceed 1/5 page, nor 6 times other rows
				def  % /VoteRecorderHeightFirstRow

				2 {  % VoteRecorderRowHeight needs VoteRecorderHeightFirstRow needs VoteRecorderColWidth needs VoteRecorderWideLineWidth needs VoteRecorderCircletextFontSize needs VoteRecorderRowHeight
					/VoteRecorderRowHeight  PageHeight MgnB MgnT add sub VoteRecorderTopTextHeight sub VoteRecorderHeightFirstRow sub VoteRecorderThisSheetLength dup 0 eq {pop pop //PrinterEpsilon} {div} ifelse  def
					/VoteRecorderCircletextFontSize  VoteRecorderRowHeight 6 div  dup 5 gt {pop 5} if  def  % embedded constant
					/VoteRecorderWideLineWidth << /SheetNum 0 /WithinPage 0 /WithinTitles 0 >> begin CircletextFont end VoteRecorderCircletextFontSize selectfont BaseHeight def
					/VoteRecorderNarrowLineWidth  0.72  VoteRecorderWideLineWidth 3 div  2 copy gt {exch} if pop  def
					/VoteRecorderMiddleLineWidth VoteRecorderWideLineWidth VoteRecorderNarrowLineWidth add 2 div def

					/VoteRecorderWidthColFirst
						VoteRecorderTitleWidthsMax VoteRecorderSubtitleWidthsMax 2 copy lt {exch} if pop   VoteRecorderWideLineWidth 2 div add
						PageWidth MgnL MgnR add sub 6 mul VoteRecorderNumNames 7 add div  2 copy gt {exch} if pop  % Max is 6 times other cols
					def  % /VoteRecorderWidthColFirst
					/VoteRecorderColWidth  PageWidth MgnL MgnR add sub VoteRecorderWidthColFirst sub VoteRecorderNumNames div  def

					VoteRecorderNamesOrientation dup /Horizontal eq  exch /Vertical ne VoteRecorderColWidth VoteRecorderHeightFirstRow 0.9375 mul ge and  or
					{
						% Might as well show VoteRecorderNames horizontally. So can shrink VoteRecorderHeightFirstRow.
						/VoteRecorderHeightFirstRow  VoteRecorderNamesMaxT VoteRecorderNamesMinB sub 1.0625 mul  def
					} if  % VoteRecorderColWidth  VoteRecorderHeightFirstRow 0.875 mul  gt
				} repeat % 2

				0.75 setgray   0 currentlinecap ne {0 setlinecap} if   1 currentlinejoin ne {1 setlinejoin} if   currentdash pop length 0 ne {[] 0 setdash} if
				0  1  VoteRecorderNumNames 1 sub
				{
					/NameNum exch def
					/x   PageWidth MgnL MgnR add sub VoteRecorderWidthColFirst sub  NameNum mul  VoteRecorderNumNames div   MgnL add  VoteRecorderWidthColFirst add   def
					x MgnB moveto  x PageHeight MgnT sub VoteRecorderTopTextHeight sub lineto
					VoteRecorderShowTotalCol VoteRecorderSheetNum GetEU NameNum VoteRecorderNumNames 1 sub eq and  NameNum 0 eq  or {VoteRecorderWideLineWidth}
						{VoteRecorderNumNames 6 ge  VoteRecorderNumNames 3 mod 0 eq {0} {2} ifelse NameNum 3 mod eq  and {VoteRecorderMiddleLineWidth} {VoteRecorderNarrowLineWidth} ifelse}
					ifelse dup currentlinewidth ne {setlinewidth} {pop} ifelse  stroke
				} for  % NameNum
				currentdict /NameNum undef

				/WithinPage 0 def
				0  1  VoteRecorderThisSheet length 1 sub
				{
					/ClusterNum exch def
					0  1  VoteRecorderThisSheet ClusterNum GetEU length 1 sub  VoteRecorderShowTotalRow VoteRecorderSheetNum GetEU ClusterNum VoteRecorderThisSheet length 1 sub eq and {1 add} if
					{
						/WithinCluster exch def
						/ThisRowTotalRow  VoteRecorderShowTotalRow VoteRecorderSheetNum GetEU  WithinPage VoteRecorderThisSheetLength 1 sub eq  and  def
						/WithinTitles ThisRowTotalRow {//null} {VoteRecorderThisSheet ClusterNum GetEU WithinCluster GetEU} ifelse def
						/ThisVoteRecorderTitle ThisRowTotalRow {/VoteRecorderTotalRowTitle load} {TitlesVoteRecorder WithinTitles get} ifelse  def
						/ThisVoteRecorderSubtitle ThisRowTotalRow {()} {SubtitlesVoteRecorder WithinTitles get} ifelse  def

						/CurrentTop  VoteRecorderRowHeight VoteRecorderThisSheetLength WithinPage sub mul  MgnB add  def

						TitlesFont VoteRecorderTitlesFontSize selectfont
						GSave  NullDevice  16384 dup scale  newpath 0 0 moveto
						/ThisVoteRecorderTitle load  //false CharPathRecursive PathBBox
						GRestore  /VoteRecorderTitleT exch def  /VoteRecorderTitleR exch def  /VoteRecorderTitleB exch def  /VoteRecorderTitleL exch def

						SubtitlesFont VoteRecorderTitlesFontSize VoteRecorderSubtitleFSPT WithinPage GetEU mul selectfont
						GSave  NullDevice  16384 dup scale  newpath 0 0 moveto
						/ThisVoteRecorderSubtitle load  //false CharPathRecursive PathBBox
						GRestore  /VoteRecorderSubtitleT exch def pop /VoteRecorderSubtitleB exch def pop

						/VoteRecorderTitleSubtitleGap  VoteRecorderTitleT VoteRecorderTitleB sub  VoteRecorderSubtitleT VoteRecorderSubtitleB sub  2 copy gt {exch} if pop  0.25 mul  def  % embedded constant 0.25

						ThisRowTotalRow
						{
							0.75 setgray   MgnL  CurrentTop  PageWidth MgnL MgnR add sub  VoteRecorderWideLineWidth neg  rectfill   0 setgray
							TitlesFont VoteRecorderTitlesFontSize selectfont
							VoteRecorderTitleT VoteRecorderTitleB sub //PrinterEpsilon gt  VoteRecorderTitleR VoteRecorderTitleL sub //PrinterEpsilon gt  and
							{
								% http://www.theportforum.com/viewtopic.php?t=175&start=852
								matrix currentmatrix
								% Size factor if rotated
								VoteRecorderWidthColFirst VoteRecorderWideLineWidth 2 div sub  VoteRecorderTitleT VoteRecorderTitleB sub div
								VoteRecorderRowHeight VoteRecorderWideLineWidth sub  VoteRecorderTitleR VoteRecorderTitleL sub div
								1  2 {2 copy gt {exch} if pop} repeat
								% Size factor if not rotated
								VoteRecorderWidthColFirst VoteRecorderWideLineWidth 2 div sub  VoteRecorderTitleR VoteRecorderTitleL sub  div
								VoteRecorderRowHeight VoteRecorderWideLineWidth sub  VoteRecorderTitleT VoteRecorderTitleB sub  div
								1  2 {2 copy gt {exch} if pop} repeat
								2 copy gt
								{
									MgnL  VoteRecorderRowHeight VoteRecorderThisSheetLength WithinPage sub 1 sub mul  MgnB add   translate
									pop   90 rotate  dup 1 ne {dup scale} {pop} ifelse
									VoteRecorderTitleL neg VoteRecorderTitleT neg moveto
								}{
									MgnL  CurrentTop VoteRecorderRowHeight sub VoteRecorderTitleB sub VoteRecorderRowHeight 32 div add moveto
									dup 1 ne {1 scale} {pop} ifelse  pop
								} ifelse  % rotate
								/ThisVoteRecorderTitle load  ShowRecursive    setmatrix
							} if  % Non-zero size
						}{
							MgnL CurrentTop moveto
							CirclearraysVoteRecorder WithinTitles get  {0 setgray CircletextFont VoteRecorderCircletextFontSize selectfont}  CircletextsMinNumSpacesBetween //true  PageWidth MgnL MgnR add sub  WithinCluster 0 eq  -1  CirclearrayInStraightLine
							/CirclearraysVoteRecorderT exch def  /CirclearraysVoteRecorderB exch def  pop pop
							/CurrentTop  CurrentTop CirclearraysVoteRecorderT CirclearraysVoteRecorderB sub sub  def

							1 dict begin  /AnnotationCount 0 def
							0  2  GlassesAnnotations length 2 sub  dup 0 ge {//false PageSuppressed {pop -1} if} if
							{
								dup GlassesAnnotations exch GetEU WithinTitles eq
								{
									mark exch
										1 add GlassesAnnotations exch GetEU PDFDocEncodingify /Contents exch
										/Title [Titles WithinTitles get (: annotation)] PDFDocEncodingify
										/Rect [ MgnL VoteRecorderWidthColFirst add 8 AnnotationCount sub 8 div mul  PageWidth MgnR sub AnnotationCount 8 div mul  add   CurrentTop   2 copy ]
										/Subtype /Text   /Open //true   /F 64 128 add  % ReadOnly + Locked. PDFReference16.pdf page 574
									/ANN pdfmark
									/AnnotationCount AnnotationCount 1 add store   AnnotationCount 9 ge {exit} if
								} {pop} ifelse  % ... WithinTitles eq
							} for   end  % 'GlassesAnnotations'

							newpath  1 currentlinecap ne {1 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if
							/VoteRecorderCrossLineWidth
								2.88    VoteRecorderColWidth 12 div
								VoteRecorderRowHeight CirclearraysVoteRecorderT CirclearraysVoteRecorderB sub sub 12 div
								2 {2 copy gt {exch} if pop} repeat
							def % VoteRecorderCrossLineWidth
							0  1  VoteRecorderNumNames 1 sub  % Different upper bound
							{
								/NameNum exch def  % Different variable
								/ThisName VoteRecorderNames NameNum get def
								VoteRecorderCrossedBox
								{
									/x   PageWidth MgnL MgnR add sub VoteRecorderWidthColFirst sub  NameNum 0.5 add mul  VoteRecorderNumNames div   MgnL add  VoteRecorderWidthColFirst add   def
									x VoteRecorderColWidth 2 div sub VoteRecorderCrossLineWidth 2 mul add  CurrentTop VoteRecorderCrossLineWidth 2 mul sub  2 copy moveto
									x VoteRecorderColWidth 2 div add VoteRecorderCrossLineWidth 2 mul sub  CurrentTop VoteRecorderRowHeight CirclearraysVoteRecorderT CirclearraysVoteRecorderB sub sub sub VoteRecorderCrossLineWidth 2 mul add  2 copy lineto
									3 1 roll exch moveto lineto
									0 setgray VoteRecorderCrossLineWidth dup dup currentlinewidth ne {setlinewidth} {pop} ifelse 2.16 ge {GSave stroke GRestore 1 setgray VoteRecorderCrossLineWidth 3 div dup currentlinewidth ne {setlinewidth} {pop} ifelse stroke} {stroke} ifelse
								} if  % VoteRecorderCrossedBox
							} for  % NameNum
							currentdict /NameNum undef  currentdict /ThisName undef

							/CurrentTop CurrentTop TastingNotesLineGap sub def

							0 setgray  TitlesFont VoteRecorderTitlesFontSize selectfont
							MgnL  CurrentTop  VoteRecorderTitleT sub  VoteRecorderRowHeight 32 div sub
							moveto  VoteRecorderWidthColFirst VoteRecorderTitleWidths WithinPage get 2 copy lt
								{div  matrix currentmatrix  exch 1 scale  /ThisVoteRecorderTitle load  ShowRecursive  setmatrix}
								{pop pop  /ThisVoteRecorderTitle load  ShowRecursive}
							ifelse
							/CurrentTop  CurrentTop  VoteRecorderTitleT VoteRecorderTitleB sub sub  VoteRecorderRowHeight 32 div sub  def

							SubtitlesFont VoteRecorderTitlesFontSize VoteRecorderSubtitleFSPT WithinPage GetEU mul selectfont
							MgnL  CurrentTop  VoteRecorderTitleSubtitleGap sub VoteRecorderSubtitleT sub
							moveto  VoteRecorderWidthColFirst VoteRecorderSubtitleWidths WithinPage get 2 copy lt
								{div  matrix currentmatrix  exch 1 scale  /ThisVoteRecorderSubtitle load  ShowRecursive  setmatrix}
								{pop pop  /ThisVoteRecorderSubtitle load  ShowRecursive}
							ifelse
						} ifelse  % ThisRowTotalRow

						/WithinPage WithinPage 1 add def
					} for  % WithinCluster, WithinTitles
				} for  % ClusterNum

				/WithinPage 0 def
				0  1  VoteRecorderNumNames 1 sub
				{
					/NameNum exch def
					/ThisName  VoteRecorderNames NameNum get def  % Non-standard line
					/CurrentCentre  MgnL VoteRecorderWidthColFirst add  VoteRecorderColWidth NameNum 0.5 add mul add  def

					NamesFont VoteRecorderNamesFontSize selectfont
					0 setgray
					VoteRecorderNamesOrientation dup /Horizontal eq  exch /Vertical ne VoteRecorderColWidth VoteRecorderHeightFirstRow ge and  or
					{
						% Horizontal
						PageHeight MgnT sub VoteRecorderTopTextHeight sub  VoteRecorderHeightFirstRow VoteRecorderNamesMaxT VoteRecorderNamesMinB add add 2 div sub
						VoteRecorderColWidth VoteRecorderNarrowLineWidth NameNum VoteRecorderNumNames ge {2 div} if sub  % The VoteRecorderNarrowLineWidth is so that adjacent columns don't quite touch
						VoteRecorderNameR NameNum get VoteRecorderNameL NameNum get sub  2 copy lt
						{
							DeBugLevel 9 le {( VoteRecorder: Horizontal, scaled) OutputToLog} if
							CurrentCentre VoteRecorderColWidth VoteRecorderNarrowLineWidth sub 2 div sub  4 -1 roll  moveto  div  matrix currentmatrix exch  1 scale  VoteRecorderNameL NameNum get neg 0 rmoveto
							/ThisName load ShowRecursive  setmatrix
						}{
							DeBugLevel 9 le {( VoteRecorder: Horizontal) OutputToLog} if
							NameNum VoteRecorderNumNames ge
								{pop pop  PageWidth MgnR sub VoteRecorderNameR NameNum get sub}
								{pop pop  CurrentCentre VoteRecorderNameL NameNum get VoteRecorderNameR NameNum get add 2 div sub}
							ifelse  exch moveto  /ThisName load ShowRecursive
						} ifelse  % VoteRecorderColWidth ...  VoteRecorderNameR ... VoteRecorderNameL sub ... lt
					}{
						% Vertical
						matrix currentmatrix
						NameNum VoteRecorderNumNames ge  % "Total"
							{PageWidth MgnR sub VoteRecorderNameB NameNum get add}
							{CurrentCentre  VoteRecorderNamesMaxT VoteRecorderNamesMinB add 2 div add}
						ifelse % Total column
						VoteRecorderHeightFirstRow  VoteRecorderNameR NameNum get VoteRecorderNameL NameNum get sub  2 copy lt
						{
							DeBugLevel 9 le {( VoteRecorder: Vertical, scaled) OutputToLog} if
							3 -1 roll  PageHeight MgnT sub VoteRecorderTopTextHeight sub  VoteRecorderHeightFirstRow sub  VoteRecorderNameL NameNum get sub  moveto
							div  90 rotate  1 scale  /ThisName load ShowRecursive
						}{
							DeBugLevel 9 le {( VoteRecorder: Vertical) OutputToLog} if
							pop pop  PageHeight MgnT sub VoteRecorderTopTextHeight sub  VoteRecorderHeightFirstRow sub  VoteRecorderNameL NameNum get sub
							1.20  VoteRecorderHeightFirstRow VoteRecorderNameR NameNum get sub VoteRecorderNameL NameNum get add 2 copy gt {exch} if pop add  moveto  % Embedded constant
							90 rotate  /ThisName load ShowRecursive
						} ifelse  % VoteRecorderHeightFirstRow ... VoteRecorderNameR ... VoteRecorderNameL ... sub  ... lt
						setmatrix
					} ifelse  % VoteRecorderColWidth  VoteRecorderHeightFirstRow gt
				} for  % NameNum
				currentdict /NameNum undef

				matrix currentmatrix
				<< /WithinTitles 0 >> begin  HeaderFont VoteRecorderCircletextFontSize selectfont  end
				GSave  NullDevice  16384 dup scale  newpath 0 0 moveto
				VoteRecorderInstruction  //false CharPathRecursive PathBBox
				GRestore  /VRTTT exch def  /VRTTR exch def  /VRTTB exch def  /VRTTL exch def
				VoteRecorderWidthColFirst  VoteRecorderHeightFirstRow 0.875 mul  ge
				{
					MgnL   PageHeight MgnT sub VoteRecorderTopTextHeight sub VoteRecorderHeightFirstRow 2 div sub  VRTTT VRTTB add 2 div  sub  moveto
					VoteRecorderWidthColFirst VoteRecorderWideLineWidth 2 div sub  VRTTR VRTTL sub dup //PrinterEpsilon gt {div dup 1 lt {1 scale} {pop} ifelse} {pop pop} ifelse
				}{
					MgnL VoteRecorderWidthColFirst 2 div add VRTTT VRTTB sub 2 div add  PageHeight MgnT sub VoteRecorderTopTextHeight sub VoteRecorderHeightFirstRow sub  translate  90 rotate  0 0 moveto
					VRTTR VRTTL sub VoteRecorderHeightFirstRow gt {VoteRecorderHeightFirstRow VRTTR VRTTL sub div 1 scale} {VoteRecorderHeightFirstRow VRTTR VRTTL sub sub 2 div 0 rmoveto} ifelse
				} ifelse  VoteRecorderInstruction ShowRecursive   setmatrix  % Show horizontally

				end
				DeBugLevel 100 le {(-VoteRecorderForms: PaintProc) OutputToLog} if
			} bind def  % /PaintProc
			end  % dictionary VoteRecorderForms
		} bind for  % VoteRecorderSheetNum
		UndefMgns
		currentdict /VoteRecorderSheetNum undef
	} if  % ... VoteRecorders ...


	{DecantingNotesNumCopies 1 ge} MightBeTrue
	{
		DeBugLevel 100 le {( Main: DecantingNotesForms) OutputToLog} if
		/TypeOfPagesBeingRendered /DecantingNotes store
		/DecantingNotesForms [ GlassesClusteredOnDecantingNotes length {6 dict} repeat ] def
		0  1  GlassesClusteredOnDecantingNotes length 1 sub
		{
			/DecantingNotesSheetNum exch def
			//false //false //false //false DecantingNotesPaperType DecantingNotesOrientation SetPaperSize
			//true DefStoreMgns

			DecantingNotesForms DecantingNotesSheetNum get begin
			/FormType 1 def
			/BBox [ MgnL 2 div  MgnB 2 div  PageWidth MgnR 2 div sub  PageHeight MgnT 2 div sub ] def
			/Matrix matrix identmatrix def
			/PaintProc
			{
				DeBugLevel 100 le {(+DecantingNotesForms: PaintProc) OutputToLog} if
				pop  % dictionary parameter of execform
				29 dict begin
				/DecantingNotesSheetNum DecantingNotesSheetNum def
				/TypeOfPagesBeingRendered /DecantingNotes store

				/TypeOfPagesBeingRendered /DecantingNotes store  % only those elements of names with non-zero TN pages

				HeadersAndFooters PaintHeadersFooters

				/DecantingNotesLineWidth 1.32 def
				/DecantingNotesNumGlasses 0 GlassesClusteredOnDecantingNotes DecantingNotesSheetNum GetEU {execU length add} forall def

				/DecantingNotesTitlesFontSize
					PageHeight MgnB MgnT add sub
					8 DecantingNotesNumGlasses 2 copy lt {exch} if pop  1 add div  % embedded constant
					1.8  div  % embedded constant
					DecantingNotesTitlesFontSizeMax  2 copy gt {exch} if pop
				def  % /DecantingNotesTitlesFontSize
				DecantingNotesTitlesFontSize 8 lt
				{
					mark  DecantingNotesTitlesFontSize 5 lt
						{  (Error:  DecantingNotesTitlesFontSize \(with DecantingNotesSheetNum=) DecantingNotesSheetNum (\) computed to be ) DecantingNotesTitlesFontSize ( which is <) 5 (, so tiny)}
						{(Warning:  DecantingNotesTitlesFontSize \(with DecantingNotesSheetNum=) DecantingNotesSheetNum (\) computed to be ) DecantingNotesTitlesFontSize ( which is <) 8 (, so small)}
					ifelse  (. Continuing, but consider changing GlassesClusteredOnDecantingNotes.)  ConcatenateToMark OutputToLog
				} if  % VoteRecorderTitlesFontSize 6 lt
				/DecantingNotesHeadingsFontSize  MaxCircletextMaxFontSizes DecantingNotesTopTextHeight 2 div 2 copy gt {exch} if pop def

				/DecantingNotesTitleWidths DecantingNotesThisSheetLength array def
				/DecantingNotesSubtitleWidths DecantingNotesThisSheetLength array def
				/DecantingNotesSubtitleFSPT [ DecantingNotesThisSheetLength {0} repeat ] def
				/DecantingNotesTitleWidthsMax 0 def
				/DecantingNotesSubtitleWidthsMax 0 def
				/WithinPage 0 def
				0  1  DecantingNotesThisSheet length 1 sub
				{
					/ClusterNum exch def
					0  1  DecantingNotesThisSheet ClusterNum GetEU length 1 sub
					{
						/WithinCluster exch def
						/WithinTitles DecantingNotesThisSheet ClusterNum GetEU WithinCluster GetEU def
						TitlesFont DecantingNotesTitlesFontSize selectfont
						DecantingNotesTitleWidths  WithinPage  TitlesDecantingNotes WithinTitles get StringWidthRecursive
						/DecantingNotesTitleWidthsMax dup load 2 index lt {1 index store} {pop} ifelse   put
						SubtitlesFont  DecantingNotesTitlesFontSize selectfont
						DecantingNotesSubtitleWidths  WithinPage  SubtitlesDecantingNotes WithinTitles get StringWidthRecursive
						/DecantingNotesSubtitleWidthsMax dup load 2 index lt {1 index store} {pop} ifelse   put
						/WithinPage WithinPage 1 add def
					} for  % WithinCluster, WithinTitles
				} for  % ClusterNum
				/WithinPage 0 def
				/DecantingNotesProportionToBeLogged //true def
				0  1  DecantingNotesThisSheet length 1 sub
				{
					/ClusterNum exch def
					0  1  DecantingNotesThisSheet ClusterNum GetEU length 1 sub
					{
						/WithinCluster exch def
						/WithinTitles DecantingNotesThisSheet ClusterNum GetEU WithinCluster GetEU def

						DecantingNotesSubtitleWidths  WithinPage  2 copy get
						DecantingNotesSubtitleFontSizeProportionTitles dup IsNumber not
						{
							pop DecantingNotesTitleWidthsMax DecantingNotesSubtitleWidthsMax dup 0 gt {div} {pop pop 0.5} ifelse
							0.5  2 copy gt {exch} if pop  % embedded constant
							5  DecantingNotesTitlesFontSize div  2 copy lt {exch} if pop  % embedded constant
							//SqrtHalf  2 copy gt {exch} if pop  % embedded constant
							DecantingNotesProportionToBeLogged  DecantingNotesSubtitleWidthsMax 0 gt  and
							{
								dup mark exch (DecantingNotesSheetNum=) exch DecantingNotesSheetNum exch (: DecantingNotesSubtitleFontSizeProportionTitles at least once replaced with ) exch
								(, a font size of ) 1 index DecantingNotesTitlesFontSize mul (pt.) ConcatenateToMark OutputToLog
								/DecantingNotesProportionToBeLogged //false store
							} if  % DecantingNotesProportionToBeLogged  DecantingNotesSubtitleWidthsMax 0 gt  and
							dup DecantingNotesSubtitleFSPT exch WithinPage exch put
						} if  % DecantingNotesSubtitleFontSizeProportionTitles dup IsNumber not
						mul put
						/WithinPage WithinPage 1 add def
					} for  % WithinCluster, WithinTitles
				} for  % ClusterNum
				/DecantingNotesSubtitleWidthsMax 0  0 1 DecantingNotesThisSheetLength 1 sub {dup DecantingNotesSubtitleFSPT exch get exch DecantingNotesSubtitleWidths exch get mul 2 copy lt {exch} if pop} for  store
				currentdict /WithinTitles undef
				currentdict /WithinCluster undef
				currentdict /ClusterNum undef

				/DecantingNotesWidthColFirst
					DecantingNotesTitleWidthsMax DecantingNotesSubtitleWidthsMax 2 copy lt {exch} if pop   DecantingNotesLineWidth 2 div add
					PageWidth MgnL MgnR add sub 6 div  2 copy gt {exch} if pop  % Max is 6 times other cols
				def  % /DecantingNotesWidthColFirst
				/DecantingNotesWidthColTimes
					72  DecantingNotesHeadingsFontSize 3 mul  2 copy lt {exch} if pop  % embedded constants
					PageWidth MgnL MgnR add sub DecantingNotesWidthColFirst sub  2 div  2 copy gt {exch} if pop
				def

				HeaderFont  DecantingNotesHeadingsFontSize selectfont
				GSave NullDevice 16384 dup scale newpath 0 0 moveto [DecantingNotesColumnHeadingTimes DecantingNotesColumnHeadingNotes] //true CharPathRecursive PathBBox GRestore
				exch pop 2 copy exch sub 2 add /DecantingNotesHeightFirstRow exch def  % embedded constant
				add neg DecantingNotesHeightFirstRow add 2 div /DecantingNotesVerticalOffsetFirstRow exch def
				pop
				/DecantingNotesLargerTopTwoThings DecantingNotesTopTextHeight DecantingNotesHeightFirstRow 2 copy lt {exch} if pop def

				0.75 setgray   DecantingNotesLineWidth dup currentlinewidth ne {setlinewidth} {pop} ifelse  0 currentlinecap ne {0 setlinecap} if   1 currentlinejoin ne {1 setlinejoin} if   currentdash pop length 0 ne {[] 0 setdash} if
				PageHeight MgnT sub DecantingNotesTopTextHeight sub DecantingNotesHeightFirstRow add dup
				MgnL DecantingNotesWidthColFirst add                                 dup MgnB moveto exch lineto stroke
				MgnL DecantingNotesWidthColFirst add DecantingNotesWidthColTimes add dup MgnB moveto exch lineto stroke

				/DecantingNotesRowHeight  PageHeight MgnB MgnT add sub DecantingNotesLargerTopTwoThings sub DecantingNotesNumGlasses dup 0 eq {pop pop 0} {div} ifelse  def
				/DecantingNotesCircletextFontSize  DecantingNotesRowHeight 6 div  dup 5 gt {pop 5} if  def  % embedded constant

				DecantingNotesTopTextHeight 0 gt
				{
					HeaderFont DecantingNotesTopTextHeight selectfont
					GSave  NullDevice  16384 dup scale  newpath 0 0 moveto
					DecantingNotesTopText  //true CharPathRecursive PathBBox
					GRestore  /DecantingNotesTopTextT exch def  /DecantingNotesTopTextR exch def  /DecantingNotesTopTextB exch def  pop
					HeaderFont  DecantingNotesTopTextHeight dup mul DecantingNotesTopTextT DecantingNotesTopTextB sub div  selectfont
					PageWidth MgnR sub DecantingNotesTopTextR DecantingNotesTopTextHeight mul DecantingNotesTopTextT DecantingNotesTopTextB sub div sub
					PageHeight  MgnT sub  DecantingNotesTopTextHeight DecantingNotesTopTextT DecantingNotesTopTextB sub div DecantingNotesTopTextT mul sub  moveto
					0.5 setgray  DecantingNotesTopText ShowRecursive
					currentdict /DecantingNotesTopTextB undef  currentdict /DecantingNotesTopTextR undef  currentdict /DecantingNotesTopTextT undef
				} if  % DecantingNotesTopTextHeight 0 gt

				0 setgray  HeaderFont  DecantingNotesHeadingsFontSize selectfont
				PageHeight MgnT sub DecantingNotesLargerTopTwoThings sub DecantingNotesVerticalOffsetFirstRow add  dup
				/DecantingNotesColumnHeadingTimesStringWidth DecantingNotesColumnHeadingTimes StringWidthRecursive def
				DecantingNotesWidthColTimes DecantingNotesColumnHeadingTimesStringWidth lt
					{matrix currentmatrix exch MgnL DecantingNotesWidthColFirst add exch moveto DecantingNotesWidthColTimes DecantingNotesColumnHeadingTimesStringWidth div 1 scale DecantingNotesColumnHeadingTimes ShowRecursive setmatrix}
					{MgnL DecantingNotesWidthColFirst add   DecantingNotesWidthColTimes DecantingNotesColumnHeadingTimesStringWidth sub 2 div add exch moveto DecantingNotesColumnHeadingTimes ShowRecursive}
				ifelse  % DecantingNotesColumnHeadingTimes too large
				DecantingNotesWidthColTimes DecantingNotesColumnHeadingTimesStringWidth lt {PageWidth MgnL MgnR add sub 128 div} {DecantingNotesWidthColTimes DecantingNotesColumnHeadingTimesStringWidth sub 2 div} ifelse
				MgnL add DecantingNotesWidthColFirst add DecantingNotesWidthColTimes add  exch moveto
				DecantingNotesColumnHeadingNotes ShowRecursive

				/WithinPage 0 def
				0  1  DecantingNotesThisSheet length 1 sub
				{
					/ClusterNum exch def
					0  1  DecantingNotesThisSheet ClusterNum GetEU length 1 sub
					{
						/WithinCluster exch def
						/WithinTitles DecantingNotesThisSheet ClusterNum GetEU WithinCluster GetEU def
						/CurrentTop  DecantingNotesRowHeight DecantingNotesThisSheetLength WithinPage sub mul  MgnB add  def

						MgnL CurrentTop moveto
						CirclearraysDecantingNotes WithinTitles get  {0 setgray CircletextFont DecantingNotesCircletextFontSize selectfont}  CircletextsMinNumSpacesBetween //true  PageWidth MgnL MgnR add sub  WithinCluster 0 eq  -1  CirclearrayInStraightLine
						sub 2 div CurrentTop add /CurrentTop exch def pop pop

						1 dict begin   /AnnotationCount 0 def
						0  2  GlassesAnnotations length 2 sub  dup 0 ge {//false PageSuppressed {pop -1} if} if
						{
							dup GlassesAnnotations exch GetEU WithinTitles eq
							{
								mark exch
									1 add GlassesAnnotations exch GetEU PDFDocEncodingify /Contents exch
									/Title [Titles WithinTitles get (: annotation)] PDFDocEncodingify
									/Rect [ MgnL DecantingNotesWidthColFirst add 8 AnnotationCount sub 8 div mul  PageWidth MgnR sub AnnotationCount 8 div mul  add   CurrentTop   2 copy ]
									/Subtype /Text   /Open //true   /F 64 128 add  % ReadOnly + Locked. PDFReference16.pdf page 574
								/ANN pdfmark
								/AnnotationCount AnnotationCount 1 add store   AnnotationCount 9 ge {exit} if
							} {pop} ifelse  % ... WithinTitles eq
						} for  end  % 'GlassesAnnotations'

						TitlesFont DecantingNotesTitlesFontSize selectfont
						GSave  NullDevice  16384 dup scale  newpath 0 0 moveto
						TitlesDecantingNotes WithinTitles get  //true CharPathRecursive PathBBox
						GRestore  /DecantingNotesTitleT exch def pop /DecantingNotesTitleB exch def pop

						SubtitlesFont DecantingNotesTitlesFontSize DecantingNotesSubtitleFSPT WithinPage get mul selectfont
						GSave  NullDevice  16384 dup scale  newpath 0 0 moveto
						SubtitlesDecantingNotes WithinTitles get  //true CharPathRecursive PathBBox
						GRestore  /DecantingNotesSubtitleT exch def pop /DecantingNotesSubtitleB exch def pop

						/DecantingNotesTitleSubtitleGap  DecantingNotesTitleT DecantingNotesTitleB sub  DecantingNotesSubtitleT DecantingNotesSubtitleB sub  2 copy gt {exch} if pop  0.25 mul  def  % embedded constant 0.25

						MgnL  CurrentTop DecantingNotesRowHeight 2 div sub  2 copy
						DecantingNotesSubtitleT DecantingNotesSubtitleB sub  DecantingNotesTitleT DecantingNotesTitleB add  sub DecantingNotesTitleSubtitleGap add 2 div add
						TitlesFont DecantingNotesTitlesFontSize selectfont
						moveto  DecantingNotesWidthColFirst DecantingNotesTitleWidths WithinPage get 2 copy lt
							{div  matrix currentmatrix  exch 1 scale  TitlesDecantingNotes WithinTitles get  ShowRecursive  setmatrix}
							{pop pop  TitlesDecantingNotes WithinTitles get  ShowRecursive}
						ifelse

						DecantingNotesSubtitleT DecantingNotesSubtitleB add  DecantingNotesTitleT DecantingNotesTitleB sub  add DecantingNotesTitleSubtitleGap add 2 div sub
						SubtitlesFont DecantingNotesTitlesFontSize DecantingNotesSubtitleFSPT WithinPage get mul selectfont
						moveto  DecantingNotesWidthColFirst DecantingNotesSubtitleWidths WithinPage get 2 copy lt
							{div  matrix currentmatrix  exch 1 scale  SubtitlesDecantingNotes WithinTitles get  ShowRecursive  setmatrix}
							{pop pop  SubtitlesDecantingNotes WithinTitles get  ShowRecursive}
						ifelse

						/WithinPage WithinPage 1 add def
					} for  % WithinCluster, WithinTitles
				} for  % ClusterNum
				end
				DeBugLevel 100 le {(-DecantingNotesForms: PaintProc) OutputToLog} if
			} bind def  % /PaintProc
			end  % dictionary DecantingNotesForms
		} bind for  % DecantingNotesSheetNum
		UndefMgns
		currentdict /DecantingNotesSheetNum undef
	} if  % ... DecantingNotesNumCopies 1 ge ...


	/CrossHatchingOutside load MightBeTrue
	{
		DeBugLevel 100 le {( Main: CrossHatchingOutsideForms) OutputToLog} if
		/TypeOfPagesBeingRendered /Glasses store
		/CrossHatchingOutsideForms [ NumSheets {4 dict} repeat ] def

		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			//false //false //false //false PaperType Orientation SetPaperSize   //true DefStoreMgns
			CrossHatchingOutsideForms SheetNum get begin
			/FormType 1 def
			/Matrix matrix identmatrix def
			/BBox [ CrossHatchingOutsideToPaperEdge {0 0 PageWidth PageHeight} {MgnL MgnB PageWidth MgnR sub PageHeight MgnT sub} ifelse ] def

			/PaintProc  % Paints CrossHatchingOutsideForm
			{
				DeBugLevel 100 le {(+CrossHatchingOutsideForms: PaintProc) OutputToLog} if
				pop 3 dict begin

				NamesShowTop SheetNum get {NamePlacementTopX} {NamePlacementBottomX} ifelse SheetNum get  % cross hatching center x
				CrossHatchingCentreX IsNumber {pop CrossHatchingCentreX} if
				CrossHatchingCentreX /Left   eq {pop 0} if
				CrossHatchingCentreX /Center eq {pop PageWidth MgnL MgnR sub add 2 div} if
				CrossHatchingCentreX /Right  eq {pop PageWidth} if
				/CenterSheetsSamePageOrdering CrossHatchingCentreX eq  SideBySideGlassesTastingNotes not  and
				{
					pop 0
					0  1  GlassesOnSheets length 1 sub
					{
						/SheetNum0 exch def
						PageOrderingGlasses dup SheetNum0 GetEU exch SheetNum GetEU eq
						{
							//false //false //false //false  << /SheetNum SheetNum0 >> begin PaperType Orientation end  SetPaperSize   PageWidth  SheetNum0 SheetNum lt {sub} {add} ifelse
						} if  % PageOrderingGlasses ... eq
					} for  % SheetNum0
					2 div   currentdict /SheetNum0 undef   //false //false //false //false PaperType Orientation SetPaperSize
				} if  % /CrossHatchingCentreX /CenterSheetsSamePageOrdering eq  SideBySideGlassesTastingNotes not  and
				/CHCX exch def

				NamesShowTop SheetNum get {PageHeight MgnT sub} {MgnB} ifelse  % cross hatching center y
				CrossHatchingCentreY IsNumber {pop CrossHatchingCentreY} if
				CrossHatchingCentreY /Bottom eq {pop 0} if
				CrossHatchingCentreY /Middle eq {pop PageHeight MgnB MgnT sub add 2 div} if
				CrossHatchingCentreY /Top    eq {pop PageHeight} if
				/CHCY exch def

				% If two circles have a machine-precision overlap, it will look just as if they had a machine-precision underlap. No problem.
				% But circles overlapping page edge can look wrong, as eye will see fragments outside margin. And a preliminary rectclip will also speed rasterisation.
				ClipSave
				CrossHatchingOutsideToPaperEdge {0 0 PageWidth PageHeight} {MgnL MgnB PageWidth MgnL MgnR add sub PageHeight MgnB MgnT add sub} ifelse  rectclip newpath
				% This path passed to RadialCrossHatching
				CrossHatchingOutsideToPaperEdge {PageWidth 0  1 index PageHeight  0 1 index  0 0} {PageWidth MgnR sub MgnB  1 index PageHeight MgnT sub  MgnL 1 index  MgnL MgnB} ifelse  moveto lineto lineto lineto closepath
				0  1  SheetLengths SheetNum get 1 sub
				{
					/WithinPage exch def
					CircleNonEmpty SheetNum get WithinPage get {GlassPositions SheetNum get WithinPage get aload pop Radii SheetNum get 3 copy add moveto 90 450 arc closepath} if
				} for  % WithinPage
				CHCX CHCY /CrossHatchingOutsideStrokeCode load RadialCrossHatching   newpath
				ClipRestore
				end
				DeBugLevel 100 le {(-CrossHatchingOutsideForms: PaintProc) OutputToLog} if
			} bind def  % /PaintProc
			end  % CrossHatchingOutsideForms
		} bind for  % SheetNum
		currentdict /SheetNum undef
	} if  % ... CrossHatchingOutside ...


	/CrossHatchingInside load MightBeTrue
	{
		DeBugLevel 100 le {( Main: CrossHatchingInsideForms) OutputToLog} if
		/TypeOfPagesBeingRendered /Glasses store
		/CrossHatchingInsideForms [ SheetLengths {[ exch {6 dict} repeat]} forall ] def

		0  1  NumSheets 1 sub
		{
			/SheetNum exch def

			0  1  SheetLengths SheetNum get 1 sub
			{
				dup CrossHatchingInsideForms SheetNum get exch get begin
				WithinPage-WithinTitles-def

				/FormType 1 def
				/BBox [ Radii SheetNum get dup dup neg dup 4 2 roll ] def
				/Matrix matrix identmatrix def

				/PaintProc  % Paints CrossHatchingInsideForm
				{
					DeBugLevel 100 le {(+CrossHatchingInsideForms: PaintProc) OutputToLog} if
					dup % dictionary parameter of execform containing WithinTitles and WithinPage
					/TypeOfPagesBeingRendered /Glasses store
					/WithinTitles get /WithinTitles exch def
					/WithinPage get /WithinPage exch def

					CrossHatchingInside
					{
						matrix currentmatrix

						NamesShowTop SheetNum get {NamePlacementTopX} {NamePlacementBottomX} ifelse SheetNum get  % cross hatching center x
						CrossHatchingCentreX IsNumber {pop CrossHatchingCentreX} if
						CrossHatchingCentreX /Left   eq {pop 0} if
						CrossHatchingCentreX /Center eq {pop PageWidth MgnL MgnR sub add 2 div} if
						CrossHatchingCentreX /Right  eq {pop PageWidth} if
						/CenterSheetsSamePageOrdering CrossHatchingCentreX eq  SideBySideGlassesTastingNotes not  and
						{
							pop 0
							0  1  GlassesOnSheets length 1 sub
							{
								/SheetNum0 exch def
								PageOrderingGlasses dup SheetNum0 GetEU exch SheetNum GetEU eq
								{
									//false //false //false //false  << /SheetNum SheetNum0 >> begin PaperType Orientation end  SetPaperSize   PageWidth  SheetNum0 SheetNum lt {sub} {add} ifelse
								} if  % PageOrderingGlasses ... eq
							} for  % SheetNum0
							2 div   currentdict /SheetNum0 undef   //false //false //false //false PaperType Orientation SetPaperSize
						} if  % /CrossHatchingCentreX /CenterSheetsSamePageOrdering eq  SideBySideGlassesTastingNotes not  and

						NamesShowTop SheetNum get {PageHeight MgnT sub} {MgnB} ifelse  % cross hatching center y
						CrossHatchingCentreY IsNumber {pop CrossHatchingCentreY} if
						CrossHatchingCentreY /Bottom eq {pop 0} if
						CrossHatchingCentreY /Middle eq {pop PageHeight MgnB MgnT sub add 2 div} if
						CrossHatchingCentreY /Top    eq {pop PageHeight} if

						RotationTitlesAboveBelowOverCirclearray dup 0 ne {neg rotate} {pop} ifelse  GlassPositions SheetNum get WithinPage get aload pop neg exch neg exch translate
						moveto setmatrix currentpoint newpath  /CHCY exch def /CHCX exch def

						0 0  RadiiCirclearrayInside SheetNum get  0 360 arc
						CHCX CHCY /CrossHatchingInsideStrokeCode load RadialCrossHatching   newpath
					} if  % CrossHatchingInside

					DeBugLevel 100 le {(-CrossHatchingInsideForms: PaintProc) OutputToLog} if
				} bind def  % /PaintProc
				end  % CrossHatchingInsideForms
			} for  % WithinPage, WithinTitles
			currentdict /WithinPage undef
			currentdict /WithinTitles undef
		} bind for  % SheetNum
		currentdict /SheetNum undef
	} if  % ... CrossHatchingInside ...


	/OutlineTitles load MightBeTrue
	{
		DeBugLevel 100 le {( Main: OutlineForms) OutputToLog} if
		/OutlineTitlesNumberContours [ SheetLengths {array} forall ] def
		/TypeOfPagesBeingRendered /Glasses store
		/OutlineForms [ GlassesOnSheets {[ exch execU length {6 dict} repeat]} forall ] def

		0  1  NumSheets 1 sub
		{
			/SheetNum exch def

			0  1  SheetLengths SheetNum get 1 sub
			{
				dup OutlineForms SheetNum get exch get begin
				WithinPage-WithinTitles-def

				/FormType 1 def
				/BBox [ Radii SheetNum get 1.02 mul dup dup neg dup 4 2 roll ] def
				/Matrix matrix identmatrix def

				/PaintProc  % Paints OutlineForm
				{
					DeBugLevel 100 le {(+OutlineForms: PaintProc) OutputToLog} if
					dup % dictionary parameter of execform containing WithinTitles and WithinPage
					/WithinTitles get /WithinTitles exch def
					/WithinPage get /WithinPage exch def

					RadiiCirclearrayInside SheetNum get  0 gt  OutlineTitles and
					{
						0 setgray  1 currentlinejoin ne {1 setlinejoin} if  1 currentlinecap ne {1 setlinecap} if  currentdash pop length 0 ne {[] 0 setdash} if
						newpath  0 0  RadiiCirclearrayInside SheetNum get  0 360 arc
						GSave clip newpath  % on GRestore will be able to stroke clipping circle

						TitlesFont  TitleFontSizes SheetNum get WithinPage get  selectfont
						TitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get  TitleFontSizes SheetNum get WithinPage get  mul
						TitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get  TitleFontSizes SheetNum get WithinPage get  mul
						moveto  Titles WithinTitles get //true CharPathRecursive

						OutlineTitlesAlsoOvertitles
						{
							OvertitlesFont  OvertitleFontSizes SheetNum get WithinPage get  selectfont
							OvertitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get  OvertitleFontSizes SheetNum get WithinPage get  mul
							OvertitleOffsetsProportionFontSizeVertical SheetNum get WithinPage get  OvertitleFontSizes SheetNum get WithinPage get  mul
							moveto  Overtitles WithinTitles get //true CharPathRecursive
						} if  % OutlineTitlesAlsoOvertitles

						OutlineTitlesAlsoBelowtitles
						{
							BelowtitlesFont  BelowtitleFontSizes SheetNum get WithinPage get  selectfont
							BelowtitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get  BelowtitleFontSizes SheetNum get WithinPage get  mul
							BelowtitleOffsetsAbsoluteVertical SheetNum get WithinPage get
							moveto  Belowtitles WithinTitles get //true CharPathRecursive
						} if  % OutlineTitlesAlsoBelowtitles

						OutlineTitlesAlsoAbovetitles
						{
							AbovetitlesFont  AbovetitleFontSizes SheetNum get WithinPage get  selectfont
							AbovetitleOffsetsProportionFontSizeHorizontal SheetNum get WithinPage get  AbovetitleFontSizes SheetNum get WithinPage get  mul
							AbovetitleOffsetsAbsoluteVertical SheetNum get WithinPage get
							moveto  Abovetitles WithinTitles get //true CharPathRecursive
						} if  % OutlineTitlesAlsoAbovetitles

						OutlineTitlesNumberContours SheetNum get WithinPage 2 copy get IsNumber
						{
							get /m exch def
						}{
							/OutlineTitlesTargetTotalDistance  0 0 RadiiCirclearrayInside SheetNum get  LineWidthThatCoversCircle  pop pop  2 div def
							/m 0 def
							1  1  OutlineTitlesMaxNum  % Upper bound determines maximum number of laps
							{
								/m exch def
								OutlineTitlesMultiplierWhite 1 eq {m      } {OutlineTitlesMultiplierWhite m       exp 1 sub  OutlineTitlesMultiplierWhite 1 sub div} ifelse  OutlineTitlesInnerWidthWhite mul
								OutlineTitlesMultiplierBlack 1 eq {m 1 sub} {OutlineTitlesMultiplierBlack m 1 sub exp 1 sub  OutlineTitlesMultiplierBlack 1 sub div} ifelse  OutlineTitlesInnerWidthBlack mul
								add  OutlineTitlesTargetTotalDistance gt {/m m 1 sub def  exit} if  % Larger than radius needed if title is "J" or "L".
								OutlineTitlesMultiplierBlack m 1 sub exp dup OutlineTitlesInnerWidthBlack mul 0.03 lt exch 0.25 lt and {exit} if  % Less than half a pixel at 1200 dpi
							} for  % m
							m put
						} ifelse  % OutlineTitlesNumberContours ... IsNumber

						m  -1  1
						{
							GSave
							/m exch def
							OutlineTitlesMultiplierWhite 1 eq {m      } {OutlineTitlesMultiplierWhite m       exp 1 sub  OutlineTitlesMultiplierWhite 1 sub div} ifelse  OutlineTitlesInnerWidthWhite mul
							dup
							OutlineTitlesMultiplierBlack 1 eq {m      } {OutlineTitlesMultiplierBlack m       exp 1 sub  OutlineTitlesMultiplierBlack 1 sub div} ifelse  OutlineTitlesInnerWidthBlack mul
							add  2 mul dup currentlinewidth ne {setlinewidth} {pop} ifelse   GSave 0 setgray stroke GRestore
							OutlineTitlesMultiplierBlack 1 eq {m 1 sub} {OutlineTitlesMultiplierBlack m 1 sub exp 1 sub  OutlineTitlesMultiplierBlack 1 sub div} ifelse  OutlineTitlesInnerWidthBlack mul
							add  2 mul dup currentlinewidth ne {setlinewidth} {pop} ifelse   1 setgray
							stroke GRestore
						} for  % m  -1  1

						GRestore  % end of clipping, but about to reuse clipping path
						1.0625 dup currentlinewidth ne {setlinewidth} {pop} ifelse  1 setgray  stroke % an edge more than a point
					} if  % RadiiCirclearrayInside SheetNum get  0 gt  OutlineTitles and

					DeBugLevel 100 le {(-OutlineForms: PaintProc) OutputToLog} if
				} def  % /PaintProc
				end  % OutlineForm
			} for  % WithinPage, WithinTitles
			currentdict /WithinPage undef
			currentdict /WithinTitles undef
		} bind for  % SheetNum
		currentdict /SheetNum undef
	} if  % ...OutlineTitles ...


	/Spirals load MightBeTrue
	{
		DeBugLevel 100 le {( Main: SpiralForms) OutputToLog} if
		/SpiralForms [ GlassesOnSheets {[ exch execU length {6 dict} repeat]} forall ] def

		0  1  NumSheets 1 sub
		{
			/SheetNum exch def
			0  1  SheetLengths SheetNum get 1 sub
			{
				dup SpiralForms SheetNum get exch get begin
				WithinPage-WithinTitles-def

				/FormType 1 def
				/BBox [ RadiiCirclearrayInside SheetNum get 2 add dup dup neg dup 4 2 roll ] def
				/Matrix matrix identmatrix def

				/PaintProc  % Paints Spirals
				{
					DeBugLevel 100 le {(+SpiralForms: PaintProc) OutputToLog} if
					dup % dictionary parameter of execform containing WithinTitles and WithinPage
					/WithinTitles get /WithinTitles exch def
					/WithinPage get /WithinPage exch def

					RadiiCirclearrayInside SheetNum get  0 gt  Spirals and
					{
						ClipSave newpath  0 0  RadiiCirclearrayInside SheetNum get  0 360 arc clip newpath
						SpiralNumArms  SpiralAngleOffset
						RadiiCirclearrayInside SheetNum get  SpiralCentreFromCentreProportionRadiiInside  mul  dup dup
						SpiralCentreFromCentreAngle sin mul exch
						SpiralCentreFromCentreAngle cos mul 3 -1 roll
						abs RadiiCirclearrayInside SheetNum get add  2 add  % Embedded constant. Will be enough if linewidth <= 4.
						SpiralRadiusBetweenArms  SpiralClockwise  ArchimedeanSpiralPath
						0.12 dup currentlinewidth ne {setlinewidth} {pop} ifelse  0 setgray  1 currentlinejoin ne {1 setlinejoin} if  1 currentlinecap ne {1 setlinecap} if  currentdash pop length 0 ne {[] 0 setdash} if  SpiralStrokeCode
						ClipRestore
					} if  % RadiiCirclearrayInside SheetNum get  0 gt  Spirals and
					DeBugLevel 100 le {(-SpiralForms: PaintProc) OutputToLog} if
				} def  % /PaintProc
				end  % SpiralForm
			} for  % WithinPage, WithinTitles
			currentdict /WithinPage undef
			currentdict /WithinTitles undef
		} bind for  % SheetNum
		currentdict /SheetNum undef
	} if  % ...Spirals ...


	DeBugLevel 100 le {( Main: CirclearrayForms) OutputToLog} if
	/TypeOfPagesBeingRendered /Glasses store
	/CirclearrayForms [ GlassesOnSheets {[ exch execU length {6 dict} repeat]} forall ] def

	0  1  NumSheets 1 sub
	{
		/SheetNum exch def
		0  1  SheetLengths SheetNum get 1 sub
		{
			dup CirclearrayForms SheetNum get exch get begin
			WithinPage-WithinTitles-def

			/FormType 1 def
			/BBox [ Radii SheetNum get 1.05 mul dup dup neg dup 4 2 roll ] def
			/Matrix matrix identmatrix def

			/PaintProc  % Paints Circletext
			{
				DeBugLevel 100 le {(+CirclearrayForms: PaintProc) OutputToLog} if
				dup % dictionary parameter of execform containing WithinTitles and WithinPage
				/WithinTitles get /WithinTitles exch def
				/WithinPage get /WithinPage exch def
				0 setgray   CircletextMaxFontSizes SheetNum get 60 div dup currentlinewidth ne {setlinewidth} {pop} ifelse
				0 0 moveto
				Circlearrays WithinTitles GetEU  CircletextsMinNumSpacesBetween  RadiiCirclearrayBaseline SheetNum get
				CirclearraysFontSizes SheetNum get WithinPage get  CirclearraysN SheetNum get WithinPage get
				Circletext
				DeBugLevel 100 le {(-CirclearrayForms: PaintProc) OutputToLog} if
			} bind def  % /PaintProc
			end
		} for  % WithinPage
		currentdict /WithinPage undef
		currentdict /WithinTitles undef
	} bind for  % SheetNum
	currentdict /SheetNum undef

	% -  HeadersAndFooters  HeaderLeft HeaderCenter HeaderRight FooterLeft FooterCenter FooterRight
	/HeadersAndFooters
	{
		DeBugLevel 75 le {(+HeadersAndFooters) OutputToLog} if
		2 dict begin  % ii is the best i
		/ii -1 def  0 2 HeadersLeft   length 2 sub {/i exch def  HeadersLeft   i GetEU dup ThisPageOrdering le {ii -1 eq {pop //true} {HeadersLeft   ii GetEU gt} ifelse {/ii i def} if} {pop} ifelse} for  ii -1 eq {()} {HeadersLeft   ii 1 add get} ifelse
		/ii -1 def  0 2 HeadersCenter length 2 sub {/i exch def  HeadersCenter i GetEU dup ThisPageOrdering le {ii -1 eq {pop //true} {HeadersCenter ii GetEU gt} ifelse {/ii i def} if} {pop} ifelse} for  ii -1 eq {()} {HeadersCenter ii 1 add get} ifelse
		/ii -1 def  0 2 HeadersRight  length 2 sub {/i exch def  HeadersRight  i GetEU dup ThisPageOrdering le {ii -1 eq {pop //true} {HeadersRight  ii GetEU gt} ifelse {/ii i def} if} {pop} ifelse} for  ii -1 eq {()} {HeadersRight  ii 1 add get} ifelse
		/ii -1 def  0 2 FootersLeft   length 2 sub {/i exch def  FootersLeft   i GetEU dup ThisPageOrdering le {ii -1 eq {pop //true} {FootersLeft   ii GetEU gt} ifelse {/ii i def} if} {pop} ifelse} for  ii -1 eq {()} {FootersLeft   ii 1 add get} ifelse
		/ii -1 def  0 2 FootersCenter length 2 sub {/i exch def  FootersCenter i GetEU dup ThisPageOrdering le {ii -1 eq {pop //true} {FootersCenter ii GetEU gt} ifelse {/ii i def} if} {pop} ifelse} for  ii -1 eq {()} {FootersCenter ii 1 add get} ifelse
		/ii -1 def  0 2 FootersRight  length 2 sub {/i exch def  FootersRight  i GetEU dup ThisPageOrdering le {ii -1 eq {pop //true} {FootersRight  ii GetEU gt} ifelse {/ii i def} if} {pop} ifelse} for  ii -1 eq {()} {FootersRight  ii 1 add get} ifelse
		end
		DeBugLevel 75 le {(-HeadersAndFooters) OutputToLog} if
	} bind def  % /HeadersAndFooters

	% HeaderLeft HeaderCenter HeaderRight FooterLeft FooterCenter FooterRight  PaintHeadersFooters  -
	/PaintHeadersFooters
	{
		DeBugLevel 75 le {(+PaintHeadersFooters) OutputToLog} if
		9 dict begin
		/FooterRight exch def  /FooterCenter exch def  /FooterLeft exch def
		/HeaderRight exch def  /HeaderCenter exch def  /HeaderLeft exch def

		/SuppressNonRight //false TypeOfPagesBeingRendered /Glasses eq {PackingDescriptors SheetNum get dup type /arraytype eq { {/SuppressNonRightOrnaments eq {pop //true exit} if} forall} {pop} ifelse} if def
		/SuppressNonLeft  //false TypeOfPagesBeingRendered /Glasses eq {PackingDescriptors SheetNum get dup type /arraytype eq { {/SuppressNonLeftOrnaments  eq {pop //true exit} if} forall} {pop} ifelse} if def

		/Y PageHeight TypeOfPagesBeingRendered /PlaceName eq {2 div} if HeaderBaselineFromPageTop sub def
		SuppressNonRight not {HeaderFont HeaderFontSize selectfont   0 setgray   MgnL Y moveto  /HeaderLeft load ShowRecursive} if
		SuppressNonLeft  not {HeaderFont HeaderFontSize selectfont   0 setgray   PageWidth MgnR sub Y moveto  /HeaderRight load dup StringWidthRecursive neg 0 rmoveto ShowRecursive} if
		SuppressNonRight SuppressNonLeft or not
		{
			HeaderFont HeaderFontSize selectfont   0 setgray
			TypeOfPagesBeingRendered /Glasses eq {HeaderFooterCenterX} {PageWidth MgnL MgnR sub add 2 div} ifelse  Y moveto  /HeaderCenter load dup StringWidthRecursive 2 div neg 0 rmoveto ShowRecursive
		} if

		/Y FooterTopFromPageBottom BaseHeight sub  TypeOfPagesBeingRendered /PlaceName eq {PlaceNamesFirstAndThirdFoldsFromEdge  FooterFontSize 2 mul add  MgnB sub dup 0 gt {add} {pop} ifelse} if def
		SuppressNonRight not {FooterFont FooterFontSize selectfont   0 setgray   MgnL Y moveto  /FooterLeft load ShowRecursive} if
		SuppressNonLeft  not {FooterFont FooterFontSize selectfont   0 setgray   PageWidth MgnR sub Y moveto  /FooterRight load dup StringWidthRecursive neg 0 rmoveto ShowRecursive} if
		SuppressNonRight SuppressNonLeft or not
		{
			FooterFont FooterFontSize selectfont   0 setgray
			TypeOfPagesBeingRendered /Glasses eq {HeaderFooterCenterX} {PageWidth MgnL MgnR sub add 2 div} ifelse  Y moveto  /FooterCenter load dup StringWidthRecursive 2 div neg 0 rmoveto ShowRecursive
		} if

		end
		DeBugLevel 75 le {(-PaintHeadersFooters) OutputToLog} if
	} bind def  % /PaintHeadersFooters

	DeBugLevel 100 le {( Main: TastingNoteForms) OutputToLog} if
	/TypeOfPagesBeingRendered /TastingNotes store
	/RightBoundaryNameTastingNotes  GlassesOnTastingNotePages length array  def  % values will be put into this
	/TastingNoteForms [ GlassesOnTastingNotePages length {6 dict} repeat ] def
	/TastingNotesStarTops GlassesOnTastingNotePages length array def

	0  1  GlassesOnTastingNotePages length 1 sub
	{
		/TastingSheetNum exch def
		//false //false  //false  //false  SideBySideGlassesTastingNotes { << /SheetNum TastingSheetNum >> begin PaperType Orientation end} {TastingNotesPaperType TastingNotesOrientation} ifelse  SetPaperSize
		//true DefStoreMgns

		TastingNoteForms TastingSheetNum get begin
		/TastingSheetNum TastingSheetNum def

		/FormType 1 def
		/BBox [ 0 0 PageWidth PageHeight ] def
		/Matrix matrix identmatrix def

		/PaintProc
		{
			DeBugLevel 100 le {(+TastingNoteForms: PaintProc) OutputToLog} if
			pop 33 dict begin
			/TypeOfPagesBeingRendered /TastingNotes store
			/TastingNotesPageCircletextFontSize 4 def  % embedded constant

			/N GlassesOnTastingNotePages TastingSheetNum GetEU length def
			/TNColumnMultiplier
				0 TastingNotesColumnRelativeWidths {execU add} forall
				dup 0 eq {pop 1} {PageWidth MgnL MgnR add sub exch div} ifelse
			def

			TastingNotesColumnHeadings length 0 gt
			{
				HeaderFont TastingNotesColumnHeadingsFontSize selectfont
				GSave NullDevice 16384 dup scale newpath 0 0 moveto TastingNotesColumnHeadings //true CharPathRecursive PathBBox GRestore
				/TastingNotesColumnHeadingsT exch def  pop  /TastingNotesColumnHeadingsB exch def  pop
				/TNtop  PageHeight MgnT sub  TastingNotesColumnHeadingsT sub TastingNotesColumnHeadingsB -0.48 2 copy gt {exch} if pop add  def
			} {/TNtop  PageHeight MgnT sub def} ifelse  % TastingNotesColumnHeadings length 0 gt

			/TastingNotesCirclesBehind load MightBeTrue
			{
				/H TNtop MgnB sub def  /W PageWidth MgnL MgnR add sub def
				/TNCirclesBehindR
				N 2 ge
				{
					TastingNotesCirclesBehindFitAndCentreInRow
					{H N 2 mul div}
					{
						[
							TastingNotesCirclesBehindTopX TastingNotesCirclesBehindBottomX sub dup mul
							dup  2 N sub N mul add 4 mul exch    W mul dup H add -4 mul exch
							W mul H H mul add  3 1 roll exch
						] 0 //true //Infinity //true //PrinterEpsilon PolynomialRoots  Min
					} ifelse  % TastingNotesCirclesBehindFitAndCentreInRow
				} {//Infinity} ifelse  % N 2 ge
				W H lt {W} {H} ifelse 2 div  2 copy gt {exch} if pop
				def  % /TNCirclesBehindR

				0  1  N 1 sub
				{
					/WithinPage exch def
					/WithinTitles GlassesOnTastingNotePages TastingSheetNum GetEU WithinPage GetEU def
					TastingNotesCirclesBehind
					{
						/t  N 1 le {0.5} {WithinPage  N 1 sub  div} ifelse   def
						/y  TastingNotesCirclesBehindFitAndCentreInRow
							{N WithinPage sub 0.5 sub N div TNtop MgnB sub mul MgnB add}
							{1 t sub TNtop TNCirclesBehindR sub mul  t MgnB TNCirclesBehindR add mul add}
						ifelse def  % TastingNotesCirclesBehindFitAndCentreInRow, /y
						/x  1 t sub TastingNotesCirclesBehindTopX mul  t TastingNotesCirclesBehindBottomX mul  add  PageWidth MgnR sub TNCirclesBehindR sub mul
						1 t sub 1 TastingNotesCirclesBehindTopX sub mul  t 1 TastingNotesCirclesBehindBottomX sub mul  add  MgnL TNCirclesBehindR add mul   add  def  % /x
						/FoundOnGlassSheet //false def
						0  1  NumSheets 1 sub
						{
							/SheetNum exch def
							0  1  SheetLengths SheetNum get 1 sub
							{
								/WithinPage exch def
								WithinTitles  GlassesOnSheets SheetNum GetEU WithinPage GetEU  eq {/FoundOnGlassSheet //true def exit} if
							} for  % WithinPage, WithinTitles
							FoundOnGlassSheet {exit} if
						} for  % SheetNum
						FoundOnGlassSheet
						{
							GSave  % saving currenttransfer and currentmatrix
							/TypeOfPagesBeingRendered /Glasses store
							//false //false //false //false PaperType Orientation SetPaperSize   //true DefStoreMgns
							[
								currenttransfer   /exec cvx   1   /exch cvx   /sub cvx
								TitlesAnyGrey {TastingNotesCirclesBehindFadingFactorIfAnyGrey} {TastingNotesCirclesBehindFadingFactorIfAllBlack} ifelse
								/mul cvx   1   /exch cvx   /sub cvx
							] cvx bind settransfer
							x y translate  TNCirclesBehindR Radii SheetNum get div dup scale  RotationTitlesAboveBelowOverCirclearray dup 0 ne {rotate} {pop} ifelse
							OutlineTitles
							{
								OutlineForms SheetNum get WithinPage get   execform
							} if  % OutlineTitles ...
							CircleNonEmpty SheetNum get WithinPage get
							{
								Spirals {SpiralForms SheetNum get WithinPage get execform} if
								CrossHatchingInside {CrossHatchingInsideForms SheetNum get WithinPage get  execform} if
							} if  % CircleNonEmpty ...
							/PaintBackgroundInsideGlassCircles load dup length 0 gt
								{/TypeOfPagesBeingRendered /TastingNotes store GSave newpath 0 0 Radii SheetNum get 0 360 arc closepath clip newpath execU GRestore /TypeOfPagesBeingRendered /Glasses store}
								{pop}
							ifelse  % PaintBackgroundInsideGlassCircles ... length 0 gt
							TitleAboveBelowOverForms SheetNum get WithinPage get  execform  AnnotateGlass
							CirclearrayForms SheetNum get WithinPage get   execform
							/TypeOfPagesBeingRendered /TastingNotes store
							//false //false //false //false TastingNotesPaperType TastingNotesOrientation SetPaperSize   //true DefStoreMgns
							GRestore
						} if  % FoundOnGlassSheet
					} if  % TastingNotesCirclesBehind
				} for  % WithinPage, WithinTitles
				currentdict /SheetNum undef
				currentdict /WithinPage undef
				currentdict /WithinTitles undef
			} if  % ... TastingNotesCirclesBehind ...

			0  1  TastingNotesColumnHeadings length 2 sub
			{
				0  exch -1 0 {TastingNotesColumnRelativeWidths exch GetEU add} for  TNColumnMultiplier mul MgnL add
				dup PageHeight MgnT sub moveto MgnB lineto TastingNotesColumnStrokeCode newpath
			} for  % 0  1  TastingNotesColumnHeadings length 2 sub

			0 setgray  0.12 dup currentlinewidth ne {setlinewidth} {pop} ifelse  1 currentlinecap ne {1 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if
			TastingNotesColumnHeadings length 0 gt
			{
				HeaderFont TastingNotesColumnHeadingsFontSize selectfont

				RightBoundaryNameTastingNotes  TastingSheetNum  PageWidth MgnR sub  put
				TastingNotesColumnHeadings length 1 sub  -1  0  % goes down to allow population of RightBoundaryNameTastingNotes
				{
					/i exch def
					TastingNotesColumnHeadings i get NonEmptyCompoundObject
					{
						GSave
						/ColStart  0   0 1 i 1 sub {TastingNotesColumnRelativeWidths exch GetEU add} for  TNColumnMultiplier mul MgnL add def
						ColStart  PageHeight MgnT sub TastingNotesColumnHeadingsT sub   moveto
						TastingNotesColumnHeadings i get StringWidthRecursive dup
						TastingNotesColumnRelativeWidths i GetEU TNColumnMultiplier mul gt
						{
							TastingNotesColumnRelativeWidths i GetEU  0  gt
							{
								TastingNotesColumnRelativeWidths i GetEU TNColumnMultiplier mul exch div  1  scale
								RightBoundaryNameTastingNotes  TastingSheetNum  ColStart  put
							} {pop} ifelse  % TastingNotesColumnRelativeWidths i GetEU  0  gt
						}{
							neg  TastingNotesColumnRelativeWidths i GetEU TNColumnMultiplier mul add  2 div   0   rmoveto
							RightBoundaryNameTastingNotes  TastingSheetNum  currentpoint pop  put
						} ifelse  % text wider than column
						CurrentFontSize 60 div  dup currentlinewidth ne {setlinewidth} {pop} ifelse
						TastingNotesColumnRelativeWidths i GetEU  0  gt {TastingNotesColumnHeadings i get ShowRecursive} if
						GRestore
					} if  % TastingNotesColumnHeadings i get NonEmptyCompoundObject
				} for  % TastingNotesColumnHeadings length 1 sub  -1  0
			} if  % TastingNotesColumnHeadings length 0 gt

			/TNRowHeight N 0 eq {0} {TNtop MgnB sub N div} ifelse  def

			0  1  N 1 sub
			{
				/WithinPage exch def
				/WithinTitles GlassesOnTastingNotePages TastingSheetNum GetEU WithinPage GetEU def

				/CurrentTop  N WithinPage sub TNRowHeight mul MgnB add  def
				MgnL CurrentTop moveto
				CirclearraysTastingNotes WithinTitles get  {0 setgray CircletextFont TastingNotesPageCircletextFontSize selectfont}  CircletextsMinNumSpacesBetween //true  PageWidth MgnL MgnR add sub  //false  -1  CirclearrayInStraightLine
				sub CurrentTop add TastingNotesLineGap sub /CurrentTop exch def pop pop

				TastingNotesStarTops TastingSheetNum  2 copy get null eq {GlassesOnTastingNotePages TastingSheetNum GetEU length array put} {pop pop} ifelse
				TastingNotesStarTops TastingSheetNum get WithinPage  2 copy get IsNumber {pop pop} {CurrentTop put} ifelse

				0 setgray   MinCircletextMaxFontSizes  60 div dup currentlinewidth ne {setlinewidth} {pop} ifelse
				TNRowHeight 2 div TastingNotesSubtitleFontSizeProportionTitles 1 add div TastingNotesTitlesFontSizeMax 2 copy gt {exch} if pop  dup TitlesFont exch 2 copy  % embedded constant in "2 div"
				selectfont   0 0 moveto TitlesTastingNotes WithinTitles get //true CharPathRecursive PathBBox newpath /urY exch def pop /llY exch def pop
				selectfont   MgnL CurrentTop urY sub moveto  TitlesTastingNotes WithinTitles get ShowRecursive
				/CurrentTop CurrentTop TastingNotesLineGap urY llY sub add sub def

				0 setgray  MinCircletextMaxFontSizes 2 div 60 div dup currentlinewidth ne {setlinewidth} {pop} ifelse  % embedded constant
				TastingNotesSubtitleFontSizeProportionTitles mul SubtitlesFont exch 2 copy
				selectfont   0 0 moveto SubtitlesTastingNotes WithinTitles get //true CharPathRecursive PathBBox newpath /urY exch def pop pop pop
				selectfont   MgnL CurrentTop urY sub moveto  SubtitlesTastingNotes WithinTitles get ShowRecursive
			} for  % WithinPage, WithinTitles
			end
			DeBugLevel 100 le {(-TastingNoteForms: PaintProc) OutputToLog} if
		} def  % /PaintProc
		end
	} bind for  % TastingSheetNum
	UndefMgns
	currentdict /TastingSheetNum undef


	% GlassesPageInnerLoop and TastingNotesInnerLoop are really 'inline code'.
	% They exist to allow later determination the ordering of the
	% outer loops, without repeating any of this code. Messy, but functional.

	DeBugLevel 100 le {( Main: Defining inner loops) OutputToLog} if
	/GlassesPageInnerLoop
	{
		DeBugLevel 100 le {(+GlassesPageInnerLoop) OutputToLog} if
		13 dict begin
		/TypeOfPagesBeingRendered /Glasses store

		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def
			GlassesPageWhiteCirclesBehind  CircleNonEmpty SheetNum get WithinPage get  and {newpath GlassPositions SheetNum get WithinPage get aload pop Radii SheetNum get 0 360 arc 1 setgray fill} if
		} for  % WithinPage, WithinTitles

		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def
			GlassesCirclesFadingFactor dup //Epsilon ge  CirclearraysFillBehind  and
			{
				newpath   GSave
				dup 1 //Epsilon sub lt {[currenttransfer   /exec cvx   1   /exch cvx   /sub cvx   7 -1 roll   /mul cvx   1   /exch cvx   /sub cvx] cvx bind settransfer} {pop} ifelse
				GlassPositions SheetNum get WithinPage get aload pop 2 copy Radii SheetNum get 0 360 arc closepath  RadiiCirclearrayInside SheetNum get 3 copy add moveto 90 -270 arcn closepath
				/CirclearraysFillBehindCode load execU  GRestore
			} {pop} ifelse  % GlassesCirclesFadingFactor dup //Epsilon ge  CirclearraysFillBehind  and
		} for  % WithinPage, WithinTitles

		BackgroundTextsGlasses
		{
			DeBugLevel 75 le {( GlassesPageInnerLoop: BackgroundTexts) OutputToLog} if
			BackgroundTextsGlassesForms SheetNum get execform
		} if  % BackgroundTextsGlasses

		Droplets
		{
			DeBugLevel 75 le {( GlassesPageInnerLoop: Droplets) OutputToLog} if
			DropletsForms SheetNum get execform
		} if  % Droplets

		% CrossHatchingOutside
		/CrossHatchingOutside load MightBeTrue
		{
			DeBugLevel 75 le {( GlassesPageInnerLoop: CrossHatchingOutside) OutputToLog} if
			CrossHatchingOutsideForms SheetNum get  execform
		} if  % ... CrossHatchingOutside ...

		% FlightSeparationForms
		FlightSeparations
		{
			DeBugLevel 75 le {( GlassesPageInnerLoop: FlightSeparations) OutputToLog} if
			FlightSeparationForms SheetNum get  execform
		} if  % FlightSeparations

		NamesFont NamesFontSizeIndividuallyB NameNum get selectfont
		/ThisName load  GSave  NullDevice  16384 dup scale  newpath 0 0 moveto   //true CharPathRecursive PathBBox GRestore
		/ThisNameT exch def  /ThisNameR exch def  /ThisNameB exch def  /ThisNameL exch def

		% WaterBoxes
		WaterBoxes dup /Glasses eq exch /Both eq or  WaterBoxesNum 1 ge  and
		{
			DeBugLevel 75 le {( GlassesPageInnerLoop: WaterBoxes) OutputToLog} if
			NamesShowBottom SheetNum get {NamePlacementBottomX SheetNum get  ThisNameR ThisNameL sub 2 div  2 copy sub 3 1 roll add} {PageWidth MgnR sub  MgnL} ifelse
			NamesIsLeftHander NameNum get not  WaterBoxesOverrideShowEverySheet not {WaterBoxesShowRight SheetNum get execU  and} if
			NamesIsLeftHander NameNum get      WaterBoxesOverrideShowEverySheet not {WaterBoxesShowLeft  SheetNum get execU  and} if
			/PaintBackgroundCode load length 0 gt  /Droplets load MightBeTrue or  CrossHatchingOutside or  /FlightSeparations load MightBeTrue {FlightSeparationLines SheetNum get length 0 gt or} if  WaterBoxesPaintProc  % Ignoring BackgroundTextsGlasses.
		} if  % WaterBoxes dup /Glasses eq exch /Both eq or  WaterBoxesNumSideTriangle 1 ge  and

		% Outlined titles, and CrossHatchingInside after outlining as that spreads much white paint
		DeBugLevel 75 le {( GlassesPageInnerLoop: OutlineTitles and CrossHatchingInside) OutputToLog} if
		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def
			CircleNonEmpty SheetNum get WithinPage get
			{
				GlassesCirclesFadingFactor dup //Epsilon ge
				{
					GSave
					dup 1 //Epsilon sub lt {[currenttransfer   /exec cvx   1   /exch cvx   /sub cvx   7 -1 roll   /mul cvx   1   /exch cvx   /sub cvx] cvx bind settransfer} {pop} ifelse
					GlassPositions SheetNum get WithinPage get aload pop translate RotationTitlesAboveBelowOverCirclearray dup 0 ne {rotate} {pop} ifelse
					CrossHatchingInside
					{
						CrossHatchingInsideForms SheetNum get WithinPage get   execform
					} if  % CrossHatchingInside
					OutlineTitles
					{
						OutlineForms SheetNum get WithinPage get   execform
					} if  % OutlineTitles
					Spirals {SpiralForms SheetNum get WithinPage get execform} if
					GRestore
				} {pop} ifelse  % GlassesCirclesFadingFactor ... 0 gt
			} if % CircleNonEmpty ...
		} for  % WithinPage, WithinTitles
		currentdict /WithinPage undef
		currentdict /WithinTitles undef

		ThePortForumIconPlacement PlaceThePortForumIcon

		% TitleAboveBelowOverForms
		DeBugLevel 75 le {( GlassesPageInnerLoop: TitleAboveBelowOverForms) OutputToLog} if
		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def
			GlassesCirclesFadingFactor dup //Epsilon ge
			{
				matrix currentmatrix exch  GlassPositions SheetNum get WithinPage get aload pop translate  GSave
				dup 1 //Epsilon sub lt {[currenttransfer   /exec cvx   1   /exch cvx   /sub cvx   7 -1 roll   /mul cvx   1   /exch cvx   /sub cvx] cvx bind settransfer} {pop} ifelse
				RotationTitlesAboveBelowOverCirclearray dup 0 ne {rotate} {pop} ifelse
				/PaintBackgroundInsideGlassCircles load dup length 0 gt
					{GSave newpath 0 0 Radii SheetNum get 0 360 arc closepath clip newpath execU GRestore}
					{pop}
				ifelse  % PaintBackgroundInsideGlassCircles ... length 0 gt
				TitleAboveBelowOverForms SheetNum get WithinPage get  execform  AnnotateGlass
				GRestore
				GlassesCrossedOut
				{
					2 dict begin
					/CrossedOutLineWidth Radii SheetNum get 15 div def
					/CrossedOutOffset Radii SheetNum get CrossedOutLineWidth 2 div sub //SqrtHalf mul def
					CrossedOutOffset neg  dup      moveto   CrossedOutOffset dup      lineto
					CrossedOutOffset neg  dup neg  moveto   CrossedOutOffset dup neg  lineto
					GSave    0.875 setgray  CrossedOutLineWidth       dup currentlinewidth ne {setlinewidth} {pop} ifelse  1 currentlinecap ne {1 setlinecap} if  stroke
					GRestore 1     setgray  CrossedOutLineWidth 3 div dup currentlinewidth ne {setlinewidth} {pop} ifelse  1 currentlinecap ne {1 setlinecap} if  stroke
					end
				} if  % GlassesCrossedOut
				setmatrix
			} {pop} ifelse  % GlassesCirclesFadingFactor ...Epsilon gt
		} for  % WithinPage, WithinTitles
		currentdict /WithinPage undef
		currentdict /WithinTitles undef

		% Names
		SideBySideGlassesTastingNotes not
		{
			DeBugLevel 75 le {( GlassesPageInnerLoop: Names) OutputToLog} if
			4.8 dup currentlinewidth ne {setlinewidth} {pop} ifelse  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if  % Embedded constant
			NamesShowTop SheetNum get
			{
				NamesFont NamesFontSizeIndividuallyT NameNum get selectfont
				/ThisName load  GSave  NullDevice  16384 dup scale  newpath 0 0 moveto   //true CharPathRecursive PathBBox GRestore   /ThisNameT exch def  /ThisNameR exch def  pop  /ThisNameL exch def
				NamePlacementTopX    SheetNum get ThisNameL ThisNameR add 2 div sub  PageWidth MgnR ThisNameR add sub 2 copy gt {exch} if pop  MgnL ThisNameL sub 2 copy lt {exch} if pop
				PageHeight MgnT ThisNameT add sub  moveto   /ThisName load //true CharPathRecursive   1 setgray GSave stroke GRestore 0 setgray fill
			} if  % NamesShowTop ...
			NamesShowBottom SheetNum get
			{
				NamesFont NamesFontSizeIndividuallyB NameNum get selectfont
				/ThisName load  GSave  NullDevice  16384 dup scale  newpath 0 0 moveto   //true CharPathRecursive PathBBox GRestore   pop  /ThisNameR exch def  /ThisNameB exch def  /ThisNameL exch def
				NamePlacementBottomX SheetNum get ThisNameL ThisNameR add 2 div sub  PageWidth MgnR ThisNameR add sub 2 copy gt {exch} if pop  MgnL ThisNameL sub 2 copy lt {exch} if pop
				MgnB ThisNameB sub                 moveto   /ThisName load //true CharPathRecursive   1 setgray GSave stroke GRestore 0 setgray fill
			} if  % NamesShowBottom ...
		} if  % SideBySideGlassesTastingNotes not

		ShowHeadersAndFooters
		{
			DeBugLevel 75 le {( GlassesPageInnerLoop: headers and footers) OutputToLog} if
			<< /SideBySideGlassesTastingNotes //false >> begin  //false DefStoreMgns  dup matrix currentmatrix exch setmatrix  HeadersAndFooters PaintHeadersFooters  setmatrix  end
			//false DefStoreMgns
		} if  % ShowHeadersAndFooters

		% Circletext over everything
		DeBugLevel 75 le {( GlassesPageInnerLoop: CirclearrayForms) OutputToLog} if
		0  1  SheetLengths SheetNum get 1 sub
		{
			WithinPage-WithinTitles-def
			GlassesCirclesFadingFactor dup //Epsilon ge
			{
				GSave  GlassPositions SheetNum get WithinPage get aload pop translate
				dup 1 //Epsilon sub lt {[currenttransfer   /exec cvx   1   /exch cvx   /sub cvx   7 -1 roll   /mul cvx   1   /exch cvx   /sub cvx] cvx bind settransfer} {pop} ifelse
				RotationTitlesAboveBelowOverCirclearray dup 0 ne {rotate} {pop} ifelse
				CirclearrayForms SheetNum get WithinPage get  execform
				GRestore
			} {pop} ifelse  % GlassesCirclesFadingFactor ...Epsilon gt
		} for  % WithinPage, WithinTitles
		currentdict /WithinPage undef
		currentdict /WithinTitles undef

		end
		DeBugLevel 100 le {(-GlassesPageInnerLoop) OutputToLog} if
	} bind def  % /GlassesPageInnerLoop


	/TastingNotesInnerLoop
	{
		DeBugLevel 100 le {(+TastingNotesInnerLoop) OutputToLog} if
		19 dict begin

		TastingNotesReplaceNameWithPageNum {/ThisName TastingNotesPageNumCompoundString def} if

		BackgroundTextsTastingNotes /SideBySideGlassesTastingNotes load MightBeTrue not  and {BackgroundTextsTNsForms TastingSheetNum get execform} if

		SideBySideGlassesTastingNotes not {ThePortForumIconTastingNotePlacement PlaceThePortForumIcon} if

		ShowHeadersAndFooters
		{
			DeBugLevel 75 le {( TastingNotesInnerLoop: headers and footers) OutputToLog} if
			<< /SideBySideGlassesTastingNotes //false >> begin
			dup matrix currentmatrix exch setmatrix  //false DefStoreMgns  HeadersAndFooters PaintHeadersFooters  setmatrix end
			//false DefStoreMgns
		} if  % ShowHeadersAndFooters

		DeBugLevel 75 le {( TastingNotesInnerLoop: TastingNoteForms) OutputToLog} if
		TastingNoteForms TastingSheetNum get
		0  1  GlassesOnTastingNotePages TastingSheetNum GetEU length 1 sub
		{
			/WithinPage exch def
			/WithinTitles GlassesOnTastingNotePages TastingSheetNum GetEU WithinPage GetEU def
		} for  % WithinPage, WithinTitles
		execform    currentdict /WithinPage undef  currentdict /WithinTitles undef
		/ThisNameASCII /ThisName load ASCIIfy def
		12 dict begin
		0  1  GlassesOnTastingNotePages TastingSheetNum GetEU length 1 sub
		{
			/WithinPage exch def
			/WithinTitles GlassesOnTastingNotePages TastingSheetNum GetEU WithinPage GetEU def
			0  4  TastingNotesStarsNameColsRowsArrangement length 4 sub
			{
				/i exch def
				ThisNameASCII TastingNotesStarsNameColsRowsArrangement i get ASCIIfy eq
				{
					/TNcols TastingNotesStarsNameColsRowsArrangement i 1 add GetEU def
					/TNrows TastingNotesStarsNameColsRowsArrangement i 2 add GetEU def
					/TNtype TastingNotesStarsNameColsRowsArrangement i 3 add GetEU def
					% 1.577193 = 5 5 sqrt sub 10 div sqrt 3 mul; 1.459220 = 39 5 sqrt 7 mul sub 16 div; 1.979367 = 5 sqrt dup 5 add 2 mul sqrt 8 mul add 1 sub 16 div
					1 {
						TNtype /Alternating eq {/xStepFactor 1.577193 def  /yStepFactor 1.459220 def  /Angle {ColNum TNcols add 1 add 2 mod 36 mul} bind def  exit} if
						TNtype /Sideways    eq {/xStepFactor 1.459220 def  /yStepFactor 1.577193 def  /Angle {RowNum 2 mod 0 eq {18} {-18} ifelse } bind def  exit} if
						TNtype /Upright     eq {/xStepFactor 1.979367 def  /yStepFactor 1.459220 def  /Angle 0                                      def  exit} if
						mark (Error: unknown star arrangement in item ) i (+3 = ) i 3 add ( of TastingNotesStarsNameColsRowsArrangement: neither /Alternating nor /Sideways nor /Upright.) ConcatenateToMark OutputToLog stop
					} repeat  % 1
					/StarRadius [
						10
						TitlesFont TastingNotesTitlesFontSizeMax selectfont (GJPQYgjpqy) StringHeight  1 //Sqrt5 5 div sub mul  % Embedded constant string
						TastingNotesStarTops TastingSheetNum get dup length 1 sub get MgnB sub  TNrows dup 0 le {pop} {1 sub yStepFactor mul 2 add div} ifelse 2 div  % Approx, because stars packed tighter than circles. Final "2 div" to take not more than half space.
						PageWidth MgnL MgnR add sub 0.25 mul  TNcols dup 0 eq {pop} {1 sub xStepFactor mul 2 add div} ifelse  % Approx, because stars packed tighter than circles
					] Min   def  % /StarRadius
					0  1  TNcols 1 sub
					{
						/ColNum exch def
						0  1  TNrows 1 sub
						{
							/RowNum exch def
							PageWidth MgnR ColNum StarRadius xStepFactor mul mul add sub   TastingNotesStarTops TastingSheetNum get WithinPage get RowNum StarRadius yStepFactor mul mul sub  moveto
							/Right /Top StarRadius /Radius Angle 5 2 //false //false  Star  0 setgray  fill
							begin CenterX CenterY moveto /Center /Middle Radius 0.75 mul /Radius Angle 5 2 //false //true end Star pop  1 setgray  fill
						} for  % /RowNum
					} for  % /ColNum
					exit
				} if  % Names ... eq
			} for  % i
		} for  % WithinPage, WithinTitles
		end

		% Discussion: http://www.theportforum.com/viewtopic.php?t=175&start=929
		WaterBoxes dup /TastingNotes eq exch /Both eq or  WaterBoxesNum 0 gt and  WaterBoxesShowTN TastingSheetNum get WaterBoxesOverrideShowEverySheet or  and
		{
			DeBugLevel 75 le {( TastingNotesInnerLoop: Water) OutputToLog} if
			/WaterBoxesSizeTN IconSizeTN WaterBoxesSizeMax 2 copy gt {exch} if pop def

			NamesIsLeftHanderTN NameNum get   ThePortForumIconTastingNotePlacement /LowerNonName eq
				{WaterBoxesSizeTN WaterBoxesGapProportionSize mul IconSizeTN add   exch {WaterBoxesSizeTN add MgnR add PageWidth exch sub} {MgnL add} ifelse}
				{ {PageWidth MgnR WaterBoxesSizeTN add sub} {MgnL} ifelse}
			ifelse   /X exch def  % two booleans
			0  1  WaterBoxesNum 1 sub
			{
				WaterBoxesSizeTN WaterBoxesGapProportionSize 1 add mul mul   NamesIsLeftHanderTN NameNum get {X exch sub} {X add} ifelse   MgnB WaterBoxesSizeTN add moveto
				WaterBoxesSizeTN dup dup  neg 0 exch rlineto  0 rlineto  0 exch rlineto
				0.24 dup currentlinewidth ne {setlinewidth} {pop} ifelse  0 setgray  0 currentlinecap ne {0 setlinecap} if  1 currentlinejoin ne {1 setlinejoin} if  currentdash pop length 0 ne {[] 0 setdash} if  WaterBoxesFormatStroke newpath
			} for
		} if  % WaterBoxes dup /TastingNotes ... WaterBoxesNum ... WaterBoxesShowTN ... WaterBoxesOverrideShowEverySheet ...

		DeBugLevel 75 le {( TastingNotesInnerLoop: Names) OutputToLog} if
		0 setgray
		NamesFont  NamesFontSize TastingNotesReplaceNameWithPageNum {TastingNotesPageNumFontSizeFactor mul} if  selectfont
		/ThisName load  GSave  NullDevice  16384 dup scale  newpath 0 0 moveto   //true CharPathRecursive PathBBox GRestore
		pop  /ThisNameR exch def  /ThisNameB exch def  /ThisNameL exch def
		NamesIsLeftHanderTN NameNum get {MgnL ThisNameL sub} {PageWidth MgnR sub ThisNameR sub} ifelse  MgnB ThisNameB sub  moveto
		/ThisName load ShowRecursive

		end
		DeBugLevel 100 le {(-TastingNotesInnerLoop) OutputToLog} if
	} bind def  % /TastingNotesInnerLoop


	/PlaceNamesRandomSeeds [ NamesPlaceNames { [ exch length {//null} repeat ] } forall ] def
	/PlaceNamesInnerLoop
	{
		DeBugLevel 100 le {(+PlaceNamesInnerLoop) OutputToLog} if
		9 dict begin
		PlaceNamesFirstAndThirdFoldsFromEdge 0 ne
		{
			DeBugLevel 75 le {( PlaceNamesInnerLoop: PlaceNamesFirstAndThirdFoldsFromEdge) OutputToLog} if
			newpath
			0 1 1
			{
				2 mod 0 eq {PlaceNamesFirstAndThirdFoldsFromEdge} {PageHeight PlaceNamesFirstAndThirdFoldsFromEdge sub} ifelse   MgnL exch moveto
				PageWidth MgnL MgnR add sub  0  rlineto
				0.5 setgray  0.48 dup currentlinewidth ne {setlinewidth} {pop} ifelse  [2.4  dup 12 mul] 0 setdash  0 currentlinecap ne {0 setlinecap} if  0 setlinejoin  stroke  % embedded constants
			} for  % SideFacingNamedPerson
			PlaceNamesFirstAndThirdFoldsFromEdge MgnB sub  5  gt
			{
				GSave
				0 setgray
				FooterFont   PlaceNamesFirstAndThirdFoldsFromEdge MgnB sub  dup 12 gt {pop 12} if  0.6 mul   selectfont  % embedded constant
				MgnL  MgnB CurrentFontSize 0.15 mul add  moveto  % descenders away from MgnB
				(Fold sheet in half, then along dashed lines. Press hard on folds.)
				HeadersAndFooters [ 4 1 roll ] NonEmptyCompoundObject [ 5 2 roll ] NonEmptyCompoundObject
				{
					{( Side with header or footer to face named person; side without to face away.) Concatenate}
					{( Side with header to face named person; side without to face away.) Concatenate}
					ifelse
				} { {( Side with footer to face named person; side without to face away.) Concatenate} if } ifelse
				dup StringWidthRecursive  PageWidth MgnL MgnR add sub 2 div  exch div dup  1 lt
					{GSave 1 scale ShowRecursive GRestore}
					{pop ShowRecursive}
				ifelse  % Folding string too long
				WaterBoxes dup /Glasses eq exch /Both eq or {NamesIsLeftHanderPN PlaceNameSetNum get NameNum get} {//false} ifelse
				{
					[(  ) /bullet dup dup ( Believed left-handed. To prevent elbow-clash lefties should be stacked from the clockwise end of a table edge. ) 1 index dup dup]
					dup StringWidthRecursive dup  PageWidth MgnL MgnR add sub 2 div  exch div dup  1 lt
					{
						GSave
						PageWidth MgnL MgnR sub add 2 div  MgnB CurrentFontSize 0.15 mul add  moveto
						1 scale  pop
						ShowRecursive
						GRestore
					}{
						PageWidth MgnR sub  MgnB CurrentFontSize 0.15 mul add  moveto
						pop neg 0 rmoveto ShowRecursive
					} ifelse % Leftie string too long
				} if  % WaterBoxes and left-handed
				GRestore
			} if  % room above MgnB but below line
		} if  % PlaceNamesFirstAndThirdFoldsFromEdge 0 ne

		ShowHeadersAndFooters
		{
			DeBugLevel 75 le {( PlaceNamesInnerLoop: headers and footers) OutputToLog} if
			HeadersAndFooters  PlaceNamesShowNameAsFooter PlaceNameSetNum GetEU  NameNum Names length lt  and {exch pop Names NameNum get exch} if  PaintHeadersFooters
		} if  % ShowHeadersAndFooters

		DeBugLevel 75 le {( PlaceNamesInnerLoop: call PaintPlaceName) OutputToLog} if
		0 1 1
		{
			/SideFacingNamedPerson exch 2 mod 0 eq def
			SideFacingNamedPerson not
			{
				matrix currentmatrix  [-1 0 0 -1 PageWidth PageHeight] concat
				<< /MgnL MgnR /MgnR MgnL  /MgnB MgnT  /MgnT MgnB >> begin
			} if  % SideFacingNamedPerson not
			PlaceNamesRandomSeeds PlaceNameSetNum get NameNum 2 copy get //null eq {rrand put} {get srand} ifelse
			/PlaceNamesFontSize /Null def
			PaintPlaceName   PlaceNamesFontSizes PlaceNameSetNum get NameNum PlaceNamesFontSize put
			PlaceNamesShowNameAsFooter PlaceNameSetNum GetEU  SideFacingNamedPerson not  NameNum Names length lt  and and {5 {()} repeat Names NameNum get exch  PaintHeadersFooters} if
			SideFacingNamedPerson not {end setmatrix} if
		} for  % SideFacingNamedPerson
		end
		DeBugLevel 100 le {(-PlaceNamesInnerLoop) OutputToLog} if
	} bind def  % /PlaceNamesInnerLoop

	/PrePourInnerLoop
	{
		DeBugLevel 100 le {(+PrePourInnerLoop) OutputToLog} if

		CircleNonEmpty SheetNum get WithinPage get {PrePourForms SheetNum get WithinPage get  execform} if

		ShowHeadersAndFooters
		{
			DeBugLevel 75 le {( PrePourInnerLoop: headers and footers) OutputToLog} if
			HeadersAndFooters PaintHeadersFooters
		} if  % ShowHeadersAndFooters

		DeBugLevel 100 le {(-PrePourInnerLoop) OutputToLog} if
	} bind def  % /PrePourInnerLoop

	() OutputToLog

	% Render the pages, starting with the possible (only) empty page
	EmptyGlassesPageAtStart  % /Empty
	{
		/TypeOfPagesBeingRendered /Glasses store   10 dict begin
		<< /SheetNum 0  /TastingSheetNum 0  /WithinPage 0  /WithinTitles 0 >> begin HeaderFont dup dup TastingNotesPaperType end EmptyGlassesPageOrientation
		//false //false //false //true 6 4 roll SetPaperSize //true DefStoreMgns
		/PageLesser PageWidth MgnL MgnR add sub PageHeight MgnB MgnT add sub 2 copy gt {exch} if pop def
		PageHeight MgnT MgnB sub add 2 div  PageWidth MgnR MgnL sub add 2 div  2 copy 4 copy
		PageLesser 6 div add exch PageLesser 6 div sub  moveto   PageLesser 6 div sub exch PageLesser 6 div add  lineto
		PageLesser 6 div sub exch PageLesser 6 div sub  moveto   PageLesser 6 div add exch PageLesser 6 div add  lineto
		0.75 setgray PageLesser 40 div dup currentlinewidth ne {setlinewidth} {pop} ifelse currentdash pop length 0 ne {[] 0 setdash} if 1 currentlinecap ne {1 setlinecap} if stroke  0 setgray  % Embedded constant
		GSave nulldevice newpath 0 0 moveto 1000 selectfont EmptyPageString //false CharPathRecursive PathBBox GRestore 1000 div /ury exch def  1000 div /urx exch def  1000 div /lly exch def 1000 div /llx exch def
		urx llx sub //PrinterEpsilon gt  ury lly sub //PrinterEpsilon gt  and
		{
			/FontSize  32  PageWidth MgnL MgnR add sub urx llx sub div  PageHeight MgnT MgnB add sub 6 div ury lly sub div  2 {2 copy gt {exch} if pop} repeat  def  % Embedded constants
			PageWidth urx llx add FontSize mul sub 2 div  PageHeight MgnT sub ury FontSize mul sub  moveto  FontSize selectfont EmptyPageString ShowRecursive
			PageWidth urx llx add FontSize mul sub 2 div  MgnB                lly FontSize mul sub  moveto  FontSize selectfont EmptyPageString ShowRecursive
		} {pop pop} ifelse  % EmptyPageString non-empty
		/TypeOfPagesBeingRendered /Empty store ShowPage end
	} if  % EmptyGlassesPageAtStart
	AnyFillTextingAtAll DeBugLevel 100 le or {( Main: starting outermost page-rendering loop: usertime = ) usertime ToString Concatenate OutputToLog} if
	/ShowHeadersAndFooters //true def
	UsedPageOrderings
	{
		/ThisPageOrdering exch def
		UsedPaperTypes  % Simplifies printing if pages with same paper type are gathered together
		{
			/ThisPaperType exch def
			0  1  Names length 1 sub
			{
				/NameNum exch def

				SideBySideGlassesTastingNotes
				{
					% SideBySideGlassesTastingNotes is true
					/ThisName  Names NameNum get  def
					0   1   NumSheets GlassesOnTastingNotePages length 2 copy lt {exch} if pop 1 sub
					{
						/SheetNum exch def
						NameNum  Names length  lt
						{
							/TastingSheetNum SheetNum def
							NameNum Names length lt {PageOrderingGlasses} {PageOrderingDecanterLabels} ifelse   SheetNum GetEU  ThisPageOrdering  eq
							ThisPaperType PaperType ne {PaperType type /arraytype eq ThisPaperType type /arraytype eq and {0 1 1 {dup PaperType exch GetEU exch ThisPaperType exch GetEU sub abs //PrinterEpsilon lt} for and and} {pop //false} ifelse} if
							{
								0  1  GlassesNumCopies 1 sub
								{
									//false PageSuppressed {pop exit} if
									/GlassesCopyNum exch def
									OuterGlassesCropMarks  Rotate180AlternateNames {NameNum dup Names length ge {Names length sub} if 2 mod 1 eq} {//false} ifelse
									MirrorPagesGlasses SheetNum GetEU  //true ThisPaperType Orientation SetPaperSize
									SheetNum NumSheets lt
									{
										/TypeOfPagesBeingRendered /Glasses store
										//true DefStoreMgns
										/ShowHeadersAndFooters //true store
										matrix currentmatrix
										NamesIsLeftHander NameNum get
										{
											1 SideBySideGlassesTastingNotesProportionPageGlasses sub PageWidth mul  SideBySideGlassesTastingNotesWidthGutter 2 div add  MgnL sub   0  translate
										} if  % NamesIsLeftHander ...
										DeBugLevel 40 le {(+PaintBackgroundCode) OutputToLog} if   GSave newpath /PaintBackgroundCode load execU GRestore   DeBugLevel 40 le {(-PaintBackgroundCode) OutputToLog} if
										GlassesPageInnerLoop
										DeBugLevel 40 le {(+PaintForegroundCode) OutputToLog} if   GSave newpath /PaintForegroundCode load execU GRestore   DeBugLevel 40 le {(-PaintForegroundCode) OutputToLog} if
										setmatrix
									} if  % SheetNum NumSheets lt

									TastingSheetNum  GlassesOnTastingNotePages length  lt
									{
										/TypeOfPagesBeingRendered /TastingNotes store
										//true DefStoreMgns
										/ShowHeadersAndFooters //false store
										matrix currentmatrix
										NamesIsLeftHander NameNum get
										{
											MarginL MgnL sub  0  translate
										} if  % NamesIsLeftHander ...
										DeBugLevel 40 le {(+PaintBackgroundCode) OutputToLog} if   GSave newpath /PaintBackgroundCode load execU GRestore   DeBugLevel 40 le {(-PaintBackgroundCode) OutputToLog} if
										TastingNotesInnerLoop
										DeBugLevel 40 le {(+PaintForegroundCode) OutputToLog} if   GSave newpath /PaintForegroundCode load execU GRestore   DeBugLevel 40 le {(-PaintForegroundCode) OutputToLog} if
										setmatrix
									} if  % TastingSheetNum  GlassesOnTastingNotePages length  lt ...

									ShowPage
									currentdict /SheetNum undef
									currentdict /TastingSheetNum undef
								} for  % GlassesCopyNum
								/ShowHeadersAndFooters //true store
							} if  % ThisPaperType ... eq
						} if  % NameNum  Names length  lt
					} for  % SheetNum, TastingSheetNum
				}{
					% SideBySideGlassesTastingNotes is false
					/TypeOfPagesBeingRendered /Glasses store
					0  1  NumSheets 1 sub   {GlassesNumCopies 1 ge} MightBeTrue not {pop -1} if
					{
						/SheetNum exch def
						NameNum  Names length  lt
						{
							/ThisName  Names NameNum get  def
							NameNum Names length lt {PageOrderingGlasses} {PageOrderingDecanterLabels} ifelse   SheetNum GetEU  ThisPageOrdering  eq
							ThisPaperType PaperType ne {PaperType type /arraytype eq ThisPaperType type /arraytype eq and {0 1 1 {dup PaperType exch GetEU exch ThisPaperType exch GetEU sub abs //PrinterEpsilon lt} for and and} {pop //false} ifelse} if
							{
								0  1  GlassesNumCopies 1 sub
								{
									//false PageSuppressed {pop exit} if
									/GlassesCopyNum exch def
									OuterGlassesCropMarks  Rotate180AlternateNames {NameNum dup Names length ge {Names length sub} if 2 mod 1 eq} {//false} ifelse
									MirrorPagesGlasses SheetNum GetEU  //true ThisPaperType Orientation SetPaperSize
									//true DefStoreMgns
									matrix currentmatrix
									DeBugLevel 40 le {(+PaintBackgroundCode) OutputToLog} if   GSave newpath /PaintBackgroundCode load execU GRestore   DeBugLevel 40 le {(-PaintBackgroundCode) OutputToLog} if
									GlassesPageInnerLoop
									DeBugLevel 40 le {(+PaintForegroundCode) OutputToLog} if   GSave newpath /PaintForegroundCode load execU GRestore   DeBugLevel 40 le {(-PaintForegroundCode) OutputToLog} if
									setmatrix   ShowPage
								} for  % GlassesCopyNum
							} if  % ... ThisPageOrdering eq ... ThisPaperType eq  and
						} if  % NameNum  Names length  lt
					} for  % SheetNum
					UndefMgns
					currentdict /SheetNum undef

					% Tasting note pages
					/TypeOfPagesBeingRendered /TastingNotes store
					0  1  GlassesOnTastingNotePages length 1 sub   {TastingNotePagesNumCopies 1 ge} MightBeTrue not {pop -1} if
					{
						/TastingSheetNum exch def
						/TypeOfPagesBeingRendered /TastingNotes store
						TastingNotesPaperType ThisPaperType eq   PageOrderingTastingNotePages TastingSheetNum GetEU  ThisPageOrdering  eq   and
						{
							NameNum NamesTastingNotes length lt
							{
								/ThisName NamesTastingNotes NameNum get def
								TastingNotePagesNumCopies
								{
									//false PageSuppressed {exit} if
									/TypeOfPagesBeingRendered /TastingNotes store
									//false  % Crop marks
									Rotate180AlternateNames {NameNum dup Names length ge {Names length sub} if 2 mod 1 eq} {//false} ifelse
									MirrorPagesTastingNotePages TastingSheetNum GetEU  //true  TastingNotesPaperType TastingNotesOrientation  SetPaperSize
									//true DefStoreMgns
									matrix currentmatrix
									DeBugLevel 40 le {(+PaintBackgroundCode) OutputToLog} if   GSave newpath /PaintBackgroundCode load execU GRestore   DeBugLevel 40 le {(-PaintBackgroundCode) OutputToLog} if
									TastingNotesInnerLoop
									DeBugLevel 40 le {(+PaintForegroundCode) OutputToLog} if   GSave newpath /PaintForegroundCode load execU GRestore   DeBugLevel 40 le {(-PaintForegroundCode) OutputToLog} if
									setmatrix   ShowPage
								} repeat  % TastingNotePagesNumCopies ...
							} if  % NameNum NamesTastingNotes length lt
						} if  % ... ThisPaperType ... ThisPageOrdering ... and
					} for  % TastingSheetNum
					UndefMgns
					currentdict /TastingSheetNum undef
				} ifelse  % SideBySideGlassesTastingNotes

				/TypeOfPagesBeingRendered /PlaceName store
				0  1  NamesPlaceNames length 1 sub   {PlaceNames} MightBeTrue not {pop -1} if
				{
					//false PageSuppressed {pop exit} if
					/PlaceNameSetNum exch def
					NameNum  NamesPlaceNames PlaceNameSetNum GetEU length  lt
					{
						PlaceNamesPaperType ThisPaperType  eq   PageOrderingPlaceNames PlaceNameSetNum GetEU  ThisPageOrdering  eq   and
						{
							/ThisName NamesPlaceNames PlaceNameSetNum GetEU NameNum get def
							AnyFillTextingAtAll
							{
								mark  ( Main: +PlaceName: NameNum = ) NameNum
								(; PlaceNameSetNum = ) PlaceNameSetNum
								(; usertime = ) usertime ConcatenateToMark OutputToLog
							} if  % AnyFillTextingAtAll
							matrix currentmatrix
							/TypeOfPagesBeingRendered /PlaceName store
							//false  //false  MirrorPagesPlaceNames PlaceNameSetNum GetEU  //true  PlaceNamesPaperType  PlaceNamesOrientation  SetPaperSize
							//true DefStoreMgns
							DeBugLevel 40 le {(+PaintBackgroundCode) OutputToLog} if   GSave newpath /PaintBackgroundCode load execU GRestore   DeBugLevel 40 le {(-PaintBackgroundCode) OutputToLog} if
							PlaceNamesInnerLoop
							DeBugLevel 40 le {(+PaintForegroundCode) OutputToLog} if   GSave newpath /PaintForegroundCode load execU GRestore   DeBugLevel 40 le {(-PaintForegroundCode) OutputToLog} if
							setmatrix   ShowPage
							AnyFillTextingAtAll
							{
								mark  ( Main: -PlaceName: NameNum = ) NameNum
								(; PlaceNameSetNum = ) PlaceNameSetNum
								(; usertime = ) usertime ConcatenateToMark OutputToLog
							} if  % AnyFillTextingAtAll
						} if  % ... ThisPaperType ... ThisPageOrdering ... and
					} if  % NameNum  NamesPlaceNames PlaceNameSetNum GetEU length  lt
				} for  % /PlaceNameSetNum
				/TypeOfPagesBeingRendered /Multiple store
				UndefMgns
				currentdict /PlaceNameSetNum undef
			} for  % NameNum
			currentdict /ThisName undef
			currentdict /NameNum undef


			% See http://www.theportforum.com/viewtopic.php?t=175&start=166
			/VoteRecorders load MightBeTrue
			{
				16 dict begin
				DeBugLevel 100 le {(+VoteRecorder) OutputToLog} if
				/TypeOfPagesBeingRendered /VoteRecorder store

				0  1  GlassesClusteredOnVoteRecorders length 1 sub
				{
					/VoteRecorderSheetNum exch def
					/VoteRecorderThisSheet GlassesClusteredOnVoteRecorders VoteRecorderSheetNum GetEU def
					/VoteRecorderThisSheetLength  0  VoteRecorderThisSheet {execU length add} forall  VoteRecorderShowTotalRow VoteRecorderSheetNum GetEU {1 add} if  def
					VoteRecorderPaperType ThisPaperType  eq   PageOrderingVoteRecorder VoteRecorderSheetNum get  ThisPageOrdering  eq   and
					{
						0  1  VoteRecorderTopTexts VoteRecorderSheetNum get length 1 sub
						{
							//false PageSuppressed {pop exit} if
							/VoteRecorderTopTextNum exch def
							/VoteRecorderThisSheetLength  0  VoteRecorderThisSheet {execU length add} forall  VoteRecorderShowTotalRow VoteRecorderSheetNum GetEU {1 add} if  def
							/TypeOfPagesBeingRendered /VoteRecorder store
							//false  //false  MirrorPagesVoteRecorder VoteRecorderSheetNum GetEU  //true  VoteRecorderPaperType  VoteRecorderOrientation  SetPaperSize
							//true DefStoreMgns
							DeBugLevel 40 le {(+PaintBackgroundCode) OutputToLog} if   GSave newpath /PaintBackgroundCode load execU GRestore   DeBugLevel 40 le {(-PaintBackgroundCode) OutputToLog} if
							/VoteRecorderTopTextHeight PageHeight MgnB MgnT add sub 50 div  def  % embedded constant
							VoteRecorderTopTextHeight 0 gt
							{
								HeaderFont VoteRecorderTopTextHeight selectfont
								GSave  NullDevice  16384 dup scale  newpath 0 0 moveto
								VoteRecorderTopTexts VoteRecorderSheetNum get VoteRecorderTopTextNum get  //true CharPathRecursive PathBBox
								GRestore  /VoteRecorderTopTextT exch def pop /VoteRecorderTopTextB exch def pop
								HeaderFont  VoteRecorderTopTextHeight dup mul VoteRecorderTopTextT VoteRecorderTopTextB sub  dup 0 ne
								{
									div selectfont
									MgnL   PageHeight  MgnT sub  VoteRecorderTopTextHeight VoteRecorderTopTextT VoteRecorderTopTextB sub div VoteRecorderTopTextT mul sub  moveto
									0 setgray  VoteRecorderTopTexts VoteRecorderSheetNum get VoteRecorderTopTextNum get ShowRecursive
								} {pop pop pop} ifelse  % Non-zero height
							} if  % VoteRecorderTopTextHeight 0 gt
							VoteRecorderForms VoteRecorderSheetNum get  execform
							DeBugLevel 40 le {(+PaintForegroundCode) OutputToLog} if   GSave newpath /PaintForegroundCode load execU GRestore   DeBugLevel 40 le {(-PaintForegroundCode) OutputToLog} if
							ShowPage
						} for  % VoteRecorderTopTextNum
					} if  % VoteRecorderPaperType ... PageOrderingVoteRecorder ... and
				} for  % VoteRecorderSheetNum
				end
				DeBugLevel 100 le {(-VoteRecorder) OutputToLog} if
			} if  % ... VoteRecorders ...


			{DecantingNotesNumCopies 1 ge} MightBeTrue
			{
				DeBugLevel 100 le {(+DecantingNotes) OutputToLog} if
				/TypeOfPagesBeingRendered /DecantingNotes store
				/ThisName (Decanter labels) def

				0  1  GlassesClusteredOnDecantingNotes length 1 sub
				{
					/DecantingNotesSheetNum exch def

					0  1  DecantingNotesNumCopies 1 sub
					{
						//false PageSuppressed {pop exit} if
						/DecantingNotesCopyNum exch def
						/DecantingNotesThisSheet GlassesClusteredOnDecantingNotes DecantingNotesSheetNum GetEU def

						DecantingNotesPaperType ThisPaperType  eq   PageOrderingDecantingNotes DecantingNotesSheetNum get  ThisPageOrdering  eq   and
						{
							/DecantingNotesThisSheetLength  0  DecantingNotesThisSheet {execU length add} forall  def
							/TypeOfPagesBeingRendered /DecantingNotes store
							//false  //false  MirrorPagesDecantingNotes DecantingNotesSheetNum GetEU  //true  DecantingNotesPaperType  DecantingNotesOrientation  SetPaperSize
							//true DefStoreMgns
							DeBugLevel 40 le {(+PaintBackgroundCode) OutputToLog} if   GSave newpath /PaintBackgroundCode load execU GRestore   DeBugLevel 40 le {(-PaintBackgroundCode) OutputToLog} if
							/DecantingNotesTopTextHeight PageHeight MgnB MgnT add sub 50 div  def  % embedded constant
							DecantingNotesForms DecantingNotesSheetNum get  execform
							DeBugLevel 40 le {(+PaintForegroundCode) OutputToLog} if   GSave newpath /PaintForegroundCode load execU GRestore   DeBugLevel 40 le {(-PaintForegroundCode) OutputToLog} if
							ShowPage
						} if  % DecantingNotesPaperType ... PageOrderingDecantingNotes ... and
					} for  % DecantingNotesCopyNum
				} for  % DecantingNotesSheetNum
				DeBugLevel 100 le {(-DecantingNotes) OutputToLog} if
			} if  % ... DecantingNotesNumCopies 1 ge ...


			% Discussion: http://www.theportforum.com/viewtopic.php?t=175&start=1051
			AccountsNumCopies 1 ge
			{
				35 dict begin
				/TypeOfPagesBeingRendered /Accounts store
				/ThisName (Accounts) def
				//false  AccountsPaperType ThisPaperType eq {PageOrderingAccounts {execU ThisPageOrdering eq {pop //true exit} if} forall} if
				{
				  AccountsNumCopies
					{
						DeBugLevel 100 le {(+Accounts) OutputToLog} if
						//false  //false  MirrorPagesAccounts 0 1 PageOrderingAccounts length 1 sub {dup PageOrderingAccounts exch GetEU ThisPageOrdering eq {exit} {pop} ifelse} for GetEU  //true  AccountsPaperType  AccountsOrientation  SetPaperSize
						//true DefStoreMgns
						DeBugLevel 40 le {(+PaintBackgroundCode) OutputToLog} if   GSave newpath /PaintBackgroundCode load execU GRestore   DeBugLevel 40 le {(-PaintBackgroundCode) OutputToLog} if
						HeadersAndFooters PaintHeadersFooters

						/AccTopTextFontSize 16 def  % embedded constant
						HeaderFont AccTopTextFontSize selectfont GSave  NullDevice 16384 dup scale newpath 0 0 moveto   AccountsTopText  //true CharPathRecursive PathBBox GRestore  /AccTopTextT exch def  /AccTopTextR exch def  /AccTopTextB exch def  /AccTopTextL exch def
						/AccTopTextHeight AccTopTextT AccTopTextB sub def
						AccTopTextHeight 0 gt {HeaderFont AccTopTextFontSize selectfont   PageWidth MgnL MgnR sub AccTopTextL AccTopTextR add sub add 2 div  PageHeight MgnT AccTopTextT add sub  moveto 0 setgray AccountsTopText ShowRecursive} if

						/AccRowNames [ NamesAccounts aload pop  AccountsExtraRows aload pop ] def
						/AccRowNamesFontSize  NamesFontSize  PageHeight MgnB MgnT add AccTopTextHeight add 1.92 add sub AccRowNames length dup 0 gt {div} {pop} ifelse 0.6 mul  2 copy gt {exch} if pop  def  % Embedded constant
						{/AccRowNameWidths [  AccRowNames {NamesFont AccRowNamesFontSize selectfont   StringWidthRecursive} forall  ] def    /AccRowNameWidthsMax AccRowNameWidths Max def}  dup
						exec  AccRowNameWidthsMax PageWidth MgnL MgnR add sub 6 div 2 copy gt {exch div AccRowNamesFontSize mul /AccRowNamesFontSize exch def  exec} {pop pop pop} ifelse  % Embdedded constant

						/AccWideLineWidth 2.88 def    /AccNarrowLineWidth 0.72 def    /AccMiddleLineWidth AccWideLineWidth AccNarrowLineWidth add 2 div def
						/AccColumnRelativeWidthsSum 0 AccountsColumnRelativeWidths {execU add} forall def
						/AccColLeftX [
							AccRowNameWidthsMax AccWideLineWidth 2 div MgnL add add
							/AccColWidthPer PageWidth MgnR sub 2 index sub AccColumnRelativeWidthsSum dup 0 gt {div} {pop} ifelse def
							AccountsColumnRelativeWidths {AccColWidthPer mul 1 index add} forall
						] def  % /AccColLeftX

						/AccColGrpHeadingsT 0 def  /AccColGrpHeadingsB 0 def  /AccColSubHeadingsT 0 def  /AccColSubHeadingsB 0 def
						0 1 AccountsColumnGroupHeadings length 1 sub
						{
							/i exch def
							HeaderFont AccountsColumnHeadingsFontSize selectfont
							GSave  NullDevice 16384 dup scale newpath 0 0 moveto   AccountsColumnGroupHeadings i get  //true CharPathRecursive PathBBox GRestore
							dup AccColGrpHeadingsT gt {/AccColGrpHeadingsT exch def} {pop} ifelse pop dup AccColGrpHeadingsB lt {/AccColGrpHeadingsB exch def} {pop} ifelse pop
							0  1  AccountsSubColumnHeadings i get length 1 sub
							{
								/j exch def
								HeaderFont AccountsColumnHeadingsFontSize selectfont
								GSave  NullDevice 16384 dup scale newpath 0 0 moveto   AccountsSubColumnHeadings i get j get  //true CharPathRecursive PathBBox GRestore
								dup AccColSubHeadingsT gt {/AccColSubHeadingsT exch def} {pop} ifelse pop dup AccColSubHeadingsB lt {/AccColSubHeadingsB exch def} {pop} ifelse pop
							} for  % j
						} for  % i

						/jTotal 0 def
						0.8 setgray   0 currentlinecap ne {0 setlinecap} if   currentdash pop length 0 ne {[] 0 setdash} if
						0 1 AccountsColumnGroupHeadings length 1 sub
						{
							/i exch def
							/jTotalGrpStart jTotal def
							i 0 eq {AccWideLineWidth} {AccMiddleLineWidth} ifelse dup currentlinewidth ne {setlinewidth} {pop} ifelse    AccColLeftX jTotalGrpStart get MgnB    1 index PageHeight MgnT AccTopTextT AccTopTextB sub 0.48 add add sub  moveto lineto  stroke
							0  1  AccountsSubColumnHeadings i get length 1 sub
							{
								/j exch def
								j 1 ge {AccNarrowLineWidth dup currentlinewidth ne {setlinewidth} {pop} ifelse
								AccColLeftX jTotal get MgnB    1 index PageHeight MgnT AccTopTextT AccTopTextB sub AccColGrpHeadingsT AccColGrpHeadingsB sub 1.44 add add add sub  moveto lineto  stroke}  if
								/jTotal jTotal 1 add store
							} for  % j
						} for  % i
						AccNarrowLineWidth dup currentlinewidth ne {setlinewidth} {pop} ifelse    AccColLeftX jTotal get MgnB    1 index PageHeight MgnT AccTopTextT AccTopTextB sub 0.48 add add sub  moveto lineto  stroke

						/jTotal 0 def
						0 1 AccountsColumnGroupHeadings length 1 sub
						{
							/i exch def
							/jTotalGrpStart jTotal def
							0 1 AccountsSubColumnHeadings i get length 1 sub
							{
								/j exch def
								HeaderFont AccountsColumnHeadingsFontSize selectfont 0 setgray
								PageHeight MgnT AccTopTextT AccTopTextB sub AccColGrpHeadingsT AccColGrpHeadingsB sub AccColSubHeadingsT 1.92 add add add add sub
								AccountsSubColumnHeadings i get j get   dup StringWidthRecursive   AccColLeftX jTotal get AccNarrowLineWidth 2 div add  AccColLeftX jTotal 1 add get AccNarrowLineWidth 2 div sub
								2 copy //PrinterEpsilon sub le
								{
									3 copy exch sub le
										{add  exch sub 2 div  3 -1 roll moveto ShowRecursive}
										{1 index 6 -1 roll moveto matrix currentmatrix 5 1 roll exch sub exch div 1 scale ShowRecursive setmatrix}
									ifelse  % String narrower than space
								} {pop pop pop pop pop} ifelse  % Non-zero space
								/jTotal jTotal 1 add store
							} for  % j
							HeaderFont AccountsColumnHeadingsFontSize selectfont 0 setgray
							PageHeight MgnT AccTopTextT AccTopTextB sub AccColGrpHeadingsT 0.96 add add add sub
							AccountsColumnGroupHeadings i get   dup StringWidthRecursive
							AccColLeftX jTotalGrpStart get AccMiddleLineWidth 2 div add  AccColLeftX jTotal get AccMiddleLineWidth 2 div sub
							2 copy //PrinterEpsilon sub le
							{
								3 copy exch sub le
									{add  exch sub 2 div  3 -1 roll moveto ShowRecursive}
									{1 index 6 -1 roll moveto matrix currentmatrix 5 1 roll exch sub exch div 1 scale ShowRecursive setmatrix}
								ifelse  % String narrower than space
							} {pop pop pop pop pop} ifelse  % Non-zero space
						} for  % i

						0  1  AccRowNames length 1 sub
						{
							/NameNum exch def
							NamesFont AccRowNamesFontSize selectfont
							/ThisLineWidth 1 {AccNarrowLineWidth
								NameNum NamesAccounts length gt {exit} if    NameNum 0 eq  NameNum NamesAccounts length eq or {pop AccWideLineWidth exit} if
								NamesAccounts length 6 ge  NamesAccounts length 3 mod 0 eq {0} {2} ifelse NameNum 3 mod eq  and {pop AccMiddleLineWidth exit} if
							} repeat def  % /ThisLineWidth
							/Y  PageHeight MgnB MgnT add AccTopTextHeight add AccColGrpHeadingsT AccColGrpHeadingsB sub add AccColSubHeadingsT AccColSubHeadingsB sub add 2.4 add sub  AccRowNames length div  AccRowNames length NameNum sub mul  MgnB add  def
							MgnL  Y ThisLineWidth 2 div sub  moveto  PageWidth MgnL MgnR add sub 0 rlineto
							ThisLineWidth dup currentlinewidth ne {setlinewidth} {pop} ifelse  0.8 setgray   0 currentlinecap ne {0 setlinecap} if   currentdash pop length 0 ne {[] 0 setdash} if  stroke
							0 setgray MgnL Y ThisLineWidth 0.48 add sub moveto   GSave NullDevice 16384 dup scale newpath 0 0 moveto  AccRowNames NameNum get dup //true CharPathRecursive PathBBox GRestore  0 exch neg rmoveto  pop pop pop ShowRecursive
						} for  % NameNum
						DeBugLevel 40 le {(+PaintForegroundCode) OutputToLog} if   GSave newpath /PaintForegroundCode load execU GRestore   DeBugLevel 40 le {(-PaintForegroundCode) OutputToLog} if
						ShowPage
						DeBugLevel 100 le {(-Accounts) OutputToLog} if
					} repeat  % AccountsNumCopies
				} if  % ... AccountsPaperType ... PageOrderingAccounts ...
				end
			} if   % AccountsNumCopies 1 ge


			{CorkDisplayNumCopies 1 ge} MightBeTrue
			{
				DeBugLevel 100 le {(+CorkDisplay) OutputToLog} if
				58 dict begin
				/TypeOfPagesBeingRendered /CorkDisplay store
				/ThisName (Cork display) def
				0  1  GlassesClusteredOnCorkDisplay length 1 sub
				{
					/CorkDisplaySetNum exch def
					//false //false //false //false CorkDisplayPaperType /Portrait SetPaperSize
					//true DefStoreMgns
					/CDTopTextFontSize 16 def  % embedded constant
					HeaderFont CDTopTextFontSize selectfont GSave  NullDevice 16384 dup scale newpath 0 0 moveto   CorkDisplayTopText  //true CharPathRecursive PathBBox GRestore  /CDTopTextT exch def  /CDTopTextR exch def  /CDTopTextB exch def  /CDTopTextL exch def
					/CorkDisplayTopTextHeight CDTopTextT CDTopTextB sub def
					CorkDisplayPaperType ThisPaperType  eq   PageOrderingCorkDisplay CorkDisplaySetNum GetEU  ThisPageOrdering  eq   and
					{CorkDisplayNumCopies 1 ge} MightBeTrue  and  dup {//false PageSuppressed {pop //false} if} if
					{
						/CDNumGlasses  0 GlassesClusteredOnCorkDisplay CorkDisplaySetNum GetEU {execU {/WithinTitles exch def CorkDisplayNumCopies add} forall} forall def
						/CDGapBetween 6 def  % embedded constant

						/CDBestMeetsCriteria //false def
						/CDBestFailureAmount //Infinity def
						/CDBestOrientation /Portrait def
						/CDBestNumPages CDNumGlasses 1 add def
						/CDBestSizeScore //InfinityNeg def
						/CDBestWidthOneCork 0 def
						/CDBestHeightOneCork 0 def
						/CDBestNumRows //null def
						/CDBestNumCols //null def

						[ /Portrait /Landscape ]
						{
							/CDOrientation exch def
							//false //false //false //false CorkDisplayPaperType CDOrientation SetPaperSize
							//true DefStoreMgns
							/CDSpaceH PageWidth MgnL MgnR add sub def
							/CDSpaceV PageHeight MgnB MgnT add CorkDisplayTopTextHeight add sub def
							1  1  CDNumGlasses
							{
								/CDNumCols exch def
								/CDWidthPer CDSpaceH CDNumCols 1 sub CDGapBetween mul sub CDNumCols div def
								1  1  CDNumGlasses
								{
									/CDNumRows exch def
									/CDHeightPer CDSpaceV 0.48 sub CDNumRows 1 sub CDGapBetween mul sub CDNumRows div def  % Embedded constant = small space below CorkDisplayTopText
									/CDNumPages CDNumGlasses CDNumCols CDNumRows mul div ceiling cvi def
									/CDFailureAmount
										CorkDisplayMinWidth  CDWidthPer sub dup 0 le {pop 0} if
										CorkDisplayMinHeight CDHeightPer sub dup 0 le {pop} {add} ifelse
									def  % /CDFailureAmount
									/CDSizeScore  % www.ThePortForum.com/viewtopic.php?t=175&start=205
										CDHeightPer CDWidthPer mul
										CorkDisplayMinWidth 0 gt  CorkDisplayMinHeight 0 gt  and
										{
											CorkDisplayMinWidth CDHeightPer mul  CorkDisplayMinHeight CDWidthPer mul  add  dup 0 gt {div} {pop pop -1} ifelse
										} if  % positive minima
									def  % /CDSizeScore
									//false
									1 {
										CDFailureAmount 0 le  CDBestMeetsCriteria not  and {pop //true exit} if
										CDHeightPer 0 le  CDWidthPer 0 le  or {exit} if
										CDFailureAmount 0 gt
										{
											CDBestMeetsCriteria {exit} if
											CDFailureAmount CDBestFailureAmount lt {pop //true exit} if
											CDFailureAmount CDBestFailureAmount gt {exit} if
										} if  % this failing criteria
										CDNumPages CDBestNumPages lt {pop //true exit} if
										CDNumPages CDBestNumPages gt {exit} if
										CDSizeScore CDBestSizeScore gt {pop //true exit} if
									} repeat  % 1
									{
										/CDBestMeetsCriteria CDFailureAmount 0 le def
										/CDBestFailureAmount CDFailureAmount def
										/CDBestOrientation CDOrientation def
										/CDBestNumPages CDNumPages def
										/CDBestSizeScore CDSizeScore def
										/CDBestWidthOneCork CDWidthPer def
										/CDBestHeightOneCork CDHeightPer def
										/CDBestNumRows CDNumRows def
										/CDBestNumCols CDNumCols def
									} if  % lots of things
									CorkDisplayMinHeight CDHeightPer gt {exit} if
								} for  % CDNumRows
								CorkDisplayMinWidth CDWidthPer gt {exit} if
							} for  % CDNumCols
						} forall  % CDOrientation

						/CDCircletextFontSize [ 5  CDBestWidthOneCork 36 div  CDBestHeightOneCork 36 div ] Min def  % embedded constant
						/CDTitleFontSize [ CDTopTextFontSize  18  CDBestHeightOneCork 6 div  CDBestWidthOneCork 6 div ] Min def
						/CDSubtitleFontSize  VoteRecorderSubtitleFontSizeProportionTitles dup IsNumber not {pop 0.5} if  CDTitleFontSize mul def  % Embedded constant

						/CDSpareHoles CDBestNumCols CDBestNumRows mul CDBestNumPages mul  GlassesClusteredOnCorkDisplay CorkDisplaySetNum GetEU {length sub} forall def

						/WithinPage 0 def  /CorkDisplayThisPageTitles () def
						GlassesClusteredOnCorkDisplay CorkDisplaySetNum GetEU
						{
							execU
							{
								/WithinTitles exch execU def
								WithinTitles type /integertype eq {CorkDisplayNumCopies} {1} ifelse  % Should be redundant following change in code on 11 March 2018.
								{
									WithinPage 0 eq
									{
										//false  //false  MirrorPagesCorkDisplay CorkDisplaySetNum GetEU  //true  CorkDisplayPaperType  CDBestOrientation  SetPaperSize
										//true DefStoreMgns
										HeadersAndFooters PaintHeadersFooters
										CorkDisplayTopTextHeight 0 gt {HeaderFont CDTopTextFontSize selectfont   PageWidth MgnL MgnR sub CDTopTextL CDTopTextR add sub add 2 div  PageHeight MgnT CDTopTextT add sub  moveto 0 setgray CorkDisplayTopText ShowRecursive} if
									} if  % WithinPage 0 eq
									WithinTitles type /integertype eq  % Should be redundant following change in code on 11 March 2018.
									{
										/CDColNum WithinPage PackingNestingColumnMajor {CDBestNumRows idiv} {CDBestNumCols mod } ifelse def
										/CDRowNum WithinPage PackingNestingColumnMajor {CDBestNumRows mod } {CDBestNumCols idiv} ifelse def
										/CDLeft CDGapBetween CDBestWidthOneCork  add CDColNum mul MgnL add def
										/CDBottom CDGapBetween CDBestHeightOneCork add CDBestNumRows CDRowNum sub 1 sub mul MgnB add def
										CDLeft CDBottom CDBestWidthOneCork CDBestHeightOneCork  CirclearraysCorkDisplay WithinTitles get
										{CircletextFont CDCircletextFontSize selectfont} CircletextsMinNumSpacesBetween  CirclearrayInRectangle
										sub neg /AD exch def

										1 dict begin   /AnnotationCount 0 def
										0  2  GlassesAnnotations length 2 sub  dup 0 ge {//false PageSuppressed {pop -1} if} if
										{
											dup GlassesAnnotations exch GetEU WithinTitles eq
											{
												mark exch
													1 add GlassesAnnotations exch GetEU PDFDocEncodingify /Contents exch
													/Title [Titles WithinTitles get (: annotation)] PDFDocEncodingify
													/Rect [  CDLeft AD add CDBestWidthOneCork AD 2 mul sub 20 sub AnnotationCount 8 div mul add  % Embedded constant, width of annotation icon in Preview 7.0 (826.4)
														CDBottom AD add CDBestHeightOneCork AD 2 mul sub 24 sub 8 AnnotationCount sub 8 div mul 24 add add   2 copy ]  % Embedded constant, height of annotation icon in Preview 7.0 (826.4)
													/Subtype /Text   /Open //true   /F 64 128 add  % ReadOnly + Locked. PDFReference16.pdf page 574
												/ANN pdfmark
												/AnnotationCount AnnotationCount 1 add store   AnnotationCount 9 ge {exit} if
											} {pop} ifelse  % ... WithinTitles eq
										} for   end  % 'GlassesAnnotations'

										/CDLeft CDLeft AD add 1.92 add def  % Embedded constant
										/CDBottom CDBottom AD add 1.92 add def  % Embedded constant

										SubtitlesFont CDSubtitleFontSize selectfont  0 setgray
										GSave  NullDevice  16384 dup scale  newpath 0 0 moveto
										SubtitlesCorkDisplay WithinTitles get //true CharPathRecursive PathBBox
										GRestore  /CDSubtitlesT exch def  /CDSubtitlesR exch def  /CDSubtitlesB exch def  /CDSubtitlesL exch def
										CDSubtitlesT CDSubtitlesB gt  CDSubtitlesR CDSubtitlesL gt  and
										{
											CDLeft CDBottom moveto
											CDLeft  CDBottom CDSubtitlesB sub moveto  SubtitlesCorkDisplay WithinTitles get  ShowRecursive
											/CDBottom CDBottom CDSubtitlesB sub CDSubtitlesT add 0.96 add def  % Embedded constant
										} if  % non-empty

										TitlesFont CDTitleFontSize selectfont  0 setgray
										GSave  NullDevice  16384 dup scale  newpath 0 0 moveto
										TitlesCorkDisplay WithinTitles get //true CharPathRecursive PathBBox
										GRestore  /CDTitlesT exch def  /CDTitlesR exch def  /CDTitlesB exch def  /CDTitlesL exch def
										CDTitlesT CDTitlesB gt  CDTitlesR CDTitlesL gt  and
										{
											CDLeft CDBottom moveto
											CDLeft  CDBottom CDTitlesB sub moveto  TitlesCorkDisplay WithinTitles get  ShowRecursive
										} if  % non-empty
									} if  % WithinTitles type /integertype eq
									/CorkDisplayThisPageTitles dup load  dup length 0 gt {(; ) Concatenate} if  Titles WithinTitles get PDFDocEncodingify Concatenate  def  % Deliberately Titles rather than TitlesCorkDisplay
									/WithinPage WithinPage 1 add def
									WithinPage CDBestNumRows CDBestNumCols mul ge {ShowPage  /WithinPage 0 def  /CorkDisplayThisPageTitles () def} if
								} repeat  % ... CorkDisplayNumCopies ...
							} forall
							WithinPage 0 gt {CDSpareHoles  CDBestNumCols CDBestNumRows mul WithinPage sub  2 copy ge {sub /CDSpareHoles exch def  ShowPage  /WithinPage 0 def  /CorkDisplayThisPageTitles () def} {pop pop} ifelse} if
						} forall
						WithinPage 0 gt {ShowPage} if
					} if  % CorkDisplayPaperType ... PageOrderingCorkDisplay ... and ... CorkDisplayNumCopies 1 ge
				} for  % CorkDisplaySetNum
				end
				DeBugLevel 100 le {(-CorkDisplay) OutputToLog} if
			} if  % ... CorkDisplayNumCopies 1 ge ...


			//false  {NeckTagsNumCopies 1 ge} MightBeTrue {PageOrderingNeckTags {execU ThisPageOrdering eq {pop //true exit} if} forall} if
			{
				DeBugLevel 100 le {(+NeckTags) OutputToLog} if
				51 dict begin
				/TypeOfPagesBeingRendered /NeckTags store
				/NTGapBetweenMin 6 def  /NTGapInside 0.24 def  % embedded constants
				/ThisName (Neck tags) def

				//false   //false  MirrorPagesNeckTags  //true   NeckTagsPaperType   /Portrait   SetPaperSize
				//true DefStoreMgns
				/NTSpaceH PageWidth MgnL MgnR add sub def
				/NTSpaceV PageHeight MgnB MgnT add sub def
				/NTNumGlasses 0 def
				/NTTitleAboveBelowOverPropRMinL 0 def
				/NTTitleAboveBelowOverPropRMaxR 0 def
				/NTTitleAboveBelowOverPropRMinB 0 def
				/NTTitleAboveBelowOverPropRMaxT 0 def
				0  1  NumSheets 1 sub
				{
					/SheetNum exch def
					0  1  SheetLengths SheetNum get 1 sub
					{
						WithinPage-WithinTitles-def
						NeckTagsPaperType ThisPaperType  eq   PageOrderingNeckTags SheetNum GetEU  ThisPageOrdering  eq   and   NeckTagsNumCopies 1 ge  and
						{
							/NTNumGlasses dup load NeckTagsNumCopies add store
							/NTTitleAboveBelowOverPropRMinL  TitleAboveBelowOverL  SheetNum get WithinPage get RadiiCirclearrayInside SheetNum get div dup 2 index load lt {store} {pop pop} ifelse
							/NTTitleAboveBelowOverPropRMaxR  TitleAboveBelowOverR  SheetNum get WithinPage get RadiiCirclearrayInside SheetNum get div dup 2 index load gt {store} {pop pop} ifelse
							/NTTitleAboveBelowOverPropRMinB  TitleAboveBelowOverB  SheetNum get WithinPage get RadiiCirclearrayInside SheetNum get div dup 2 index load lt {store} {pop pop} ifelse
							/NTTitleAboveBelowOverPropRMaxT  TitleAboveBelowOverT  SheetNum get WithinPage get RadiiCirclearrayInside SheetNum get div dup 2 index load gt {store} {pop pop} ifelse
						} if  % NeckTagsPaperType ... PageOrderingNeckTags ... and ... NeckTagsNumCopies ...
					} for  % WithinPage, WithinTitles
				} for  % SheetNum

				NTNumGlasses 1 ge  NTTitleAboveBelowOverPropRMaxR NTTitleAboveBelowOverPropRMinL sub //Epsilon gt NTTitleAboveBelowOverPropRMaxT NTTitleAboveBelowOverPropRMinB sub //Epsilon gt and  and
				{
					/NTBestScalingFactor //Epsilon def   /NTBestNumPages //Infinity def
					[ /NTBestRotatedness /NTBestNumRows /NTBestNumCols /NTBestRadius /NTBestWidthPer /NTBestHeightPer ] {//null def} forall

					21 dict begin
					[ //false //true ]
					{
						/NTRotated exch def
						1  1  NTNumGlasses  NTSpaceH NTGapBetweenMin add NTRotated {NeckTagsMinHeight} {NeckTagsMinWidth} ifelse NTGapBetweenMin add div cvi dup 1 lt {pop 1} if 2 copy gt {exch} if pop
						{
							/NTNumCols exch def
							1  1  NTNumGlasses NTNumCols div ceiling cvi  NTSpaceV NTGapBetweenMin add NTRotated {NeckTagsMinWidth} {NeckTagsMinHeight} ifelse NTGapBetweenMin add div cvi dup 1 lt {pop 1} if 2 copy gt {exch} if pop
							{
								/NTNumRows exch def
								/NTNumPages NTNumGlasses NTNumCols NTNumRows mul div ceiling cvi def
								/NTScalingFactorThis //Infinity def
								/NTWidthPerThis //PrinterEpsilon def
								/NTHeightPerThis //PrinterEpsilon def
								/NTRadiusThis //Infinity def
								0  1  NumSheets 1 sub
								{
									/SheetNum exch def
									0  1  SheetLengths SheetNum get 1 sub
									{
										WithinPage-WithinTitles-def
										/NTRadiiDiffPlusGap Radii SheetNum get RadiiCirclearrayInside SheetNum get sub NTGapInside add def

										/NTHeightPer /NTWidthPer NTRotated {exch} if
										NTSpaceH NTNumCols 1 sub NTGapBetweenMin mul sub NTNumCols div  NTRotated {NeckTagsMaxHeight} {NeckTagsMaxWidth} ifelse 2 copy gt {exch} if pop  def
										NTSpaceV NTNumRows 1 sub NTGapBetweenMin mul sub NTNumRows div  NTRotated {NeckTagsMaxWidth} {NeckTagsMaxHeight} ifelse 2 copy gt {exch} if pop  def

										% Want large Titles etc. But don't want wasted space. Hence resetting of NTHeightPer|NTWidthPer for no wasted space.
										/NTUsedV NeckTagsHoleRadius 2 mul NeckTagsSpaceAboveTitlesEtc NeckTagsSpaceBelowTitlesEtc add add NeckTagsSpaceAboveHole add NTRadiiDiffPlusGap add def
										/NTUsableV NTHeightPer NTUsedV sub def
										/NTUsedH NTRadiiDiffPlusGap 2 mul def
										/NTUsableH NTWidthPer NTUsedH sub def
										/NTTABOPRV NTTitleAboveBelowOverPropRMaxT NTTitleAboveBelowOverPropRMinB sub def
										/NTTABOPRH NTTitleAboveBelowOverPropRMaxR NTTitleAboveBelowOverPropRMinL sub def
										NTUsableV NTTABOPRH mul NTUsableH NTTABOPRV mul gt
											{/NTScalingFactor NTUsableH NTTABOPRH dup 0 gt {div} {pop pop 0} ifelse def   /NTHeightPer NTTABOPRV NTScalingFactor mul NTUsedV add  NeckTagsMinHeight 2 copy lt {exch} if pop def}
											{/NTScalingFactor NTUsableV NTTABOPRV dup 0 gt {div} {pop pop 0} ifelse def   /NTWidthPer  NTTABOPRH NTScalingFactor mul NTUsedH add  NeckTagsMinWidth  2 copy lt {exch} if pop def}
										ifelse  % Horizontal or vertical direction the binding constraint
										NTScalingFactor NTScalingFactorThis lt {/NTScalingFactorThis NTScalingFactor store} if
										NTWidthPer  NTWidthPerThis  gt {/NTWidthPerThis  NTWidthPer  store} if
										NTHeightPer NTHeightPerThis gt {/NTHeightPerThis NTHeightPer store} if
										/NTRadiusThis NeckTagsSpaceAboveHole 2 div NeckTagsHoleRadius add dup 2 index load lt {store} {pop pop} ifelse
									} for  % WithinPage, WithinTitles
								} for  % SheetNum

								NTNumPages NTBestNumPages lt   NTNumPages NTBestNumPages eq  NTScalingFactor NTBestScalingFactor gt  and   or
								{
									/NTBestRotatedness NTRotated  /NTBestScalingFactor NTScalingFactorThis  /NTBestNumPages NTNumPages  /NTBestNumRows NTNumRows
									/NTBestNumCols NTNumCols  /NTBestWidthPer NTWidthPerThis  /NTBestHeightPer NTHeightPerThis  /NTBestRadius NTRadiusThis  8 {store} repeat
								} if  % new best
							} for  % NTNumRows
						} for  % NTNumCols
					} forall  % NTRotated
					end

					/StringAnnotationPDF
						mark  (Neck tags: cut around text; cut circle perhaps after gently folding that part of tag; put over otherwise-unlabelled bottle.)
						<< /SheetNum 0  /TastingSheetNum 0 >> begin  % in case headers reference same
						HeadersAndFooters 6 3 roll
						3 copy [ 4 1 roll ] NonEmptyCompoundObject {[(\r\n\r\nHeader: ) 5 2 roll (     ) 3 1 roll 2 index exch] PDFDocEncodingify 4 1 roll} {pop pop pop} ifelse
						3 copy [ 4 1 roll ] NonEmptyCompoundObject {[(\r\n\r\nFooter: ) 5 2 roll (     ) 3 1 roll 2 index exch] PDFDocEncodingify         } {pop pop pop} ifelse
						ConcatenateToMark
						end  % << /SheetNum 0  /TastingSheetNum 0 >>
					def  % /StringAnnotationPDF
					/AnnotatePDF {
						//false PageSuppressed not
						{
							mark
								/Rect [ 0 PageHeight  2 copy ]
								/Subtype /Text
								/Contents StringAnnotationPDF
								/Open //false
								/Title (Neck tags)
								/ModDate ParametersVersionDateTimeAdobeFormat
								/F 64 128 add  % ReadOnly + Locked. PDFReference16.pdf page 574
							/ANN pdfmark
						} if  % PageSuppressed not
					} bind def  % /AnnotatePDF

					NTBestRotatedness //null ne
					{
						mark  (Neck tags: scaling factors = ) NTBestScalingFactor RadiiCirclearrayInside {div} //false TwoArraysFunction (\(with ThisPageOrdering = ) ThisPageOrdering (\), and scaled TitleFontSizes = )
						TitleFontSizes RadiiCirclearrayInside {div} //false TwoArraysFunction NTBestScalingFactor {mul} //false TwoArraysFunction SizeArrayOutput (.) ConcatenateToMark OutputToLog
						/MatrixPaper matrix currentmatrix def
						/NeckTagsThisPageTitles () def
						/NTGapBetweenH
							PageWidth  NTBestRotatedness {NTBestHeightPer} {NTBestWidthPer} ifelse NTBestNumCols mul sub dup
							NTBestNumCols 1 add div dup 2 mul MgnL MgnR add ge {exch pop} {pop MgnL MgnR add sub NTBestNumCols 1 sub dup 1 lt {pop pop 0} {div} ifelse} ifelse
						def  % /NTGapBetweenH
						/NTGapBetweenV
							PageHeight  NTBestRotatedness {NTBestWidthPer} {NTBestHeightPer} ifelse NTBestNumRows mul sub dup
							NTBestNumRows 1 add div dup 2 mul MgnB MgnT add ge {exch pop} {pop MgnB MgnT add sub NTBestNumRows 1 sub dup 1 lt {pop pop 0} {div} ifelse} ifelse
						def  % /NTGapBetweenV
						/NTNumPaintedThisPage 0 def
						0  1  NumSheets 1 sub
						{
							/SheetNum exch def
							0  1  SheetLengths SheetNum get 1 sub
							{
								WithinPage-WithinTitles-def
								/NTRadiiDiffPlusGap Radii SheetNum get RadiiCirclearrayInside SheetNum get sub NTGapInside add def
								NeckTagsMaxHeight   NeckTagsHoleRadius 2 mul NeckTagsSpaceAboveTitlesEtc NeckTagsSpaceBelowTitlesEtc add add NeckTagsSpaceAboveHole add NTRadiiDiffPlusGap add 6 add gt  % Embedded constant
								{
									NeckTagsPaperType ThisPaperType  eq   PageOrderingNeckTags SheetNum GetEU  ThisPageOrdering  eq   and
									CircleNonEmpty SheetNum get WithinPage get   and
									{
										0  1  NTBestScalingFactor //Epsilon le {-1} {NeckTagsNumCopies 1 sub} ifelse
										{
											//false PageSuppressed {pop exit} if
											/NeckTagsCopyNum exch def
											NTBestRotatedness
												{/NTColNum NTNumPaintedThisPage NTBestNumRows idiv def  /NTRowNum NTBestNumRows NTNumPaintedThisPage NTBestNumRows mod sub 1 sub def}
												{/NTRowNum NTNumPaintedThisPage NTBestNumCols idiv def  /NTColNum               NTNumPaintedThisPage NTBestNumCols mod def}
											ifelse
											/NTCentreX  PageWidth  MgnR MgnL sub add 2 div  NTBestNumCols 1 sub 2 div NTColNum sub  NTBestRotatedness {NTBestHeightPer} {NTBestWidthPer} ifelse NTGapBetweenH add mul sub  def
											/NTCentreY  PageHeight MgnT MgnB sub add 2 div  NTBestNumRows 1 sub 2 div NTRowNum sub  NTBestRotatedness {NTBestWidthPer} {NTBestHeightPer} ifelse NTGapBetweenV add mul add  def
											/MatrixNT
												NTBestRotatedness {NTColNum NTBestNumCols 1 sub eq NTColNum 0 gt and {-90} {90} ifelse matrix rotate} {NTRowNum NTBestNumRows 1 sub eq NTRowNum 0 gt and {180 matrix rotate} if} ifelse
												NTCentreX NTCentreY matrix translate   MatrixPaper
											{1 index type /arraytype eq {matrix concatmatrix} {exit} ifelse} loop  def  % /MatrixNT
											/MatrixTitlesEtc
												0  NTTitleAboveBelowOverPropRMaxT NTTitleAboveBelowOverPropRMinB add RadiiCirclearrayInside SheetNum get mul -2 div matrix translate
												NTBestScalingFactor RadiiCirclearrayInside SheetNum get div dup matrix scale
												0  NeckTagsSpaceAboveHole NTRadiiDiffPlusGap sub NeckTagsSpaceAboveTitlesEtc NeckTagsSpaceBelowTitlesEtc sub add 2 div NeckTagsHoleRadius add  neg matrix translate   MatrixNT
											{1 index type /arraytype eq {matrix concatmatrix} {exit} ifelse} loop  def  % /MatrixTitlesEtc
											/MatrixGlasses  GlassPositions SheetNum get WithinPage get {neg} forall matrix translate  MatrixTitlesEtc  {1 index type /arraytype eq {matrix concatmatrix} {exit} ifelse} loop  def
											MatrixNT setmatrix
											ClipSave
											NTBestWidthPer NTGapBetweenMin 0.8 mul add dup -2 div exch  NTBestHeightPer NTGapBetweenMin 0.8 mul add dup -2 div  3 1 roll rectclip  % Non-overlapping rectclips help RIP engines

											/TypeOfPagesBeingRendered /Glasses store  //false //false //false //false PaperType Orientation SetPaperSize  //true DefStoreMgns
											BackgroundTextsGlasses {NeckTagsShowBackgroundTexts} {//false} ifelse   Droplets {NeckTagsShowDroplets or} if
											{
												ClipSave  MatrixNT setmatrix
												NTBestWidthPer -2 div NTRadiiDiffPlusGap add  NTBestHeightPer -2 div NTRadiiDiffPlusGap add moveto     NTBestWidthPer NTRadiiDiffPlusGap 2 mul sub  0 rlineto
												NTBestWidthPer  2 div NTBestRadius sub
												NTBestHeightPer 2 div NTBestRadius sub  NTBestRadius NTRadiiDiffPlusGap sub  0  90 arc
												NTBestWidthPer -2 div NTBestRadius add
												NTBestHeightPer 2 div NTBestRadius sub  NTBestRadius NTRadiiDiffPlusGap sub 90 180 arc  closepath clip newpath
												RotationTitlesAboveBelowOverCirclearray dup 0 ne
												{
													MatrixTitlesEtc setmatrix   neg rotate
													GlassPositions SheetNum get WithinPage get {neg} forall translate
												} {pop MatrixGlasses setmatrix} ifelse  % RotationTitlesAboveBelowOverCirclearray 0 ne
												BackgroundTextsGlasses NeckTagsShowBackgroundTexts and {BackgroundTextsGlassesForms SheetNum get execform} if
												Droplets NeckTagsShowDroplets and
												{
													SheetNum
													RotationTitlesAboveBelowOverCirclearray 0 eq
													{
														GSave  MatrixNT setmatrix newpath
														NTBestWidthPer -2 div NTBestHeightPer -2 div moveto  NTBestWidthPer  2 div NTBestHeightPer -2 div lineto
														NTBestWidthPer  2 div NTBestHeightPer  2 div lineto  NTBestWidthPer -2 div NTBestHeightPer  2 div lineto
														MatrixTitlesEtc setmatrix  GlassPositions SheetNum get WithinPage get {neg} forall translate  pathbbox  GRestore
													} {//InfinityNeg  //InfinityNeg  //Infinity  //Infinity} ifelse  % RotationTitlesAboveBelowOverCirclearray 0 eq
													WithinPage  DropletsPaint  % If rotating too complicated to rotate box; the WithinPage must suffice.
												} if  % Droplets NeckTagsShowDroplets and
												ClipRestore
											} if  % BackgroundTextsGlasses ... NeckTagsShowBackgroundTexts ... Droplets ...NeckTagsShowDroplets or
											/PaintBackgroundInsideGlassCircles load length 0 gt  OutlineTitles NeckTagsShowOutlineTitles and or  Spirals or  CrossHatchingInside NeckTagsShowCrossHatchingInside and or
											{
												GSave  MatrixNT setmatrix
												NTBestWidthPer -2 div NTRadiiDiffPlusGap add  NTBestHeightPer -2 div NTRadiiDiffPlusGap add moveto    NTBestWidthPer NTRadiiDiffPlusGap 2 mul sub  0 rlineto
												NTBestWidthPer  2 div NTRadiiDiffPlusGap sub NeckTagsHoleRadius NeckTagsSpaceAboveHole add sub
												NTBestHeightPer 2 div NeckTagsHoleRadius NeckTagsSpaceAboveHole add NTRadiiDiffPlusGap add sub  NeckTagsHoleRadius NeckTagsSpaceAboveHole add  0  90 arc
												NTBestWidthPer -2 div NTRadiiDiffPlusGap add NeckTagsHoleRadius NeckTagsSpaceAboveHole add add
												NTBestHeightPer 2 div NeckTagsHoleRadius NeckTagsSpaceAboveHole add NTRadiiDiffPlusGap add sub  NeckTagsHoleRadius NeckTagsSpaceAboveHole add 90 180 arc  closepath clip newpath
												MatrixTitlesEtc setmatrix   0  0  Radii SheetNum get  0  360 arc closepath clip newpath
												/PaintBackgroundInsideGlassCircles load length 0 gt {/TypeOfPagesBeingRendered /NeckTags store   /PaintBackgroundInsideGlassCircles load execU} if
												OutlineTitles NeckTagsShowOutlineTitles and {OutlineForms SheetNum get WithinPage get  execform} if
												Spirals {SpiralForms SheetNum get WithinPage get execform} if
												CrossHatchingInside NeckTagsShowCrossHatchingInside and {CrossHatchingInsideForms SheetNum get WithinPage get  execform} if
												GRestore
											} if  % any of many
											/TypeOfPagesBeingRendered /NeckTags store   //false //false //false //false NeckTagsPaperType /Portrait SetPaperSize   //true DefStoreMgns
											MatrixNT setmatrix  NTBestWidthPer -2 div NTBestHeightPer -2 div NTBestWidthPer NTBestHeightPer  NTBestRadius  CirclearraysNeckTags WithinTitles get
											{CircletextFont CirclearraysFontSizes SheetNum get WithinPage get selectfont  0 setgray}  CircletextsMinNumSpacesBetween  CirclearrayInSemiRoundedRectangle pop pop
											/TypeOfPagesBeingRendered /Glasses store   MatrixTitlesEtc setmatrix
											TitleAboveBelowOverForms SheetNum get WithinPage get  execform  AnnotateGlass
											/TypeOfPagesBeingRendered /NeckTags store   //false //false //false //false NeckTagsPaperType /Portrait SetPaperSize   //true DefStoreMgns
											/N NeckTagsHoleRadius //TwoPi mul 18 div 4 div ceiling cvi 4 mul  dup 4 lt {pop 4} if  def  % Pieces of just under 18 pt; one third being be painted black
											MatrixNT setmatrix   0  NTBestHeightPer 2 div NeckTagsHoleRadius NeckTagsSpaceAboveHole add sub  NeckTagsHoleRadius   newpath currentdash pop length 0 ne {[] 0 setdash} if 1 currentlinejoin ne {1 setlinejoin} if
											0  1  N 1 sub
											{
												/i exch def
												3 copy 6 copy   i 2 mod 0 eq {-36 -60  +12 -12  +60 +36} {-27 -60  +3 -3  +60 +27} ifelse  12 2 roll  7 2 roll  % Three even pieces, or long-short-long of same average length
												3 {i 360 mul add N div exch i 360 mul add N div  5 copy pop 2 copy sin mul 3 1 roll cos mul 4 -1 roll add 3 1 roll add moveto arc} repeat  % moveto start of arc, then arc
											} for  pop pop pop   MatrixPaper setmatrix
											GSave 1 setgray NeckTagsHoleLineWidth 1.44 add dup currentlinewidth ne {setlinewidth} {pop} ifelse 1 currentlinecap ne {1 setlinecap} if stroke GRestore
											0 setgray NeckTagsHoleLineWidth dup currentlinewidth ne {setlinewidth} {pop} ifelse 0 currentlinecap ne {0 setlinecap} if stroke
											ClipRestore
											/NTNumPaintedThisPage dup load 1 add store
											/NeckTagsThisPageTitles dup load [ exch dup length 0 gt {(; )} if  Titles WithinTitles get ] PDFDocEncodingify  def
											NTNumPaintedThisPage NTBestNumRows NTBestNumCols mul ge {AnnotatePDF ShowPage  /NTNumPaintedThisPage 0 store  /NeckTagsThisPageTitles () store} if
										} for  % NeckTagsCopyNum
									} if  % NeckTagsPaperType ... PageOrderingNeckTags ... and ... NeckTags ... CircleNonEmpty ...
								}{
									mark (Error in neck tags with SheetNum=) SheetNum ( WithinPage=) WithinPage ( WithinTitles=) WithinTitles (. NeckTagsMaxHeight, which is ) NeckTagsMaxHeight
									(, must materially exceed 2*NeckTagsHoleRadius + NeckTagsSpaceAboveTitlesEtc + NeckTagsSpaceBelowTitlesEtc + NeckTagsSpaceAboveHole + space for CirclearraysNeckTags at bottom of tag = 2*)
									NeckTagsHoleRadius ( + ) NeckTagsSpaceAboveTitlesEtc ( + ) NeckTagsSpaceBelowTitlesEtc ( + ) NeckTagsSpaceAboveHole ( + ) NTRadiiDiffPlusGap ( = )
									NeckTagsHoleRadius 2 mul NeckTagsSpaceAboveTitlesEtc NeckTagsSpaceBelowTitlesEtc add add NeckTagsSpaceAboveHole add NTRadiiDiffPlusGap add (. Omitting this neck tag; otherwise continuing.) ConcatenateToMark OutputToLog
								} ifelse  % NeckTagsMaxHeight big enough
							} for  % WithinPage, WithinTitles
						} for  % SheetNum
						NTNumPaintedThisPage 0 gt {AnnotatePDF ShowPage} if
					} {(Error: NeckTags, NTBestRotatedness is null. No neck tags pages; otherwise continuing. Please send .ps file to the author: www.jdawiseman.com/author.html) OutputToLog} ifelse  % NTBestRotatedness //null ne
				} if  % NTNumGlasses 1 ge ...
				end
				DeBugLevel 100 le {(-NeckTags) OutputToLog} if
			} if  % ...NeckTagsNumCopies 1 ge ... PageOrderingNeckTags ... ThisPageOrdering eq


			{PrePourNumCopies 0 gt} MightBeTrue
			{
				/TypeOfPagesBeingRendered /PrePour store
				17 dict begin
				/PrePourSheetNumWithinPageWithinTitles
				[
				NumSheets 1 sub  PrePourReverseOrder {-1 0} {0 exch 1 exch} ifelse
				{
					/SheetNum exch def
					PrePourPaperType ThisPaperType  eq   PageOrderingPrePourPages SheetNum GetEU  ThisPageOrdering  eq   and  % Note SheetNum not PrePourSheetNum
					{
						SheetLengths SheetNum get 1 sub  PrePourReverseOrder {-1 0} {0 exch 1 exch} ifelse
						{
							WithinPage-WithinTitles-def
							true
							PrePourRemoveDuplicatesByWithinTitles {counttomark 1 sub 1 exch 1 exch {index 2 get WithinTitles eq {pop //false exit} if} for} if
							{ [ SheetNum WithinPage WithinTitles ] } if
						} for  % WithinPage, WithinTitles
					} if  % ... ThisPaperType ... ThisPageOrdering ... and
				} for  % SheetNum
				] def  % /PrePourSheetNumWithinPageWithinTitles

				PrePourSheetNumWithinPageWithinTitles length 1 ge
				{
					PrePourSortByWithinTitles {PrePourSheetNumWithinPageWithinTitles {2 get exch 2 get ge} {2 get exch 2 get le} PrePourReverseOrder {exch} if pop ShellSort} if

					PrePourCollate {/PrePourSheetNum 0 def} if
					{
						/Finished //true def
						AnyFillTextingAtAll DeBugLevel 100 le or {( Main: +PrePour: usertime = ) usertime ToString Concatenate OutputToLog} if
						PrePourSheetNumWithinPageWithinTitles
						{
							aload pop /WithinTitles exch def  /WithinPage exch def  /SheetNum exch def
							/NameNum 0 def
							/ThisName (PrePour holding) def
							0  1  PrePourCollate {PrePourSheetNum PrePourNumCopies lt {0} {-1} ifelse} {PrePourNumCopies 1 sub} ifelse
							{
								//false PageSuppressed {pop exit} if
								PrePourCollate {pop} {/PrePourSheetNum exch def} ifelse
								matrix currentmatrix
								/TypeOfPagesBeingRendered /PrePour store
								/Finished //false def
								//false  //false  MirrorPagesPrePour SheetNum GetEU  //true  PrePourPaperType  PrePourOrientation  SetPaperSize
								//true DefStoreMgns
								DeBugLevel 40 le {(+PaintBackgroundCode) OutputToLog} if   GSave newpath /PaintBackgroundCode load execU GRestore   DeBugLevel 40 le {(-PaintBackgroundCode) OutputToLog} if
								PrePourInnerLoop
								DeBugLevel 40 le {(+PaintForegroundCode) OutputToLog} if   GSave newpath /PaintForegroundCode load execU GRestore   DeBugLevel 40 le {(-PaintForegroundCode) OutputToLog} if
								setmatrix   ShowPage
							} for  % PrePourSheetNum, if not collating
						} forall  % PrePourSheetNumWithinPageWithinTitles
						AnyFillTextingAtAll DeBugLevel 100 le or {( Main: -PrePour: usertime = ) usertime ToString Concatenate OutputToLog} if
						Finished  PrePourCollate not  or {exit} if
						/PrePourSheetNum PrePourSheetNum 1 add def
					} loop  % PrePourSheetNum, if collating
				} if  % PrePourSheetNumWithinPageWithinTitles length 1 ge
				end
			} if  % ...PrePourNumCopies 0 gt...


			% Decanter labels. Because there is, in inner loops, testing of DecanterLabelsPaperType and PageOrderingDecanterLabels, this is not in an ...InnerLoop code.
			{DecanterLabelsNumCopies 1 ge} MightBeTrue
			{
				/DLRotations dup where {pop pop} {[ SheetLengths {array} forall ] def} ifelse
				44 dict begin

				//false
				0  1  NumSheets 1 sub
				{
					/SheetNum exch def
					DecanterLabelsPaperType ThisPaperType  eq   PageOrderingDecanterLabels SheetNum get  ThisPageOrdering  eq   and {pop //true exit} if
				} for  % /SheetNum
				{
					AnyFillTextingAtAll DeBugLevel 100 le or {(+DecanterLabels: usertime = ) usertime ToString Concatenate OutputToLog} if
					/TypeOfPagesBeingRendered /DecanterLabels store  //false //false //false //false DecanterLabelsPaperType /Portrait SetPaperSize   //true DefStoreMgns
					/DecanterLabelsGap 8 def  % embedded constant

					/DecanterLabelsTopTextFontSize 6 def
					HeaderFont DecanterLabelsTopTextFontSize selectfont  % Embedded constant
					/DecanterLabelsTopText load StringWidthRecursive PageWidth MgnL MgnR add sub 2 copy gt {exch div /DecanterLabelsTopTextFontSize dup load 3 -1 roll mul def} {pop pop} ifelse
					HeaderFont DecanterLabelsTopTextFontSize selectfont
					GSave  NullDevice  16384 dup scale  newpath 0 0 moveto
					/DecanterLabelsTopText load  //false CharPathRecursive PathBBox
					GRestore  /DecanterLabelsTopTextT exch def  /DecanterLabelsTopTextR exch def  /DecanterLabelsTopTextB exch def  /DecanterLabelsTopTextL exch def

					/DLBestNumOnPage -1 def
					% Boolean orientations: portrait = true
					/DLBackgroundOrFooters  BackgroundTextsDecanterLabels {//true} {[HeadersAndFooters 6 3 roll pop pop pop] NonEmptyCompoundObject} ifelse  def
					//null //null 0 0  % DLOrientation DLEachOrientation DLNumRows DLNumCols
					0 1 1
					{
						0 eq /DLOrientation exch def  % page
						1 -1 0
						{
							0 eq /DLEachOrientation exch def  % labels. Portrait => DLEachOrientation is true
							/DLNumRows DLOrientation {PageHeight} {PageWidth} ifelse  MgnB MgnT add DecanterLabelsTopTextT DecanterLabelsTopTextB sub add  DLBackgroundOrFooters {DecanterLabelsGap add} if sub
							DLEachOrientation {DecanterLabelsMaxLargerDimension} {DecanterLabelsMaxSmallerDimension} ifelse  DecanterLabelsGap add div floor cvi def
							/DLNumCols DLOrientation {PageWidth} {PageHeight} ifelse  MgnL MgnR add DecanterLabelsGap sub sub
							DLEachOrientation {DecanterLabelsMaxSmallerDimension} {DecanterLabelsMaxLargerDimension} ifelse  DecanterLabelsGap add div floor cvi def
							DLNumRows DLNumCols mul dup DLBestNumOnPage gt {/DLBestNumOnPage exch def pop pop pop pop DLOrientation DLEachOrientation DLNumRows DLNumCols} {pop} ifelse
						} for  % DLEachOrientation
					} for  % DLOrientation
					/DLNumCols exch def  /DLNumRows exch def  /DLEachOrientation exch def  /DLOrientation exch def

					/DLTotalNumCopies 0 def
					/DecanterLabelsThisPageTitles () def
					DLBestNumOnPage 1 lt
					{
						(Error, Decanter labels: the page is too small for DecanterLabelsMaxSmallerDimension and DecanterLabelsMaxLargerDimension: no DLs.) OutputToLog
					}{
						/TypeOfPagesBeingRendered /DecanterLabels store   //false  //false MirrorPagesDecanterLabels SheetNum get //true DecanterLabelsPaperType  DLOrientation {/Portrait} {/Landscape} ifelse  SetPaperSize   //true DefStoreMgns
						/MatrixDL matrix currentmatrix def
						/DLScalingFactor //Infinity def
						0  1  NumSheets 1 sub
						{
							/SheetNum exch def
							DecanterLabelsPaperType ThisPaperType  eq   PageOrderingDecanterLabels SheetNum get  ThisPageOrdering  eq   and
							{
								0  1  SheetLengths SheetNum get 1 sub
								{
									WithinPage-WithinTitles-def
									/DLTotalNumCopies dup load DecanterLabelsNumCopies add def
									/DLScalingP
										DecanterLabelsMaxLargerDimension   TitleAboveBelowOverT SheetNum get WithinPage get TitleAboveBelowOverB SheetNum get WithinPage get sub  //PrinterEpsilon 2 copy lt {exch} if pop  div
										DecanterLabelsMaxSmallerDimension  TitleAboveBelowOverR SheetNum get WithinPage get TitleAboveBelowOverL SheetNum get WithinPage get sub  //PrinterEpsilon 2 copy lt {exch} if pop  div
									2 copy gt {exch} if pop  def  % /DLScalingP
									/DLScalingL
										DecanterLabelsMaxSmallerDimension  TitleAboveBelowOverT SheetNum get WithinPage get TitleAboveBelowOverB SheetNum get WithinPage get sub  //PrinterEpsilon 2 copy lt {exch} if pop  div
										DecanterLabelsMaxLargerDimension   TitleAboveBelowOverR SheetNum get WithinPage get TitleAboveBelowOverL SheetNum get WithinPage get sub  //PrinterEpsilon 2 copy lt {exch} if pop  div
									2 copy gt {exch} if pop  def  % /DLScalingL
									DLRotations SheetNum get  WithinPage
									1 {
										DecanterLabelsOrientation /Automatic eq {DLScalingP DLScalingL ge DLEachOrientation ne put  DLScalingP DLScalingL 2 copy lt {exch} if pop exit} if
										DecanterLabelsOrientation /Landscape eq {DLEachOrientation put  DLScalingL exit} if
										DLEachOrientation not put  DLScalingP exit  % Portrait
									} repeat  % 1
									dup DLScalingFactor lt {/DLScalingFactor exch store} {pop} ifelse
								} for  % WithinPage, WithinTitles
							} if  % ... ThisPaperType ... ThisPageOrdering ... and
						} for  % /SheetNum

						DLTotalNumCopies 1 gt
						{
							DLNumCols DLTotalNumCopies gt {/DLNumCols DLTotalNumCopies def} if
							/DLNumRows DLTotalNumCopies DLNumCols div ceiling cvi dup DLNumRows div ceiling cvi div ceiling cvi def

							/DLNumOnPage 0 def
							/FirstX DLEachOrientation {DecanterLabelsMaxSmallerDimension} {DecanterLabelsMaxLargerDimension} ifelse 2 div MgnL add def
							DLNumCols 1 gt {/StepX PageWidth  DLEachOrientation {DecanterLabelsMaxSmallerDimension} {DecanterLabelsMaxLargerDimension} ifelse MgnL MgnR add add sub  DLNumCols 1 sub div  def} if
							/StepY  PageHeight MgnB MgnT add DecanterLabelsTopTextT DecanterLabelsTopTextB sub add   DLBackgroundOrFooters
								{DLEachOrientation {DecanterLabelsMaxLargerDimension} {DecanterLabelsMaxSmallerDimension} ifelse dup 4 1 roll DLNumRows mul add sub DLNumRows 1 add div add}
								{sub DLNumRows div}
							ifelse neg def  % DLBackgroundOrFooters, /StepY
							/FirstY PageHeight MgnT DecanterLabelsTopTextT DecanterLabelsTopTextB sub add StepY sub DLEachOrientation {DecanterLabelsMaxLargerDimension} {DecanterLabelsMaxSmallerDimension} ifelse 2 div sub sub  def
							0  1  NumSheets 1 sub
							{
								/SheetNum exch def
								DecanterLabelsPaperType ThisPaperType  eq   PageOrderingDecanterLabels SheetNum get  ThisPageOrdering  eq   and
								CircleNonEmpty SheetNum get WithinPage get   and
								{
									0  1  SheetLengths SheetNum get 1 sub
									{
										WithinPage-WithinTitles-def   /DLRSW DLRotations SheetNum get WithinPage get def
										0  1  DecanterLabelsNumCopies 1 sub
										{
											//false PageSuppressed {pop exit} if
											0 eq
											{
												/DecanterLabelsThisPageTitles dup load [ exch dup length 0 gt {(; )} if  Titles WithinTitles get ] PDFDocEncodingify  def
												DecanterLabelsGuillotineMarks  DLNumCols 1 ge  DLNumRows 1 ge  and and
												{
													0  1  DLNumCols 1 sub
													{
														StepX mul FirstX add DLEachOrientation {DecanterLabelsMaxSmallerDimension} {DecanterLabelsMaxLargerDimension} ifelse 2 div  2 copy add 3 1 roll sub 2 copy 3 -1 roll
														2 {MgnB      moveto 0 4 rlineto  PageHeight MgnT sub moveto 0 DecanterLabelsTopTextB DecanterLabelsTopTextT sub -2 add -4 2 copy gt {exch} if pop rlineto} repeat  % Embedded constants
													} for  % columns
													0  1  DLNumRows 1 sub
													{
														StepY mul FirstY add DLEachOrientation {DecanterLabelsMaxLargerDimension} {DecanterLabelsMaxSmallerDimension} ifelse 2 div  2 copy add 3 1 roll sub 2 copy 3 -1 roll
														2 {MgnL exch moveto 4 0 rlineto  PageWidth  MgnR sub exch moveto -4 0 rlineto} repeat  % Embedded constants
													} for  % rows
													0.6 setgray  0.24 dup currentlinewidth ne {setlinewidth} {pop} ifelse  currentdash pop length 0 ne {[] 0 setdash} if  0 currentlinecap ne {0 setlinecap} if  stroke  % Embedded constants
												} if  % DLNumOnPage 0 eq  DecanterLabelsGuillotineMarks ... and
											} if  % 0 eq

											/DLX  DLNumCols 1 gt {DLNumOnPage DLNumCols mod  StepX mul FirstX add} {PageWidth  MgnL MgnR sub add 2 div} ifelse  def
											/DLY  DLNumRows 1 gt {DLNumOnPage DLNumCols idiv StepY mul FirstY add} {PageHeight MgnB MgnT sub add 2 div} ifelse  def
											/DLDashInk DecanterLabelsMaxSmallerDimension DecanterLabelsMaxLargerDimension add dup 12 div ceiling cvi div 3 div def
											mark
												/Rect [
													DLX  DLEachOrientation {DecanterLabelsMaxSmallerDimension} {DecanterLabelsMaxLargerDimension} ifelse 2 div  2 copy sub 3 1 roll add
													DLY  DLEachOrientation {DecanterLabelsMaxLargerDimension} {DecanterLabelsMaxSmallerDimension} ifelse 2 div  2 copy sub 4 1 roll add
												]
												/Vertices [ 2 index aload pop 4 copy 6 -2 roll 5 -2 roll exch  DLRSW {2 copy 0.5 //PrinterEpsilon add add} {8 -2 roll 2 copy exch 0.5 //PrinterEpsilon add add exch} ifelse 10 4 roll ]  % +width/2 to bring into corner
												/Subtype /PolyLine
												/BS  << /Type /Border  /W 1  /S /D  /D [DLDashInk dup 2 mul] >>
												/Subj [ () Circlearrays WithinTitles GetEU {(  )} forall pop ] PDFDocEncodingify
												/ModDate ParametersVersionDateTimeAdobeFormat
												/F 64 128 add  % ReadOnly + Locked. PDFReference16.pdf page 574
												/Color [ 1 0.8 0.4 ]
											/ANN pdfmark
											mark
												/Rect [
													DLX  DLEachOrientation {DecanterLabelsMaxSmallerDimension} {DecanterLabelsMaxLargerDimension} ifelse 2 div
													DLRSW
														{add dup  DLY  DLEachOrientation {DecanterLabelsMaxLargerDimension} {DecanterLabelsMaxSmallerDimension} ifelse 2 div  2 copy sub  4 1 roll add}
														{2 copy  sub  3 1 roll add   DLY  DLEachOrientation {DecanterLabelsMaxLargerDimension} {DecanterLabelsMaxSmallerDimension} ifelse 2 div sub dup 3 1 roll}
													ifelse  % DLRotations
												]
												/Vertices [
													2 index aload pop  DLRSW {3 -1 roll DLDashInk 2 mul 0.5 add add 3 1 roll} {4 -1 roll DLDashInk 2 mul 0.5 add add 4 1 roll} ifelse  % Simulating dash phase, needing a half width of previous ANN
													2 copy DLRSW {exch //PrinterEpsilon 0.75 add sub exch} {//PrinterEpsilon 0.75 add add} ifelse  % Corner a mite larger than half line width, so that the pieces seem properly joined
												]
												/Subtype /PolyLine
												/BS  << /Type /Border  /W 1.5  /S /D  /D [DLDashInk dup 2 mul] >>  % PDF 32000-1:2008, p387: "The dash phase is not specified and shall be assumed to be 0."
												/Subj [ () Circlearrays WithinTitles GetEU {(  )} forall pop ] PDFDocEncodingify
												/ModDate ParametersVersionDateTimeAdobeFormat
												/F 64 128 add  % ReadOnly + Locked. PDFReference16.pdf page 574
												/Color [ 1 0.2 0.1 ]
											/ANN pdfmark

											DLX DLY translate   DLScalingFactor dup scale  DLRSW {90 rotate} if
											/MatrixGlasses matrix currentmatrix def
											/TypeOfPagesBeingRendered /Glasses store

											/TypeOfPagesBeingRendered /Glasses store  //false //false //false //false PaperType Orientation SetPaperSize   //true DefStoreMgns  MatrixGlasses setmatrix  newpath
											TitleAboveBelowOverR SheetNum get WithinPage get TitleAboveBelowOverL SheetNum get WithinPage get add -2 div
											TitleAboveBelowOverT SheetNum get WithinPage get TitleAboveBelowOverB SheetNum get WithinPage get add -2 div translate
											BackgroundTextsDecanterLabels
											{
												ClipSave matrix currentmatrix dup
												/TypeOfPagesBeingRendered /DecanterLabels store   //false //false //false //false DecanterLabelsPaperType /Portrait SetPaperSize   //true DefStoreMgns  MatrixDL setmatrix  newpath
												DLNumOnPage DLNumCols mod 0 eq {MgnL} {DLX StepX 2 div sub} ifelse    DLNumOnPage DLNumCols idiv DLNumRows 1 sub eq {MgnB} {DLY StepY 2 div add} ifelse
												DLNumOnPage 1 add DLNumCols mod 0 eq {PageWidth MgnR sub} {DLX StepX 2 div add} ifelse 2 index sub    DLNumOnPage DLNumCols idiv 0 eq {PageHeight MgnT sub} {DLY StepY 2 div sub} ifelse 2 index sub  rectclip newpath setmatrix
												/TypeOfPagesBeingRendered /Glasses store  //false //false //false //false PaperType Orientation SetPaperSize  //true DefStoreMgns   newpath
												RotationTitlesAboveBelowOverCirclearray dup 0 ne {neg rotate} {pop} ifelse
												GlassPositions SheetNum get WithinPage get {neg} forall translate
												BackgroundTextsGlassesForms SheetNum get execform
												setmatrix ClipRestore
											} if  % BackgroundTextsDecanterLabels
											CrossHatchingInside DecanterLabelsShowCrossHatchingInside and  OutlineTitles DecanterLabelsShowOutlineTitles and  or  /PaintBackgroundInsideGlassCircles load length 0 gt or
											{
												matrix currentmatrix ClipSave  MatrixDL setmatrix
												DecanterLabelsMaxLargerDimension DecanterLabelsMaxSmallerDimension DLEachOrientation {exch} if
												DLX 2 index 2 div sub  DLY 2 index 2 div sub  4 2 roll rectclip newpath  dup setmatrix
												/PaintBackgroundInsideGlassCircles load dup length 0 gt
													{/TypeOfPagesBeingRendered /DecanterLabels store GSave newpath 0 0 Radii SheetNum get 0 360 arc closepath clip newpath execU GRestore}
													{pop}
												ifelse  % PaintBackgroundInsideGlassCircles ... length 0 gt
												/TypeOfPagesBeingRendered /Glasses store
												OutlineTitles DecanterLabelsShowOutlineTitles and {OutlineForms SheetNum get WithinPage get   execform} if
												Spirals {SpiralForms SheetNum get WithinPage get execform} if
												CrossHatchingInside DecanterLabelsShowCrossHatchingInside and {CrossHatchingInsideForms SheetNum get WithinPage get   execform} if
												setmatrix ClipRestore
											} if  % CrossHatchingInside ... OutlineTitles ... or ... PaintBackgroundInsideGlassCircles ... or
											TitleAboveBelowOverForms SheetNum get WithinPage get  execform  AnnotateGlass
											/TypeOfPagesBeingRendered /DecanterLabels store  //false //false //false //false DecanterLabelsPaperType  DLOrientation {/Portrait} {/Landscape} ifelse  SetPaperSize   //true DefStoreMgns    MatrixDL setmatrix
											DLNumOnPage 0 eq {HeadersAndFooters PaintHeadersFooters   MgnL PageHeight MgnT DecanterLabelsTopTextT add sub  moveto  HeaderFont DecanterLabelsTopTextFontSize selectfont  DecanterLabelsTopText ShowRecursive} if
											/DLNumOnPage dup load 1 add def    DLNumOnPage DLNumRows DLNumCols mul ge {ShowPage  /DLNumOnPage 0 store  /DecanterLabelsThisPageTitles () store} if
										} for  % DecanterLabelsNumCopies
									} for  % WithinPage, WithinTitles
								} if  % ... ThisPaperType ... ThisPageOrdering ... and CircleNonEmpty ... and
							} for  % /SheetNum
							DLNumOnPage 0 gt {ShowPage} if
						} if  % DLTotalNumCopies 1 gt
					} ifelse  % DLBestNumOnPage 1 lt
				} if  % ... ThisPaperType ... ThisPageOrdering ... and
				end
			} if  % ... DecanterLabelsNumCopies 1 ge ...


			% Sticky labels, usually for bottles, sometimes for glasses.
			% Because there is, in inner loops, testing of StickyLabelsPaperType and PageOrderingStickyLabels, this is not in an ...InnerLoop code.
			StickyLabelsTypes
			{
				60 dict begin
				/StickyLabelsTypeThis exch def
				{StickyLabelsNumCopies 1 ge} MightBeTrue
				{
					AnyFillTextingAtAll DeBugLevel 100 le or {(+StickyLabels: usertime = ) usertime ToString Concatenate OutputToLog} if
					/TypeOfPagesBeingRendered /StickyLabels store

					//false //false //false //false StickyLabelsPaperType /Portrait SetPaperSize   //true DefStoreMgns
					/StickyLabelsWithPagePortraitHeight  PageHeight  StickyLabelsWithPagePortraitGapT StickyLabelsWithPagePortraitGapB add sub
					StickyLabelsWithPagePortraitGapBetweenRows StickyLabelsWithPagePortraitNumRows 1 sub mul sub  StickyLabelsWithPagePortraitNumRows div  def
					/StickyLabelsWithPagePortraitWidth   PageWidth   StickyLabelsWithPagePortraitGapL StickyLabelsWithPagePortraitGapR add sub
					StickyLabelsWithPagePortraitGapBetweenCols StickyLabelsWithPagePortraitNumCols 1 sub mul sub  StickyLabelsWithPagePortraitNumCols div  def

					DeBugLevel 10 le {( StickyLabels: StringAnnotationPDF computation) OutputToLog} if
					/StringAnnotationPDF
						mark  (For )
						StickyLabelsPaperType execU
						( page of labels. When held portrait there are ) StickyLabelsWithPagePortraitNumCols ( columns separated by gaps of ) StickyLabelsWithPagePortraitGapBetweenCols (pt; and )
						StickyLabelsWithPagePortraitNumRows ( rows separated by gaps of ) StickyLabelsWithPagePortraitGapBetweenRows
						(pt. Margins: top ) StickyLabelsWithPagePortraitGapT (pt; bottom ) StickyLabelsWithPagePortraitGapB (pt; left ) StickyLabelsWithPagePortraitGapL (pt; right ) StickyLabelsWithPagePortraitGapR
						(pt.\r\n\r\nIn some PDF viewers pale lines are visible. These make more obvious the assumed label size and paddings, but do not print.)
						<< /SheetNum 0  /TastingSheetNum 0 >> begin  % in case headers reference same
						HeadersAndFooters 6 3 roll
						3 copy [ 4 1 roll ] NonEmptyCompoundObject {[(\r\n\r\nHeader: ) 5 2 roll (     ) 3 1 roll 2 index exch] PDFDocEncodingify 4 1 roll} {pop pop pop} ifelse
						3 copy [ 4 1 roll ] NonEmptyCompoundObject {[(\r\n\r\nFooter: ) 5 2 roll (     ) 3 1 roll 2 index exch] PDFDocEncodingify         } {pop pop pop} ifelse
						ConcatenateToMark
						end  % << /SheetNum 0  /TastingSheetNum 0 >>
					def  % /StringAnnotationPDF
					/AnnotatePDF {
						//false PageSuppressed not
						{
							mark
								/Rect [ 0  PageHeight 2 div  2 copy ]
								/Subtype /Text
								/Contents StringAnnotationPDF
								/Open //false
								/Title (The labels)
								/ModDate ParametersVersionDateTimeAdobeFormat
								/F 64 128 add  % ReadOnly + Locked. PDFReference16.pdf page 574
							/ANN pdfmark
						} if  % PageSuppressed not
					} bind def  % /AnnotatePDF

					DeBugLevel 10 le {( StickyLabels: compute StickyLabelsSheetNumWithinPageWithinTitles) OutputToLog} if
					/StickyLabelsSheetNumWithinPageWithinTitles
					[
					NumSheets 1 sub  StickyLabelsReverseOrder {-1 0} {0 exch 1 exch} ifelse
					{
						/SheetNum exch def
						StickyLabelsPaperType ThisPaperType  eq   PageOrderingStickyLabels SheetNum GetEU  ThisPageOrdering  eq   and  % Note SheetNum not StickyLabelsSheetNum
						{
							SheetLengths SheetNum get 1 sub  StickyLabelsReverseOrder {-1 0} {0 exch 1 exch} ifelse
							{
								WithinPage-WithinTitles-def
								true   StickyLabelsRemoveDuplicatesByWithinTitles {counttomark 1 sub 1 exch 1 exch {index 2 get WithinTitles eq {pop //false exit} if} for} if
								{ [ SheetNum WithinPage WithinTitles ] } if
							} for  % WithinPage, WithinTitles
						} if  % ... ThisPaperType ... ThisPageOrdering ... and
					} for  % SheetNum
					] def  % /StickyLabelsSheetNumWithinPageWithinTitles
					StickyLabelsSortByWithinTitles {StickyLabelsSheetNumWithinPageWithinTitles {2 get exch 2 get ge} {2 get exch 2 get le} StickyLabelsReverseOrder {exch} if pop ShellSort} if

					DeBugLevel 10 le {( StickyLabels: painting) OutputToLog} if
					/StickyLabelsNumPaintedOnCurrentPage 0 def
					/StickyLabelsPositionOnPage where {pop} {/StickyLabelsPositionOnPage StickyLabelsFirstPageStartPosition StickyLabelsWithPagePortraitNumRows StickyLabelsWithPagePortraitNumCols mul mod def} ifelse
					/StickyLabelsPaperSizeSet //false def

					matrix currentmatrix
					/StickyLabelsThisPageTitlesNames () def
					/StickyLabelsThisPageTitlesNamesUsed [ StickyLabelsByNameWhichReplaceCirclearrays {NamesStickyLabels} {Titles} ifelse length {false} repeat ] def
					0  1  StickyLabelsByNameWhichReplaceCirclearrays  StickyLabelsNamesChangeFaster not and {NamesStickyLabels length 1 sub} {0} ifelse
					{
						StickyLabelsByNameWhichReplaceCirclearrays  StickyLabelsNamesChangeFaster not and
						{
							/NameNum exch def
							/ThisName  NamesStickyLabels NameNum get  def
						}{
							pop
							/NameNum 0 def
						} ifelse  % StickyLabelsByNameWhichReplaceCirclearrays
						0  1  StickyLabelsSheetNumWithinPageWithinTitles length 1 sub
						{
							/StickieNum exch def
							0  1  StickyLabelsByNameWhichReplaceCirclearrays  StickyLabelsNamesChangeFaster and {NamesStickyLabels length 1 sub} {0} ifelse
							{
								StickyLabelsByNameWhichReplaceCirclearrays  StickyLabelsNamesChangeFaster and
								{
									/NameNum exch def
									/ThisName  NamesStickyLabels NameNum get  def
								}{
									pop
									/NameNum 0 def
								} ifelse  % StickyLabelsByNameWhichReplaceCirclearrays

								StickyLabelsSheetNumWithinPageWithinTitles StickieNum get aload pop /WithinTitles exch def  /WithinPage exch def  /SheetNum exch def   //true DefStoreMgns
								StickyLabelsPaperType ThisPaperType  eq   PageOrderingStickyLabels SheetNum GetEU  ThisPageOrdering  eq   and  % Note SheetNum. Also note that 'PageOrderingStickyLabels SheetNum get' could be code.
								{
									StickyLabelsPaperSizeSet not {//false //false MirrorPagesStickyLabels SheetNum GetEU //true StickyLabelsPaperType /Portrait SetPaperSize  /StickyLabelsPaperSizeSet //true def} if
									/StickyLabelsCirclearraysMaxFontSize 7 def  % Embedded constant: max 7pt
									0  1  StickyLabelsNumCopies 1 sub  % StickyLabelsNumCopies might be code referencing WithinPage or WithinTitles or NameNum
									{
										//false PageSuppressed {pop exit} if
										/StickyLabelCopyNum exch def

										StickyLabelsPositionOnPage  StickyLabelsWithPagePortraitNumRows StickyLabelsWithPagePortraitNumCols mul  ge
										{
											AnnotatePDF ShowPage   /StickyLabelsNumPaintedOnCurrentPage 0 store   /StickyLabelsPositionOnPage 0 store
											/StickyLabelsThisPageTitlesNames () def   StickyLabelsThisPageTitlesNamesUsed dup length 1 sub -1 0 {1 index exch //false put} for pop
										} if  % page full

										StickyLabelsWithPagePortraitHeight StickyLabelsPaddingWithPagePortraitTB 2 mul le
											{(Error: StickyLabelsWithPagePortraitHeight = ) StickyLabelsWithPagePortraitHeight ToString Concatenate ( < 2*StickyLabelsPaddingWithPagePortraitTB) Concatenate OutputToLog stop}
										if
										StickyLabelsWithPagePortraitWidth  StickyLabelsPaddingWithPagePortraitRL 2 mul le
											{(Error: StickyLabelsWithPagePortraitWidth = )  StickyLabelsWithPagePortraitWidth  ToString Concatenate ( < 2*StickyLabelsPaddingWithPagePortraitRL) Concatenate OutputToLog stop}
										if

										/StickyLabelX
											StickyLabelsPositionOnPage  StickyLabelsColumnsChangeFaster {StickyLabelsWithPagePortraitNumCols mod} {StickyLabelsWithPagePortraitNumRows idiv} ifelse
											StickyLabelsWithPagePortraitGapBetweenCols StickyLabelsWithPagePortraitWidth add mul
											StickyLabelsWithPagePortraitGapL StickyLabelsWithPagePortraitWidth 2 div add  add
										def  % /StickyLabelX
										/StickyLabelY
											StickyLabelsWithPagePortraitNumRows 1 sub  StickyLabelsPositionOnPage  StickyLabelsColumnsChangeFaster {StickyLabelsWithPagePortraitNumCols idiv} {StickyLabelsWithPagePortraitNumRows mod} ifelse  sub
											StickyLabelsWithPagePortraitGapBetweenRows StickyLabelsWithPagePortraitHeight add mul
											StickyLabelsWithPagePortraitGapB StickyLabelsWithPagePortraitHeight 2 div add  add
										def  % /StickyLabelY

										mark
											/Rect [
												StickyLabelX StickyLabelsWithPagePortraitWidth 2 div sub
												StickyLabelY StickyLabelsWithPagePortraitHeight 2 div sub
												StickyLabelX StickyLabelsWithPagePortraitWidth 2 div add
												StickyLabelY StickyLabelsWithPagePortraitHeight 2 div add
											]
											/Subtype /Polygon
											/BS  << /Type /Border  /W 1  /S /S >>
											/Subj [ () CirclearraysStickyLabels WithinTitles GetEU {(  )} forall pop ] PDFDocEncodingify
											/ModDate ParametersVersionDateTimeAdobeFormat
											/F 64 128 add  % ReadOnly + Locked. PDFReference16.pdf page 574
										counttomark 1 add copy
											/Vertices [
												StickyLabelX StickyLabelsWithPagePortraitWidth 2 div sub  StickyLabelY StickyLabelsWithPagePortraitHeight 2 div sub   2 copy StickyLabelsPaddingWithPagePortraitTB add 4 2 roll exch StickyLabelsPaddingWithPagePortraitRL add exch
												StickyLabelX StickyLabelsWithPagePortraitWidth 2 div add  StickyLabelY StickyLabelsWithPagePortraitHeight 2 div sub   2 copy exch StickyLabelsPaddingWithPagePortraitRL sub exch 4 2 roll StickyLabelsPaddingWithPagePortraitTB add
												StickyLabelX StickyLabelsWithPagePortraitWidth 2 div add  StickyLabelY StickyLabelsWithPagePortraitHeight 2 div add   2 copy StickyLabelsPaddingWithPagePortraitTB sub 4 2 roll exch StickyLabelsPaddingWithPagePortraitRL sub exch
												StickyLabelX StickyLabelsWithPagePortraitWidth 2 div sub  StickyLabelY StickyLabelsWithPagePortraitHeight 2 div add   2 copy exch StickyLabelsPaddingWithPagePortraitRL add exch 4 2 roll StickyLabelsPaddingWithPagePortraitTB sub
											]
											/Color [ 0.6 0.6 1.0 ]
										/ANN pdfmark
											/Vertices [
												StickyLabelX StickyLabelsWithPagePortraitWidth 2 div sub StickyLabelsPaddingWithPagePortraitRL add  StickyLabelY StickyLabelsWithPagePortraitHeight 2 div sub StickyLabelsPaddingWithPagePortraitTB add
												StickyLabelX StickyLabelsWithPagePortraitWidth 2 div add StickyLabelsPaddingWithPagePortraitRL sub  StickyLabelY StickyLabelsWithPagePortraitHeight 2 div sub StickyLabelsPaddingWithPagePortraitTB add
												StickyLabelX StickyLabelsWithPagePortraitWidth 2 div add StickyLabelsPaddingWithPagePortraitRL sub  StickyLabelY StickyLabelsWithPagePortraitHeight 2 div add StickyLabelsPaddingWithPagePortraitTB sub
												StickyLabelX StickyLabelsWithPagePortraitWidth 2 div sub StickyLabelsPaddingWithPagePortraitRL add  StickyLabelY StickyLabelsWithPagePortraitHeight 2 div add StickyLabelsPaddingWithPagePortraitTB sub
											]
											/Color [ 0.8 1.0 0.8 ]
										/ANN pdfmark

										/StickyTextUnscaledHeight TitleAboveBelowOverT SheetNum get WithinPage get TitleAboveBelowOverB SheetNum get WithinPage get sub def
										StickyTextUnscaledHeight 0 lt {(Error: StickyTextUnscaledHeight = ) StickyTextUnscaledHeight ToString Concatenate OutputToLog stop} if

										/StickyTextUnscaledWidth TitleAboveBelowOverR SheetNum get WithinPage get TitleAboveBelowOverL SheetNum get WithinPage get sub def
										StickyTextUnscaledWidth 0 lt {(Error: StickyTextUnscaledWidth = ) StickyTextUnscaledHeight ToString Concatenate OutputToLog stop} if

										/StickyLabelsRotate
										StickyLabelsWithPagePortraitWidth  StickyLabelsPaddingWithPagePortraitRL 2 mul sub
										StickyLabelsWithPagePortraitHeight StickyLabelsPaddingWithPagePortraitTB 2 mul sub
										StickyLabelsOrientation /Automatic ne {2 copy} if
										StickyTextUnscaledWidth  //PrinterEpsilon add
										StickyTextUnscaledHeight //PrinterEpsilon add
										4 copy
										3 -1 roll StickyLabelsCirclearraysMaxFontSize 2 mul sub exch div 3 1 roll div  2 copy gt {exch} if pop  dup 1 gt {pop 1} if  /ScalingFactorNotRotated exch def
										4 -1 roll StickyLabelsCirclearraysMaxFontSize 2 mul sub exch div 3 1 roll div  2 copy gt {exch} if pop  dup 1 gt {pop 1} if  /ScalingFactorRotated exch def
										StickyLabelsOrientation /Automatic eq
										{
											% Prefer landscape to give extras space for CirclearraysStickyLabels. Use Portrait only if improves ScalingFactor by a factor of at least 1 (previous code had SqrtSqrt2).
											ScalingFactorRotated  ScalingFactorNotRotated 1
											StickyLabelsWithPagePortraitHeight StickyLabelsWithPagePortraitWidth gt {div} {mul} ifelse
											gt
										}{
											StickyLabelsOrientation /Landscape eq {lt} {gt} ifelse
										} ifelse
										def  % /StickyLabelsRotate, StickyLabelsRotate

										StickyLabelsWithPagePortraitHeight StickyLabelsWithPagePortraitWidth StickyLabelsRotate {exch} if /StickyLabelsWidth exch def /StickyLabelsHeight exch def
										StickyLabelsPaddingWithPagePortraitTB StickyLabelsPaddingWithPagePortraitRL StickyLabelsRotate {exch} if /StickyLabelsPaddingRL exch def /StickyLabelsPaddingTB exch def

										/ScalingFactor  StickyLabelsRotate {ScalingFactorRotated} {ScalingFactorNotRotated} ifelse  def

										matrix currentmatrix
										StickyLabelX StickyLabelY translate   StickyLabelsRotate {90 rotate} if   ScalingFactor dup scale
										0  TitleAboveBelowOverT SheetNum get WithinPage get TitleAboveBelowOverB SheetNum get WithinPage get add 2 div neg  translate
										/StickyLabelsGlassesMatrix matrix currentmatrix def
										setmatrix

										BackgroundTextsGlasses {StickyLabelsShowBackgroundTexts} {//false} ifelse   Droplets {StickyLabelsShowDroplets or} if
										{
											/TypeOfPagesBeingRendered /Glasses store   //false //false //false //false PaperType Orientation SetPaperSize  //false DefStoreMgns
											ClipSave  matrix currentmatrix
											StickyLabelX StickyLabelsWithPagePortraitWidth 2 div sub StickyLabelsPaddingWithPagePortraitRL add
											StickyLabelY StickyLabelsWithPagePortraitHeight 2 div sub StickyLabelsPaddingWithPagePortraitTB add
											StickyLabelsWithPagePortraitWidth  StickyLabelsPaddingWithPagePortraitRL 2 mul sub
											StickyLabelsWithPagePortraitHeight StickyLabelsPaddingWithPagePortraitTB 2 mul sub  rectclip newpath
											StickyLabelsGlassesMatrix setmatrix
											RotationTitlesAboveBelowOverCirclearray dup 0 ne {neg rotate} {pop} ifelse
											GlassPositions SheetNum get WithinPage get {neg} forall translate
											BackgroundTextsGlasses StickyLabelsShowBackgroundTexts and {BackgroundTextsGlassesForms SheetNum get execform} if
											Droplets StickyLabelsShowDroplets and
											{
												SheetNum
												RotationTitlesAboveBelowOverCirclearray 0 eq
												{
													GSave  1 index setmatrix  newpath
													StickyLabelX StickyLabelsWithPagePortraitWidth 2 div sub StickyLabelY StickyLabelsWithPagePortraitHeight 2 div sub moveto
													StickyLabelX StickyLabelsWithPagePortraitWidth 2 div sub StickyLabelY StickyLabelsWithPagePortraitHeight 2 div add lineto
													StickyLabelX StickyLabelsWithPagePortraitWidth 2 div add StickyLabelY StickyLabelsWithPagePortraitHeight 2 div add lineto
													StickyLabelX StickyLabelsWithPagePortraitWidth 2 div add StickyLabelY StickyLabelsWithPagePortraitHeight 2 div sub lineto
													StickyLabelsGlassesMatrix setmatrix  GlassPositions SheetNum get WithinPage get {neg} forall translate  pathbbox  GRestore
												} {//InfinityNeg  //InfinityNeg  //Infinity  //Infinity} ifelse  % RotationTitlesAboveBelowOverCirclearray 0 eq
												WithinPage  DropletsPaint
											} if  % Droplets StickyLabelsShowDroplets and
											setmatrix ClipRestore
											/TypeOfPagesBeingRendered /StickyLabels store   //false //false //false //false StickyLabelsPaperType /Portrait SetPaperSize  //false DefStoreMgns
										} if  % BackgroundTextsGlasses ... StickyLabelsShowBackgroundTexts ... Droplets ...StickyLabelsShowDroplets or

										StickyLabelsRotate
										{
											matrix currentmatrix
											StickyLabelX StickyLabelY translate  90 rotate  StickyLabelX neg StickyLabelY neg translate
										} if  % StickyLabelsRotate

										0  1  1
										{
											/Top0Bottom1 exch def
											StickyLabelsByNameWhichReplaceCirclearrays Top0Bottom1 1 eq and
												{/ThisFont NamesFont      def  /ThisCirclearray  [/ThisName load]              def}
												{/ThisFont CircletextFont def  /ThisCirclearray  CirclearraysStickyLabels WithinTitles get def}
											ifelse
											/ThisCirclearray load  NonEmptyCompoundObject
											{
												/StickyLabelsCircletextFontSize  % Embedded constant: max 0.25 * TitleFontSize
													StickyLabelsCirclearraysMaxFontSize NamesFontSizeMax  2 copy gt {exch} if pop
													Titles      WithinTitles get NonEmptyCompoundObject {TitleFontSizes      SheetNum get WithinPage get  4 div  2 copy gt {exch} if pop} if
													Abovetitles WithinTitles get NonEmptyCompoundObject {AbovetitleFontSizes SheetNum get WithinPage get  4 div  2 copy gt {exch} if pop} if
													Belowtitles WithinTitles get NonEmptyCompoundObject {BelowtitleFontSizes SheetNum get WithinPage get  4 div  2 copy gt {exch} if pop} if
													Overtitles  WithinTitles get NonEmptyCompoundObject {OvertitleFontSizes  SheetNum get WithinPage get  4 div  2 copy gt {exch} if pop} if
												def  % /StickyLabelsCircletextFontSize
												ThisFont StickyLabelsCircletextFontSize selectfont
												newpath  GSave  NullDevice 16384 dup scale 0 0 moveto  /ThisCirclearray load //true CharPathRecursive  PathBBox  GRestore
												/CirclearrayT exch def  /CirclearrayR exch def  /CirclearrayB exch def  /CirclearrayL exch def

												/StickyLabelCirclearrayBaseline
												Top0Bottom1 0 eq
												{
													StickyLabelY  TitleAboveBelowOverT SheetNum get WithinPage get TitleAboveBelowOverB SheetNum get WithinPage get sub 2 div  ScalingFactor mul add
													StickyLabelY  StickyLabelsHeight 2 div StickyLabelsPaddingTB sub add   add  CirclearrayT CirclearrayB add sub  2 div
													StickyLabelY  StickyLabelsHeight 2 div StickyLabelsPaddingTB sub add   CirclearrayT  sub
													2 copy gt {exch} if pop
													dup CirclearrayB add 0.24 sub  /BBYT exch def  % embedded constant
												}{
													StickyLabelY  TitleAboveBelowOverT SheetNum get WithinPage get TitleAboveBelowOverB SheetNum get WithinPage get sub 2 div  ScalingFactor mul sub
													StickyLabelY  StickyLabelsHeight 2 div StickyLabelsPaddingTB sub sub   add  CirclearrayT CirclearrayB add sub  2 div
													StickyLabelY  StickyLabelsHeight 2 div StickyLabelsPaddingTB sub sub   CirclearrayB  sub
													2 copy lt {exch} if pop
													dup CirclearrayT add 0.24 add  /BBYB exch def  % embedded constant
												} ifelse  def  % Top0Bottom1 0 eq, /StickyLabelCirclearrayBaseline

												ThisFont StickyLabelsCircletextFontSize selectfont
												/CirclearraySpacesWidth  ( ) stringwidth pop  CircletextsMinNumSpacesBetween  mul  def
												/CirclearrayWidth
													CirclearrayR CirclearrayL sub
													CirclearraySpacesWidth  /ThisCirclearray load execU length 1 sub  mul add
												def  % /CirclearrayWidth
												StickyLabelsWidth StickyLabelsPaddingRL 2 mul sub  CirclearrayWidth //PrinterEpsilon add  div
												dup 1 ge {pop}
												{
													dup dup dup dup dup
													CirclearrayT mul /CirclearrayT exch def
													CirclearrayR mul /CirclearrayR exch def
													CirclearrayB mul /CirclearrayB exch def
													CirclearrayL mul /CirclearrayL exch def
													CirclearraySpacesWidth mul /CirclearraySpacesWidth exch def
													StickyLabelsCircletextFontSize mul /StickyLabelsCircletextFontSize exch def
													ThisFont StickyLabelsCircletextFontSize selectfont
													/CirclearrayWidth  StickyLabelsWidth  StickyLabelsPaddingRL 2 mul sub  //PrinterEpsilon sub  def
												} ifelse  % ... 1 ge
												StickyLabelsWidth StickyLabelsPaddingRL 2 mul sub  CirclearrayWidth //PrinterEpsilon add  div
												dup 1 lt
												{
													dup CirclearrayT mul /CirclearrayT exch def
													dup CirclearrayR mul /CirclearrayR exch def
													dup CirclearrayB mul /CirclearrayB exch def
													dup CirclearrayL mul /CirclearrayL exch def
													dup StickyLabelsCircletextFontSize mul /StickyLabelsCircletextFontSize exch def
													dup CirclearrayWidth mul /CirclearrayWidth exch def
													CirclearraySpacesWidth mul /CirclearraySpacesWidth exch def
													ThisFont StickyLabelsCircletextFontSize selectfont
												} {pop} ifelse
												/CirclearrayN
													StickyLabelsWidth StickyLabelsPaddingRL 2 mul sub  CirclearraySpacesWidth  add
													CirclearrayWidth CirclearraySpacesWidth add  dup 0 gt {div} {pop pop 1} ifelse
													dup 4 gt {4 sub 0.75 mul 4 add} if  % Embedded constant
													cvi  dup 1 lt {pop 1} if
												def  % /CirclearrayN
												StickyLabelX  CirclearrayWidth CirclearrayN mul  CirclearraySpacesWidth CirclearrayN 1 sub mul  add 2 div sub  StickyLabelCirclearrayBaseline moveto
												CirclearrayN
												{
													/ThisCirclearray load execU
													{
														ThisFont StickyLabelsCircletextFontSize selectfont  0 setgray
														ShowRecursive
														CirclearraySpacesWidth 0 rmoveto
													} forall  % /ThisCirclearray load execU
												} repeat  % CirclearrayN
											} if  % /ThisCirclearray load  NonEmptyCompoundObject
										} for  % Top0Bottom1

										StickyLabelsShowCirclearraysInCircle  /PaintBackgroundInsideGlassCircles load length 0 gt  or
										{
											/TypeOfPagesBeingRendered /Glasses store   //false //false //false //false PaperType Orientation SetPaperSize  //false DefStoreMgns
											matrix currentmatrix  ClipSave
											StickyLabelsRotate
											{
												StickyLabelX StickyLabelsWithPagePortraitHeight 2 div sub StickyLabelsPaddingWithPagePortraitTB add
												StickyLabelsWithPagePortraitHeight  StickyLabelsPaddingWithPagePortraitTB 2 mul sub
											}{
												StickyLabelX StickyLabelsWithPagePortraitWidth 2 div sub StickyLabelsPaddingWithPagePortraitRL add
												StickyLabelsWithPagePortraitWidth  StickyLabelsPaddingWithPagePortraitRL 2 mul sub
											} ifelse  % StickyLabelsRotate
											BBYB  exch BBYT BBYB sub rectclip newpath
											/PaintBackgroundInsideGlassCircles load dup length 0 gt
												{/TypeOfPagesBeingRendered /StickyLabels store StickyLabelsGlassesMatrix setmatrix GSave newpath 0 0 Radii SheetNum get 0 360 arc closepath clip newpath execU GRestore}
												{pop}
											ifelse  % PaintBackgroundInsideGlassCircles ... length 0 gt
											/TypeOfPagesBeingRendered /Glasses store
											StickyLabelsShowCirclearraysInCircle {StickyLabelsGlassesMatrix setmatrix  CirclearrayForms SheetNum get WithinPage get dup /PaintProc get exec} if
											ClipRestore  setmatrix
										} if  % StickyLabelsShowCirclearraysInCircle  /PaintBackgroundInsideGlassCircles load length 0 gt  or
										% Problem here: vertical position is slightly wrong. Perhaps TitleOffsetsProportionFontSizeVertical somehow needs to be used?
										matrix currentmatrix   StickyLabelX StickyLabelY translate   ScalingFactor dup scale
										0  TitleAboveBelowOverT SheetNum get WithinPage get TitleAboveBelowOverB SheetNum get WithinPage get add 2 div neg  translate
										TitleAboveBelowOverForms SheetNum get WithinPage get  execform  AnnotateGlass
										/TypeOfPagesBeingRendered /StickyLabels store
										//false //false //false //false StickyLabelsPaperType /Portrait SetPaperSize  //false DefStoreMgns
										setmatrix
										StickyLabelsRotate {setmatrix} if

										/StickyLabelsNumPaintedOnCurrentPage dup load 1 add store
										/StickyLabelsPositionOnPage dup load 1 add store

										StickyLabelsThisPageTitlesNamesUsed StickyLabelsByNameWhichReplaceCirclearrays {NameNum} {WithinTitles} ifelse 2 copy get not
										{
											/StickyLabelsThisPageTitlesNames dup mark exch load  StickyLabelsByNameWhichReplaceCirclearrays {ThisName} {Titles WithinTitles get} ifelse PDFDocEncodingify  2 copy length 0 gt exch length 0 gt and {(; ) exch} if ConcatenateToMark def
											//true put
										} {pop pop} ifelse  % StickyLabelsThisPageTitlesNamesUsed ... not
									} for  % StickyLabelCopyNum
								} if  % ... ThisPaperType ... ThisPageOrdering ... and
							} for  % NameNum, or not loop
						} for  % StickieNum

						StickyLabelsByNameWhichReplaceCirclearrays  StickyLabelsNamesChangeFaster not  and
						{
							StickyLabelsAvoidAcrossColumnsOrRows
							{
								/RowOrColLength  StickyLabelsColumnsChangeFaster {StickyLabelsWithPagePortraitNumCols} {StickyLabelsWithPagePortraitNumRows} ifelse  def
								StickyLabelsSheetNumWithinPageWithinTitles length  StickyLabelsPositionOnPage RowOrColLength mod  add   RowOrColLength gt
								{
									StickyLabelsPositionOnPage RowOrColLength mod dup 0 gt {RowOrColLength exch sub StickyLabelsPositionOnPage add /StickyLabelsPositionOnPage exch store} {pop} ifelse
								} if  % ... RowOrColLength gt
							} if  % StickyLabelsAvoidAcrossColumnsOrRows
							StickyLabelsAvoidAcrossPages  StickyLabelsPositionOnPage 0 gt  and
							StickyLabelsSheetNumWithinPageWithinTitles length StickyLabelsPositionOnPage add StickyLabelsWithPagePortraitNumRows StickyLabelsWithPagePortraitNumCols mul gt  and
								{/StickyLabelsPositionOnPage //IntegerMax store}
							if  % StickyLabelsAvoidAcrossPages ...
						} if  % StickyLabelsByNameWhichReplaceCirclearrays  StickyLabelsNamesChangeFaster not  and

					} for  % NameNum, or not loop
					StickyLabelsNumPaintedOnCurrentPage 0 gt {AnnotatePDF ShowPage  /StickyLabelsNumPaintedOnCurrentPage 0 def} if
					setmatrix
					AnyFillTextingAtAll DeBugLevel 100 le or {(-StickyLabels: usertime = ) usertime ToString Concatenate OutputToLog} if
				} if  % ... StickyLabelsNumCopies 1 ge ...
				end
			} forall  % StickyLabelsTypeThis drawn from StickyLabelsTypes

		} forall  % UsedPaperTypes
	} bind forall  % ThisPageOrdering
	currentdict /ThisPaperType undef
	currentdict /ThisPageOrdering undef

	mark
	/OutlineTitles     load MightBeTrue {(Computed bound on OutlineTitlesNumberContours = )  OutlineTitlesNumberContours 0 //false ThingToDebugText} if
	/InlineTitles      load MightBeTrue {     {Titles NonEmptyCompoundObject} MightBeTrue  //false InlineTitlesNumberContours      {{IsNumber {pop //true exit} if} forall} forall  and} {//false} ifelse {
		dup mark ne {(\n)} if (Computed bound on InlineTitlesNumberContours = )      InlineTitlesNumberContours      0 //false ThingToDebugText
	} if
	/InlineAbovetitles load MightBeTrue {{Abovetitles NonEmptyCompoundObject} MightBeTrue  //false InlineAbovetitlesNumberContours {{IsNumber {pop //true exit} if} forall} forall  and} {//false} ifelse {
		dup mark ne {(\n)} if (Computed bound on InlineAbovetitlesNumberContours = ) InlineAbovetitlesNumberContours 0 //false ThingToDebugText
	} if
	/InlineBelowtitles load MightBeTrue {{Belowtitles NonEmptyCompoundObject} MightBeTrue  //false InlineBelowtitlesNumberContours {{IsNumber {pop //true exit} if} forall} forall  and} {//false} ifelse {
		dup mark ne {(\n)} if (Computed bound on InlineBelowtitlesNumberContours = ) InlineBelowtitlesNumberContours 0 //false ThingToDebugText
	} if
	/InlineOvertitles  load MightBeTrue {{Overtitles  NonEmptyCompoundObject} MightBeTrue  //false InlineOvertitlesNumberContours  {{IsNumber {pop //true exit} if} forall} forall  and} {//false} ifelse {
		dup mark ne {(\n)} if (Computed bound on InlineOvertitlesNumberContours = )  InlineOvertitlesNumberContours  0 //false ThingToDebugText
	} if
	dup mark ne {ConcatenateToMark OutputToLog} {pop} ifelse

	/PlaceNames load MightBeTrue
	{
		() OutputToLog  mark
		/PlaceNamesFirstAndThirdFoldsFromEdge load xcheck not
		{
			PlaceNamesFirstAndThirdFoldsFromEdge 0 gt {(Foldable paper)} {(Stiff card)} ifelse
			( should be used for PlaceNames, as PlaceNamesFirstAndThirdFoldsFromEdge = ) PlaceNamesFirstAndThirdFoldsFromEdge (.\n)
		} if  % /PlaceNamesFirstAndThirdFoldsFromEdge load xcheck not
		(PlaceNamesFontSizes = ) PlaceNamesFontSizes SizeArrayOutput
		(\nMinimum of PlaceNamesFontSizes = )  //Infinity PlaceNamesFontSizes {{dup IsNumber {2 copy gt {exch} if} if pop} forall} forall dup //Infinity lt {ConcatenateToMark OutputToLog} {cleartomark} ifelse
	} if  % ...PlaceNames ...

	/TypeOfPagesBeingRendered /Multiple store
	mark  (URL # tags: )
	DestEmpty           0 gt {                           DestPrefixEmpty          (0)  DestEmpty          1 gt {DestEmpty          2 eq {(, )} {( ... )} ifelse DestPrefixEmpty          DestEmpty          1 sub} if} if
	DestGlasses         0 gt {1 index mark ne {(; )} if  DestPrefixGlasses        (0)  DestGlasses        1 gt {DestGlasses        2 eq {(, )} {( ... )} ifelse DestPrefixGlasses        DestGlasses        1 sub} if} if
	DestTastingNotes    0 gt {1 index mark ne {(; )} if  DestPrefixTastingNotes   (0)  DestTastingNotes   1 gt {DestTastingNotes   2 eq {(, )} {( ... )} ifelse DestPrefixTastingNotes   DestTastingNotes   1 sub} if} if
	DestVoteRecorder    0 gt {1 index mark ne {(; )} if  DestPrefixVoteRecorders  (0)  DestVoteRecorder   1 gt {DestVoteRecorder   2 eq {(, )} {( ... )} ifelse DestPrefixVoteRecorders  DestVoteRecorder   1 sub} if} if
	DestDecantingNotes  0 gt {1 index mark ne {(; )} if  DestPrefixDecantingNotes (0)  DestDecantingNotes 1 gt {DestDecantingNotes 2 eq {(, )} {( ... )} ifelse DestPrefixDecantingNotes DestDecantingNotes 1 sub} if} if
	DestAccounts        0 gt {1 index mark ne {(; )} if  DestPrefixAccounts       (0)  DestAccounts       1 gt {DestAccounts       2 eq {(, )} {( ... )} ifelse DestPrefixAccounts       DestAccounts       1 sub} if} if
	DestCorkDisplay     0 gt {1 index mark ne {(; )} if  DestPrefixCorkDisplay    (0)  DestCorkDisplay    1 gt {DestCorkDisplay    2 eq {(, )} {( ... )} ifelse DestPrefixCorkDisplay    DestCorkDisplay    1 sub} if} if
	DestNeckTags        0 gt {1 index mark ne {(; )} if  DestPrefixNeckTags       (0)  DestNeckTags       1 gt {DestNeckTags       2 eq {(, )} {( ... )} ifelse DestPrefixNeckTags       DestNeckTags       1 sub} if} if
	DestPrePour         0 gt {1 index mark ne {(; )} if  DestPrefixPrePour        (0)  DestPrePour        1 gt {DestPrePour        2 eq {(, )} {( ... )} ifelse DestPrefixPrePour        DestPrePour        1 sub} if} if
	DestPlaceName       0 gt {1 index mark ne {(; )} if  DestPrefixPlaceName      (0)  DestPlaceName      1 gt {DestPlaceName      2 eq {(, )} {( ... )} ifelse DestPrefixPlaceName      DestPlaceName      1 sub} if} if
	DestDecanterLabels  0 gt {1 index mark ne {(; )} if  DestPrefixDecanterLabels (0)  DestDecanterLabels 1 gt {DestDecanterLabels 2 eq {(, )} {( ... )} ifelse DestPrefixDecanterLabels DestDecanterLabels 1 sub} if} if
	DestStickyLabels    0 gt {1 index mark ne {(; )} if  DestPrefixStickyLabels   (0)  DestStickyLabels   1 gt {DestStickyLabels   2 eq {(, )} {( ... )} ifelse DestPrefixStickyLabels   DestStickyLabels   1 sub} if} if
	DestOther           0 gt {1 index mark ne {(; )} if  DestPrefixOther          (0)  DestOther          1 gt {DestOther          2 eq {(, )} {( ... )} ifelse DestPrefixOther          DestOther          1 sub} if} if
	OutputLogToPage          {1 index mark ne {(; )} if  (DistillationLog)} if
	ShownGlassesCircles 0 gt
	{
		1 index mark ne {(; )} if
		(and also ) ShownGlassesCircles
		/GlassesNumCopies load type /integertype eq {dup 0 SheetLengths {add} forall Names length mul GlassesNumCopies mul eq    NumSheets 1 ge  and
		{
			(=) Names length (*)  //true 1 1 NumSheets 1 sub {dup 1 sub SheetLengths exch get exch SheetLengths exch get eq and} for  {NumSheets (*) SheetLengths 0 get}  {(\() SheetLengths {(+)} forall pop (\))}  ifelse
			GlassesNumCopies dup 1 gt {(*) exch} {pop} ifelse
		} if} if  % Sensible to express as a multiplication
		( glass-circle zooms of the form Circle_#NameNum_#SheetNum_#WithinPage)  {GlassesNumCopies 2 ge} MightBeTrue {(\[_#GlassesCopyNum\])} if
		(, the first being )  ShownGlassesCirclesData 0 get /GlassesCircleDestName get ( and the last being ) ShownGlassesCirclesData ShownGlassesCircles 1 sub get /GlassesCircleDestName get (.)
		IsDistiller not {( \(But distillation might be in Ghostscript, so these # tags might be missing: check.\))} if
	} {(.)} ifelse   1 index mark ne {ConcatenateToMark () OutputToLog OutputToLog} {cleartomark} ifelse

	DeBugLevel 50 le {( Main: pdfmark's, DOCVIEW, DOCINFO, {Catalog}...PUT) OutputToLog} if
	mark
		/Page 1
		/View [/Fit]
		/PageMode  ShownPages 9 gt {/UseOutlines} {/UseThumbs} ifelse
	/DOCVIEW pdfmark
	mark
		/CreationDate ParametersVersionDateTimeAdobeFormat   /Title PDF_title ASCIIfy
		/Author (Julian D. A. Wiseman)
		/Creator (www.jdawiseman.com/papers/placemat/placemat.html)
		/Subject mark
			(PostScript code by Julian D. A. Wiseman; software version ) SoftwareVersionDateTimeAdobeFormat dup length 2 sub 2 exch getinterval
			(; parameters as of ) ParametersVersionDateTimeAdobeFormat dup length 2 sub 2 exch getinterval
			/WizardVersionDateTimeAdobeFormat where {pop  /WizardLongName where {pop  ( \(made by ) WizardLongName (, version =  ) WizardVersionDateTimeAdobeFormat dup length 2 sub 2 exch getinterval (\))  } if} if
			(.) ConcatenateToMark
		/Keywords (placemat, tasting, glasses, Port, wine, Madeira, whisky)
	/DOCINFO pdfmark
	mark {Catalog} << /PageLayout /TwoPageLeft >> /PUT pdfmark  % http://groups.google.com/forum/#!topic/comp.text.pdf/kh5-xfVOK_g

	/TypeOfPagesBeingRendered /Multiple store
	mark   /Action << >>  /Color [0.4 0.4 0.4]  /F 1  /Title (\200 ) ParametersVersionDateTimeAdobeFormat AdobeFormatDateToString Concatenate  /OUT pdfmark
	DeBugLevel 50 le {( Main: pdfmark's, OUT, in print order) OutputToLog} if
	mark
		/Action << >>  /Color [0 0 0]  /F 2
		/Title (\247 In Print Order)   ShownPages 0 gt  ShownPagesData 0 ShownPages getinterval {/ThisPaperType get ShownPagesData 0 get /ThisPaperType get ne {pop //false exit} if} forall
			{mark exch ( \() ShownPagesData 0 get begin PaperTypeStringShortPDF end (\)) ConcatenateToMark} if
	/OUT pdfmark
	/PrevPageOrdering -2147483648 def  % PLRM3, p739, "Smallest integer value"
	/ShownPageThis 0 def
	{
		ShownPageThis ShownPages ge {exit} if
		ShownPagesData ShownPageThis get begin 12 dict begin
		1 {
			ThisPageOrdering PrevPageOrdering ne
			{
				0 2 PageOrderingSections length 2 sub
				{
					/i exch def
					PageOrderingSections i GetEU dup  PrevPageOrdering gt  exch ThisPageOrdering le  and
					{
						mark /Action
							//false i 2 PageOrderingSections length 2 sub {/j exch def  ThisPageOrdering PageOrderingSections j get eq  PageOrderingSections j 1 add get NonEmptyCompoundObject not  and {pop //true exit} if} for
							{<< >>} {/GoTo /Dest PageDestName} ifelse
						/Color [0 0 0]  /F 1  /Title PageOrderingSections i 1 add get PDFDocEncodingify  /OUT pdfmark
					} if  % ... PrevPageOrdering ... ThisPageOrdering ...
				} for  % i
				/PrevPageOrdering ThisPageOrdering store
			} if  % PrevPageOrdering ThisPageOrdering ne
			PagesToBeInsertedData
			{
				begin
				PagesToBeInsertedDest type /nametype eq {mark  /Action /GoTo  /Dest PagesToBeInsertedDest  /Title [PagesToBeInsertedDescription ( \(p) PagesToBeInsertedPageNum 1 add (\))] PDFDocEncodingify  /Count 0  /F 0  /OUT  pdfmark} if
				/PagesToBeInsertedWarning dup load mark exch ( \") PagesToBeInsertedDescription ASCIIfy (\", p) PagesToBeInsertedPageNum 1 add
				PagesToBeInsertedDest type /nametype eq {(, containing \'Dest\' \") PagesToBeInsertedDest (\")} if  (;)  ConcatenateToMark store
				end
			} forall  % PagesToBeInsertedData
			TypeOfPagesBeingRendered dup dup /Glasses eq exch /TastingNotes eq or exch /PlaceName eq or
			{
				DeBugLevel 25 le {( Main: pdfmark's, OUT, in print order, Glasses and TastingNotes and PlaceName) OutputToLog} if
				/NumPagesThisType 1 def
				/PagesCountGlasses /PagesCountTNs /PagesCountPlaceName   TypeOfPagesBeingRendered /Glasses eq {3 -1 roll} if   TypeOfPagesBeingRendered /TastingNotes eq {exch} if   1 def 0 def 0 def
				/NewNamePages [ ShownPageThis
					{
						ShownPageThis NumPagesThisType add  ShownPages  ge {exit} if
						ThisPageOrdering ThisPaperType  ShownPagesData ShownPageThis NumPagesThisType add get begin  ThisPaperType ne exch ThisPageOrdering ne or {end exit} if
						TypeOfPagesBeingRendered dup dup /Glasses ne exch /TastingNotes ne and exch /PlaceName ne and {end exit} if
						/PlaceName TypeOfPagesBeingRendered eq {/PagesCountPlaceName dup load 1 add store}
						{
							/Glasses      TypeOfPagesBeingRendered eq SideBySideGlassesTastingNotes or {/PagesCountGlasses dup load 1 add store} if
							/TastingNotes TypeOfPagesBeingRendered eq SideBySideGlassesTastingNotes or {/PagesCountTNs     dup load 1 add store} if
						} ifelse  % /PlaceName ...
						end
						ShownPagesData ShownPageThis NumPagesThisType add get /NameNum get
						ShownPagesData ShownPageThis NumPagesThisType add 1 sub get /NameNum get ne {ShownPageThis NumPagesThisType add} if
						/NumPagesThisType NumPagesThisType 1 add store
					} loop
					ShownPageThis NumPagesThisType add
				] def  % NewNamePages
				mark  /Action /GoTo /Dest PageDestName
				/Title  mark
					PagesCountGlasses 0 gt PagesCountTNs 0 gt PagesCountPlaceName 0 gt
						{ { {(Glasses + TNs + Seating)} {(Tasting notes + Seating)} }  { {(Glasses + Seating)} {(Seating)    } } }
						{ { {(Glasses + TNs)          } {(Tasting notes)          } }  { {(Glasses)          } {(\241Error!) } } }
					ifelse ifelse ifelse
					( \() NumPagesThisType 1 eq {(p)   PageNum 1 add} {(pp)  PageNum 1 add  (\205)  PageNum NumPagesThisType add} ifelse (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark
				/Count NewNamePages length 1 sub neg  /F 0  /OUT  pdfmark
				0  1  NewNamePages length 2 sub
				{
					/i exch def
					/ThisNamePagesCountGlasses 0 def  /ThisNamePagesCountTNs 0 def  /ThisNamePagesCountPlaceName 0 def
					ShownPagesData  NewNamePages i get  NewNamePages i 1 add get 1 index sub  getinterval
					{
						/TypeOfPagesBeingRendered get  dup dup
						/Glasses      eq {/ThisNamePagesCountGlasses   dup load 1 add store} if
						/TastingNotes eq {/ThisNamePagesCountTNs       dup load 1 add store} if
						/PlaceName    eq {/ThisNamePagesCountPlaceName dup load 1 add store} if
					} forall  % ShownPagesData ... getinterval
					/ThisNameNumTypes 0 [ ThisNamePagesCountGlasses ThisNamePagesCountTNs ThisNamePagesCountPlaceName ] {1 ge {1 add} if} forall  def
					/ThisNameCount  ThisNamePagesCountGlasses ThisNamePagesCountTNs ThisNamePagesCountPlaceName add add  dup 2 lt {pop 0} if  def
					ShownPagesData NewNamePages i get get begin
					mark
						/Action /GoTo /Dest PageDestName
						/Title mark  /ThisName load PDFDocEncodingify TrimSpaces dup length 0 le {pop UnnamedAttendee PDFDocEncodingify} if
						NewNamePages i 1 add get NewNamePages i get sub 1 le
							{( \(p) NewNamePages i get 1 add}
							{( \(pp) NewNamePages i get 1 add  (\205)  NewNamePages i 1 add get}
						ifelse  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark TruncateTo255
						/F 0   /Count ThisNameCount neg
					/OUT pdfmark
					end
					ThisNameCount 0 gt
					{
						ShownPagesData  NewNamePages i get  NewNamePages i 1 add get 1 index sub  getinterval
						{
							begin   TypeOfPagesBeingRendered dup dup /Glasses eq exch /TastingNotes eq or exch /PlaceName eq or
							{
								2 dict begin   mark
									/Action /GoTo /Dest PageDestName
									/Title mark
									/Glasses TypeOfPagesBeingRendered eq
									{
										ThisNameNumTypes 2 ge {(G\220s: )} {()} ifelse  mark
										0  1  SheetLengths SheetNum get 1 sub
										{
											WithinPage-WithinTitles-def
											Titles WithinTitles get PDFDocEncodingify TrimSpaces dup length 0 gt {(; )} if
										} for  % WithinPage
										pop ConcatenateToMark  dup length 0 le {pop (SheetNum = ) SheetNum} if  ( \(p) PageNum 1 add  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark TruncateTo255
									} if  % /Glasses ...
									/TastingNotes TypeOfPagesBeingRendered eq
									{
										ThisNameNumTypes 2 ge {(TNs: )} {()} ifelse  mark
										0  1  GlassesOnTastingNotePages TastingSheetNum GetEU length 1 sub
										{
											/WithinPage exch def
											/WithinTitles GlassesOnTastingNotePages TastingSheetNum GetEU WithinPage GetEU def
											Titles WithinTitles get PDFDocEncodingify TrimSpaces  dup length 0 gt {(; )} if  % Deliberately not using TitlesTastingNotes
										} for  % WithinPage
										pop ConcatenateToMark  dup length 0 le {pop (TastingSheetNum = ) TastingSheetNum} if  ( \(p) PageNum 1 add  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark TruncateTo255
									} if  % /TastingNotes ...
									/PlaceName TypeOfPagesBeingRendered eq
									{
										/ThisName load PDFDocEncodingify TrimSpaces  dup length 0 le {pop UnnamedAttendee PDFDocEncodingify} if  ( \(p) PageNum 1 add  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark TruncateTo255
									} if  % /PlaceName ...
									/F 0   /Count 0
								/OUT pdfmark   end
							} if  % ... /Glasses ... /TastingNotes ... /PlaceName ...
							end
						} forall  % ShownPagesData ... getinterval
					} if  % ThisNameCount 0 gt
				} for  % i, non-last element of NewNamePages
				/ShownPageThis ShownPageThis NumPagesThisType 1 sub add store
			} if  % ... /Glasses ... /TastingNotes ... /PlaceName

			/NumPagesThisType 1 def
			{
				ShownPageThis NumPagesThisType add  ShownPages  ge {exit} if
				ThisPageOrdering TypeOfPagesBeingRendered  ShownPagesData ShownPageThis NumPagesThisType add get begin TypeOfPagesBeingRendered ne exch ThisPageOrdering ne or end {exit} if
				/StickyLabels TypeOfPagesBeingRendered eq
				{
					StickyLabelsWithPagePortraitNumRows  ShownPagesData ShownPageThis NumPagesThisType add get begin StickyLabelsWithPagePortraitNumRows end ne {exit} if
					StickyLabelsWithPagePortraitNumCols  ShownPagesData ShownPageThis NumPagesThisType add get begin StickyLabelsWithPagePortraitNumCols end ne {exit} if
				} if  % /StickyLabels ...
				/NumPagesThisType dup load 1 add store
			} loop  % /NumPagesThisType

			/VoteRecorder TypeOfPagesBeingRendered eq
			{
				DeBugLevel 25 le {( Main: pdfmark's, OUT, in print order, VoteRecorder) OutputToLog} if
				mark
					/Action /GoTo /Dest PageDestName
					/Title  mark (Vote recorder) NumPagesThisType 1 eq {( \(p) PageNum 1 add} {(s \(pp) PageNum 1 add (\205) PageNum NumPagesThisType add} ifelse  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark
					/Count NumPagesThisType neg   /F 0
				/OUT pdfmark
				ShownPageThis  1  ShownPageThis NumPagesThisType 1 sub add
				{
					/ShownPageThis exch store
					ShownPagesData ShownPageThis get begin
					mark
						/Action /GoTo /Dest PageDestName  /F 0
						/Title mark VoteRecorderTopTexts VoteRecorderSheetNum get VoteRecorderTopTextNum get PDFDocEncodingify TrimSpaces  dup length 0 le {pop (Vote recorder)} if ( \(p) PageNum 1 add (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark TruncateTo255
					/OUT pdfmark
					end
				} for  % ShownPageThis
				exit
			} if  % /VoteRecorder ...

			/DecantingNotes TypeOfPagesBeingRendered eq
			{
				DeBugLevel 25 le {( Main: pdfmark's, OUT, in print order, DecantingNotes) OutputToLog} if
				mark  /Action /GoTo /Dest PageDestName
				/Title  mark  (Decanting notes) ( \() NumPagesThisType 1 eq {(p) PageNum 1 add} {(pp) PageNum 1 add (\205) PageNum NumPagesThisType add} ifelse  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark
				/Count NumPagesThisType neg  /F 0  /OUT  pdfmark
				ShownPageThis  1  ShownPageThis NumPagesThisType 1 sub add
				{
					/ShownPageThis exch store
					ShownPagesData ShownPageThis get begin
					mark
						/Action /GoTo /Dest PageDestName  /F 0
						/Title  mark mark ()
						3 dict begin
						0  1  GlassesClusteredOnDecantingNotes DecantingNotesSheetNum get length 1 sub
						{
							/ClusterNum exch def
							0  1  GlassesClusteredOnDecantingNotes DecantingNotesSheetNum get ClusterNum GetEU length 1 sub
							{
								/WithinCluster exch def
								/WithinTitles GlassesClusteredOnDecantingNotes DecantingNotesSheetNum GetEU ClusterNum GetEU WithinCluster GetEU def
								TitlesDecantingNotes WithinTitles get PDFDocEncodingify TrimSpaces  dup length 0 gt {(; )} if
							} for  % WithinCluster, WithinTitles
						} for  % ClusterNum
						end  pop ConcatenateToMark  dup length 0 le {pop (Decanting notes)} if  ( \(p) PageNum 1 add  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark TruncateTo255
					/OUT pdfmark
					end
				} for  % ShownPageThis
				exit
			} if  % /DecantingNotes ...

			/Accounts TypeOfPagesBeingRendered eq
			{
				DeBugLevel 25 le {( Main: pdfmark's, OUT, in print order, Accounts) OutputToLog} if
				mark  /Action /GoTo /Dest PageDestName
				/Title  mark  (Accounts) ( \() NumPagesThisType 1 eq {(p) PageNum 1 add} {(pp) PageNum 1 add (\205) PageNum NumPagesThisType add} ifelse  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark
				/Count NumPagesThisType dup 1 gt {neg} {pop 0} ifelse  /F 0  /OUT  pdfmark
				ShownPageThis  1  ShownPageThis NumPagesThisType 1 sub add  NumPagesThisType 1 le {pop 1 index 1 sub} if
				{
					/ShownPageThis exch store
					ShownPagesData ShownPageThis get begin
					mark
						/Action /GoTo /Dest PageDestName  /F 0
						/Title  mark (Accounts \(p) PageNum 1 add  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark TruncateTo255
					/OUT pdfmark
					end
				} for  % ShownPageThis
				exit
			} if  % /Accounts ...

			/CorkDisplay TypeOfPagesBeingRendered eq
			{
				DeBugLevel 25 le {( Main: pdfmark's, OUT, in print order, CorkDisplay) OutputToLog} if
				mark
					/Action /GoTo  /Dest PageDestName  /Count NumPagesThisType neg  /F 0
					/Title  mark (Cork display \() NumPagesThisType 1 eq {(p) PageNum 1 add} {(pp) PageNum 1 add (\205) PageNum NumPagesThisType add} ifelse  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark
				/OUT pdfmark
				ShownPageThis  1  ShownPageThis NumPagesThisType 1 sub add
				{
					/ShownPageThis exch store
					ShownPagesData ShownPageThis get begin
					mark
						/Action /GoTo /Dest PageDestName  /F 0
						/Title mark CorkDisplayThisPageTitles PDFDocEncodingify TrimSpaces dup length 0 le {pop (Cork display)} if  ( \(p) PageNum 1 add  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark TruncateTo255
					/OUT pdfmark
					end
				} for  % ShownPageThis
				exit
			} if  % /CorkDisplay ...

			/NeckTags TypeOfPagesBeingRendered eq
			{
				DeBugLevel 25 le {( Main: pdfmark's, OUT, in print order, NeckTags) OutputToLog} if
				mark
					/Action /GoTo  /Dest PageDestName  /Count NumPagesThisType neg  /F 0
					/Title  mark (Neck tags \() NumPagesThisType 1 eq {(p) PageNum 1 add} {(pp) PageNum 1 add (\205) PageNum NumPagesThisType add} ifelse  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark
				/OUT pdfmark
				ShownPageThis  1  ShownPageThis NumPagesThisType 1 sub add
				{
					/ShownPageThis exch store
					ShownPagesData ShownPageThis get begin
					mark
						/Action /GoTo /Dest PageDestName  /F 0
						/Title mark NeckTagsThisPageTitles PDFDocEncodingify TrimSpaces dup length 0 le {pop (Neck tags)} if  ( \(p) PageNum 1 add  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark TruncateTo255
					/OUT pdfmark
					end
				} for  % ShownPageThis
				exit
			} if  % /NeckTags ...

			/PrePour TypeOfPagesBeingRendered eq
			{
				DeBugLevel 25 le {( Main: pdfmark's, OUT, in print order, PrePour) OutputToLog} if
				mark
					/Action /GoTo /Dest PageDestName  /Count NumPagesThisType neg  /F 0
					/Title  mark (Pre-pour) NumPagesThisType 1 eq {( \(p) PageNum 1 add} {(s \(pp) PageNum 1 add (\205) PageNum NumPagesThisType add} ifelse  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark
				/OUT pdfmark
				ShownPageThis  1  ShownPageThis NumPagesThisType 1 sub add
				{
					/ShownPageThis exch store
					ShownPagesData ShownPageThis get begin 2 dict begin
					mark
						/Action /GoTo /Dest PageDestName
						/PrePourTitlingPieces [ Titles WithinTitles get PDFDocEncodingify TrimSpaces   [ Abovetitles Belowtitles Overtitles ] {WithinTitles get PDFDocEncodingify TrimSpaces dup length 0 eq {pop} if} forall ] def
						/PrePourTitlingPieces [ 0 1 PrePourTitlingPieces length 1 sub {/i exch def  PrePourTitlingPieces i get  0 1 i 1 sub {PrePourTitlingPieces exch get 1 index eq {pop exit} if} for} for ] def
						/Title mark mark  PrePourTitlingPieces {(, )} forall pop   ConcatenateToMark dup length 0 le {pop (Pre-pour)} if  ( \(p) PageNum 1 add  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark TruncateTo255  /F 0
					/OUT pdfmark
					end end
				} for  % ShownPageThis
				exit
			} if  % /PrePour ...

			/DecanterLabels TypeOfPagesBeingRendered eq
			{
				DeBugLevel 25 le {( Main: pdfmark's, OUT, in print order, DecanterLabels) OutputToLog} if
				mark  /Action /GoTo /Dest PageDestName
				/Title  mark (Decanter labels) ( \() NumPagesThisType 1 eq {(p) PageNum 1 add} {(pp) PageNum 1 add (\205) PageNum NumPagesThisType add} ifelse (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark
				/Count NumPagesThisType neg  /F 0  /OUT  pdfmark
				ShownPageThis  1  ShownPageThis NumPagesThisType 1 sub add
				{
					/ShownPageThis exch store
					ShownPagesData ShownPageThis get begin
					mark
						/Action /GoTo /Dest PageDestName  /F 0
						/Title mark DecanterLabelsThisPageTitles PDFDocEncodingify TrimSpaces dup length 0 le {pop (Decanter labels)} if  ( \(p) PageNum 1 add  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark TruncateTo255
					/OUT pdfmark
					end
				} for  % ShownPageThis
			} if  % /DecanterLabels

			/StickyLabels TypeOfPagesBeingRendered eq
			{
				DeBugLevel 25 le {( Main: pdfmark's, OUT, in print order, StickyLabels) OutputToLog} if
				mark
					/Action /GoTo  /Dest PageDestName  /Count NumPagesThisType dup 1 eq {pop 0} {neg} ifelse  /F 0
					/Title
						mark  (Sticky labels, ) StickyLabelsWithPagePortraitNumCols (\327) StickyLabelsWithPagePortraitNumRows
						NumPagesThisType 1 eq {( \(p) PageNum 1 add} {( \(pp) PageNum 1 add  (\205) PageNum NumPagesThisType add} ifelse  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark TruncateTo255
				/OUT pdfmark
				ShownPageThis  1  ShownPageThis 1 sub  NumPagesThisType 1 ne {NumPagesThisType add} if  % So don't do if NumPagesThisType is 1
				{
					/ShownPageThis exch store
					ShownPagesData ShownPageThis get begin
					mark
						/Action /GoTo /Dest PageDestName  /F 0
						/Title mark StickyLabelsThisPageTitlesNames PDFDocEncodingify TrimSpaces dup length 0 le {pop (Sticky labels)} if  ( \(p) PageNum 1 add  (, ) PaperTypeStringShortPDF (\)) ConcatenateToMark TruncateTo255
					/OUT pdfmark
					end
				} for  % ShownPageThis
				exit
			} if  % /StickyLabels ...

			/Empty TypeOfPagesBeingRendered eq
			{
				DeBugLevel 25 le {( Main: pdfmark's, OUT, in print order, Empty) OutputToLog} if
				mark  /Action /GoTo /Dest PageDestName  /Title [(Empty: ) EmptyPageString ( \(p) PageNum 1 add (\))] PDFDocEncodingify TrimSpaces TruncateTo255  /F 0  /OUT pdfmark
				exit
			} if  % /Empty ...
		} repeat  % 1
		end end /ShownPageThis ShownPageThis 1 add def
	} bind loop  % ShownPageThis

	DeBugLevel 50 le {( Main: pdfmark's, OUT, re-arranged) OutputToLog} if
	/TypeOfPagesBeingRendered /DistillerLog def
	OutputLogToPage {false PageSuppressed not} {false} ifelse
	{
		0 2 PageOrderingSections length 2 sub
		{
			/i exch def
			PageOrderingSections i GetEU  PrevPageOrdering gt {mark /Action << >>  /Color [0 0 0]  /F 1  /Title PageOrderingSections i 1 add get PDFDocEncodingify  /OUT pdfmark} if
		} for  % i

		/DistillationLogPaperType  /TastingNotesPaperType dup where {exch get dup /USL ne {pop /A4} if} {pop /A4} ifelse  def
		mark /Action /GoTo /Dest /DistillationLog /Title mark (Distillation log \() OutputtedToLog 2 mul ExternalLinks length 3 idiv add 120 gt {(from )} if (p) ShownPageThis 0 gt {ShownPagesData ShownPageThis 1 sub get /PageNum get 2 add} {0} ifelse (, )
		<< /ThisPaperType DistillationLogPaperType >> begin PaperTypeStringShortPDF end (\)) ConcatenateToMark TruncateTo255  /F 0  /OUT pdfmark  % Log page lacks ShownPagesData, so using one more than previous; and "from" if likely to be more than one page.
	} if  % OutputLogToPage ...
	[
		0 1 NumSheets 1 sub {/SheetNum exch def {GlassesNumCopies 1 ge} MightBeTrue {PageOrderingGlasses SheetNum GetEU} if} for
		0 1 GlassesOnTastingNotePages length 1 sub {/TastingSheetNum exch def {TastingNotePagesNumCopies 1 ge} MightBeTrue {PageOrderingTastingNotePages TastingSheetNum GetEU} if} for
	] dup {le} ShellSort  /RelevantPageOrderings exch def
	//false  1 1 RelevantPageOrderings length 1 sub {RelevantPageOrderings exch 2 copy 1 sub get 3 1 roll get eq {pop //true exit} if} for  currentdict /RelevantPageOrderings undef
	{
		/ShownPagesBySheetNum [ NumSheets {0} repeat ] def
		/ShownPagesByTastingSheetNum [ GlassesOnTastingNotePages length {0} repeat ] def
		/ShownPagesSideBySideByNum [ NumSheets GlassesOnTastingNotePages length 2 copy lt {exch} if pop {0} repeat ] def
		ShownPagesData 0 ShownPages getinterval
		{
			begin
			SideBySideGlassesTastingNotes
			{
				ShownPagesSideBySideByNum
				/SheetNum dup where {exch get} {pop /TastingSheetNum dup where {exch get} {pop //null} ifelse} ifelse
				dup type /integertype ne {pop pop} {2 copy get 1 add put} ifelse
			}{
				/Glasses TypeOfPagesBeingRendered eq {ShownPagesBySheetNum SheetNum 2 copy get 1 add put} if
				/TastingNotes TypeOfPagesBeingRendered eq {ShownPagesByTastingSheetNum TastingSheetNum 2 copy get 1 add put} if
			} ifelse  % SideBySideGlassesTastingNotes
			end
		} forall  % ShownPagesData ...
		//false  ShownPagesBySheetNum {0 gt {pop //true exit} if} forall  ShownPagesByTastingSheetNum {0 gt {pop //true exit} if} forall
		{
			% https://groups.google.com/forum/#!topic/comp.lang.postscript/dcOto3ySuYE
			mark  /Action << >>  /Color [0 0 0]  /F 0  /Title ()  /OUT pdfmark
			mark  /Action << >>  /Color [0 0 0]  /F 2  /Title (\247 Re-ordered)  /OUT pdfmark

			% Not bothering to show side-by-sides. In practice, documents with s-b-s are so small that navigation irrelevant.

			//false ShownPagesBySheetNum {0 gt {pop //true exit} if} forall
			{
				/PdfmarkShownHeaderLevel0 //false def
				0  1  NumSheets 1 sub
				{
					/SheetNum exch def
					ShownPagesBySheetNum SheetNum get 0 gt
					{
						/PdfmarkShownHeaderLevel1 //false def
						ShownPagesData 0 ShownPages getinterval
						{
							SheetNum exch begin
							/Glasses TypeOfPagesBeingRendered eq {SheetNum eq} {pop //false} ifelse  SideBySideGlassesTastingNotes not and
							{
								PdfmarkShownHeaderLevel0 not
								{
									mark
										/Action /GoTo /Dest PageDestName
										/Title (Glasses)
											//true  PaperTypes length 1 ge {1 1 PaperTypes length 1 sub {PaperTypes exch get PaperTypes 0 get ne {pop //false exit} if} for  % Duplicates not already removed
												{mark exch ( \() << /ThisPaperType PaperTypes 0 get >> begin PaperTypeStringShortPDF end (\)) ConcatenateToMark}
											if} if  % Only one PaperType
										/F 0  /Color [0.4 0.4 0.4]  /Count  0 ShownPagesBySheetNum {0 gt {1 sub} if} forall
									/OUT pdfmark
									/PdfmarkShownHeaderLevel0 //true store
								} if  % PdfmarkShownHeaderLevel0 not

								PdfmarkShownHeaderLevel1 not
								{
									mark
										/Action /GoTo /Dest PageDestName
										/Color [0 0 1]  /F 0  /Count  ShownPagesBySheetNum SheetNum get neg
										/Title  mark mark  ()  0  1  SheetLengths SheetNum get 1 sub
										{
											2 dict begin  WithinPage-WithinTitles-def  Titles WithinTitles get PDFDocEncodingify TrimSpaces  dup length 0 gt {(; )} if  end
										} for  % WithinPage
										pop  ConcatenateToMark TruncateTo255  dup length 0 le {pop (SheetNum = ) SheetNum} if   ( \() << /ThisPaperType PaperType >> begin PaperTypeStringShortPDF end (\))  ConcatenateToMark
									/OUT pdfmark
									/PdfmarkShownHeaderLevel1 //true store
								} if  % PdfmarkShownHeaderLevel1 not
								mark
									/Action /GoTo /Dest PageDestName    /F 0
									/Title  [Names NameNum get dup length 0 le {pop UnnamedAttendee} if  ( \(p) PageNum 1 add (, ) PaperTypeStringShortPDF (\))]  PDFDocEncodingify TrimSpaces TruncateTo255
								/OUT pdfmark
							} if  end
						} forall  % ShownPagesData ...
					} if  % ShownPagesBySheetNum SheetNum get 0 gt
				} bind for  % SheetNum
			} if  % Any glasses sheets

			//false ShownPagesByTastingSheetNum {0 gt {pop //true exit} if} forall
			{
				/PdfmarkShownHeaderLevel0 //false def
				0  1  GlassesOnTastingNotePages length 1 sub
				{
					/TastingSheetNum exch def
					ShownPagesByTastingSheetNum TastingSheetNum get 0 gt
					{
						/PdfmarkShownHeaderLevel1 //false def
						ShownPagesData 0 ShownPages getinterval
						{
							TastingSheetNum exch begin
							/TastingNotes TypeOfPagesBeingRendered eq {TastingSheetNum eq} {pop //false} ifelse  SideBySideGlassesTastingNotes not and
							{
								PdfmarkShownHeaderLevel0 not
								{
									mark
										/Action /GoTo /Dest PageDestName
										/Title (Tasting notes) TastingNotesPaperTypes length 1 eq {mark exch ( \() << /ThisPaperType TastingNotesPaperTypes 0 get >> begin PaperTypeStringShortPDF end (\)) ConcatenateToMark} if  % Duplicates already removed
										/F 0  /Color [0.4 0.4 0.4]  /Count  0 ShownPagesByTastingSheetNum {0 gt {1 sub} if} forall
									/OUT pdfmark
									/PdfmarkShownHeaderLevel0 //true store
								} if  % PdfmarkShownHeaderLevel0 not
								PdfmarkShownHeaderLevel1 not
								{
									mark
										/Action /GoTo /Dest PageDestName
										/Color [0.4 0.4 0.4]  /F 0  /Count  ShownPagesByTastingSheetNum TastingSheetNum get neg
										/Title  mark mark ()  0  1  GlassesOnTastingNotePages TastingSheetNum GetEU length 1 sub
										{
											2 dict begin
											/WithinPage exch def
											/WithinTitles GlassesOnTastingNotePages TastingSheetNum GetEU WithinPage GetEU def
											Titles WithinTitles get PDFDocEncodingify TrimSpaces  dup length 0 gt {(; )} if  % Deliberately not using TitlesTastingNotes
											end
										} for  % WithinPage
										pop  ConcatenateToMark TruncateTo255  dup length 0 le {pop (TastingSheetNum = ) TastingSheetNum} if   ( \() << /ThisPaperType TastingNotesPaperType >> begin PaperTypeStringShortPDF end (\))  ConcatenateToMark
									/OUT pdfmark
									/PdfmarkShownHeaderLevel1 //true store
								} if  % PdfmarkShownHeaderLevel1 not
								mark
									/Action /GoTo /Dest PageDestName    /F 0
									/Title  [NamesTastingNotes NameNum get  dup length 0 le {pop UnnamedAttendee} if  ( \(p) PageNum 1 add (, ) PaperTypeStringShortPDF (\))]  PDFDocEncodingify TrimSpaces TruncateTo255
								/OUT pdfmark
							} if  end
						} forall  % ShownPagesData ...
					} if  % ShownPagesByTastingSheetNum TastingSheetNum get 0 gt
				} bind for  % TastingSheetNum
			} if  % Any TN sheets
		} if  % Any relevant sheets
	} if  % There are glasses or TN sheets with the same page ordering

	4 dict begin
	/FirstGlasses  % Despite appearances, functionally linear in n. Even in multi-session tastings, if a glass is a repeat then it appears nearby.
	[
		0 1 ShownGlassesCircles 1 sub
		{
			dup  /i exch def
			i 1 sub  -1  0  % Faster if j loop starts near i, as in multi-session tastings will find match quicker.
			{
				/j exch def
				ShownGlassesCirclesData i get begin SheetNum WithinPage WithinTitles end
				ShownGlassesCirclesData j get begin WithinTitles WithinPage SheetNum end
				6 -1 roll eq 4 2 roll eq and 3 1 roll eq and {pop exit} if
			} for  % j
		} bind for  % i
	] def  % /FirstGlasses

	FirstGlasses length 0 gt  NumSheets 0 gt  and
	{
		FirstGlasses
		{
			/ShownGlassesNum exch def
			ShownGlassesCirclesData ShownGlassesNum get begin  2 dict begin
			/ShownGlassesCount 1 def
			ShownGlassesNum 1 add  1  ShownGlassesCircles 1 sub
			{
				/i exch def  ShownGlassesCirclesData i get begin SheetNum WithinPage WithinTitles end WithinTitles eq exch WithinPage eq and exch SheetNum eq and
					{/ShownGlassesCount dup load 1 add store}
				if
			} for
			FirstGlasses 0 get  ShownGlassesNum  eq
			{
				mark
					/Action /GoTo /Dest GlassesCircleDestName
					/Color [0 0 0]  /F 0  /Count  FirstGlasses length 2 add neg  % 2 add because of links to bug reports
					/Title  mark (Zooms of ) /GlassesNumCopies load type /integertype eq Names length 0 gt and {0 SheetLengths {add} forall Names length mul GlassesNumCopies mul ShownGlassesCircles eq
					{
						ShownGlassesCircles (=) Names length (\327)  0 SheetLengths {add} forall  GlassesNumCopies dup 1 gt {(\327) exch} {pop} ifelse ( )
					} if} if  (glass circles) ConcatenateToMark
				/OUT pdfmark
			} if  % First circle. Code must be here because GlassesCircleDestName needed.
			mark
				/Action /GoTo /Dest GlassesCircleDestName
				/Color [0.4 0.4 0.4]  /F 0  /Count  ShownGlassesCount dup 1 gt {neg} {pop 0} ifelse
				/Title mark mark  Titles WithinTitles get PDFDocEncodingify
				[ Abovetitles Belowtitles Overtitles ] {WithinTitles get PDFDocEncodingify TrimSpaces dup length 0 gt {(, ) exch} {pop} ifelse} forall  ConcatenateToMark dup length 0 le {pop (SheetNum=) SheetNum (, WithinPage=) WithinPage} if
				( \()  ShownGlassesCount 1 eq {(p) PageNum 1 add (, )} if  << /ThisPaperType PaperType >> begin PaperTypeStringShortPDF end  (\))
				ConcatenateToMark TruncateTo255
			/OUT pdfmark
			ShownGlassesCount 1 gt
			{
				ShownGlassesNum  1  ShownGlassesCircles 1 sub % Starts 1 earlier than before
				{
					/i exch def  ShownGlassesCirclesData i get begin SheetNum WithinPage WithinTitles end WithinTitles eq exch WithinPage eq and exch SheetNum eq and
					{
						ShownGlassesCirclesData i get begin
						mark
							/Action /GoTo /Dest GlassesCircleDestName
							/Color [0 0 0]  /F 0  /Count 0
							/Title mark Names NameNum get PDFDocEncodingify TrimSpaces dup length 0 le {pop UnnamedAttendee PDFDocEncodingify} if ( \(p) PageNum 1 add (, ) << /ThisPaperType PaperType >> begin PaperTypeStringShortPDF end (\)) ConcatenateToMark TruncateTo255
						/OUT pdfmark
						end
					} if
				} for  % i
			} if  % ShownGlassesCount 1 gt
			end end
		} bind forall  % /ShownGlassesNum
		mark  /Title (\(Mac Preview: zoom-in fails\))         /Color [0.4 0.4 0.4]  /Action << /Subtype /URI /URI (http://discussions.apple.com/thread/7234631)               >>  /Count 0  /F 0  /OUT  pdfmark
		mark  /Title (\(Chrome PDF plug-in: zoom-in fails\))  /Color [0.4 0.4 0.4]  /Action << /Subtype /URI /URI (http://code.google.com/p/chromium/issues/detail?id=535978) >>  /Count 0  /F 0  /OUT  pdfmark
	} if  % FirstGlasses length 0 gt  NumSheets 0 gt  and
	end

	ExternalLinks length 3 ge
	{
		mark  /Action << >>  /Color [0 0 0]  /Title ()  /F 0  /OUT  pdfmark
		mark  /Action << >>  /Color [0 0 0]  /Title ExternalLinks length 3 gt {(\247 External Links)} {(\247 External Link)} ifelse  /F 2  /OUT  pdfmark
		/NextF 0 def

		0  3  ExternalLinks length 3 sub
		{
			/i exch def
			/IndentationCount  0   ExternalLinks i GetEU not {i 3 add 3 ExternalLinks length 3 sub {ExternalLinks exch GetEU {1 add} {exit} ifelse} for} if  def
			mark  ExternalLinks i 2 add GetEU length 0 gt
				{/Color [0 0 0  ]  /Action << /Subtype /URI /URI ExternalLinks i 2 add GetEU >>}
				{/Color [0 0 0.6]  /Action << >>}
			ifelse  /Title ExternalLinks i 1 add get PDFDocEncodingify  /Count IndentationCount neg  /F NextF 0 eq {ExternalLinks i 2 add GetEU length 0 gt {0} {1} ifelse} {NextF} ifelse  /OUT  pdfmark
			/NextF  ExternalLinks i 1 add GetEU length 0 gt {0} {2} ifelse  store
		} for  % i
	} if  % ExternalLinks length 3 ge
	mark  /Action << >>  /Color [0 0 0]  /Title ()  /F 0  /OUT  pdfmark
	mark  /Action << /Subtype /URI /URI (http://www.jdawiseman.com/placemat.html) >>  /Color [0 0 0]  /Title (\247 Placemat software)  /F 2  /OUT  pdfmark
	mark  /Action << >>  /Color [0.4 0.4 0.4]  /Title mark (\(ver: ) SoftwareVersionDateTimeAdobeFormat (\)) ConcatenateToMark  /F 1  /OUT  pdfmark
	0  3  ExternalLinksExtras length 3 sub
	{
		/i exch def
		/IndentationCount  0   ExternalLinksExtras i GetEU not {i 3 add 3 ExternalLinksExtras length 3 sub {ExternalLinksExtras exch GetEU {1 add} {exit} ifelse} for} if  def
		mark  /Action  ExternalLinksExtras i 2 add GetEU length 0 gt
			{<< /Subtype /URI /URI ExternalLinksExtras i 2 add GetEU >> /Color [0 0 0]}
			{<< >> /Color [0 0 1]}
		ifelse  /Title ExternalLinksExtras i 1 add get PDFDocEncodingify  /Count IndentationCount neg  /F 0  /OUT  pdfmark
	} for  % i

	DeBugLevel 50 le {(-Outline construction, and other pdfmark's) OutputToLog} if

	AnyFillTextingAtAll {( Main: finish: usertime = ) usertime ToString Concatenate OutputToLog} if

	PagesToBeInserted {PagesToBeInsertedWarning OutputToLog} if

	EpilogueCode

	() OutputToLog
	mark  (Only log output remaining:\n)
	/usertimeFinish usertime def
	(usertime = ) usertimeFinish
	/usertimeStart dup where {exch get usertimeFinish exch sub 1000 div (, so about ) exch ( seconds )
	1 {
		1 index dup 60 ge {60 div (~= ) exch ( minutes )} {pop exit} ifelse
		1 index dup 60 ge {60 div (~= ) exch ( hours )  } {pop exit} ifelse
		1 index dup 24 ge {24 div (~= ) exch ( days )   } {pop exit} ifelse
	} repeat   counttomark 1 sub -1 0 {/i exch def i index type /realtype eq {i 1 add -1 roll 1 FormatDecimalPlaces i 1 add 1 roll} if} for
	(to execute code, excluding parameter assignments and log page(s).)} {pop} ifelse  ConcatenateToMark  OutputToLog

	/EndError //false def
	count              dup  0 eq {(and is :-\))} {/EndError //true store (but isn't -- Error!)} ifelse  (     = count:              should = 0                     \n)   dup 0  5 -1 roll  ToString  putinterval dup 39 4 -1 roll putinterval  mark
	vmstatus pop pop   dup  dup 1 eq exch 2 eq or {(and does :-\))} {/EndError //true store (but doesn't -- Error!)} ifelse (     = vmstatus pop pop:   should = 1|2                       \n) dup 0  5 -1 roll ToString putinterval dup 41 4 -1 roll putinterval
	CountClipStack     dup  0 eq {(and is :-\))} {/EndError //true store (but isn't -- Error!)} ifelse  (     = CountClipStack:     should = 0                     \n)   dup 0  5 -1 roll  ToString  putinterval dup 39 4 -1 roll putinterval
	CountGraphicsStack dup  0 eq {(and is :-\))} {/EndError //true store (but isn't -- Error!)} ifelse  (     = CountGraphicsStack: should = 0                     \n)   dup 0  5 -1 roll  ToString  putinterval dup 39 4 -1 roll putinterval
	countdictstack     dup  3 eq {(and is :-\))} {/EndError //true store (but isn't -- Error!)} ifelse  (     = countdictstack:     should = 3                     \n)   dup 0  5 -1 roll  ToString  putinterval dup 39 4 -1 roll putinterval
	counttomark 2 add -1 roll ConcatenateToMark OutputToLog
	EndError {(!!! Error !!!) OutputToLog} if
	count 0 ne {(+pstack) = pstack (-pstack) =} if
} stopped
{
	/ErrorFlag where {/ErrorFlag get} {//false} ifelse  % Error in parameter(s)
	{
		(Error: execution stopped, probably because of a parameter error or inconsistency.) OutputToLog
	}{
		(An error has occured. Items of $error:) OutputToLog
		($error /errorname = ) $error /errorname get 0 //true ThingToDebugText Concatenate OutputToLog
		($error /command = ) $error /command get 0 //true ThingToDebugText Concatenate OutputToLog
		mark ($error /ostack = [) (\n) $error /ostack get {(\t) exch 0 //true ThingToDebugText (\n) dup} forall pop (]) ConcatenateToMark OutputToLog
		($error countdictstack = ) countdictstack 5 string cvs Concatenate OutputToLog
		mark ($error top instance of TypeOfPagesBeingRendered = ) TypeOfPagesBeingRendered ConcatenateToMark OutputToLog
		mark ($error userdict->TypeOfPagesBeingRendered = ) userdict /TypeOfPagesBeingRendered get ConcatenateToMark OutputToLog

		$error /newerror //false put
		$error /errorinfo //null put
	} ifelse  % ErrorFlag
} if  % stopped

OutputLogToAnnotation  ShownPages 0 gt  and
{
	mark
		/Subtype /Text
		/SrcPg   ShownPages
		/Rect    [ ShownPagesData ShownPages 1 sub get begin  PageWidth MgnR sub  MgnB  end  2 copy ]
		/Title   (Distillation log)
		/Subj    (The log output from the progam that converted the PostScript to PDF. Mostly human-readable.)
		/Contents  mark
			(Placemat software:\nhttp://www.jdawiseman.com/placemat.html\nhttp://www.jdawiseman.com/papers/placemat/placemat.ps)
			OutputLog {dup type /stringtype eq {(\n\n) exch} {pop exit} ifelse} forall
		ConcatenateToMark
		/Name    /Comment
		/NM      (DistillationLog)
		/M       ParametersVersionDateTimeAdobeFormat   /CreationDate 1 index
		/F       64 128 add  % ReadOnly + Locked. PDFReference16.pdf page 574
		/C       [0.4]
		/Q       0  % = left-justfied, but a parameter of a FreeText annotation.
		/DS      (font-family: monospace;)  % Default Style, but a parameter of a FreeText annotation.
		/Open false
	/ANN pdfmark
} if  % OutputLogToAnnotation ...
/TypeOfPagesBeingRendered /DistillerLog def
OutputLogToPage {false PageSuppressed not} {false} ifelse
{{
	35 dict begin
	/TypeOfPagesBeingRendered /DistillerLog def  % def rather than store in case top-most instance of TypeOfPagesBeingRendered is in a readonly dictionary
	/OuterMarginL 0 def  /OuterMarginR 0 def  /OuterMarginT 0 def  /OuterMarginB 0 def
	% Fixed page size based on type of first page. Also will use 27 margins all round. Page not really for high-quality printing.
	/SPS {//false  //false  //false  //true  /TastingNotesPaperType dup where {exch get dup /USL ne {pop /A4} if} {pop /A4} ifelse  /Portrait  SetPaperSize} bind def
	SPS    mark  /Dest /DistillationLog  /View [/FitH PageHeight]  /DEST  pdfmark    mark  /Label (Distillation log)  /PAGELABEL  pdfmark
	/FontSize 6.5 def   /Courier FontSize selectfont  /WidthW (W) stringwidth pop def
	/FontSize  PageWidth 54 sub //PrinterEpsilon sub  dup WidthW div ceiling  132  2 copy lt {exch} if pop  WidthW mul div FontSize mul def
	/YlineStep FontSize 1.125 mul def
	/YparaExtra FontSize 0.75 mul def
	/YblankLine 0 def
	/Y PageHeight 27 sub YlineStep sub def
	/ForcedLineBreak //false def

	/Courier-Bold FontSize selectfont   27 Y moveto  0 0 0.9333333 setrgbcolor  % #0000EE  http://www.w3.org/TR/html5/rendering.html  http://stackoverflow.com/questions/4774022/
	0  [ (www.jdawiseman.com/papers/placemat/placemat.html)  (www.jdawiseman.com/placemat.html)  (www.jdawiseman.com/papers/placemat/placemat.ps) ] dup
	PageWidth 54 sub exch {stringwidth pop sub} forall 2 div dup 3 -1 roll {show 0 rmoveto} forall  /AnythingOnPage //true def   /Y Y YlineStep sub YparaExtra sub def

	/Courier FontSize selectfont  /WidthW (W) stringwidth pop def  0 setgray
	OutputLog 0 OutputtedToLog getinterval
	{
		//false PageSuppressed {pop exit} if
		dup length 16384 gt {0 16384 getinterval dup 16381 (...) putinterval  (Warning: OutputLogToPage, string of length exceeding 16384 in OutputLog. Paragraph trimmed.) =} if   /TextToPaint exch def
		TextToPaint type /stringtype ne {/TextToPaint TextToPaint ToString def  (Warning: OutputLogToPage, non-string in OutputLog.) =} if
		/CharsPainted 0 def  % what has been painted from within TextToPaint

		{
			/NumCharsPerLine  PageWidth 54 sub  WidthW  div cvi  dup 1 lt {pop 1} if  def  % within loop allows re-definition for Copyright special case
			TextToPaint length 0 eq {/Y Y YblankLine sub def exit} if

			% Newlines
			{
				CharsPainted TextToPaint length ge {exit} if
				TextToPaint CharsPainted get //AsciiNewline eq {/CharsPainted CharsPainted 1 add def  /Y Y YlineStep sub def} {exit} ifelse
			} loop

			Y 27 lt
			{
				//true PageSuppressed not {showpage /ShownPages dup load 1 add store} {erasepage initgraphics} ifelse
				/AnythingOnPage //false def  SPS  /Y PageHeight 27 sub YlineStep sub def
				//false PageSuppressed {exit} if
			} if  % Y 27 lt
			27 Y moveto

			CharsPainted 0 eq  TextToPaint length 10 ge  and {TextToPaint 0 10 getinterval (Copyright ) eq} {false} ifelse
			{
				/copyright glyphshow ( ) show
				/NumCharsPerLine  NumCharsPerLine 2 sub  dup 0 lt {pop 0} if  def
			} if  % Copyright at start of line

			% Tabs
			{
				CharsPainted TextToPaint length ge {exit} if    TextToPaint CharsPainted get //AsciiTab ne {exit} if
				/CharsPainted CharsPainted 1 add def   WidthW 4 mul 0 rmoveto   /NumCharsPerLine  NumCharsPerLine 3 sub  dup 0 lt {pop 0} if  def
			} loop

			% If not at start of string or forced line break, go to next non-space
			CharsPainted 0 gt  ForcedLineBreak not  and
			{
				{
					CharsPainted  TextToPaint length  ge {exit} if
					TextToPaint CharsPainted get //AsciiSpace eq {/CharsPainted CharsPainted 1 add def} {exit} ifelse
				} loop
			} if  % CharsPainted 0 gt  ForcedLineBreak not  and
			CharsPainted  TextToPaint length  ge {/Y Y YparaExtra sub def  exit} if

			% So CharsPainted points to a non-space. Where does this line break?
			/EndThisLine TextToPaint length 1 sub  def
			CharsPainted  1  EndThisLine  {dup TextToPaint exch get //AsciiNewline eq {/EndThisLine exch def  /ForcedLineBreak //true def  exit} {pop  /ForcedLineBreak //false def} ifelse} for  % to next newline
			EndThisLine CharsPainted sub  NumCharsPerLine  gt
			{
				CharsPainted NumCharsPerLine add 1 sub   -1   CharsPainted NumCharsPerLine 2 div ceiling cvi add
				{
					/EndThisLine exch def
					TextToPaint EndThisLine get //AsciiSpace eq {exit} if
				} for
			} if

			TextToPaint  CharsPainted  EndThisLine CharsPainted sub  TextToPaint EndThisLine get //AsciiNewline ne {1 add} if  getinterval  /TextToShow exch def
			/j 0 def
			{
				/i j def   i TextToShow length ge {exit} if
				i  1  TextToShow length 1 sub {/j exch def  TextToShow j get //AsciiTab eq {/j j 1 sub def exit} if} for  /j j 1 add def
				j i gt
				{
					/ThisLineToShow TextToShow i j i sub getinterval def
					{TextToShow dup length dup 0 eq {pop pop exit} if 1 sub 2 copy get dup AsciiTab eq exch AsciiSpace eq or {0 exch getinterval /TextToShow exch def} {pop pop exit} ifelse} loop  % Trim tabs and spaces from end
					1 {
						//false
						0 1 ThisLineToShow length 5 sub {ThisLineToShow exch 5 getinterval (Error)   eq {pop //true} if dup {exit} if} for
						0 1 ThisLineToShow length 3 sub {ThisLineToShow exch 3 getinterval (!!!)     eq {pop //true} if dup {exit} if} for
						0 1 ThisLineToShow length 7 sub {ThisLineToShow exch 7 getinterval (Warning) eq {pop //true} if dup {exit} if} for
						{ThisLineToShow 0.8 0 0 setrgbcolor show exit} if
						/k 0 def {k ThisLineToShow length 8 sub gt {/k ThisLineToShow length def exit} if  ThisLineToShow k 4 getinterval (http) eq {exit} if  /k k 1 add def} loop
						k ThisLineToShow length ge {ThisLineToShow show exit} if
						k 0 gt {ThisLineToShow 0 k getinterval show} if
						/l k def {l ThisLineToShow length ge {exit} if  ThisLineToShow l get //AsciiSpace eq {exit} if  /l l 1 add def} loop
						ThisLineToShow k l k sub getinterval  0 0 0.9333333 setrgbcolor show 0 setgray  % #0000EE  http://www.w3.org/TR/html5/rendering.html  http://stackoverflow.com/questions/4774022/
						l ThisLineToShow length lt {ThisLineToShow l dup 2 index length sub neg getinterval show} if
					} repeat  % 1
					/AnythingOnPage //true def
				} if  % j i gt
				j  1  TextToShow length 1 sub
				{
					/j exch def
					TextToShow j get //AsciiTab eq
					{
						gsave /Symbol dup 1 selectfont WidthW 1.6 mul /arrowdblright StringWidthRecursive div selectfont
						WidthW 0.2 mul 0 rmoveto  0 0.6 0 setrgbcolor /arrowdblright glyphshow grestore  WidthW 2 mul 0 rmoveto
						/NumCharsPerLine  NumCharsPerLine 1 sub  dup 0 lt {pop 0} if  def
					} {exit} ifelse  % ... AsciiTab
				} for  % j
			} loop  % i and j

			/Y Y YlineStep sub def  /CharsPainted EndThisLine 1 add def
			CharsPainted  TextToPaint length  ge {/Y Y YparaExtra sub def  exit} if
		} loop  % CharsPainted
		0 setgray
	} bind forall  % OutputLog
	//true PageSuppressed not {showpage /ShownPages dup load 1 add store} {erasepage initgraphics} ifelse
	/AnythingOnPage //false def
	end
} bind exec} if  % OutputLogToPage ... PageSuppressed not ...
OutputLogToLog
{{
	% In case messed by the outputting to log
	countdictstack dup 3 eq {pop} {5 string cvs (     = countdictstack, which should be 3) dup 0 4 -1 roll putinterval =} ifelse
	count 0 ne {(+pstack in OutputLogToLog) = pstack (-pstack in OutputLogToLog) =} if
} bind exec} if  % OutputLogToLog

% Final debugging
{countdictstack 3 gt {8 {() =} repeat currentdict {exch == =} forall end} {exit} ifelse} bind loop
