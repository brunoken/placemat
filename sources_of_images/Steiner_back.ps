%!PS

/DateTimeAdobeFormat (D:202012081400) def

/PageWidth  162 def
/PageHeight 252 def
/Margin 7.2 def       % 0.1"
/BleedSpace 8.64 def  % 0.12"

/CardEdgeShow false def  % ##########################################################################################
/CardEdgeLineWidth 0.36 def
/WhiteBehind false def

/ShowBleedBoundary false def  % Wrongly, dynapdf importer shows this, so removed.


/ShortSideUpperBound 6 def

/HalfHeight PageHeight 2 div Margin sub def
/HalfWidth  PageWidth  2 div Margin sub def


/FiveColours
[
	{1   0.8 0 setrgbcolor}  % Gold
	{0   0   1 setrgbcolor}  % Blue
	{0.8 setgray}            % Silver
	{0.8 0   0 setrgbcolor}  % Red
	{0   setgray}              % Black
] def  % /FiveColours

/PaintCode_Colour
{
	gsave //FiveColours exch get exec fill grestore
	1 setgray 0.63 setlinewidth 1 setlinejoin stroke
} bind def  % /PaintCode_Colour

<< /PageSize [PageWidth BleedSpace 2 mul add PageHeight BleedSpace 2 mul add] >> setpagedevice  BleedSpace BleedSpace translate

mark
	/CreationDate DateTimeAdobeFormat
	/Title (Playing card backs)
	/Author (Julian D. A. Wiseman)
	/Creator (Julian D. A. Wiseman)
	/Subject (Playing card backs)
	/Keywords (Playing cards, backs, fractal, recursive triangle)
/DOCINFO pdfmark

/PageName (Playing card backs) def
mark  /Dest /CardBacks  /View [/Fit]   /DEST  pdfmark
mark  /Action /GoTo  /Dest /CardBacks  /Color [0 0 0]  /F 1  /Title PageName  /OUT pdfmark
mark  /Label PageName  /PAGELABEL  pdfmark

/BleedEdgeAnnotationBoundary
{
	mark
		/Rect [
			BleedSpace  dup  1 index HalfWidth Margin add 2 mul add  1 index HalfHeight Margin add 2 mul add
		]
		/Vertices [
			BleedSpace                              dup
			1 index HalfWidth Margin add 2 mul add  1 index
			1 index                                 1 index HalfHeight Margin add 2 mul add
			5 index                                 1 index
			1 index                                 5 index
		]
		/Subtype /PolyLine
		/BS <<
			/Type /Border  /W 0.36  /S /D
			/D [HalfWidth HalfHeight add Margin 2 mul add 48 div  0.0001 add  dup 2 mul]
		>>
		/F 64 128 add  % ReadOnly + Locked. PDFReference16.pdf page 574
		/Color [ 1 0.8 0.4 ]
	/ANN pdfmark
}
ShowBleedBoundary {bind def} {pop {} def} ifelse  % /BleedEdgeAnnotationBoundary



% X1 Y1 X2 Y2 X3 Y3 PaintNum ShortSideUpperBound ClipL ClipB ClipR ClipT PaintCode PathStepsMultiplier TransformFunction  TriangleRecurse  NumTrianglesPainted
% PaintCode absorbs from the stack an integer, 0 to 4.
% PathStepsMultiplier controls granularity of drawn triangle. If 1, short side has 4 points; long has 8; hypotenuse has 9.
% x y  TransformFunction  x y
/TriangleTransformed
{
	13 dict begin
	/TransformFunction exch def
	/PathStepsMultiplier exch def
	/PaintCode exch def
	/ClipT exch def
	/ClipR exch def
	/ClipB exch def
	/ClipL exch def
	/ShortSideUpperBound exch def

	/NumTrianglesPainted 0 def
	/NumLineSegments 0 def
	/AreaMin 1E38 def
	/AreaMax 0 def
	/AreaSum 0 def
	TriangleRecurse
	(NumTrianglesPainted =       ) dup 22 6 getinterval NumTrianglesPainted exch cvs pop =
	(NumLineSegments =       ) dup 18 6 getinterval NumLineSegments exch cvs pop =
	(Ratio ~=        ) dup 9 7 getinterval NumLineSegments NumTrianglesPainted div exch cvs pop =
	(AreaMin ~=         pt^2) dup 11 7 getinterval AreaMin exch cvs pop =
	(AreaMax ~=         pt^2) dup 11 7 getinterval AreaMax exch cvs pop =
	(AreaAvg ~=         pt^2) dup 11 7 getinterval AreaSum NumTrianglesPainted div exch cvs pop =
	(=> avg short side ~=         pt ~=         mm)
		dup 21 7 getinterval AreaSum NumTrianglesPainted div sqrt exch cvs pop
		dup 35 7 getinterval AreaSum NumTrianglesPainted div sqrt 127 mul 360 div exch cvs pop
		=
	end
} bind def  % /Triangle

% X1 Y1 X2 Y2 X3 Y3 PaintNum Triangle
/TriangleRecurse
{
	15 dict begin

	/PaintNum exch def
	/Y3 exch def  % 1->2 is of relative length 1; 2->3 is hypotenuse of relative length Sqrt[5]; 3->1 is of relative length 2.
	/X3 exch def
	/Y2 exch def
	/X2 exch def
	/Y1 exch def
	/X1 exch def

	/tX1  X1 Y1 TransformFunction  /tY1 exch def  def
	/tX2  X2 Y2 TransformFunction  /tY2 exch def  def
	/tX3  X3 Y3 TransformFunction  /tY3 exch def  def

	tX1 ClipL gt  tX2 ClipL gt  tX3 ClipL gt  or or
	tX1 ClipR lt  tX2 ClipR lt  tX3 ClipR lt  or or  and
	tY1 ClipB gt  tY2 ClipB gt  tY3 ClipB gt  or or
	tY1 ClipT lt  tY2 ClipT lt  tY3 ClipT lt  or or  and and
	{
		X1 X2 sub dup mul  Y1 Y2 sub dup mul  add  ShortSideUpperBound dup mul  le
		{
			% Paint this transformed triangle
			newpath
			/Area 0 def
			tX1 tY1 moveto
			X1 Y1  X2 Y2  TriangleLinePath
			X2 Y2  X3 Y3  TriangleLinePath
			X3 Y3  X1 Y1  TriangleLinePath closepath
			/NumTrianglesPainted dup load 1 add store
			/Area Area abs store
			/AreaSum AreaSum Area add store
			Area AreaMin lt {/AreaMin Area store} if
			Area AreaMax gt {/AreaMax Area store} if
			PaintNum PaintCode
		}{
			% Recurse
			X3 0.2 mul X2 0.8 mul add
			Y3 0.2 mul Y2 0.8 mul add
			X2 Y2
			X1 Y1
			PaintNum
			TriangleRecurse

			X3 0.1 mul X2 0.4 mul X1 0.5 mul add add
			Y3 0.1 mul Y2 0.4 mul Y1 0.5 mul add add
			X1 Y1
			X1 X3 add 2 div
			Y1 Y3 add 2 div
			PaintNum 1 add 5 mod
			TriangleRecurse

			X3 0.1 mul X2 0.4 mul X1 0.5 mul add add
			Y3 0.1 mul Y2 0.4 mul Y1 0.5 mul add add
			X3 0.2 mul X2 0.8 mul add
			Y3 0.2 mul Y2 0.8 mul add
			X1 X3 add 2 div
			Y1 Y3 add 2 div
			PaintNum 2 add 5 mod
			TriangleRecurse

			X3 0.6 mul X2 0.4 mul add
			Y3 0.6 mul Y2 0.4 mul add
			X1 X3 add 2 div
			Y1 Y3 add 2 div
			X3 0.2 mul X2 0.8 mul add
			Y3 0.2 mul Y2 0.8 mul add
			PaintNum 3 add 5 mod
			TriangleRecurse

			X3 0.6 mul X2 0.4 mul add
			Y3 0.6 mul Y2 0.4 mul add
			X1 X3 add 2 div
			Y1 Y3 add 2 div
			X3 Y3
			PaintNum 4 add 5 mod
			TriangleRecurse
		} ifelse  % Paint, or recurse
	} if  % In range
	end
} bind def  % TriangleRecurse

% X Y X Y  TriangleLinePath  -
/TriangleLinePath
{
	10 dict begin
	/Yc exch def
	/Xc exch def
	/Ya exch def
	/Xa exch def
	/tXa  Xa Ya TransformFunction  /tYa exch def  def
	/tXc  Xc Yc TransformFunction  /tYc exch def  def
	tXa tXc sub dup mul  tYa tYc sub dup mul  add  0.0081 le  % 0.09 dup mul, being 1 pixel at 800 dpi
	{
		tXc tYc lineto  /NumLineSegments NumLineSegments 1 add store
	}{
		/tXb  Xa Xc add 2 div Ya Yc add 2 div TransformFunction  /tYb exch def  def
		tXb tXa sub  tYb tYa sub  tXc tXb sub  tYc tYb sub
		4 copy  3 -1 roll mul 3 1 roll mul add  5 1 roll
		dup mul exch dup mul add  3 1 roll dup mul exch dup mul add  mul sqrt  div
		1 {
			dup
			0.9999 ge
			{
				pop
				tX1 tY1 tXa tYa tXc tYc TriangleArea Area add /Area exch store
				tXc tYc lineto
				/NumLineSegments NumLineSegments 1 add store
				exit
			} if  % 0.81 degrees
			0.9996 ge
			{
				tXb tYb lineto
				tX1 tY1 tXa tYa tXb tYb TriangleArea Area add /Area exch store
				tXc tYc lineto
				tX1 tY1 tXb tYb tXc tYc TriangleArea Area add /Area exch store
				/NumLineSegments NumLineSegments 2 add store
				exit
			} if  % 1.62 degrees
			% Otherwise recurse
			Xa Xc add 2 div  Ya Yc add 2 div   2 copy   Xa Ya 4 2 roll TriangleLinePath   Xc Yc  TriangleLinePath
		} repeat  % 1
	} ifelse  % 'dist' 0.27 le
	end
} bind def  % /TriangleLinePath

% X1 Y1 X2 Y2 X3 Y3  TriangleArea  Area
/TriangleArea
{
	6 dict begin
	/Y3 exch def  /X3 exch def
	/Y2 exch def  /X2 exch def
	/Y1 exch def  /X1 exch def
	X1 Y2 Y3 sub mul
	X2 Y3 Y1 sub mul add
	X3 Y1 Y2 sub mul add   2 div
	end
} bind def  % /TriangleArea


/MatrixDefault matrix currentmatrix def
PageWidth 2 div  PageHeight 2 div  translate
/MatrixCentred matrix currentmatrix def

WhiteBehind CardEdgeShow or
{
	matrix currentmatrix
	MatrixCentred setmatrix
	% White background.
	HalfWidth Margin add  HalfHeight moveto
	HalfWidth      HalfHeight      Margin    0   90  arc
	HalfWidth neg  HalfHeight      Margin   90  180  arc
	HalfWidth neg  HalfHeight neg  Margin  180  270  arc
	HalfWidth      HalfHeight neg  Margin  270  360  arc  closepath
	WhiteBehind {CardEdgeShow {gsave 1 setgray fill grestore CardEdgeLineWidth setlinewidth 0.5 setgray stroke} {1 setgray fill} ifelse} {CardEdgeLineWidth setlinewidth 0.5 setgray stroke} ifelse
	setmatrix
} if  % WhiteBehind CardEdgeShow or

MatrixCentred setmatrix

/ClipL  HalfWidth  neg def
/ClipB  HalfHeight neg def
/ClipR  ClipL neg def
/ClipT  ClipB neg def

clipsave
ClipL 0.48 sub  ClipB 0.48 sub  ClipR ClipL sub 0.96 add  ClipT ClipB sub 0.96 add  rectclip


HalfWidth -2 mul  HalfHeight -2 mul
1 index 1250 add   1 index
3 index           1 index 1250 2 mul add
0  % PaintNum
ShortSideUpperBound
ClipL ClipB ClipR ClipT
/PaintCode_Colour load
2  % PathStepsMultiplier
{  % +TransformFunction
	2 dict begin
	/y exch def
	/x exch def
	x dup mul y dup mul add 25 add  ln  16 mul  % As if located 5pt from plane of paper. And no need to sqrt before a scaled ln.
	dup sin exch cos  2 copy  x mul exch y mul sub 3 1 roll  y mul exch x mul add
	HalfHeight 0.666666 mul sub
	end
} bind % -TransformFunction
TriangleTransformed

cliprestore

1 setgray  0.96 setlinewidth  1 setlinejoin
ClipL 0.48 sub  ClipB 0.48 sub  ClipR ClipL sub 0.96 add  ClipT ClipB sub 0.96 add  rectstroke

BleedEdgeAnnotationBoundary
showpage


/ExternalLinks
[
	<< /Title (On jdawiseman.com)                  /URI (http://www.jdawiseman.com/papers/games/steiner_hexads/steiner_hexads.html) >>
	<< /Title (MakePlayingCards.com: marketplace)  /URI (https://www.makeplayingcards.com/sell/marketplace/shop-custom-game-cards.html) >>
	<< /Title (Math.StackExchange re suiting)      /URI (http://math.stackexchange.com/questions/3818982/steiner5-6-12-system-symmetrical-split-into-four) >>
	% << /Title (Math.StackExchange re marketing)    /URI (https://math.stackexchange.com/questions/3870810/steiner5-6-12-playing-cards-how-inform-group-theorists) >>
] def

mark  /Title ()                     /Action << >>  /Count 0                        /OUT pdfmark
mark  /Title (\247 External Links)  /Action << >>  /Count ExternalLinks length  /Color [0 0 0]  /F 0  /OUT pdfmark

ExternalLinks
{
	begin
	mark  /Title Title   /Action << /Subtype /URI  /URI URI >>   /Count 0   /Color [0 0 0]   /F 0   /OUT pdfmark
	end
} forall  % ExternalLinks


() =
count 0 gt {(+pstack) = pstack (-pstack) =} {(count = 0) =} ifelse
